// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/sapcc/ontap-restapi/example/ontap/models"
	"github.com/spf13/cobra"
)

// Schema cli for AntiRansomwareVolumeWorkload

// register flags to command
func registerModelAntiRansomwareVolumeWorkloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAntiRansomwareVolumeWorkloadPropAntiRansomwareVolumeWorkloadInlineFileExtensionsObserved(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadPropAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadPropFileExtensionTypesCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadPropHistoricalStatistics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadPropSurgeStatistics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadPropSurgeUsage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadPropTypicalUsage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareVolumeWorkloadPropAntiRansomwareVolumeWorkloadInlineFileExtensionsObserved(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: anti_ransomware_volume_workload_inline_file_extensions_observed []*string array type is not supported by go-swagger cli yet

	return nil
}

func registerAntiRansomwareVolumeWorkloadPropAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: anti_ransomware_volume_workload_inline_newly_observed_file_extensions []*AntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItem array type is not supported by go-swagger cli yet

	return nil
}

func registerAntiRansomwareVolumeWorkloadPropFileExtensionTypesCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileExtensionTypesCountDescription := `Count of types of file extensions observed in the volume.`

	var flagFileExtensionTypesCountName string
	if cmdPrefix == "" {
		flagFileExtensionTypesCountName = "file_extension_types_count"
	} else {
		flagFileExtensionTypesCountName = fmt.Sprintf("%v.file_extension_types_count", cmdPrefix)
	}

	var flagFileExtensionTypesCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileExtensionTypesCountName, flagFileExtensionTypesCountDefault, flagFileExtensionTypesCountDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadPropHistoricalStatistics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagHistoricalStatisticsName string
	if cmdPrefix == "" {
		flagHistoricalStatisticsName = "historical_statistics"
	} else {
		flagHistoricalStatisticsName = fmt.Sprintf("%v.historical_statistics", cmdPrefix)
	}

	if err := registerModelAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsFlags(depth+1, flagHistoricalStatisticsName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareVolumeWorkloadPropSurgeStatistics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSurgeStatisticsName string
	if cmdPrefix == "" {
		flagSurgeStatisticsName = "surge_statistics"
	} else {
		flagSurgeStatisticsName = fmt.Sprintf("%v.surge_statistics", cmdPrefix)
	}

	if err := registerModelAntiRansomwareVolumeWorkloadInlineSurgeStatisticsFlags(depth+1, flagSurgeStatisticsName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareVolumeWorkloadPropSurgeUsage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSurgeUsageName string
	if cmdPrefix == "" {
		flagSurgeUsageName = "surge_usage"
	} else {
		flagSurgeUsageName = fmt.Sprintf("%v.surge_usage", cmdPrefix)
	}

	if err := registerModelAntiRansomwareVolumeWorkloadInlineSurgeUsageFlags(depth+1, flagSurgeUsageName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareVolumeWorkloadPropTypicalUsage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagTypicalUsageName string
	if cmdPrefix == "" {
		flagTypicalUsageName = "typical_usage"
	} else {
		flagTypicalUsageName = fmt.Sprintf("%v.typical_usage", cmdPrefix)
	}

	if err := registerModelAntiRansomwareVolumeWorkloadInlineTypicalUsageFlags(depth+1, flagTypicalUsageName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAntiRansomwareVolumeWorkloadFlags(depth int, m *models.AntiRansomwareVolumeWorkload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AntiRansomwareVolumeWorkloadInlineFileExtensionsObservedAdded := retrieveAntiRansomwareVolumeWorkloadPropAntiRansomwareVolumeWorkloadInlineFileExtensionsObservedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AntiRansomwareVolumeWorkloadInlineFileExtensionsObservedAdded

	err, AntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsAdded := retrieveAntiRansomwareVolumeWorkloadPropAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsAdded

	err, FileExtensionTypesCountAdded := retrieveAntiRansomwareVolumeWorkloadPropFileExtensionTypesCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileExtensionTypesCountAdded

	err, HistoricalStatisticsAdded := retrieveAntiRansomwareVolumeWorkloadPropHistoricalStatisticsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HistoricalStatisticsAdded

	err, SurgeStatisticsAdded := retrieveAntiRansomwareVolumeWorkloadPropSurgeStatisticsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SurgeStatisticsAdded

	err, SurgeUsageAdded := retrieveAntiRansomwareVolumeWorkloadPropSurgeUsageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SurgeUsageAdded

	err, TypicalUsageAdded := retrieveAntiRansomwareVolumeWorkloadPropTypicalUsageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypicalUsageAdded

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadPropAntiRansomwareVolumeWorkloadInlineFileExtensionsObservedFlags(depth int, m *models.AntiRansomwareVolumeWorkload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAntiRansomwareVolumeWorkloadInlineFileExtensionsObservedName := fmt.Sprintf("%v.anti_ransomware_volume_workload_inline_file_extensions_observed", cmdPrefix)
	if cmd.Flags().Changed(flagAntiRansomwareVolumeWorkloadInlineFileExtensionsObservedName) {
		// warning: anti_ransomware_volume_workload_inline_file_extensions_observed array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadPropAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsFlags(depth int, m *models.AntiRansomwareVolumeWorkload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsName := fmt.Sprintf("%v.anti_ransomware_volume_workload_inline_newly_observed_file_extensions", cmdPrefix)
	if cmd.Flags().Changed(flagAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsName) {
		// warning: anti_ransomware_volume_workload_inline_newly_observed_file_extensions array type []*AntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItem is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadPropFileExtensionTypesCountFlags(depth int, m *models.AntiRansomwareVolumeWorkload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileExtensionTypesCountName := fmt.Sprintf("%v.file_extension_types_count", cmdPrefix)
	if cmd.Flags().Changed(flagFileExtensionTypesCountName) {

		var flagFileExtensionTypesCountName string
		if cmdPrefix == "" {
			flagFileExtensionTypesCountName = "file_extension_types_count"
		} else {
			flagFileExtensionTypesCountName = fmt.Sprintf("%v.file_extension_types_count", cmdPrefix)
		}

		flagFileExtensionTypesCountValue, err := cmd.Flags().GetInt64(flagFileExtensionTypesCountName)
		if err != nil {
			return err, false
		}
		m.FileExtensionTypesCount = &flagFileExtensionTypesCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadPropHistoricalStatisticsFlags(depth int, m *models.AntiRansomwareVolumeWorkload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHistoricalStatisticsName := fmt.Sprintf("%v.historical_statistics", cmdPrefix)
	if cmd.Flags().Changed(flagHistoricalStatisticsName) {
		// info: complex object historical_statistics AntiRansomwareVolumeWorkloadInlineHistoricalStatistics is retrieved outside this Changed() block
	}
	flagHistoricalStatisticsValue := m.HistoricalStatistics
	if swag.IsZero(flagHistoricalStatisticsValue) {
		flagHistoricalStatisticsValue = &models.AntiRansomwareVolumeWorkloadInlineHistoricalStatistics{}
	}

	err, HistoricalStatisticsAdded := retrieveModelAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsFlags(depth+1, flagHistoricalStatisticsValue, flagHistoricalStatisticsName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HistoricalStatisticsAdded
	if HistoricalStatisticsAdded {
		m.HistoricalStatistics = flagHistoricalStatisticsValue
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadPropSurgeStatisticsFlags(depth int, m *models.AntiRansomwareVolumeWorkload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSurgeStatisticsName := fmt.Sprintf("%v.surge_statistics", cmdPrefix)
	if cmd.Flags().Changed(flagSurgeStatisticsName) {
		// info: complex object surge_statistics AntiRansomwareVolumeWorkloadInlineSurgeStatistics is retrieved outside this Changed() block
	}
	flagSurgeStatisticsValue := m.SurgeStatistics
	if swag.IsZero(flagSurgeStatisticsValue) {
		flagSurgeStatisticsValue = &models.AntiRansomwareVolumeWorkloadInlineSurgeStatistics{}
	}

	err, SurgeStatisticsAdded := retrieveModelAntiRansomwareVolumeWorkloadInlineSurgeStatisticsFlags(depth+1, flagSurgeStatisticsValue, flagSurgeStatisticsName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SurgeStatisticsAdded
	if SurgeStatisticsAdded {
		m.SurgeStatistics = flagSurgeStatisticsValue
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadPropSurgeUsageFlags(depth int, m *models.AntiRansomwareVolumeWorkload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSurgeUsageName := fmt.Sprintf("%v.surge_usage", cmdPrefix)
	if cmd.Flags().Changed(flagSurgeUsageName) {
		// info: complex object surge_usage AntiRansomwareVolumeWorkloadInlineSurgeUsage is retrieved outside this Changed() block
	}
	flagSurgeUsageValue := m.SurgeUsage
	if swag.IsZero(flagSurgeUsageValue) {
		flagSurgeUsageValue = &models.AntiRansomwareVolumeWorkloadInlineSurgeUsage{}
	}

	err, SurgeUsageAdded := retrieveModelAntiRansomwareVolumeWorkloadInlineSurgeUsageFlags(depth+1, flagSurgeUsageValue, flagSurgeUsageName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SurgeUsageAdded
	if SurgeUsageAdded {
		m.SurgeUsage = flagSurgeUsageValue
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadPropTypicalUsageFlags(depth int, m *models.AntiRansomwareVolumeWorkload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypicalUsageName := fmt.Sprintf("%v.typical_usage", cmdPrefix)
	if cmd.Flags().Changed(flagTypicalUsageName) {
		// info: complex object typical_usage AntiRansomwareVolumeWorkloadInlineTypicalUsage is retrieved outside this Changed() block
	}
	flagTypicalUsageValue := m.TypicalUsage
	if swag.IsZero(flagTypicalUsageValue) {
		flagTypicalUsageValue = &models.AntiRansomwareVolumeWorkloadInlineTypicalUsage{}
	}

	err, TypicalUsageAdded := retrieveModelAntiRansomwareVolumeWorkloadInlineTypicalUsageFlags(depth+1, flagTypicalUsageValue, flagTypicalUsageName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypicalUsageAdded
	if TypicalUsageAdded {
		m.TypicalUsage = flagTypicalUsageValue
	}

	return nil, retAdded
}

// Extra schema cli for AntiRansomwareVolumeWorkloadInlineHistoricalStatistics

// register flags to command
func registerModelAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropFileCreatePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropFileDeletePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropFileRenamePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropHighEntropyDataWritePeakPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropHighEntropyDataWritePeakRateKbPerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropFileCreatePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileCreatePeakRatePerMinuteDescription := `Typical peak rate of file creates per minute in the workload of the volume.`

	var flagFileCreatePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileCreatePeakRatePerMinuteName = "file_create_peak_rate_per_minute"
	} else {
		flagFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileCreatePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileCreatePeakRatePerMinuteName, flagFileCreatePeakRatePerMinuteDefault, flagFileCreatePeakRatePerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropFileDeletePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileDeletePeakRatePerMinuteDescription := `Typical peak rate of file deletes per minute in the workload of the volume.`

	var flagFileDeletePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileDeletePeakRatePerMinuteName = "file_delete_peak_rate_per_minute"
	} else {
		flagFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileDeletePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileDeletePeakRatePerMinuteName, flagFileDeletePeakRatePerMinuteDefault, flagFileDeletePeakRatePerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropFileRenamePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileRenamePeakRatePerMinuteDescription := `Typical peak rate of file renames per minute in the workload of the volume.`

	var flagFileRenamePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileRenamePeakRatePerMinuteName = "file_rename_peak_rate_per_minute"
	} else {
		flagFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileRenamePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileRenamePeakRatePerMinuteName, flagFileRenamePeakRatePerMinuteDefault, flagFileRenamePeakRatePerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropHighEntropyDataWritePeakPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHighEntropyDataWritePeakPercentDescription := `Typical peak percentage of high entropy data writes in the volume.`

	var flagHighEntropyDataWritePeakPercentName string
	if cmdPrefix == "" {
		flagHighEntropyDataWritePeakPercentName = "high_entropy_data_write_peak_percent"
	} else {
		flagHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
	}

	var flagHighEntropyDataWritePeakPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagHighEntropyDataWritePeakPercentName, flagHighEntropyDataWritePeakPercentDefault, flagHighEntropyDataWritePeakPercentDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropHighEntropyDataWritePeakRateKbPerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHighEntropyDataWritePeakRateKbPerMinuteDescription := `Typical peak high entropy data write rate in the volume, in KBs per minute.`

	var flagHighEntropyDataWritePeakRateKbPerMinuteName string
	if cmdPrefix == "" {
		flagHighEntropyDataWritePeakRateKbPerMinuteName = "high_entropy_data_write_peak_rate_kb_per_minute"
	} else {
		flagHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	}

	var flagHighEntropyDataWritePeakRateKbPerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagHighEntropyDataWritePeakRateKbPerMinuteName, flagHighEntropyDataWritePeakRateKbPerMinuteDefault, flagHighEntropyDataWritePeakRateKbPerMinuteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineHistoricalStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, FileCreatePeakRatePerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropFileCreatePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileCreatePeakRatePerMinuteAdded

	err, FileDeletePeakRatePerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropFileDeletePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileDeletePeakRatePerMinuteAdded

	err, FileRenamePeakRatePerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropFileRenamePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileRenamePeakRatePerMinuteAdded

	err, HighEntropyDataWritePeakPercentAdded := retrieveAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropHighEntropyDataWritePeakPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HighEntropyDataWritePeakPercentAdded

	err, HighEntropyDataWritePeakRateKbPerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropHighEntropyDataWritePeakRateKbPerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HighEntropyDataWritePeakRateKbPerMinuteAdded

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropFileCreatePeakRatePerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineHistoricalStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileCreatePeakRatePerMinuteName := fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileCreatePeakRatePerMinuteName) {

		var flagFileCreatePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileCreatePeakRatePerMinuteName = "file_create_peak_rate_per_minute"
		} else {
			flagFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
		}

		flagFileCreatePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileCreatePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileCreatePeakRatePerMinute = &flagFileCreatePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropFileDeletePeakRatePerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineHistoricalStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileDeletePeakRatePerMinuteName := fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileDeletePeakRatePerMinuteName) {

		var flagFileDeletePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileDeletePeakRatePerMinuteName = "file_delete_peak_rate_per_minute"
		} else {
			flagFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
		}

		flagFileDeletePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileDeletePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileDeletePeakRatePerMinute = &flagFileDeletePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropFileRenamePeakRatePerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineHistoricalStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileRenamePeakRatePerMinuteName := fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileRenamePeakRatePerMinuteName) {

		var flagFileRenamePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileRenamePeakRatePerMinuteName = "file_rename_peak_rate_per_minute"
		} else {
			flagFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
		}

		flagFileRenamePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileRenamePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileRenamePeakRatePerMinute = &flagFileRenamePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropHighEntropyDataWritePeakPercentFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineHistoricalStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHighEntropyDataWritePeakPercentName := fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
	if cmd.Flags().Changed(flagHighEntropyDataWritePeakPercentName) {

		var flagHighEntropyDataWritePeakPercentName string
		if cmdPrefix == "" {
			flagHighEntropyDataWritePeakPercentName = "high_entropy_data_write_peak_percent"
		} else {
			flagHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
		}

		flagHighEntropyDataWritePeakPercentValue, err := cmd.Flags().GetInt64(flagHighEntropyDataWritePeakPercentName)
		if err != nil {
			return err, false
		}
		m.HighEntropyDataWritePeakPercent = &flagHighEntropyDataWritePeakPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineHistoricalStatisticsPropHighEntropyDataWritePeakRateKbPerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineHistoricalStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHighEntropyDataWritePeakRateKbPerMinuteName := fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagHighEntropyDataWritePeakRateKbPerMinuteName) {

		var flagHighEntropyDataWritePeakRateKbPerMinuteName string
		if cmdPrefix == "" {
			flagHighEntropyDataWritePeakRateKbPerMinuteName = "high_entropy_data_write_peak_rate_kb_per_minute"
		} else {
			flagHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
		}

		flagHighEntropyDataWritePeakRateKbPerMinuteValue, err := cmd.Flags().GetInt64(flagHighEntropyDataWritePeakRateKbPerMinuteName)
		if err != nil {
			return err, false
		}
		m.HighEntropyDataWritePeakRateKbPerMinute = &flagHighEntropyDataWritePeakRateKbPerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for AntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItem

// register flags to command
func registerModelAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItemPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItemPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItemPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Count of newly observed file extensions.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItemPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `Name of the newly observed file extension.`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItemFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItemPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, NameAdded := retrieveAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItemPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItemPropCountFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItemPropNameFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineNewlyObservedFileExtensionsInlineArrayItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for AntiRansomwareVolumeWorkloadInlineSurgeStatistics

// register flags to command
func registerModelAntiRansomwareVolumeWorkloadInlineSurgeStatisticsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropFileCreatePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropFileDeletePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropFileRenamePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropHighEntropyDataWritePeakPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropHighEntropyDataWritePeakRateKbPerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropFileCreatePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileCreatePeakRatePerMinuteDescription := `Peak rate of file creates per minute in the workload of the volume during surge.`

	var flagFileCreatePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileCreatePeakRatePerMinuteName = "file_create_peak_rate_per_minute"
	} else {
		flagFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileCreatePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileCreatePeakRatePerMinuteName, flagFileCreatePeakRatePerMinuteDefault, flagFileCreatePeakRatePerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropFileDeletePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileDeletePeakRatePerMinuteDescription := `Peak rate of file deletes per minute in the workload of the volume during surge.`

	var flagFileDeletePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileDeletePeakRatePerMinuteName = "file_delete_peak_rate_per_minute"
	} else {
		flagFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileDeletePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileDeletePeakRatePerMinuteName, flagFileDeletePeakRatePerMinuteDefault, flagFileDeletePeakRatePerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropFileRenamePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileRenamePeakRatePerMinuteDescription := `Peak rate of file renames per minute in the workload of the volume during surge.`

	var flagFileRenamePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileRenamePeakRatePerMinuteName = "file_rename_peak_rate_per_minute"
	} else {
		flagFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileRenamePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileRenamePeakRatePerMinuteName, flagFileRenamePeakRatePerMinuteDefault, flagFileRenamePeakRatePerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropHighEntropyDataWritePeakPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHighEntropyDataWritePeakPercentDescription := `Peak percentage of high entropy data writes in the volume during surge.`

	var flagHighEntropyDataWritePeakPercentName string
	if cmdPrefix == "" {
		flagHighEntropyDataWritePeakPercentName = "high_entropy_data_write_peak_percent"
	} else {
		flagHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
	}

	var flagHighEntropyDataWritePeakPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagHighEntropyDataWritePeakPercentName, flagHighEntropyDataWritePeakPercentDefault, flagHighEntropyDataWritePeakPercentDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropHighEntropyDataWritePeakRateKbPerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHighEntropyDataWritePeakRateKbPerMinuteDescription := `Peak high entropy data write rate in the volume during surge, in KBs per minute.`

	var flagHighEntropyDataWritePeakRateKbPerMinuteName string
	if cmdPrefix == "" {
		flagHighEntropyDataWritePeakRateKbPerMinuteName = "high_entropy_data_write_peak_rate_kb_per_minute"
	} else {
		flagHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	}

	var flagHighEntropyDataWritePeakRateKbPerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagHighEntropyDataWritePeakRateKbPerMinuteName, flagHighEntropyDataWritePeakRateKbPerMinuteDefault, flagHighEntropyDataWritePeakRateKbPerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTimeDescription := `Timestamp at which the first surge in the volume's workload is observed.`

	var flagTimeName string
	if cmdPrefix == "" {
		flagTimeName = "time"
	} else {
		flagTimeName = fmt.Sprintf("%v.time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagTimeName, "", flagTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAntiRansomwareVolumeWorkloadInlineSurgeStatisticsFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, FileCreatePeakRatePerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropFileCreatePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileCreatePeakRatePerMinuteAdded

	err, FileDeletePeakRatePerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropFileDeletePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileDeletePeakRatePerMinuteAdded

	err, FileRenamePeakRatePerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropFileRenamePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileRenamePeakRatePerMinuteAdded

	err, HighEntropyDataWritePeakPercentAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropHighEntropyDataWritePeakPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HighEntropyDataWritePeakPercentAdded

	err, HighEntropyDataWritePeakRateKbPerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropHighEntropyDataWritePeakRateKbPerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HighEntropyDataWritePeakRateKbPerMinuteAdded

	err, TimeAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimeAdded

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropFileCreatePeakRatePerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileCreatePeakRatePerMinuteName := fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileCreatePeakRatePerMinuteName) {

		var flagFileCreatePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileCreatePeakRatePerMinuteName = "file_create_peak_rate_per_minute"
		} else {
			flagFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
		}

		flagFileCreatePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileCreatePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileCreatePeakRatePerMinute = &flagFileCreatePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropFileDeletePeakRatePerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileDeletePeakRatePerMinuteName := fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileDeletePeakRatePerMinuteName) {

		var flagFileDeletePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileDeletePeakRatePerMinuteName = "file_delete_peak_rate_per_minute"
		} else {
			flagFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
		}

		flagFileDeletePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileDeletePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileDeletePeakRatePerMinute = &flagFileDeletePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropFileRenamePeakRatePerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileRenamePeakRatePerMinuteName := fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileRenamePeakRatePerMinuteName) {

		var flagFileRenamePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileRenamePeakRatePerMinuteName = "file_rename_peak_rate_per_minute"
		} else {
			flagFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
		}

		flagFileRenamePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileRenamePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileRenamePeakRatePerMinute = &flagFileRenamePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropHighEntropyDataWritePeakPercentFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHighEntropyDataWritePeakPercentName := fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
	if cmd.Flags().Changed(flagHighEntropyDataWritePeakPercentName) {

		var flagHighEntropyDataWritePeakPercentName string
		if cmdPrefix == "" {
			flagHighEntropyDataWritePeakPercentName = "high_entropy_data_write_peak_percent"
		} else {
			flagHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
		}

		flagHighEntropyDataWritePeakPercentValue, err := cmd.Flags().GetInt64(flagHighEntropyDataWritePeakPercentName)
		if err != nil {
			return err, false
		}
		m.HighEntropyDataWritePeakPercent = &flagHighEntropyDataWritePeakPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropHighEntropyDataWritePeakRateKbPerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHighEntropyDataWritePeakRateKbPerMinuteName := fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagHighEntropyDataWritePeakRateKbPerMinuteName) {

		var flagHighEntropyDataWritePeakRateKbPerMinuteName string
		if cmdPrefix == "" {
			flagHighEntropyDataWritePeakRateKbPerMinuteName = "high_entropy_data_write_peak_rate_kb_per_minute"
		} else {
			flagHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
		}

		flagHighEntropyDataWritePeakRateKbPerMinuteValue, err := cmd.Flags().GetInt64(flagHighEntropyDataWritePeakRateKbPerMinuteName)
		if err != nil {
			return err, false
		}
		m.HighEntropyDataWritePeakRateKbPerMinute = &flagHighEntropyDataWritePeakRateKbPerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeStatisticsPropTimeFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTimeName := fmt.Sprintf("%v.time", cmdPrefix)
	if cmd.Flags().Changed(flagTimeName) {

		var flagTimeName string
		if cmdPrefix == "" {
			flagTimeName = "time"
		} else {
			flagTimeName = fmt.Sprintf("%v.time", cmdPrefix)
		}

		flagTimeValueStr, err := cmd.Flags().GetString(flagTimeName)
		if err != nil {
			return err, false
		}
		var flagTimeValue strfmt.DateTime
		if err := flagTimeValue.UnmarshalText([]byte(flagTimeValueStr)); err != nil {
			return err, false
		}
		m.Time = &flagTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for AntiRansomwareVolumeWorkloadInlineSurgeUsage

// register flags to command
func registerModelAntiRansomwareVolumeWorkloadInlineSurgeUsageFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropFileCreatePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropFileDeletePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropFileRenamePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropHighEntropyDataWritePeakPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropHighEntropyDataWritePeakRateKbPerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropNewlyObservedFileExtensions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropFileCreatePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileCreatePeakRatePerMinuteDescription := `Peak rate of file creates per minute in the workload of the volume during surge.`

	var flagFileCreatePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileCreatePeakRatePerMinuteName = "file_create_peak_rate_per_minute"
	} else {
		flagFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileCreatePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileCreatePeakRatePerMinuteName, flagFileCreatePeakRatePerMinuteDefault, flagFileCreatePeakRatePerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropFileDeletePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileDeletePeakRatePerMinuteDescription := `Peak rate of file deletes per minute in the workload of the volume during surge.`

	var flagFileDeletePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileDeletePeakRatePerMinuteName = "file_delete_peak_rate_per_minute"
	} else {
		flagFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileDeletePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileDeletePeakRatePerMinuteName, flagFileDeletePeakRatePerMinuteDefault, flagFileDeletePeakRatePerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropFileRenamePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileRenamePeakRatePerMinuteDescription := `Peak rate of file renames per minute in the workload of the volume during surge.`

	var flagFileRenamePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileRenamePeakRatePerMinuteName = "file_rename_peak_rate_per_minute"
	} else {
		flagFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileRenamePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileRenamePeakRatePerMinuteName, flagFileRenamePeakRatePerMinuteDefault, flagFileRenamePeakRatePerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropHighEntropyDataWritePeakPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHighEntropyDataWritePeakPercentDescription := `Peak percentage of high entropy data writes in the volume during surge.`

	var flagHighEntropyDataWritePeakPercentName string
	if cmdPrefix == "" {
		flagHighEntropyDataWritePeakPercentName = "high_entropy_data_write_peak_percent"
	} else {
		flagHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
	}

	var flagHighEntropyDataWritePeakPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagHighEntropyDataWritePeakPercentName, flagHighEntropyDataWritePeakPercentDefault, flagHighEntropyDataWritePeakPercentDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropHighEntropyDataWritePeakRateKbPerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHighEntropyDataWritePeakRateKbPerMinuteDescription := `Peak high entropy data write rate in the volume during surge, in KBs per minute.`

	var flagHighEntropyDataWritePeakRateKbPerMinuteName string
	if cmdPrefix == "" {
		flagHighEntropyDataWritePeakRateKbPerMinuteName = "high_entropy_data_write_peak_rate_kb_per_minute"
	} else {
		flagHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	}

	var flagHighEntropyDataWritePeakRateKbPerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagHighEntropyDataWritePeakRateKbPerMinuteName, flagHighEntropyDataWritePeakRateKbPerMinuteDefault, flagHighEntropyDataWritePeakRateKbPerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropNewlyObservedFileExtensions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: newly_observed_file_extensions []*AntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineSurgeUsagePropTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTimeDescription := `Timestamp at which the first surge in the volume's workload is observed.`

	var flagTimeName string
	if cmdPrefix == "" {
		flagTimeName = "time"
	} else {
		flagTimeName = fmt.Sprintf("%v.time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagTimeName, "", flagTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAntiRansomwareVolumeWorkloadInlineSurgeUsageFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, FileCreatePeakRatePerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropFileCreatePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileCreatePeakRatePerMinuteAdded

	err, FileDeletePeakRatePerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropFileDeletePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileDeletePeakRatePerMinuteAdded

	err, FileRenamePeakRatePerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropFileRenamePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileRenamePeakRatePerMinuteAdded

	err, HighEntropyDataWritePeakPercentAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropHighEntropyDataWritePeakPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HighEntropyDataWritePeakPercentAdded

	err, HighEntropyDataWritePeakRateKbPerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropHighEntropyDataWritePeakRateKbPerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HighEntropyDataWritePeakRateKbPerMinuteAdded

	err, NewlyObservedFileExtensionsAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropNewlyObservedFileExtensionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NewlyObservedFileExtensionsAdded

	err, TimeAdded := retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimeAdded

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropFileCreatePeakRatePerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileCreatePeakRatePerMinuteName := fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileCreatePeakRatePerMinuteName) {

		var flagFileCreatePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileCreatePeakRatePerMinuteName = "file_create_peak_rate_per_minute"
		} else {
			flagFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
		}

		flagFileCreatePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileCreatePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileCreatePeakRatePerMinute = &flagFileCreatePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropFileDeletePeakRatePerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileDeletePeakRatePerMinuteName := fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileDeletePeakRatePerMinuteName) {

		var flagFileDeletePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileDeletePeakRatePerMinuteName = "file_delete_peak_rate_per_minute"
		} else {
			flagFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
		}

		flagFileDeletePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileDeletePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileDeletePeakRatePerMinute = &flagFileDeletePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropFileRenamePeakRatePerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileRenamePeakRatePerMinuteName := fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileRenamePeakRatePerMinuteName) {

		var flagFileRenamePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileRenamePeakRatePerMinuteName = "file_rename_peak_rate_per_minute"
		} else {
			flagFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
		}

		flagFileRenamePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileRenamePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileRenamePeakRatePerMinute = &flagFileRenamePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropHighEntropyDataWritePeakPercentFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHighEntropyDataWritePeakPercentName := fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
	if cmd.Flags().Changed(flagHighEntropyDataWritePeakPercentName) {

		var flagHighEntropyDataWritePeakPercentName string
		if cmdPrefix == "" {
			flagHighEntropyDataWritePeakPercentName = "high_entropy_data_write_peak_percent"
		} else {
			flagHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
		}

		flagHighEntropyDataWritePeakPercentValue, err := cmd.Flags().GetInt64(flagHighEntropyDataWritePeakPercentName)
		if err != nil {
			return err, false
		}
		m.HighEntropyDataWritePeakPercent = &flagHighEntropyDataWritePeakPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropHighEntropyDataWritePeakRateKbPerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHighEntropyDataWritePeakRateKbPerMinuteName := fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagHighEntropyDataWritePeakRateKbPerMinuteName) {

		var flagHighEntropyDataWritePeakRateKbPerMinuteName string
		if cmdPrefix == "" {
			flagHighEntropyDataWritePeakRateKbPerMinuteName = "high_entropy_data_write_peak_rate_kb_per_minute"
		} else {
			flagHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
		}

		flagHighEntropyDataWritePeakRateKbPerMinuteValue, err := cmd.Flags().GetInt64(flagHighEntropyDataWritePeakRateKbPerMinuteName)
		if err != nil {
			return err, false
		}
		m.HighEntropyDataWritePeakRateKbPerMinute = &flagHighEntropyDataWritePeakRateKbPerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropNewlyObservedFileExtensionsFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNewlyObservedFileExtensionsName := fmt.Sprintf("%v.newly_observed_file_extensions", cmdPrefix)
	if cmd.Flags().Changed(flagNewlyObservedFileExtensionsName) {
		// warning: newly_observed_file_extensions array type []*AntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineSurgeUsagePropTimeFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTimeName := fmt.Sprintf("%v.time", cmdPrefix)
	if cmd.Flags().Changed(flagTimeName) {

		var flagTimeName string
		if cmdPrefix == "" {
			flagTimeName = "time"
		} else {
			flagTimeName = fmt.Sprintf("%v.time", cmdPrefix)
		}

		flagTimeValueStr, err := cmd.Flags().GetString(flagTimeName)
		if err != nil {
			return err, false
		}
		var flagTimeValue strfmt.DateTime
		if err := flagTimeValue.UnmarshalText([]byte(flagTimeValueStr)); err != nil {
			return err, false
		}
		m.Time = &flagTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for AntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0

// register flags to command
func registerModelAntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0PropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0PropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0PropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Count of newly observed file extensions.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0PropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `Name of the newly observed file extension.`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0Flags(depth int, m *models.AntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveAntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0PropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, NameAdded := retrieveAntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0PropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0PropCountFlags(depth int, m *models.AntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0PropNameFlags(depth int, m *models.AntiRansomwareVolumeWorkloadSurgeUsageNewlyObservedFileExtensionsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for AntiRansomwareVolumeWorkloadInlineTypicalUsage

// register flags to command
func registerModelAntiRansomwareVolumeWorkloadInlineTypicalUsageFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAntiRansomwareVolumeWorkloadInlineTypicalUsagePropFileCreatePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineTypicalUsagePropFileDeletePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineTypicalUsagePropFileRenamePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineTypicalUsagePropHighEntropyDataWritePeakPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareVolumeWorkloadInlineTypicalUsagePropHighEntropyDataWritePeakRateKbPerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineTypicalUsagePropFileCreatePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileCreatePeakRatePerMinuteDescription := `Typical peak rate of file creates per minute in the workload of the volume.`

	var flagFileCreatePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileCreatePeakRatePerMinuteName = "file_create_peak_rate_per_minute"
	} else {
		flagFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileCreatePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileCreatePeakRatePerMinuteName, flagFileCreatePeakRatePerMinuteDefault, flagFileCreatePeakRatePerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineTypicalUsagePropFileDeletePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileDeletePeakRatePerMinuteDescription := `Typical peak rate of file deletes per minute in the workload of the volume.`

	var flagFileDeletePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileDeletePeakRatePerMinuteName = "file_delete_peak_rate_per_minute"
	} else {
		flagFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileDeletePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileDeletePeakRatePerMinuteName, flagFileDeletePeakRatePerMinuteDefault, flagFileDeletePeakRatePerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineTypicalUsagePropFileRenamePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileRenamePeakRatePerMinuteDescription := `Typical peak rate of file renames per minute in the workload of the volume.`

	var flagFileRenamePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileRenamePeakRatePerMinuteName = "file_rename_peak_rate_per_minute"
	} else {
		flagFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileRenamePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileRenamePeakRatePerMinuteName, flagFileRenamePeakRatePerMinuteDefault, flagFileRenamePeakRatePerMinuteDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineTypicalUsagePropHighEntropyDataWritePeakPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHighEntropyDataWritePeakPercentDescription := `Typical peak percentage of high entropy data writes in the volume.`

	var flagHighEntropyDataWritePeakPercentName string
	if cmdPrefix == "" {
		flagHighEntropyDataWritePeakPercentName = "high_entropy_data_write_peak_percent"
	} else {
		flagHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
	}

	var flagHighEntropyDataWritePeakPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagHighEntropyDataWritePeakPercentName, flagHighEntropyDataWritePeakPercentDefault, flagHighEntropyDataWritePeakPercentDescription)

	return nil
}

func registerAntiRansomwareVolumeWorkloadInlineTypicalUsagePropHighEntropyDataWritePeakRateKbPerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHighEntropyDataWritePeakRateKbPerMinuteDescription := `Typical peak high entropy data write rate in the volume, in KBs per minute.`

	var flagHighEntropyDataWritePeakRateKbPerMinuteName string
	if cmdPrefix == "" {
		flagHighEntropyDataWritePeakRateKbPerMinuteName = "high_entropy_data_write_peak_rate_kb_per_minute"
	} else {
		flagHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	}

	var flagHighEntropyDataWritePeakRateKbPerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagHighEntropyDataWritePeakRateKbPerMinuteName, flagHighEntropyDataWritePeakRateKbPerMinuteDefault, flagHighEntropyDataWritePeakRateKbPerMinuteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAntiRansomwareVolumeWorkloadInlineTypicalUsageFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineTypicalUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, FileCreatePeakRatePerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineTypicalUsagePropFileCreatePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileCreatePeakRatePerMinuteAdded

	err, FileDeletePeakRatePerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineTypicalUsagePropFileDeletePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileDeletePeakRatePerMinuteAdded

	err, FileRenamePeakRatePerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineTypicalUsagePropFileRenamePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileRenamePeakRatePerMinuteAdded

	err, HighEntropyDataWritePeakPercentAdded := retrieveAntiRansomwareVolumeWorkloadInlineTypicalUsagePropHighEntropyDataWritePeakPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HighEntropyDataWritePeakPercentAdded

	err, HighEntropyDataWritePeakRateKbPerMinuteAdded := retrieveAntiRansomwareVolumeWorkloadInlineTypicalUsagePropHighEntropyDataWritePeakRateKbPerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HighEntropyDataWritePeakRateKbPerMinuteAdded

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineTypicalUsagePropFileCreatePeakRatePerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineTypicalUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileCreatePeakRatePerMinuteName := fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileCreatePeakRatePerMinuteName) {

		var flagFileCreatePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileCreatePeakRatePerMinuteName = "file_create_peak_rate_per_minute"
		} else {
			flagFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
		}

		flagFileCreatePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileCreatePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileCreatePeakRatePerMinute = &flagFileCreatePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineTypicalUsagePropFileDeletePeakRatePerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineTypicalUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileDeletePeakRatePerMinuteName := fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileDeletePeakRatePerMinuteName) {

		var flagFileDeletePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileDeletePeakRatePerMinuteName = "file_delete_peak_rate_per_minute"
		} else {
			flagFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
		}

		flagFileDeletePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileDeletePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileDeletePeakRatePerMinute = &flagFileDeletePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineTypicalUsagePropFileRenamePeakRatePerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineTypicalUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileRenamePeakRatePerMinuteName := fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileRenamePeakRatePerMinuteName) {

		var flagFileRenamePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileRenamePeakRatePerMinuteName = "file_rename_peak_rate_per_minute"
		} else {
			flagFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
		}

		flagFileRenamePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileRenamePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileRenamePeakRatePerMinute = &flagFileRenamePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineTypicalUsagePropHighEntropyDataWritePeakPercentFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineTypicalUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHighEntropyDataWritePeakPercentName := fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
	if cmd.Flags().Changed(flagHighEntropyDataWritePeakPercentName) {

		var flagHighEntropyDataWritePeakPercentName string
		if cmdPrefix == "" {
			flagHighEntropyDataWritePeakPercentName = "high_entropy_data_write_peak_percent"
		} else {
			flagHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
		}

		flagHighEntropyDataWritePeakPercentValue, err := cmd.Flags().GetInt64(flagHighEntropyDataWritePeakPercentName)
		if err != nil {
			return err, false
		}
		m.HighEntropyDataWritePeakPercent = &flagHighEntropyDataWritePeakPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntiRansomwareVolumeWorkloadInlineTypicalUsagePropHighEntropyDataWritePeakRateKbPerMinuteFlags(depth int, m *models.AntiRansomwareVolumeWorkloadInlineTypicalUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHighEntropyDataWritePeakRateKbPerMinuteName := fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagHighEntropyDataWritePeakRateKbPerMinuteName) {

		var flagHighEntropyDataWritePeakRateKbPerMinuteName string
		if cmdPrefix == "" {
			flagHighEntropyDataWritePeakRateKbPerMinuteName = "high_entropy_data_write_peak_rate_kb_per_minute"
		} else {
			flagHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
		}

		flagHighEntropyDataWritePeakRateKbPerMinuteValue, err := cmd.Flags().GetInt64(flagHighEntropyDataWritePeakRateKbPerMinuteName)
		if err != nil {
			return err, false
		}
		m.HighEntropyDataWritePeakRateKbPerMinute = &flagHighEntropyDataWritePeakRateKbPerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}
