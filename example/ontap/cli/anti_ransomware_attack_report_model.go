// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/sapcc/ontap-restapi/example/ontap/models"
	"github.com/spf13/cobra"
)

// Schema cli for AntiRansomwareAttackReport

// register flags to command
func registerModelAntiRansomwareAttackReportFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAntiRansomwareAttackReportPropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntiRansomwareAttackReportPropTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareAttackReportPropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelAntiRansomwareAttackReportInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareAttackReportPropTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTimeDescription := `Timestamp at which ransomware attack is observed.`

	var flagTimeName string
	if cmdPrefix == "" {
		flagTimeName = "time"
	} else {
		flagTimeName = fmt.Sprintf("%v.time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagTimeName, "", flagTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAntiRansomwareAttackReportFlags(depth int, m *models.AntiRansomwareAttackReport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveAntiRansomwareAttackReportPropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, TimeAdded := retrieveAntiRansomwareAttackReportPropTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimeAdded

	return nil, retAdded
}

func retrieveAntiRansomwareAttackReportPropLinksFlags(depth int, m *models.AntiRansomwareAttackReport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links AntiRansomwareAttackReportInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.AntiRansomwareAttackReportInlineLinks{}
	}

	err, LinksAdded := retrieveModelAntiRansomwareAttackReportInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveAntiRansomwareAttackReportPropTimeFlags(depth int, m *models.AntiRansomwareAttackReport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTimeName := fmt.Sprintf("%v.time", cmdPrefix)
	if cmd.Flags().Changed(flagTimeName) {

		var flagTimeName string
		if cmdPrefix == "" {
			flagTimeName = "time"
		} else {
			flagTimeName = fmt.Sprintf("%v.time", cmdPrefix)
		}

		flagTimeValueStr, err := cmd.Flags().GetString(flagTimeName)
		if err != nil {
			return err, false
		}
		var flagTimeValue strfmt.DateTime
		if err := flagTimeValue.UnmarshalText([]byte(flagTimeValueStr)); err != nil {
			return err, false
		}
		m.Time = &flagTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for AntiRansomwareAttackReportInlineLinks

// register flags to command
func registerModelAntiRansomwareAttackReportInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAntiRansomwareAttackReportInlineLinksPropSuspects(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntiRansomwareAttackReportInlineLinksPropSuspects(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSuspectsName string
	if cmdPrefix == "" {
		flagSuspectsName = "suspects"
	} else {
		flagSuspectsName = fmt.Sprintf("%v.suspects", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSuspectsName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAntiRansomwareAttackReportInlineLinksFlags(depth int, m *models.AntiRansomwareAttackReportInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SuspectsAdded := retrieveAntiRansomwareAttackReportInlineLinksPropSuspectsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SuspectsAdded

	return nil, retAdded
}

func retrieveAntiRansomwareAttackReportInlineLinksPropSuspectsFlags(depth int, m *models.AntiRansomwareAttackReportInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSuspectsName := fmt.Sprintf("%v.suspects", cmdPrefix)
	if cmd.Flags().Changed(flagSuspectsName) {
		// info: complex object suspects Href is retrieved outside this Changed() block
	}
	flagSuspectsValue := m.Suspects
	if swag.IsZero(flagSuspectsValue) {
		flagSuspectsValue = &models.Href{}
	}

	err, SuspectsAdded := retrieveModelHrefFlags(depth+1, flagSuspectsValue, flagSuspectsName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SuspectsAdded
	if SuspectsAdded {
		m.Suspects = flagSuspectsValue
	}

	return nil, retAdded
}
