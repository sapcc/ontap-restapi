// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/sapcc/ontap-restapi/example/ontap/models"
	"github.com/spf13/cobra"
)

// Schema cli for VolumeResponse

// register flags to command
func registerModelVolumeResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeResponsePropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeResponsePropNumRecords(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeResponsePropVolumeResponseInlineRecords(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeResponsePropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeResponseInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeResponsePropNumRecords(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNumRecordsDescription := `Number of records`

	var flagNumRecordsName string
	if cmdPrefix == "" {
		flagNumRecordsName = "num_records"
	} else {
		flagNumRecordsName = fmt.Sprintf("%v.num_records", cmdPrefix)
	}

	var flagNumRecordsDefault int64

	_ = cmd.PersistentFlags().Int64(flagNumRecordsName, flagNumRecordsDefault, flagNumRecordsDescription)

	return nil
}

func registerVolumeResponsePropVolumeResponseInlineRecords(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_response_inline_records []*Volume array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeResponseFlags(depth int, m *models.VolumeResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeResponsePropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, NumRecordsAdded := retrieveVolumeResponsePropNumRecordsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NumRecordsAdded

	err, VolumeResponseInlineRecordsAdded := retrieveVolumeResponsePropVolumeResponseInlineRecordsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeResponseInlineRecordsAdded

	return nil, retAdded
}

func retrieveVolumeResponsePropLinksFlags(depth int, m *models.VolumeResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeResponseInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeResponseInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeResponseInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeResponsePropNumRecordsFlags(depth int, m *models.VolumeResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNumRecordsName := fmt.Sprintf("%v.num_records", cmdPrefix)
	if cmd.Flags().Changed(flagNumRecordsName) {

		var flagNumRecordsName string
		if cmdPrefix == "" {
			flagNumRecordsName = "num_records"
		} else {
			flagNumRecordsName = fmt.Sprintf("%v.num_records", cmdPrefix)
		}

		flagNumRecordsValue, err := cmd.Flags().GetInt64(flagNumRecordsName)
		if err != nil {
			return err, false
		}
		m.NumRecords = &flagNumRecordsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeResponsePropVolumeResponseInlineRecordsFlags(depth int, m *models.VolumeResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeResponseInlineRecordsName := fmt.Sprintf("%v.volume_response_inline_records", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeResponseInlineRecordsName) {
		// warning: volume_response_inline_records array type []*Volume is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for VolumeResponseInlineLinks

// register flags to command
func registerModelVolumeResponseInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeResponseInlineLinksPropNext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeResponseInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeResponseInlineLinksPropNext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagNextName string
	if cmdPrefix == "" {
		flagNextName = "next"
	} else {
		flagNextName = fmt.Sprintf("%v.next", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagNextName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeResponseInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeResponseInlineLinksFlags(depth int, m *models.VolumeResponseInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NextAdded := retrieveVolumeResponseInlineLinksPropNextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NextAdded

	err, SelfAdded := retrieveVolumeResponseInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeResponseInlineLinksPropNextFlags(depth int, m *models.VolumeResponseInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNextName := fmt.Sprintf("%v.next", cmdPrefix)
	if cmd.Flags().Changed(flagNextName) {
		// info: complex object next Href is retrieved outside this Changed() block
	}
	flagNextValue := m.Next
	if swag.IsZero(flagNextValue) {
		flagNextValue = &models.Href{}
	}

	err, NextAdded := retrieveModelHrefFlags(depth+1, flagNextValue, flagNextName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NextAdded
	if NextAdded {
		m.Next = flagNextValue
	}

	return nil, retAdded
}

func retrieveVolumeResponseInlineLinksPropSelfFlags(depth int, m *models.VolumeResponseInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}
