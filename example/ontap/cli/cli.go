// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"log"
	"os"
	"path"
	"path/filepath"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/sapcc/ontap-restapi/example/ontap/client"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var (
	// debug flag indicating that cli should output debug logs
	debug bool

	// config file location
	configFile string

	// dry run flag
	dryRun bool

	// name of the executable
	exeName = filepath.Base(os.Args[0])
)

// logDebugf writes debug log to stdout
func logDebugf(format string, v ...interface{}) {
	if !debug {
		return
	}
	log.Printf(format, v...)
}

// depth of recursion to construct model flags
var maxDepth int = 5

// makeClient constructs a client object
func makeClient(cmd *cobra.Command, _ []string) (*client.ONTAPRESTAPIOnlineReference, error) {
	hostname := viper.GetString("hostname")
	viper.SetDefault("base_path", client.DefaultBasePath)
	basePath := viper.GetString("base_path")
	scheme := viper.GetString("scheme")

	r := httptransport.New(hostname, basePath, []string{scheme})
	r.SetDebug(debug)
	// set custom producer and consumer to use the default ones

	r.Consumers["application/hal+json"] = runtime.JSONConsumer()
	r.Consumers["application/json"] = runtime.JSONConsumer()

	// warning: consumes multipart/form-data is not supported by go-swagger cli yet

	r.Producers["application/hal+json"] = runtime.JSONProducer()
	r.Producers["application/json"] = runtime.JSONProducer()
	// warning: produces multipart/form-data is not supported by go-swagger cli yet

	auth, err := makeAuthInfoWriter(cmd)
	if err != nil {
		return nil, err
	}
	r.DefaultAuthentication = auth

	appCli := client.New(r, strfmt.Default)
	logDebugf("Server url: %v://%v", scheme, hostname)

	return appCli, nil
}

// MakeRootCmd returns the root cmd
func MakeRootCmd() (*cobra.Command, error) {
	cobra.OnInitialize(initViperConfigs)

	// Use executable name as the command name
	rootCmd := &cobra.Command{
		Use: exeName,
	}

	// register basic flags
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	if err := viper.BindPFlag("hostname", rootCmd.PersistentFlags().Lookup("hostname")); err != nil {
		return nil, err
	}
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))
	if err := viper.BindPFlag("scheme", rootCmd.PersistentFlags().Lookup("scheme")); err != nil {
		return nil, err
	}
	rootCmd.PersistentFlags().String("base-path", client.DefaultBasePath, fmt.Sprintf("For example: %v", client.DefaultBasePath))
	if err := viper.BindPFlag("base_path", rootCmd.PersistentFlags().Lookup("base-path")); err != nil {
		return nil, err
	}

	// configure debug flag
	rootCmd.PersistentFlags().BoolVar(&debug, "debug", false, "output debug logs")
	// configure config location
	rootCmd.PersistentFlags().StringVar(&configFile, "config", "", "config file path")
	// configure dry run flag
	rootCmd.PersistentFlags().BoolVar(&dryRun, "dry-run", false, "do not send the request to server")

	// register security flags
	if err := registerAuthInoWriterFlags(rootCmd); err != nil {
		return nil, err
	}

	// add all operation groups
	c0, err := makeGroupOfOperationsStorageCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c0)

	// add cobra completion
	rootCmd.AddCommand(makeGenCompletionCmd())

	return rootCmd, nil
}

// initViperConfigs initialize viper config using config file in '$HOME/.config/<cli name>/config.<json|yaml...>'
// currently hostname, scheme and auth tokens can be specified in this config file.
func initViperConfigs() {
	if configFile != "" {
		// use user specified config file location
		viper.SetConfigFile(configFile)
	} else {
		var (
			configDir string
			err       error
		)

		// look for default config (OS-specific, e.g. ".config" on linux)
		configDir, err = os.UserConfigDir()
		if err != nil {
			// fallback and try finding the home directory.
			home, err := os.UserHomeDir()
			cobra.CheckErr(err)
			configDir = path.Join(home, ".config")
		}

		// Search config in the config directory with name of the CLI binary (without extension).
		configDir = path.Join(configDir, exeName)
		viper.AddConfigPath(configDir)
		viper.SetConfigName("config")
	}

	if err := viper.ReadInConfig(); err != nil {
		logDebugf("Error: loading config file: %v", err)
		return
	}
	logDebugf("Using config file: %v", viper.ConfigFileUsed())
}

// registerAuthInoWriterFlags registers all flags needed to perform authentication
func registerAuthInoWriterFlags(cmd *cobra.Command) error {
	//
	cmd.PersistentFlags().String("username", "", "username for basic auth")
	if err := viper.BindPFlag("username", cmd.PersistentFlags().Lookup("username")); err != nil {
		return err
	}
	cmd.PersistentFlags().String("password", "", "password for basic auth")
	if err := viper.BindPFlag("password", cmd.PersistentFlags().Lookup("password")); err != nil {
		return err
	}

	return nil
}

// makeAuthInfoWriter retrieves cmd flags and construct an auth info writer
func makeAuthInfoWriter(cmd *cobra.Command) (runtime.ClientAuthInfoWriter, error) {
	auths := []runtime.ClientAuthInfoWriter{}

	//
	if viper.IsSet("username") {
		usr := viper.GetString("username")
		if !viper.IsSet("password") {
			return nil, fmt.Errorf("Basic Auth password for user [%v] is not provided.", usr)
		}
		pwd := viper.GetString("password")
		auths = append(auths, httptransport.BasicAuth(usr, pwd))
	}

	if len(auths) == 0 {
		logDebugf("Warning: No auth params detected.")
		return nil, nil
	}

	// compose all auths together
	return httptransport.Compose(auths...), nil
} // makeGroupOfOperationsStorageCmd returns a parent command to handle all operations with tag "storage"
func makeGroupOfOperationsStorageCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "storage",
		Long: ``,
	}

	sub0, err := makeOperationStorageVolumeCollectionGetCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationStorageVolumeCreateCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	return parent, nil
}
