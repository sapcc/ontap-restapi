// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/sapcc/ontap-restapi/example/ontap/models"
	"github.com/spf13/cobra"
)

// Schema cli for Volume

// register flags to command
func registerModelVolumeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumePropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropAccessTimeEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropActivityTracking(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropAggressiveReadaheadMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropAnalytics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropAntiRansomware(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropApplication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropAsynchronousDirectoryDelete(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropAutosize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropClone(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropCloudRetrievalPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropCloudWriteEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropComment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropConsistencyGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropConstituentsPerAggregate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropConvertUnicode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropCreateTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropEfficiency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropEncryption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropErrorState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropFiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropFlashPool(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropFlexcacheEndpointType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropFlexgroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropGranularData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropGranularDataMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropGuarantee(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropIsObjectStore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropIsSvmRoot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropLanguage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropMaxDirSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropMetric(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropMovement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropMsid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropNas(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropOptimizeAggregates(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropQos(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropQueueForEncryption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropQuota(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropRebalancing(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropScheduledSnapshotNamingScheme(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropSnaplock(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropSnapmirror(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropSnapshotCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropSnapshotDirectoryAccessEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropSnapshotLockingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropSnapshotPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropSpace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropStatistics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropStyle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropSvm(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropTiering(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropUseMirroredAggregates(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropValidateOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropVolumeInlineTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropVolumeInlineAggregates(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropVolumeInlineConstituents(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumePropVolumeInlineStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropAccessTimeEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAccessTimeEnabledDescription := `Indicates whether or not access time updates are enabled on the volume.`

	var flagAccessTimeEnabledName string
	if cmdPrefix == "" {
		flagAccessTimeEnabledName = "access_time_enabled"
	} else {
		flagAccessTimeEnabledName = fmt.Sprintf("%v.access_time_enabled", cmdPrefix)
	}

	var flagAccessTimeEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagAccessTimeEnabledName, flagAccessTimeEnabledDefault, flagAccessTimeEnabledDescription)

	return nil
}

func registerVolumePropActivityTracking(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagActivityTrackingName string
	if cmdPrefix == "" {
		flagActivityTrackingName = "activity_tracking"
	} else {
		flagActivityTrackingName = fmt.Sprintf("%v.activity_tracking", cmdPrefix)
	}

	if err := registerModelVolumeInlineActivityTrackingFlags(depth+1, flagActivityTrackingName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropAggressiveReadaheadMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAggressiveReadaheadModeDescription := `Enum: ["none","file_prefetch","sequential_read","cross_file_sequential_read"]. Specifies the ` + "`" + `aggressive_readahead_mode` + "`" + ` enabled on the volume. When set to _file_prefetch_, on a file read, the system aggressively issues readaheads for all of the blocks in the file and retains those blocks in a cache for a finite period of time. When the option is set to _sequential_read_, the system aggressively prefetches the file completely, or to a certain length based on the file size limit, and continues as the read makes progress. If the option is set to _cross_file_sequential_read_, then the system aggressively prefetches multiple files completely, or to a certain length, and continues as the read makes progress.`

	var flagAggressiveReadaheadModeName string
	if cmdPrefix == "" {
		flagAggressiveReadaheadModeName = "aggressive_readahead_mode"
	} else {
		flagAggressiveReadaheadModeName = fmt.Sprintf("%v.aggressive_readahead_mode", cmdPrefix)
	}

	var flagAggressiveReadaheadModeDefault string = "none"

	_ = cmd.PersistentFlags().String(flagAggressiveReadaheadModeName, flagAggressiveReadaheadModeDefault, flagAggressiveReadaheadModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagAggressiveReadaheadModeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["none","file_prefetch","sequential_read","cross_file_sequential_read"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumePropAnalytics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAnalyticsName string
	if cmdPrefix == "" {
		flagAnalyticsName = "analytics"
	} else {
		flagAnalyticsName = fmt.Sprintf("%v.analytics", cmdPrefix)
	}

	if err := registerModelVolumeInlineAnalyticsFlags(depth+1, flagAnalyticsName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropAntiRansomware(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAntiRansomwareName string
	if cmdPrefix == "" {
		flagAntiRansomwareName = "anti_ransomware"
	} else {
		flagAntiRansomwareName = fmt.Sprintf("%v.anti_ransomware", cmdPrefix)
	}

	if err := registerModelVolumeInlineAntiRansomwareFlags(depth+1, flagAntiRansomwareName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropApplication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagApplicationName string
	if cmdPrefix == "" {
		flagApplicationName = "application"
	} else {
		flagApplicationName = fmt.Sprintf("%v.application", cmdPrefix)
	}

	if err := registerModelVolumeInlineApplicationFlags(depth+1, flagApplicationName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropAsynchronousDirectoryDelete(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAsynchronousDirectoryDeleteName string
	if cmdPrefix == "" {
		flagAsynchronousDirectoryDeleteName = "asynchronous_directory_delete"
	} else {
		flagAsynchronousDirectoryDeleteName = fmt.Sprintf("%v.asynchronous_directory_delete", cmdPrefix)
	}

	if err := registerModelVolumeInlineAsynchronousDirectoryDeleteFlags(depth+1, flagAsynchronousDirectoryDeleteName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropAutosize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAutosizeName string
	if cmdPrefix == "" {
		flagAutosizeName = "autosize"
	} else {
		flagAutosizeName = fmt.Sprintf("%v.autosize", cmdPrefix)
	}

	if err := registerModelVolumeInlineAutosizeFlags(depth+1, flagAutosizeName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropClone(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagCloneName string
	if cmdPrefix == "" {
		flagCloneName = "clone"
	} else {
		flagCloneName = fmt.Sprintf("%v.clone", cmdPrefix)
	}

	if err := registerModelVolumeInlineCloneFlags(depth+1, flagCloneName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropCloudRetrievalPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCloudRetrievalPolicyDescription := `Enum: ["default","on_read","never","promote"]. This parameter specifies the cloud retrieval policy for the volume. This policy determines which tiered out blocks to retrieve from the capacity tier to the performance tier. The available cloud retrieval policies are
"default" policy retrieves tiered data based on the underlying tiering policy. If the tiering policy is 'auto', tiered data is retrieved only for random client driven data reads. If the tiering policy is 'none' or 'snapshot_only', tiered data is retrieved for random and sequential client driven data reads. If the tiering policy is 'all', tiered data is not retrieved.
"on_read" policy retrieves tiered data for all client driven data reads.
"never" policy never retrieves tiered data.
"promote" policy retrieves all eligible tiered data automatically during the next scheduled scan. It is only supported when the tiering policy is 'none' or 'snapshot_only'. If the tiering policy is 'snapshot_only', the only data brought back is the data in the AFS. Data that is only in a snapshot copy stays in the cloud and if tiering policy is 'none' then all data is retrieved.
`

	var flagCloudRetrievalPolicyName string
	if cmdPrefix == "" {
		flagCloudRetrievalPolicyName = "cloud_retrieval_policy"
	} else {
		flagCloudRetrievalPolicyName = fmt.Sprintf("%v.cloud_retrieval_policy", cmdPrefix)
	}

	var flagCloudRetrievalPolicyDefault string

	_ = cmd.PersistentFlags().String(flagCloudRetrievalPolicyName, flagCloudRetrievalPolicyDefault, flagCloudRetrievalPolicyDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagCloudRetrievalPolicyName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["default","on_read","never","promote"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumePropCloudWriteEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCloudWriteEnabledDescription := `Indicates whether or not cloud writes are enabled on the volume. NFS writes to this volume are sent to the cloud directly instead of the local performance tier.
This feature is only available on volumes in FabricPools.
`

	var flagCloudWriteEnabledName string
	if cmdPrefix == "" {
		flagCloudWriteEnabledName = "cloud_write_enabled"
	} else {
		flagCloudWriteEnabledName = fmt.Sprintf("%v.cloud_write_enabled", cmdPrefix)
	}

	var flagCloudWriteEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagCloudWriteEnabledName, flagCloudWriteEnabledDefault, flagCloudWriteEnabledDescription)

	return nil
}

func registerVolumePropComment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCommentDescription := `A comment for the volume. Valid in POST or PATCH.`

	var flagCommentName string
	if cmdPrefix == "" {
		flagCommentName = "comment"
	} else {
		flagCommentName = fmt.Sprintf("%v.comment", cmdPrefix)
	}

	var flagCommentDefault string

	_ = cmd.PersistentFlags().String(flagCommentName, flagCommentDefault, flagCommentDescription)

	return nil
}

func registerVolumePropConsistencyGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagConsistencyGroupName string
	if cmdPrefix == "" {
		flagConsistencyGroupName = "consistency_group"
	} else {
		flagConsistencyGroupName = fmt.Sprintf("%v.consistency_group", cmdPrefix)
	}

	if err := registerModelVolumeInlineConsistencyGroupFlags(depth+1, flagConsistencyGroupName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropConstituentsPerAggregate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagConstituentsPerAggregateDescription := `Specifies the number of times to iterate over the aggregates listed with the "aggregates.name" or "aggregates.uuid" when creating or expanding a FlexGroup volume. If a volume is being created on a single aggregate, the system creates a flexible volume if the "constituents_per_aggregate" field is not specified, or a FlexGroup volume if it is specified. If a volume is being created on multiple aggregates, the system always creates a FlexGroup volume. If a volume is being created on multiple aggregates and the "constituents_per_aggregate" field is not specified, the default value of the "constituents_per_aggregate" field is 4. The root constituent of a FlexGroup volume is always placed on the first aggregate in the list, unless 'optimize_aggregates' is specified as 'true'. If the "aggregates.name" or "aggregates.uuid" is specified in a PATCH request to expand an existing FlexGroup volume, the default value of the "constituents_per_aggregate" field is 1. The volume expand operation is only supported on FlexGroup volumes.`

	var flagConstituentsPerAggregateName string
	if cmdPrefix == "" {
		flagConstituentsPerAggregateName = "constituents_per_aggregate"
	} else {
		flagConstituentsPerAggregateName = fmt.Sprintf("%v.constituents_per_aggregate", cmdPrefix)
	}

	var flagConstituentsPerAggregateDefault int64 = 1

	_ = cmd.PersistentFlags().Int64(flagConstituentsPerAggregateName, flagConstituentsPerAggregateDefault, flagConstituentsPerAggregateDescription)

	return nil
}

func registerVolumePropConvertUnicode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagConvertUnicodeDescription := `Specifies whether directory Unicode format conversion is enabled when directories are accessed by NFS clients.`

	var flagConvertUnicodeName string
	if cmdPrefix == "" {
		flagConvertUnicodeName = "convert_unicode"
	} else {
		flagConvertUnicodeName = fmt.Sprintf("%v.convert_unicode", cmdPrefix)
	}

	var flagConvertUnicodeDefault bool

	_ = cmd.PersistentFlags().Bool(flagConvertUnicodeName, flagConvertUnicodeDefault, flagConvertUnicodeDescription)

	return nil
}

func registerVolumePropCreateTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCreateTimeDescription := `Creation time of the volume. This field is generated when the volume is created.`

	var flagCreateTimeName string
	if cmdPrefix == "" {
		flagCreateTimeName = "create_time"
	} else {
		flagCreateTimeName = fmt.Sprintf("%v.create_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagCreateTimeName, "", flagCreateTimeDescription)

	return nil
}

func registerVolumePropEfficiency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagEfficiencyName string
	if cmdPrefix == "" {
		flagEfficiencyName = "efficiency"
	} else {
		flagEfficiencyName = fmt.Sprintf("%v.efficiency", cmdPrefix)
	}

	if err := registerModelVolumeInlineEfficiencyFlags(depth+1, flagEfficiencyName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropEncryption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagEncryptionName string
	if cmdPrefix == "" {
		flagEncryptionName = "encryption"
	} else {
		flagEncryptionName = fmt.Sprintf("%v.encryption", cmdPrefix)
	}

	if err := registerModelVolumeInlineEncryptionFlags(depth+1, flagEncryptionName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropErrorState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagErrorStateName string
	if cmdPrefix == "" {
		flagErrorStateName = "error_state"
	} else {
		flagErrorStateName = fmt.Sprintf("%v.error_state", cmdPrefix)
	}

	if err := registerModelVolumeInlineErrorStateFlags(depth+1, flagErrorStateName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropFiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagFilesName string
	if cmdPrefix == "" {
		flagFilesName = "files"
	} else {
		flagFilesName = fmt.Sprintf("%v.files", cmdPrefix)
	}

	if err := registerModelVolumeInlineFilesFlags(depth+1, flagFilesName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropFlashPool(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagFlashPoolName string
	if cmdPrefix == "" {
		flagFlashPoolName = "flash_pool"
	} else {
		flagFlashPoolName = fmt.Sprintf("%v.flash_pool", cmdPrefix)
	}

	if err := registerModelVolumeInlineFlashPoolFlags(depth+1, flagFlashPoolName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropFlexcacheEndpointType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFlexcacheEndpointTypeDescription := `Enum: ["none","cache","origin"]. FlexCache endpoint type. <br>none &dash; The volume is neither a FlexCache nor origin of any FlexCache. <br>cache &dash; The volume is a FlexCache volume. <br>origin &dash; The volume is origin of a FlexCache volume.`

	var flagFlexcacheEndpointTypeName string
	if cmdPrefix == "" {
		flagFlexcacheEndpointTypeName = "flexcache_endpoint_type"
	} else {
		flagFlexcacheEndpointTypeName = fmt.Sprintf("%v.flexcache_endpoint_type", cmdPrefix)
	}

	var flagFlexcacheEndpointTypeDefault string

	_ = cmd.PersistentFlags().String(flagFlexcacheEndpointTypeName, flagFlexcacheEndpointTypeDefault, flagFlexcacheEndpointTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagFlexcacheEndpointTypeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["none","cache","origin"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumePropFlexgroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagFlexgroupName string
	if cmdPrefix == "" {
		flagFlexgroupName = "flexgroup"
	} else {
		flagFlexgroupName = fmt.Sprintf("%v.flexgroup", cmdPrefix)
	}

	if err := registerModelVolumeInlineFlexgroupFlags(depth+1, flagFlexgroupName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropGranularData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagGranularDataDescription := `State of granular data on the volume. This setting is ` + "`" + `true` + "`" + ` by default when creating an AWS S3 FlexGroup volume via a POST request and ` + "`" + `false` + "`" + ` by default for creating any other type of FlexGroup volume via a POST request. On FlexVol volumes, the setting is always ` + "`" + `false` + "`" + `, as only FlexGroup volumes support this feature. Once enabled, this setting can only be disabled by restoring a snapshot. Earlier versions of ONTAP (pre 9.12) are not compatible with this feature. Therefore, reverting to an earlier version of ONTAP is not possible unless this volume is deleted or restored to a snapshot that was taken before the setting was enabled.`

	var flagGranularDataName string
	if cmdPrefix == "" {
		flagGranularDataName = "granular_data"
	} else {
		flagGranularDataName = fmt.Sprintf("%v.granular_data", cmdPrefix)
	}

	var flagGranularDataDefault bool

	_ = cmd.PersistentFlags().Bool(flagGranularDataName, flagGranularDataDefault, flagGranularDataDescription)

	return nil
}

func registerVolumePropGranularDataMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagGranularDataModeDescription := `Enum: ["disabled","basic","advanced"]. Mode of granular data on the volume. This setting defaults to ` + "`" + `basic` + "`" + ` when the ` + "`" + `granular_data` + "`" + ` parameter is set to ` + "`" + `true` + "`" + `, but can be specified at the time of creation via a POST request. Earlier versions of ONTAP (pre 9.12) are not compatible with the ` + "`" + `basic` + "`" + ` setting. Therefore, when set to ` + "`" + `basic` + "`" + `, reverting to an earlier version of ONTAP is not possible unless this volume is deleted or restored to a snapshot that was taken before the ` + "`" + `basic` + "`" + ` mode was enabled. Earlier versions of ONTAP (pre 9.16) are not compatible with the ` + "`" + `advanced` + "`" + ` setting. Therefore, when set to ` + "`" + `advanced` + "`" + `, reverting to an earlier version of ONTAP is not possible unless this volume is deleted or restored to a snapshot that was taken before the ` + "`" + `advanced` + "`" + ` mode was enabled.`

	var flagGranularDataModeName string
	if cmdPrefix == "" {
		flagGranularDataModeName = "granular_data_mode"
	} else {
		flagGranularDataModeName = fmt.Sprintf("%v.granular_data_mode", cmdPrefix)
	}

	var flagGranularDataModeDefault string

	_ = cmd.PersistentFlags().String(flagGranularDataModeName, flagGranularDataModeDefault, flagGranularDataModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagGranularDataModeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["disabled","basic","advanced"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumePropGuarantee(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagGuaranteeName string
	if cmdPrefix == "" {
		flagGuaranteeName = "guarantee"
	} else {
		flagGuaranteeName = fmt.Sprintf("%v.guarantee", cmdPrefix)
	}

	if err := registerModelVolumeInlineGuaranteeFlags(depth+1, flagGuaranteeName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropIsObjectStore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsObjectStoreDescription := `Specifies whether the volume is provisioned for an object store server.`

	var flagIsObjectStoreName string
	if cmdPrefix == "" {
		flagIsObjectStoreName = "is_object_store"
	} else {
		flagIsObjectStoreName = fmt.Sprintf("%v.is_object_store", cmdPrefix)
	}

	var flagIsObjectStoreDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsObjectStoreName, flagIsObjectStoreDefault, flagIsObjectStoreDescription)

	return nil
}

func registerVolumePropIsSvmRoot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsSvmRootDescription := `Specifies whether the volume is a root volume of the SVM it belongs to.`

	var flagIsSvmRootName string
	if cmdPrefix == "" {
		flagIsSvmRootName = "is_svm_root"
	} else {
		flagIsSvmRootName = fmt.Sprintf("%v.is_svm_root", cmdPrefix)
	}

	var flagIsSvmRootDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsSvmRootName, flagIsSvmRootDefault, flagIsSvmRootDescription)

	return nil
}

func registerVolumePropLanguage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLanguageDescription := `Enum: ["ar","ar.utf_8","c","c.utf_8","cs","cs.utf_8","da","da.utf_8","de","de.utf_8","en","en.utf_8","en_us","en_us.utf_8","es","es.utf_8","fi","fi.utf_8","fr","fr.utf_8","he","he.utf_8","hr","hr.utf_8","hu","hu.utf_8","it","it.utf_8","ja","ja.utf_8","ja_jp.932","ja_jp.932.utf_8","ja_jp.pck","ja_jp.pck.utf_8","ja_jp.pck_v2","ja_jp.pck_v2.utf_8","ja_v1","ja_v1.utf_8","ko","ko.utf_8","nl","nl.utf_8","no","no.utf_8","pl","pl.utf_8","pt","pt.utf_8","ro","ro.utf_8","ru","ru.utf_8","sk","sk.utf_8","sl","sl.utf_8","sv","sv.utf_8","tr","tr.utf_8","utf8mb4","zh","zh.gbk","zh.gbk.utf_8","zh.utf_8","zh_tw","zh_tw.big5","zh_tw.big5.utf_8","zh_tw.utf_8"]. Language encoding setting for volume. If no language is specified, the volume inherits its SVM language encoding setting.`

	var flagLanguageName string
	if cmdPrefix == "" {
		flagLanguageName = "language"
	} else {
		flagLanguageName = fmt.Sprintf("%v.language", cmdPrefix)
	}

	var flagLanguageDefault string

	_ = cmd.PersistentFlags().String(flagLanguageName, flagLanguageDefault, flagLanguageDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagLanguageName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ar","ar.utf_8","c","c.utf_8","cs","cs.utf_8","da","da.utf_8","de","de.utf_8","en","en.utf_8","en_us","en_us.utf_8","es","es.utf_8","fi","fi.utf_8","fr","fr.utf_8","he","he.utf_8","hr","hr.utf_8","hu","hu.utf_8","it","it.utf_8","ja","ja.utf_8","ja_jp.932","ja_jp.932.utf_8","ja_jp.pck","ja_jp.pck.utf_8","ja_jp.pck_v2","ja_jp.pck_v2.utf_8","ja_v1","ja_v1.utf_8","ko","ko.utf_8","nl","nl.utf_8","no","no.utf_8","pl","pl.utf_8","pt","pt.utf_8","ro","ro.utf_8","ru","ru.utf_8","sk","sk.utf_8","sl","sl.utf_8","sv","sv.utf_8","tr","tr.utf_8","utf8mb4","zh","zh.gbk","zh.gbk.utf_8","zh.utf_8","zh_tw","zh_tw.big5","zh_tw.big5.utf_8","zh_tw.utf_8"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumePropMaxDirSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMaxDirSizeDescription := `Maximum directory size. This value sets maximum size, in bytes, to which a directory can grow. The default maximum directory size for FlexVol volumes is model-dependent, and optimized for the size of system memory. Before increasing the maximum directory size, involve technical support.`

	var flagMaxDirSizeName string
	if cmdPrefix == "" {
		flagMaxDirSizeName = "max_dir_size"
	} else {
		flagMaxDirSizeName = fmt.Sprintf("%v.max_dir_size", cmdPrefix)
	}

	var flagMaxDirSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagMaxDirSizeName, flagMaxDirSizeDefault, flagMaxDirSizeDescription)

	return nil
}

func registerVolumePropMetric(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagMetricName string
	if cmdPrefix == "" {
		flagMetricName = "metric"
	} else {
		flagMetricName = fmt.Sprintf("%v.metric", cmdPrefix)
	}

	if err := registerModelVolumeInlineMetricFlags(depth+1, flagMetricName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropMovement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagMovementName string
	if cmdPrefix == "" {
		flagMovementName = "movement"
	} else {
		flagMovementName = fmt.Sprintf("%v.movement", cmdPrefix)
	}

	if err := registerModelVolumeInlineMovementFlags(depth+1, flagMovementName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropMsid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMsidDescription := `The volume's Master Set ID.`

	var flagMsidName string
	if cmdPrefix == "" {
		flagMsidName = "msid"
	} else {
		flagMsidName = fmt.Sprintf("%v.msid", cmdPrefix)
	}

	var flagMsidDefault int64

	_ = cmd.PersistentFlags().Int64(flagMsidName, flagMsidDefault, flagMsidDescription)

	return nil
}

func registerVolumePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `Volume name. The name of volume must start with an alphabetic character (a to z or A to Z) or an underscore (_). The name must be 197 or fewer characters in length for FlexGroup volumes, and 203 or fewer characters in length for all other types of volumes. Volume names must be unique within an SVM. Required on POST.`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumePropNas(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagNasName string
	if cmdPrefix == "" {
		flagNasName = "nas"
	} else {
		flagNasName = fmt.Sprintf("%v.nas", cmdPrefix)
	}

	if err := registerModelVolumeInlineNasFlags(depth+1, flagNasName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropOptimizeAggregates(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOptimizeAggregatesDescription := `Specifies whether to create the constituents of the FlexGroup volume on the aggregates specified in the order they are specified, or whether the system should optimize the ordering of the aggregates. If this value is 'true', the system optimizes the ordering of the aggregates specified. If this value is false, the order of the aggregates is unchanged. The default value is 'false'.`

	var flagOptimizeAggregatesName string
	if cmdPrefix == "" {
		flagOptimizeAggregatesName = "optimize_aggregates"
	} else {
		flagOptimizeAggregatesName = fmt.Sprintf("%v.optimize_aggregates", cmdPrefix)
	}

	var flagOptimizeAggregatesDefault bool

	_ = cmd.PersistentFlags().Bool(flagOptimizeAggregatesName, flagOptimizeAggregatesDefault, flagOptimizeAggregatesDescription)

	return nil
}

func registerVolumePropQos(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagQosName string
	if cmdPrefix == "" {
		flagQosName = "qos"
	} else {
		flagQosName = fmt.Sprintf("%v.qos", cmdPrefix)
	}

	if err := registerModelVolumeInlineQosFlags(depth+1, flagQosName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropQueueForEncryption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagQueueForEncryptionDescription := `Specifies whether the volume is queued for encryption.`

	var flagQueueForEncryptionName string
	if cmdPrefix == "" {
		flagQueueForEncryptionName = "queue_for_encryption"
	} else {
		flagQueueForEncryptionName = fmt.Sprintf("%v.queue_for_encryption", cmdPrefix)
	}

	var flagQueueForEncryptionDefault bool

	_ = cmd.PersistentFlags().Bool(flagQueueForEncryptionName, flagQueueForEncryptionDefault, flagQueueForEncryptionDescription)

	return nil
}

func registerVolumePropQuota(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagQuotaName string
	if cmdPrefix == "" {
		flagQuotaName = "quota"
	} else {
		flagQuotaName = fmt.Sprintf("%v.quota", cmdPrefix)
	}

	if err := registerModelVolumeInlineQuotaFlags(depth+1, flagQuotaName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropRebalancing(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagRebalancingName string
	if cmdPrefix == "" {
		flagRebalancingName = "rebalancing"
	} else {
		flagRebalancingName = fmt.Sprintf("%v.rebalancing", cmdPrefix)
	}

	if err := registerModelVolumeInlineRebalancingFlags(depth+1, flagRebalancingName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropScheduledSnapshotNamingScheme(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagScheduledSnapshotNamingSchemeDescription := `Enum: ["create_time","ordinal"]. Naming Scheme for automatic snapshots:
* create_time - Automatic snapshots are saved as per the start of their current date and time.
* ordinal - Latest automatic snapshot copy is saved as <scheduled_frequency>.0 and subsequent copies will follow the create_time naming convention.
`

	var flagScheduledSnapshotNamingSchemeName string
	if cmdPrefix == "" {
		flagScheduledSnapshotNamingSchemeName = "scheduled_snapshot_naming_scheme"
	} else {
		flagScheduledSnapshotNamingSchemeName = fmt.Sprintf("%v.scheduled_snapshot_naming_scheme", cmdPrefix)
	}

	var flagScheduledSnapshotNamingSchemeDefault string = "create_time"

	_ = cmd.PersistentFlags().String(flagScheduledSnapshotNamingSchemeName, flagScheduledSnapshotNamingSchemeDefault, flagScheduledSnapshotNamingSchemeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagScheduledSnapshotNamingSchemeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["create_time","ordinal"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumePropSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSizeDescription := `Physical size of the volume, in bytes. The minimum size for a FlexVol volume is 20MB and the minimum size for a FlexGroup volume is 200MB per constituent. The recommended size for a FlexGroup volume is a minimum of 100GB per constituent. For all volumes, the default size is equal to the minimum size.`

	var flagSizeName string
	if cmdPrefix == "" {
		flagSizeName = "size"
	} else {
		flagSizeName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var flagSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagSizeName, flagSizeDefault, flagSizeDescription)

	return nil
}

func registerVolumePropSnaplock(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSnaplockName string
	if cmdPrefix == "" {
		flagSnaplockName = "snaplock"
	} else {
		flagSnaplockName = fmt.Sprintf("%v.snaplock", cmdPrefix)
	}

	if err := registerModelVolumeInlineSnaplockFlags(depth+1, flagSnaplockName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropSnapmirror(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSnapmirrorName string
	if cmdPrefix == "" {
		flagSnapmirrorName = "snapmirror"
	} else {
		flagSnapmirrorName = fmt.Sprintf("%v.snapmirror", cmdPrefix)
	}

	if err := registerModelVolumeInlineSnapmirrorFlags(depth+1, flagSnapmirrorName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropSnapshotCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSnapshotCountDescription := `Number of snapshots in the volume.`

	var flagSnapshotCountName string
	if cmdPrefix == "" {
		flagSnapshotCountName = "snapshot_count"
	} else {
		flagSnapshotCountName = fmt.Sprintf("%v.snapshot_count", cmdPrefix)
	}

	var flagSnapshotCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagSnapshotCountName, flagSnapshotCountDefault, flagSnapshotCountDescription)

	return nil
}

func registerVolumePropSnapshotDirectoryAccessEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSnapshotDirectoryAccessEnabledDescription := `This field, if true, enables the visible ".snapshot" directory from the client. The ".snapshot" directory will be available in every directory on the volume.`

	var flagSnapshotDirectoryAccessEnabledName string
	if cmdPrefix == "" {
		flagSnapshotDirectoryAccessEnabledName = "snapshot_directory_access_enabled"
	} else {
		flagSnapshotDirectoryAccessEnabledName = fmt.Sprintf("%v.snapshot_directory_access_enabled", cmdPrefix)
	}

	var flagSnapshotDirectoryAccessEnabledDefault bool = true

	_ = cmd.PersistentFlags().Bool(flagSnapshotDirectoryAccessEnabledName, flagSnapshotDirectoryAccessEnabledDefault, flagSnapshotDirectoryAccessEnabledDescription)

	return nil
}

func registerVolumePropSnapshotLockingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSnapshotLockingEnabledDescription := `Specifies whether or not snapshot copy locking is enabled on the volume.`

	var flagSnapshotLockingEnabledName string
	if cmdPrefix == "" {
		flagSnapshotLockingEnabledName = "snapshot_locking_enabled"
	} else {
		flagSnapshotLockingEnabledName = fmt.Sprintf("%v.snapshot_locking_enabled", cmdPrefix)
	}

	var flagSnapshotLockingEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagSnapshotLockingEnabledName, flagSnapshotLockingEnabledDefault, flagSnapshotLockingEnabledDescription)

	return nil
}

func registerVolumePropSnapshotPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSnapshotPolicyName string
	if cmdPrefix == "" {
		flagSnapshotPolicyName = "snapshot_policy"
	} else {
		flagSnapshotPolicyName = fmt.Sprintf("%v.snapshot_policy", cmdPrefix)
	}

	if err := registerModelVolumeInlineSnapshotPolicyFlags(depth+1, flagSnapshotPolicyName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropSpace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSpaceName string
	if cmdPrefix == "" {
		flagSpaceName = "space"
	} else {
		flagSpaceName = fmt.Sprintf("%v.space", cmdPrefix)
	}

	if err := registerModelVolumeInlineSpaceFlags(depth+1, flagSpaceName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := `Enum: ["error","mixed","offline","online","restricted"]. Volume state. Client access is supported only when volume is online and junctioned. Taking volume to offline or restricted state removes its junction path and blocks client access. When volume is in restricted state some operations like parity reconstruction and iron on commit are allowed. The 'mixed' state applies to FlexGroup volumes only and cannot be specified as a target state. An 'error' state implies that the volume is not in a state to serve data.`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["error","mixed","offline","online","restricted"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumePropStatistics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagStatisticsName string
	if cmdPrefix == "" {
		flagStatisticsName = "statistics"
	} else {
		flagStatisticsName = fmt.Sprintf("%v.statistics", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsFlags(depth+1, flagStatisticsName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropStyle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStyleDescription := `Enum: ["flexvol","flexgroup","flexgroup_constituent"]. The style of the volume. If "style" is not specified, the volume type is determined based on the specified aggregates or license. Specifying a single aggregate, without "constituents_per_aggregate", creates a flexible volume. Specifying multiple aggregates, or a single aggregate with "constituents_per_aggregate", creates a FlexGroup volume. When the UDO License is installed, and no aggregates are specified, the system automatically provisions a FlexGroup volume on system selected aggregates. Specifying a volume "style" creates a volume of that type. For example, if the style is "flexvol", you must specify a single aggregate. If the style is "flexgroup", the system either uses the specified aggregates or automatically provisions aggregates if there are no specified aggregates. The style "flexgroup_constituent" is not supported when creating a volume.<br>flexvol &dash; flexible volumes and FlexClone volumes<br>flexgroup &dash; FlexGroup volumes<br>flexgroup_constituent &dash; FlexGroup volume constituents.`

	var flagStyleName string
	if cmdPrefix == "" {
		flagStyleName = "style"
	} else {
		flagStyleName = fmt.Sprintf("%v.style", cmdPrefix)
	}

	var flagStyleDefault string

	_ = cmd.PersistentFlags().String(flagStyleName, flagStyleDefault, flagStyleDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStyleName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["flexvol","flexgroup","flexgroup_constituent"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumePropSvm(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSvmName string
	if cmdPrefix == "" {
		flagSvmName = "svm"
	} else {
		flagSvmName = fmt.Sprintf("%v.svm", cmdPrefix)
	}

	if err := registerModelVolumeInlineSvmFlags(depth+1, flagSvmName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropTiering(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagTieringName string
	if cmdPrefix == "" {
		flagTieringName = "tiering"
	} else {
		flagTieringName = fmt.Sprintf("%v.tiering", cmdPrefix)
	}

	if err := registerModelVolumeInlineTieringFlags(depth+1, flagTieringName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumePropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTypeDescription := `Enum: ["rw","dp","ls"]. Type of the volume.<br>rw &dash; read-write volume.<br>dp &dash; data-protection volume.<br>ls &dash; load-sharing ` + "`" + `dp` + "`" + ` volume. Valid in GET.`

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string = "rw"

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagTypeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["rw","dp","ls"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumePropUseMirroredAggregates(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUseMirroredAggregatesDescription := `Specifies whether mirrored aggregates are selected when provisioning a FlexGroup without specifying "aggregates.name" or "aggregates.uuid". Only mirrored aggregates are used if this parameter is set to 'true' and only unmirrored aggregates are used if this parameter is set to 'false'. Aggregate level mirroring for a FlexGroup volume can be changed by moving all of the constituents to the required aggregates. The default value is 'true' for a MetroCluster configuration and is 'false' for a non-MetroCluster configuration.`

	var flagUseMirroredAggregatesName string
	if cmdPrefix == "" {
		flagUseMirroredAggregatesName = "use_mirrored_aggregates"
	} else {
		flagUseMirroredAggregatesName = fmt.Sprintf("%v.use_mirrored_aggregates", cmdPrefix)
	}

	var flagUseMirroredAggregatesDefault bool

	_ = cmd.PersistentFlags().Bool(flagUseMirroredAggregatesName, flagUseMirroredAggregatesDefault, flagUseMirroredAggregatesDescription)

	return nil
}

func registerVolumePropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := `Unique identifier for the volume. This corresponds to the instance-uuid that is exposed in the CLI and ONTAPI. It does not change due to a volume move.`

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

func registerVolumePropValidateOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagValidateOnlyDescription := `Validate the volume move or volume conversion operations and their parameters, without actually performing the operation.`

	var flagValidateOnlyName string
	if cmdPrefix == "" {
		flagValidateOnlyName = "validate_only"
	} else {
		flagValidateOnlyName = fmt.Sprintf("%v.validate_only", cmdPrefix)
	}

	var flagValidateOnlyDefault bool

	_ = cmd.PersistentFlags().Bool(flagValidateOnlyName, flagValidateOnlyDefault, flagValidateOnlyDescription)

	return nil
}

func registerVolumePropVolumeInlineTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_inline__tags []*string array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumePropVolumeInlineAggregates(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_inline_aggregates []*VolumeInlineAggregatesInlineArrayItem array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumePropVolumeInlineConstituents(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_inline_constituents []*VolumeInlineConstituentsInlineArrayItem array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumePropVolumeInlineStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_inline_status []*string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumePropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, AccessTimeEnabledAdded := retrieveVolumePropAccessTimeEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AccessTimeEnabledAdded

	err, ActivityTrackingAdded := retrieveVolumePropActivityTrackingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ActivityTrackingAdded

	err, AggressiveReadaheadModeAdded := retrieveVolumePropAggressiveReadaheadModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AggressiveReadaheadModeAdded

	err, AnalyticsAdded := retrieveVolumePropAnalyticsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AnalyticsAdded

	err, AntiRansomwareAdded := retrieveVolumePropAntiRansomwareFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AntiRansomwareAdded

	err, ApplicationAdded := retrieveVolumePropApplicationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ApplicationAdded

	err, AsynchronousDirectoryDeleteAdded := retrieveVolumePropAsynchronousDirectoryDeleteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AsynchronousDirectoryDeleteAdded

	err, AutosizeAdded := retrieveVolumePropAutosizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AutosizeAdded

	err, CloneAdded := retrieveVolumePropCloneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CloneAdded

	err, CloudRetrievalPolicyAdded := retrieveVolumePropCloudRetrievalPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CloudRetrievalPolicyAdded

	err, CloudWriteEnabledAdded := retrieveVolumePropCloudWriteEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CloudWriteEnabledAdded

	err, CommentAdded := retrieveVolumePropCommentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CommentAdded

	err, ConsistencyGroupAdded := retrieveVolumePropConsistencyGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConsistencyGroupAdded

	err, ConstituentsPerAggregateAdded := retrieveVolumePropConstituentsPerAggregateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConstituentsPerAggregateAdded

	err, ConvertUnicodeAdded := retrieveVolumePropConvertUnicodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConvertUnicodeAdded

	err, CreateTimeAdded := retrieveVolumePropCreateTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreateTimeAdded

	err, EfficiencyAdded := retrieveVolumePropEfficiencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EfficiencyAdded

	err, EncryptionAdded := retrieveVolumePropEncryptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EncryptionAdded

	err, ErrorStateAdded := retrieveVolumePropErrorStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorStateAdded

	err, FilesAdded := retrieveVolumePropFilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FilesAdded

	err, FlashPoolAdded := retrieveVolumePropFlashPoolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FlashPoolAdded

	err, FlexcacheEndpointTypeAdded := retrieveVolumePropFlexcacheEndpointTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FlexcacheEndpointTypeAdded

	err, FlexgroupAdded := retrieveVolumePropFlexgroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FlexgroupAdded

	err, GranularDataAdded := retrieveVolumePropGranularDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GranularDataAdded

	err, GranularDataModeAdded := retrieveVolumePropGranularDataModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GranularDataModeAdded

	err, GuaranteeAdded := retrieveVolumePropGuaranteeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GuaranteeAdded

	err, IsObjectStoreAdded := retrieveVolumePropIsObjectStoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsObjectStoreAdded

	err, IsSvmRootAdded := retrieveVolumePropIsSvmRootFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsSvmRootAdded

	err, LanguageAdded := retrieveVolumePropLanguageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LanguageAdded

	err, MaxDirSizeAdded := retrieveVolumePropMaxDirSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxDirSizeAdded

	err, MetricAdded := retrieveVolumePropMetricFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MetricAdded

	err, MovementAdded := retrieveVolumePropMovementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MovementAdded

	err, MsidAdded := retrieveVolumePropMsidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MsidAdded

	err, NameAdded := retrieveVolumePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, NasAdded := retrieveVolumePropNasFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NasAdded

	err, OptimizeAggregatesAdded := retrieveVolumePropOptimizeAggregatesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OptimizeAggregatesAdded

	err, QosAdded := retrieveVolumePropQosFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || QosAdded

	err, QueueForEncryptionAdded := retrieveVolumePropQueueForEncryptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || QueueForEncryptionAdded

	err, QuotaAdded := retrieveVolumePropQuotaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || QuotaAdded

	err, RebalancingAdded := retrieveVolumePropRebalancingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RebalancingAdded

	err, ScheduledSnapshotNamingSchemeAdded := retrieveVolumePropScheduledSnapshotNamingSchemeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScheduledSnapshotNamingSchemeAdded

	err, SizeAdded := retrieveVolumePropSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeAdded

	err, SnaplockAdded := retrieveVolumePropSnaplockFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnaplockAdded

	err, SnapmirrorAdded := retrieveVolumePropSnapmirrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapmirrorAdded

	err, SnapshotCountAdded := retrieveVolumePropSnapshotCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotCountAdded

	err, SnapshotDirectoryAccessEnabledAdded := retrieveVolumePropSnapshotDirectoryAccessEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotDirectoryAccessEnabledAdded

	err, SnapshotLockingEnabledAdded := retrieveVolumePropSnapshotLockingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotLockingEnabledAdded

	err, SnapshotPolicyAdded := retrieveVolumePropSnapshotPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotPolicyAdded

	err, SpaceAdded := retrieveVolumePropSpaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceAdded

	err, StateAdded := retrieveVolumePropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, StatisticsAdded := retrieveVolumePropStatisticsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatisticsAdded

	err, StyleAdded := retrieveVolumePropStyleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StyleAdded

	err, SvmAdded := retrieveVolumePropSvmFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SvmAdded

	err, TieringAdded := retrieveVolumePropTieringFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TieringAdded

	err, TypeAdded := retrieveVolumePropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	err, UseMirroredAggregatesAdded := retrieveVolumePropUseMirroredAggregatesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UseMirroredAggregatesAdded

	err, UUIDAdded := retrieveVolumePropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	err, ValidateOnlyAdded := retrieveVolumePropValidateOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ValidateOnlyAdded

	err, VolumeInlineTagsAdded := retrieveVolumePropVolumeInlineTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeInlineTagsAdded

	err, VolumeInlineAggregatesAdded := retrieveVolumePropVolumeInlineAggregatesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeInlineAggregatesAdded

	err, VolumeInlineConstituentsAdded := retrieveVolumePropVolumeInlineConstituentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeInlineConstituentsAdded

	err, VolumeInlineStatusAdded := retrieveVolumePropVolumeInlineStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeInlineStatusAdded

	return nil, retAdded
}

func retrieveVolumePropLinksFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumePropAccessTimeEnabledFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAccessTimeEnabledName := fmt.Sprintf("%v.access_time_enabled", cmdPrefix)
	if cmd.Flags().Changed(flagAccessTimeEnabledName) {

		var flagAccessTimeEnabledName string
		if cmdPrefix == "" {
			flagAccessTimeEnabledName = "access_time_enabled"
		} else {
			flagAccessTimeEnabledName = fmt.Sprintf("%v.access_time_enabled", cmdPrefix)
		}

		flagAccessTimeEnabledValue, err := cmd.Flags().GetBool(flagAccessTimeEnabledName)
		if err != nil {
			return err, false
		}
		m.AccessTimeEnabled = &flagAccessTimeEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropActivityTrackingFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagActivityTrackingName := fmt.Sprintf("%v.activity_tracking", cmdPrefix)
	if cmd.Flags().Changed(flagActivityTrackingName) {
		// info: complex object activity_tracking VolumeInlineActivityTracking is retrieved outside this Changed() block
	}
	flagActivityTrackingValue := m.ActivityTracking
	if swag.IsZero(flagActivityTrackingValue) {
		flagActivityTrackingValue = &models.VolumeInlineActivityTracking{}
	}

	err, ActivityTrackingAdded := retrieveModelVolumeInlineActivityTrackingFlags(depth+1, flagActivityTrackingValue, flagActivityTrackingName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ActivityTrackingAdded
	if ActivityTrackingAdded {
		m.ActivityTracking = flagActivityTrackingValue
	}

	return nil, retAdded
}

func retrieveVolumePropAggressiveReadaheadModeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAggressiveReadaheadModeName := fmt.Sprintf("%v.aggressive_readahead_mode", cmdPrefix)
	if cmd.Flags().Changed(flagAggressiveReadaheadModeName) {

		var flagAggressiveReadaheadModeName string
		if cmdPrefix == "" {
			flagAggressiveReadaheadModeName = "aggressive_readahead_mode"
		} else {
			flagAggressiveReadaheadModeName = fmt.Sprintf("%v.aggressive_readahead_mode", cmdPrefix)
		}

		flagAggressiveReadaheadModeValue, err := cmd.Flags().GetString(flagAggressiveReadaheadModeName)
		if err != nil {
			return err, false
		}
		m.AggressiveReadaheadMode = &flagAggressiveReadaheadModeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropAnalyticsFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAnalyticsName := fmt.Sprintf("%v.analytics", cmdPrefix)
	if cmd.Flags().Changed(flagAnalyticsName) {
		// info: complex object analytics VolumeInlineAnalytics is retrieved outside this Changed() block
	}
	flagAnalyticsValue := m.Analytics
	if swag.IsZero(flagAnalyticsValue) {
		flagAnalyticsValue = &models.VolumeInlineAnalytics{}
	}

	err, AnalyticsAdded := retrieveModelVolumeInlineAnalyticsFlags(depth+1, flagAnalyticsValue, flagAnalyticsName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AnalyticsAdded
	if AnalyticsAdded {
		m.Analytics = flagAnalyticsValue
	}

	return nil, retAdded
}

func retrieveVolumePropAntiRansomwareFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAntiRansomwareName := fmt.Sprintf("%v.anti_ransomware", cmdPrefix)
	if cmd.Flags().Changed(flagAntiRansomwareName) {
		// info: complex object anti_ransomware VolumeInlineAntiRansomware is retrieved outside this Changed() block
	}
	flagAntiRansomwareValue := m.AntiRansomware
	if swag.IsZero(flagAntiRansomwareValue) {
		flagAntiRansomwareValue = &models.VolumeInlineAntiRansomware{}
	}

	err, AntiRansomwareAdded := retrieveModelVolumeInlineAntiRansomwareFlags(depth+1, flagAntiRansomwareValue, flagAntiRansomwareName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AntiRansomwareAdded
	if AntiRansomwareAdded {
		m.AntiRansomware = flagAntiRansomwareValue
	}

	return nil, retAdded
}

func retrieveVolumePropApplicationFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagApplicationName := fmt.Sprintf("%v.application", cmdPrefix)
	if cmd.Flags().Changed(flagApplicationName) {
		// info: complex object application VolumeInlineApplication is retrieved outside this Changed() block
	}
	flagApplicationValue := m.Application
	if swag.IsZero(flagApplicationValue) {
		flagApplicationValue = &models.VolumeInlineApplication{}
	}

	err, ApplicationAdded := retrieveModelVolumeInlineApplicationFlags(depth+1, flagApplicationValue, flagApplicationName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ApplicationAdded
	if ApplicationAdded {
		m.Application = flagApplicationValue
	}

	return nil, retAdded
}

func retrieveVolumePropAsynchronousDirectoryDeleteFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAsynchronousDirectoryDeleteName := fmt.Sprintf("%v.asynchronous_directory_delete", cmdPrefix)
	if cmd.Flags().Changed(flagAsynchronousDirectoryDeleteName) {
		// info: complex object asynchronous_directory_delete VolumeInlineAsynchronousDirectoryDelete is retrieved outside this Changed() block
	}
	flagAsynchronousDirectoryDeleteValue := m.AsynchronousDirectoryDelete
	if swag.IsZero(flagAsynchronousDirectoryDeleteValue) {
		flagAsynchronousDirectoryDeleteValue = &models.VolumeInlineAsynchronousDirectoryDelete{}
	}

	err, AsynchronousDirectoryDeleteAdded := retrieveModelVolumeInlineAsynchronousDirectoryDeleteFlags(depth+1, flagAsynchronousDirectoryDeleteValue, flagAsynchronousDirectoryDeleteName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AsynchronousDirectoryDeleteAdded
	if AsynchronousDirectoryDeleteAdded {
		m.AsynchronousDirectoryDelete = flagAsynchronousDirectoryDeleteValue
	}

	return nil, retAdded
}

func retrieveVolumePropAutosizeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAutosizeName := fmt.Sprintf("%v.autosize", cmdPrefix)
	if cmd.Flags().Changed(flagAutosizeName) {
		// info: complex object autosize VolumeInlineAutosize is retrieved outside this Changed() block
	}
	flagAutosizeValue := m.Autosize
	if swag.IsZero(flagAutosizeValue) {
		flagAutosizeValue = &models.VolumeInlineAutosize{}
	}

	err, AutosizeAdded := retrieveModelVolumeInlineAutosizeFlags(depth+1, flagAutosizeValue, flagAutosizeName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AutosizeAdded
	if AutosizeAdded {
		m.Autosize = flagAutosizeValue
	}

	return nil, retAdded
}

func retrieveVolumePropCloneFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCloneName := fmt.Sprintf("%v.clone", cmdPrefix)
	if cmd.Flags().Changed(flagCloneName) {
		// info: complex object clone VolumeInlineClone is retrieved outside this Changed() block
	}
	flagCloneValue := m.Clone
	if swag.IsZero(flagCloneValue) {
		flagCloneValue = &models.VolumeInlineClone{}
	}

	err, CloneAdded := retrieveModelVolumeInlineCloneFlags(depth+1, flagCloneValue, flagCloneName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CloneAdded
	if CloneAdded {
		m.Clone = flagCloneValue
	}

	return nil, retAdded
}

func retrieveVolumePropCloudRetrievalPolicyFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCloudRetrievalPolicyName := fmt.Sprintf("%v.cloud_retrieval_policy", cmdPrefix)
	if cmd.Flags().Changed(flagCloudRetrievalPolicyName) {

		var flagCloudRetrievalPolicyName string
		if cmdPrefix == "" {
			flagCloudRetrievalPolicyName = "cloud_retrieval_policy"
		} else {
			flagCloudRetrievalPolicyName = fmt.Sprintf("%v.cloud_retrieval_policy", cmdPrefix)
		}

		flagCloudRetrievalPolicyValue, err := cmd.Flags().GetString(flagCloudRetrievalPolicyName)
		if err != nil {
			return err, false
		}
		m.CloudRetrievalPolicy = &flagCloudRetrievalPolicyValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropCloudWriteEnabledFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCloudWriteEnabledName := fmt.Sprintf("%v.cloud_write_enabled", cmdPrefix)
	if cmd.Flags().Changed(flagCloudWriteEnabledName) {

		var flagCloudWriteEnabledName string
		if cmdPrefix == "" {
			flagCloudWriteEnabledName = "cloud_write_enabled"
		} else {
			flagCloudWriteEnabledName = fmt.Sprintf("%v.cloud_write_enabled", cmdPrefix)
		}

		flagCloudWriteEnabledValue, err := cmd.Flags().GetBool(flagCloudWriteEnabledName)
		if err != nil {
			return err, false
		}
		m.CloudWriteEnabled = &flagCloudWriteEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropCommentFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCommentName := fmt.Sprintf("%v.comment", cmdPrefix)
	if cmd.Flags().Changed(flagCommentName) {

		var flagCommentName string
		if cmdPrefix == "" {
			flagCommentName = "comment"
		} else {
			flagCommentName = fmt.Sprintf("%v.comment", cmdPrefix)
		}

		flagCommentValue, err := cmd.Flags().GetString(flagCommentName)
		if err != nil {
			return err, false
		}
		m.Comment = &flagCommentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropConsistencyGroupFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagConsistencyGroupName := fmt.Sprintf("%v.consistency_group", cmdPrefix)
	if cmd.Flags().Changed(flagConsistencyGroupName) {
		// info: complex object consistency_group VolumeInlineConsistencyGroup is retrieved outside this Changed() block
	}
	flagConsistencyGroupValue := m.ConsistencyGroup
	if swag.IsZero(flagConsistencyGroupValue) {
		flagConsistencyGroupValue = &models.VolumeInlineConsistencyGroup{}
	}

	err, ConsistencyGroupAdded := retrieveModelVolumeInlineConsistencyGroupFlags(depth+1, flagConsistencyGroupValue, flagConsistencyGroupName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConsistencyGroupAdded
	if ConsistencyGroupAdded {
		m.ConsistencyGroup = flagConsistencyGroupValue
	}

	return nil, retAdded
}

func retrieveVolumePropConstituentsPerAggregateFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagConstituentsPerAggregateName := fmt.Sprintf("%v.constituents_per_aggregate", cmdPrefix)
	if cmd.Flags().Changed(flagConstituentsPerAggregateName) {

		var flagConstituentsPerAggregateName string
		if cmdPrefix == "" {
			flagConstituentsPerAggregateName = "constituents_per_aggregate"
		} else {
			flagConstituentsPerAggregateName = fmt.Sprintf("%v.constituents_per_aggregate", cmdPrefix)
		}

		flagConstituentsPerAggregateValue, err := cmd.Flags().GetInt64(flagConstituentsPerAggregateName)
		if err != nil {
			return err, false
		}
		m.ConstituentsPerAggregate = &flagConstituentsPerAggregateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropConvertUnicodeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagConvertUnicodeName := fmt.Sprintf("%v.convert_unicode", cmdPrefix)
	if cmd.Flags().Changed(flagConvertUnicodeName) {

		var flagConvertUnicodeName string
		if cmdPrefix == "" {
			flagConvertUnicodeName = "convert_unicode"
		} else {
			flagConvertUnicodeName = fmt.Sprintf("%v.convert_unicode", cmdPrefix)
		}

		flagConvertUnicodeValue, err := cmd.Flags().GetBool(flagConvertUnicodeName)
		if err != nil {
			return err, false
		}
		m.ConvertUnicode = &flagConvertUnicodeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropCreateTimeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCreateTimeName := fmt.Sprintf("%v.create_time", cmdPrefix)
	if cmd.Flags().Changed(flagCreateTimeName) {

		var flagCreateTimeName string
		if cmdPrefix == "" {
			flagCreateTimeName = "create_time"
		} else {
			flagCreateTimeName = fmt.Sprintf("%v.create_time", cmdPrefix)
		}

		flagCreateTimeValueStr, err := cmd.Flags().GetString(flagCreateTimeName)
		if err != nil {
			return err, false
		}
		var flagCreateTimeValue strfmt.DateTime
		if err := flagCreateTimeValue.UnmarshalText([]byte(flagCreateTimeValueStr)); err != nil {
			return err, false
		}
		m.CreateTime = &flagCreateTimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropEfficiencyFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEfficiencyName := fmt.Sprintf("%v.efficiency", cmdPrefix)
	if cmd.Flags().Changed(flagEfficiencyName) {
		// info: complex object efficiency VolumeInlineEfficiency is retrieved outside this Changed() block
	}
	flagEfficiencyValue := m.Efficiency
	if swag.IsZero(flagEfficiencyValue) {
		flagEfficiencyValue = &models.VolumeInlineEfficiency{}
	}

	err, EfficiencyAdded := retrieveModelVolumeInlineEfficiencyFlags(depth+1, flagEfficiencyValue, flagEfficiencyName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EfficiencyAdded
	if EfficiencyAdded {
		m.Efficiency = flagEfficiencyValue
	}

	return nil, retAdded
}

func retrieveVolumePropEncryptionFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEncryptionName := fmt.Sprintf("%v.encryption", cmdPrefix)
	if cmd.Flags().Changed(flagEncryptionName) {
		// info: complex object encryption VolumeInlineEncryption is retrieved outside this Changed() block
	}
	flagEncryptionValue := m.Encryption
	if swag.IsZero(flagEncryptionValue) {
		flagEncryptionValue = &models.VolumeInlineEncryption{}
	}

	err, EncryptionAdded := retrieveModelVolumeInlineEncryptionFlags(depth+1, flagEncryptionValue, flagEncryptionName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EncryptionAdded
	if EncryptionAdded {
		m.Encryption = flagEncryptionValue
	}

	return nil, retAdded
}

func retrieveVolumePropErrorStateFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagErrorStateName := fmt.Sprintf("%v.error_state", cmdPrefix)
	if cmd.Flags().Changed(flagErrorStateName) {
		// info: complex object error_state VolumeInlineErrorState is retrieved outside this Changed() block
	}
	flagErrorStateValue := m.ErrorState
	if swag.IsZero(flagErrorStateValue) {
		flagErrorStateValue = &models.VolumeInlineErrorState{}
	}

	err, ErrorStateAdded := retrieveModelVolumeInlineErrorStateFlags(depth+1, flagErrorStateValue, flagErrorStateName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorStateAdded
	if ErrorStateAdded {
		m.ErrorState = flagErrorStateValue
	}

	return nil, retAdded
}

func retrieveVolumePropFilesFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFilesName := fmt.Sprintf("%v.files", cmdPrefix)
	if cmd.Flags().Changed(flagFilesName) {
		// info: complex object files VolumeInlineFiles is retrieved outside this Changed() block
	}
	flagFilesValue := m.Files
	if swag.IsZero(flagFilesValue) {
		flagFilesValue = &models.VolumeInlineFiles{}
	}

	err, FilesAdded := retrieveModelVolumeInlineFilesFlags(depth+1, flagFilesValue, flagFilesName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FilesAdded
	if FilesAdded {
		m.Files = flagFilesValue
	}

	return nil, retAdded
}

func retrieveVolumePropFlashPoolFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFlashPoolName := fmt.Sprintf("%v.flash_pool", cmdPrefix)
	if cmd.Flags().Changed(flagFlashPoolName) {
		// info: complex object flash_pool VolumeInlineFlashPool is retrieved outside this Changed() block
	}
	flagFlashPoolValue := m.FlashPool
	if swag.IsZero(flagFlashPoolValue) {
		flagFlashPoolValue = &models.VolumeInlineFlashPool{}
	}

	err, FlashPoolAdded := retrieveModelVolumeInlineFlashPoolFlags(depth+1, flagFlashPoolValue, flagFlashPoolName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FlashPoolAdded
	if FlashPoolAdded {
		m.FlashPool = flagFlashPoolValue
	}

	return nil, retAdded
}

func retrieveVolumePropFlexcacheEndpointTypeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFlexcacheEndpointTypeName := fmt.Sprintf("%v.flexcache_endpoint_type", cmdPrefix)
	if cmd.Flags().Changed(flagFlexcacheEndpointTypeName) {

		var flagFlexcacheEndpointTypeName string
		if cmdPrefix == "" {
			flagFlexcacheEndpointTypeName = "flexcache_endpoint_type"
		} else {
			flagFlexcacheEndpointTypeName = fmt.Sprintf("%v.flexcache_endpoint_type", cmdPrefix)
		}

		flagFlexcacheEndpointTypeValue, err := cmd.Flags().GetString(flagFlexcacheEndpointTypeName)
		if err != nil {
			return err, false
		}
		m.FlexcacheEndpointType = &flagFlexcacheEndpointTypeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropFlexgroupFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFlexgroupName := fmt.Sprintf("%v.flexgroup", cmdPrefix)
	if cmd.Flags().Changed(flagFlexgroupName) {
		// info: complex object flexgroup VolumeInlineFlexgroup is retrieved outside this Changed() block
	}
	flagFlexgroupValue := m.Flexgroup
	if swag.IsZero(flagFlexgroupValue) {
		flagFlexgroupValue = &models.VolumeInlineFlexgroup{}
	}

	err, FlexgroupAdded := retrieveModelVolumeInlineFlexgroupFlags(depth+1, flagFlexgroupValue, flagFlexgroupName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FlexgroupAdded
	if FlexgroupAdded {
		m.Flexgroup = flagFlexgroupValue
	}

	return nil, retAdded
}

func retrieveVolumePropGranularDataFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagGranularDataName := fmt.Sprintf("%v.granular_data", cmdPrefix)
	if cmd.Flags().Changed(flagGranularDataName) {

		var flagGranularDataName string
		if cmdPrefix == "" {
			flagGranularDataName = "granular_data"
		} else {
			flagGranularDataName = fmt.Sprintf("%v.granular_data", cmdPrefix)
		}

		flagGranularDataValue, err := cmd.Flags().GetBool(flagGranularDataName)
		if err != nil {
			return err, false
		}
		m.GranularData = &flagGranularDataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropGranularDataModeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagGranularDataModeName := fmt.Sprintf("%v.granular_data_mode", cmdPrefix)
	if cmd.Flags().Changed(flagGranularDataModeName) {

		var flagGranularDataModeName string
		if cmdPrefix == "" {
			flagGranularDataModeName = "granular_data_mode"
		} else {
			flagGranularDataModeName = fmt.Sprintf("%v.granular_data_mode", cmdPrefix)
		}

		flagGranularDataModeValue, err := cmd.Flags().GetString(flagGranularDataModeName)
		if err != nil {
			return err, false
		}
		m.GranularDataMode = &flagGranularDataModeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropGuaranteeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagGuaranteeName := fmt.Sprintf("%v.guarantee", cmdPrefix)
	if cmd.Flags().Changed(flagGuaranteeName) {
		// info: complex object guarantee VolumeInlineGuarantee is retrieved outside this Changed() block
	}
	flagGuaranteeValue := m.Guarantee
	if swag.IsZero(flagGuaranteeValue) {
		flagGuaranteeValue = &models.VolumeInlineGuarantee{}
	}

	err, GuaranteeAdded := retrieveModelVolumeInlineGuaranteeFlags(depth+1, flagGuaranteeValue, flagGuaranteeName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GuaranteeAdded
	if GuaranteeAdded {
		m.Guarantee = flagGuaranteeValue
	}

	return nil, retAdded
}

func retrieveVolumePropIsObjectStoreFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsObjectStoreName := fmt.Sprintf("%v.is_object_store", cmdPrefix)
	if cmd.Flags().Changed(flagIsObjectStoreName) {

		var flagIsObjectStoreName string
		if cmdPrefix == "" {
			flagIsObjectStoreName = "is_object_store"
		} else {
			flagIsObjectStoreName = fmt.Sprintf("%v.is_object_store", cmdPrefix)
		}

		flagIsObjectStoreValue, err := cmd.Flags().GetBool(flagIsObjectStoreName)
		if err != nil {
			return err, false
		}
		m.IsObjectStore = &flagIsObjectStoreValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropIsSvmRootFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsSvmRootName := fmt.Sprintf("%v.is_svm_root", cmdPrefix)
	if cmd.Flags().Changed(flagIsSvmRootName) {

		var flagIsSvmRootName string
		if cmdPrefix == "" {
			flagIsSvmRootName = "is_svm_root"
		} else {
			flagIsSvmRootName = fmt.Sprintf("%v.is_svm_root", cmdPrefix)
		}

		flagIsSvmRootValue, err := cmd.Flags().GetBool(flagIsSvmRootName)
		if err != nil {
			return err, false
		}
		m.IsSvmRoot = &flagIsSvmRootValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropLanguageFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLanguageName := fmt.Sprintf("%v.language", cmdPrefix)
	if cmd.Flags().Changed(flagLanguageName) {

		var flagLanguageName string
		if cmdPrefix == "" {
			flagLanguageName = "language"
		} else {
			flagLanguageName = fmt.Sprintf("%v.language", cmdPrefix)
		}

		flagLanguageValue, err := cmd.Flags().GetString(flagLanguageName)
		if err != nil {
			return err, false
		}
		m.Language = &flagLanguageValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropMaxDirSizeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMaxDirSizeName := fmt.Sprintf("%v.max_dir_size", cmdPrefix)
	if cmd.Flags().Changed(flagMaxDirSizeName) {

		var flagMaxDirSizeName string
		if cmdPrefix == "" {
			flagMaxDirSizeName = "max_dir_size"
		} else {
			flagMaxDirSizeName = fmt.Sprintf("%v.max_dir_size", cmdPrefix)
		}

		flagMaxDirSizeValue, err := cmd.Flags().GetInt64(flagMaxDirSizeName)
		if err != nil {
			return err, false
		}
		m.MaxDirSize = &flagMaxDirSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropMetricFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMetricName := fmt.Sprintf("%v.metric", cmdPrefix)
	if cmd.Flags().Changed(flagMetricName) {
		// info: complex object metric VolumeInlineMetric is retrieved outside this Changed() block
	}
	flagMetricValue := m.Metric
	if swag.IsZero(flagMetricValue) {
		flagMetricValue = &models.VolumeInlineMetric{}
	}

	err, MetricAdded := retrieveModelVolumeInlineMetricFlags(depth+1, flagMetricValue, flagMetricName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MetricAdded
	if MetricAdded {
		m.Metric = flagMetricValue
	}

	return nil, retAdded
}

func retrieveVolumePropMovementFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMovementName := fmt.Sprintf("%v.movement", cmdPrefix)
	if cmd.Flags().Changed(flagMovementName) {
		// info: complex object movement VolumeInlineMovement is retrieved outside this Changed() block
	}
	flagMovementValue := m.Movement
	if swag.IsZero(flagMovementValue) {
		flagMovementValue = &models.VolumeInlineMovement{}
	}

	err, MovementAdded := retrieveModelVolumeInlineMovementFlags(depth+1, flagMovementValue, flagMovementName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MovementAdded
	if MovementAdded {
		m.Movement = flagMovementValue
	}

	return nil, retAdded
}

func retrieveVolumePropMsidFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMsidName := fmt.Sprintf("%v.msid", cmdPrefix)
	if cmd.Flags().Changed(flagMsidName) {

		var flagMsidName string
		if cmdPrefix == "" {
			flagMsidName = "msid"
		} else {
			flagMsidName = fmt.Sprintf("%v.msid", cmdPrefix)
		}

		flagMsidValue, err := cmd.Flags().GetInt64(flagMsidName)
		if err != nil {
			return err, false
		}
		m.Msid = &flagMsidValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropNameFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropNasFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNasName := fmt.Sprintf("%v.nas", cmdPrefix)
	if cmd.Flags().Changed(flagNasName) {
		// info: complex object nas VolumeInlineNas is retrieved outside this Changed() block
	}
	flagNasValue := m.Nas
	if swag.IsZero(flagNasValue) {
		flagNasValue = &models.VolumeInlineNas{}
	}

	err, NasAdded := retrieveModelVolumeInlineNasFlags(depth+1, flagNasValue, flagNasName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NasAdded
	if NasAdded {
		m.Nas = flagNasValue
	}

	return nil, retAdded
}

func retrieveVolumePropOptimizeAggregatesFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOptimizeAggregatesName := fmt.Sprintf("%v.optimize_aggregates", cmdPrefix)
	if cmd.Flags().Changed(flagOptimizeAggregatesName) {

		var flagOptimizeAggregatesName string
		if cmdPrefix == "" {
			flagOptimizeAggregatesName = "optimize_aggregates"
		} else {
			flagOptimizeAggregatesName = fmt.Sprintf("%v.optimize_aggregates", cmdPrefix)
		}

		flagOptimizeAggregatesValue, err := cmd.Flags().GetBool(flagOptimizeAggregatesName)
		if err != nil {
			return err, false
		}
		m.OptimizeAggregates = &flagOptimizeAggregatesValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropQosFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagQosName := fmt.Sprintf("%v.qos", cmdPrefix)
	if cmd.Flags().Changed(flagQosName) {
		// info: complex object qos VolumeInlineQos is retrieved outside this Changed() block
	}
	flagQosValue := m.Qos
	if swag.IsZero(flagQosValue) {
		flagQosValue = &models.VolumeInlineQos{}
	}

	err, QosAdded := retrieveModelVolumeInlineQosFlags(depth+1, flagQosValue, flagQosName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || QosAdded
	if QosAdded {
		m.Qos = flagQosValue
	}

	return nil, retAdded
}

func retrieveVolumePropQueueForEncryptionFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagQueueForEncryptionName := fmt.Sprintf("%v.queue_for_encryption", cmdPrefix)
	if cmd.Flags().Changed(flagQueueForEncryptionName) {

		var flagQueueForEncryptionName string
		if cmdPrefix == "" {
			flagQueueForEncryptionName = "queue_for_encryption"
		} else {
			flagQueueForEncryptionName = fmt.Sprintf("%v.queue_for_encryption", cmdPrefix)
		}

		flagQueueForEncryptionValue, err := cmd.Flags().GetBool(flagQueueForEncryptionName)
		if err != nil {
			return err, false
		}
		m.QueueForEncryption = &flagQueueForEncryptionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropQuotaFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagQuotaName := fmt.Sprintf("%v.quota", cmdPrefix)
	if cmd.Flags().Changed(flagQuotaName) {
		// info: complex object quota VolumeInlineQuota is retrieved outside this Changed() block
	}
	flagQuotaValue := m.Quota
	if swag.IsZero(flagQuotaValue) {
		flagQuotaValue = &models.VolumeInlineQuota{}
	}

	err, QuotaAdded := retrieveModelVolumeInlineQuotaFlags(depth+1, flagQuotaValue, flagQuotaName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || QuotaAdded
	if QuotaAdded {
		m.Quota = flagQuotaValue
	}

	return nil, retAdded
}

func retrieveVolumePropRebalancingFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRebalancingName := fmt.Sprintf("%v.rebalancing", cmdPrefix)
	if cmd.Flags().Changed(flagRebalancingName) {
		// info: complex object rebalancing VolumeInlineRebalancing is retrieved outside this Changed() block
	}
	flagRebalancingValue := m.Rebalancing
	if swag.IsZero(flagRebalancingValue) {
		flagRebalancingValue = &models.VolumeInlineRebalancing{}
	}

	err, RebalancingAdded := retrieveModelVolumeInlineRebalancingFlags(depth+1, flagRebalancingValue, flagRebalancingName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RebalancingAdded
	if RebalancingAdded {
		m.Rebalancing = flagRebalancingValue
	}

	return nil, retAdded
}

func retrieveVolumePropScheduledSnapshotNamingSchemeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScheduledSnapshotNamingSchemeName := fmt.Sprintf("%v.scheduled_snapshot_naming_scheme", cmdPrefix)
	if cmd.Flags().Changed(flagScheduledSnapshotNamingSchemeName) {

		var flagScheduledSnapshotNamingSchemeName string
		if cmdPrefix == "" {
			flagScheduledSnapshotNamingSchemeName = "scheduled_snapshot_naming_scheme"
		} else {
			flagScheduledSnapshotNamingSchemeName = fmt.Sprintf("%v.scheduled_snapshot_naming_scheme", cmdPrefix)
		}

		flagScheduledSnapshotNamingSchemeValue, err := cmd.Flags().GetString(flagScheduledSnapshotNamingSchemeName)
		if err != nil {
			return err, false
		}
		m.ScheduledSnapshotNamingScheme = &flagScheduledSnapshotNamingSchemeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropSizeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSizeName := fmt.Sprintf("%v.size", cmdPrefix)
	if cmd.Flags().Changed(flagSizeName) {

		var flagSizeName string
		if cmdPrefix == "" {
			flagSizeName = "size"
		} else {
			flagSizeName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		flagSizeValue, err := cmd.Flags().GetInt64(flagSizeName)
		if err != nil {
			return err, false
		}
		m.Size = &flagSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropSnaplockFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnaplockName := fmt.Sprintf("%v.snaplock", cmdPrefix)
	if cmd.Flags().Changed(flagSnaplockName) {
		// info: complex object snaplock VolumeInlineSnaplock is retrieved outside this Changed() block
	}
	flagSnaplockValue := m.Snaplock
	if swag.IsZero(flagSnaplockValue) {
		flagSnaplockValue = &models.VolumeInlineSnaplock{}
	}

	err, SnaplockAdded := retrieveModelVolumeInlineSnaplockFlags(depth+1, flagSnaplockValue, flagSnaplockName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnaplockAdded
	if SnaplockAdded {
		m.Snaplock = flagSnaplockValue
	}

	return nil, retAdded
}

func retrieveVolumePropSnapmirrorFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnapmirrorName := fmt.Sprintf("%v.snapmirror", cmdPrefix)
	if cmd.Flags().Changed(flagSnapmirrorName) {
		// info: complex object snapmirror VolumeInlineSnapmirror is retrieved outside this Changed() block
	}
	flagSnapmirrorValue := m.Snapmirror
	if swag.IsZero(flagSnapmirrorValue) {
		flagSnapmirrorValue = &models.VolumeInlineSnapmirror{}
	}

	err, SnapmirrorAdded := retrieveModelVolumeInlineSnapmirrorFlags(depth+1, flagSnapmirrorValue, flagSnapmirrorName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapmirrorAdded
	if SnapmirrorAdded {
		m.Snapmirror = flagSnapmirrorValue
	}

	return nil, retAdded
}

func retrieveVolumePropSnapshotCountFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnapshotCountName := fmt.Sprintf("%v.snapshot_count", cmdPrefix)
	if cmd.Flags().Changed(flagSnapshotCountName) {

		var flagSnapshotCountName string
		if cmdPrefix == "" {
			flagSnapshotCountName = "snapshot_count"
		} else {
			flagSnapshotCountName = fmt.Sprintf("%v.snapshot_count", cmdPrefix)
		}

		flagSnapshotCountValue, err := cmd.Flags().GetInt64(flagSnapshotCountName)
		if err != nil {
			return err, false
		}
		m.SnapshotCount = &flagSnapshotCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropSnapshotDirectoryAccessEnabledFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnapshotDirectoryAccessEnabledName := fmt.Sprintf("%v.snapshot_directory_access_enabled", cmdPrefix)
	if cmd.Flags().Changed(flagSnapshotDirectoryAccessEnabledName) {

		var flagSnapshotDirectoryAccessEnabledName string
		if cmdPrefix == "" {
			flagSnapshotDirectoryAccessEnabledName = "snapshot_directory_access_enabled"
		} else {
			flagSnapshotDirectoryAccessEnabledName = fmt.Sprintf("%v.snapshot_directory_access_enabled", cmdPrefix)
		}

		flagSnapshotDirectoryAccessEnabledValue, err := cmd.Flags().GetBool(flagSnapshotDirectoryAccessEnabledName)
		if err != nil {
			return err, false
		}
		m.SnapshotDirectoryAccessEnabled = &flagSnapshotDirectoryAccessEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropSnapshotLockingEnabledFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnapshotLockingEnabledName := fmt.Sprintf("%v.snapshot_locking_enabled", cmdPrefix)
	if cmd.Flags().Changed(flagSnapshotLockingEnabledName) {

		var flagSnapshotLockingEnabledName string
		if cmdPrefix == "" {
			flagSnapshotLockingEnabledName = "snapshot_locking_enabled"
		} else {
			flagSnapshotLockingEnabledName = fmt.Sprintf("%v.snapshot_locking_enabled", cmdPrefix)
		}

		flagSnapshotLockingEnabledValue, err := cmd.Flags().GetBool(flagSnapshotLockingEnabledName)
		if err != nil {
			return err, false
		}
		m.SnapshotLockingEnabled = &flagSnapshotLockingEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropSnapshotPolicyFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnapshotPolicyName := fmt.Sprintf("%v.snapshot_policy", cmdPrefix)
	if cmd.Flags().Changed(flagSnapshotPolicyName) {
		// info: complex object snapshot_policy VolumeInlineSnapshotPolicy is retrieved outside this Changed() block
	}
	flagSnapshotPolicyValue := m.SnapshotPolicy
	if swag.IsZero(flagSnapshotPolicyValue) {
		flagSnapshotPolicyValue = &models.VolumeInlineSnapshotPolicy{}
	}

	err, SnapshotPolicyAdded := retrieveModelVolumeInlineSnapshotPolicyFlags(depth+1, flagSnapshotPolicyValue, flagSnapshotPolicyName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotPolicyAdded
	if SnapshotPolicyAdded {
		m.SnapshotPolicy = flagSnapshotPolicyValue
	}

	return nil, retAdded
}

func retrieveVolumePropSpaceFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSpaceName := fmt.Sprintf("%v.space", cmdPrefix)
	if cmd.Flags().Changed(flagSpaceName) {
		// info: complex object space VolumeInlineSpace is retrieved outside this Changed() block
	}
	flagSpaceValue := m.Space
	if swag.IsZero(flagSpaceValue) {
		flagSpaceValue = &models.VolumeInlineSpace{}
	}

	err, SpaceAdded := retrieveModelVolumeInlineSpaceFlags(depth+1, flagSpaceValue, flagSpaceName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceAdded
	if SpaceAdded {
		m.Space = flagSpaceValue
	}

	return nil, retAdded
}

func retrieveVolumePropStateFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropStatisticsFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStatisticsName := fmt.Sprintf("%v.statistics", cmdPrefix)
	if cmd.Flags().Changed(flagStatisticsName) {
		// info: complex object statistics VolumeInlineStatistics is retrieved outside this Changed() block
	}
	flagStatisticsValue := m.Statistics
	if swag.IsZero(flagStatisticsValue) {
		flagStatisticsValue = &models.VolumeInlineStatistics{}
	}

	err, StatisticsAdded := retrieveModelVolumeInlineStatisticsFlags(depth+1, flagStatisticsValue, flagStatisticsName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatisticsAdded
	if StatisticsAdded {
		m.Statistics = flagStatisticsValue
	}

	return nil, retAdded
}

func retrieveVolumePropStyleFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStyleName := fmt.Sprintf("%v.style", cmdPrefix)
	if cmd.Flags().Changed(flagStyleName) {

		var flagStyleName string
		if cmdPrefix == "" {
			flagStyleName = "style"
		} else {
			flagStyleName = fmt.Sprintf("%v.style", cmdPrefix)
		}

		flagStyleValue, err := cmd.Flags().GetString(flagStyleName)
		if err != nil {
			return err, false
		}
		m.Style = &flagStyleValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropSvmFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSvmName := fmt.Sprintf("%v.svm", cmdPrefix)
	if cmd.Flags().Changed(flagSvmName) {
		// info: complex object svm VolumeInlineSvm is retrieved outside this Changed() block
	}
	flagSvmValue := m.Svm
	if swag.IsZero(flagSvmValue) {
		flagSvmValue = &models.VolumeInlineSvm{}
	}

	err, SvmAdded := retrieveModelVolumeInlineSvmFlags(depth+1, flagSvmValue, flagSvmName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SvmAdded
	if SvmAdded {
		m.Svm = flagSvmValue
	}

	return nil, retAdded
}

func retrieveVolumePropTieringFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTieringName := fmt.Sprintf("%v.tiering", cmdPrefix)
	if cmd.Flags().Changed(flagTieringName) {
		// info: complex object tiering VolumeInlineTiering is retrieved outside this Changed() block
	}
	flagTieringValue := m.Tiering
	if swag.IsZero(flagTieringValue) {
		flagTieringValue = &models.VolumeInlineTiering{}
	}

	err, TieringAdded := retrieveModelVolumeInlineTieringFlags(depth+1, flagTieringValue, flagTieringName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TieringAdded
	if TieringAdded {
		m.Tiering = flagTieringValue
	}

	return nil, retAdded
}

func retrieveVolumePropTypeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = &flagTypeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropUseMirroredAggregatesFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUseMirroredAggregatesName := fmt.Sprintf("%v.use_mirrored_aggregates", cmdPrefix)
	if cmd.Flags().Changed(flagUseMirroredAggregatesName) {

		var flagUseMirroredAggregatesName string
		if cmdPrefix == "" {
			flagUseMirroredAggregatesName = "use_mirrored_aggregates"
		} else {
			flagUseMirroredAggregatesName = fmt.Sprintf("%v.use_mirrored_aggregates", cmdPrefix)
		}

		flagUseMirroredAggregatesValue, err := cmd.Flags().GetBool(flagUseMirroredAggregatesName)
		if err != nil {
			return err, false
		}
		m.UseMirroredAggregates = &flagUseMirroredAggregatesValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropUUIDFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropValidateOnlyFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagValidateOnlyName := fmt.Sprintf("%v.validate_only", cmdPrefix)
	if cmd.Flags().Changed(flagValidateOnlyName) {

		var flagValidateOnlyName string
		if cmdPrefix == "" {
			flagValidateOnlyName = "validate_only"
		} else {
			flagValidateOnlyName = fmt.Sprintf("%v.validate_only", cmdPrefix)
		}

		flagValidateOnlyValue, err := cmd.Flags().GetBool(flagValidateOnlyName)
		if err != nil {
			return err, false
		}
		m.ValidateOnly = &flagValidateOnlyValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumePropVolumeInlineTagsFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeInlineTagsName := fmt.Sprintf("%v.volume_inline__tags", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeInlineTagsName) {
		// warning: volume_inline__tags array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumePropVolumeInlineAggregatesFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeInlineAggregatesName := fmt.Sprintf("%v.volume_inline_aggregates", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeInlineAggregatesName) {
		// warning: volume_inline_aggregates array type []*VolumeInlineAggregatesInlineArrayItem is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumePropVolumeInlineConstituentsFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeInlineConstituentsName := fmt.Sprintf("%v.volume_inline_constituents", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeInlineConstituentsName) {
		// warning: volume_inline_constituents array type []*VolumeInlineConstituentsInlineArrayItem is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumePropVolumeInlineStatusFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeInlineStatusName := fmt.Sprintf("%v.volume_inline_status", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeInlineStatusName) {
		// warning: volume_inline_status array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineActivityTracking

// register flags to command
func registerModelVolumeInlineActivityTrackingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineActivityTrackingPropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineActivityTrackingPropSupported(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineActivityTrackingPropUnsupportedReason(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineActivityTrackingPropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := `Enum: ["off","on"]. Activity tracking state of the volume. If this value is "on", ONTAP collects top metrics information for the volume in real time. There is a slight impact to I/O performance in order to collect this information. If this value is "off", no activity tracking information is collected or available to view.`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["off","on"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineActivityTrackingPropSupported(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSupportedDescription := `This field indicates whether or not volume activity tracking is supported on the volume. If volume activity tracking is not supported, the reason why is provided in the "activity_tracking.unsupported_reason" field.`

	var flagSupportedName string
	if cmdPrefix == "" {
		flagSupportedName = "supported"
	} else {
		flagSupportedName = fmt.Sprintf("%v.supported", cmdPrefix)
	}

	var flagSupportedDefault bool

	_ = cmd.PersistentFlags().Bool(flagSupportedName, flagSupportedDefault, flagSupportedDescription)

	return nil
}

func registerVolumeInlineActivityTrackingPropUnsupportedReason(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagUnsupportedReasonName string
	if cmdPrefix == "" {
		flagUnsupportedReasonName = "unsupported_reason"
	} else {
		flagUnsupportedReasonName = fmt.Sprintf("%v.unsupported_reason", cmdPrefix)
	}

	if err := registerModelVolumeInlineActivityTrackingInlineUnsupportedReasonFlags(depth+1, flagUnsupportedReasonName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineActivityTrackingFlags(depth int, m *models.VolumeInlineActivityTracking, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, StateAdded := retrieveVolumeInlineActivityTrackingPropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, SupportedAdded := retrieveVolumeInlineActivityTrackingPropSupportedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SupportedAdded

	err, UnsupportedReasonAdded := retrieveVolumeInlineActivityTrackingPropUnsupportedReasonFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UnsupportedReasonAdded

	return nil, retAdded
}

func retrieveVolumeInlineActivityTrackingPropStateFlags(depth int, m *models.VolumeInlineActivityTracking, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineActivityTrackingPropSupportedFlags(depth int, m *models.VolumeInlineActivityTracking, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSupportedName := fmt.Sprintf("%v.supported", cmdPrefix)
	if cmd.Flags().Changed(flagSupportedName) {

		var flagSupportedName string
		if cmdPrefix == "" {
			flagSupportedName = "supported"
		} else {
			flagSupportedName = fmt.Sprintf("%v.supported", cmdPrefix)
		}

		flagSupportedValue, err := cmd.Flags().GetBool(flagSupportedName)
		if err != nil {
			return err, false
		}
		m.Supported = &flagSupportedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineActivityTrackingPropUnsupportedReasonFlags(depth int, m *models.VolumeInlineActivityTracking, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUnsupportedReasonName := fmt.Sprintf("%v.unsupported_reason", cmdPrefix)
	if cmd.Flags().Changed(flagUnsupportedReasonName) {
		// info: complex object unsupported_reason VolumeInlineActivityTrackingInlineUnsupportedReason is retrieved outside this Changed() block
	}
	flagUnsupportedReasonValue := m.UnsupportedReason
	if swag.IsZero(flagUnsupportedReasonValue) {
		flagUnsupportedReasonValue = &models.VolumeInlineActivityTrackingInlineUnsupportedReason{}
	}

	err, UnsupportedReasonAdded := retrieveModelVolumeInlineActivityTrackingInlineUnsupportedReasonFlags(depth+1, flagUnsupportedReasonValue, flagUnsupportedReasonName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UnsupportedReasonAdded
	if UnsupportedReasonAdded {
		m.UnsupportedReason = flagUnsupportedReasonValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineActivityTrackingInlineUnsupportedReason

// register flags to command
func registerModelVolumeInlineActivityTrackingInlineUnsupportedReasonFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineActivityTrackingInlineUnsupportedReasonPropCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineActivityTrackingInlineUnsupportedReasonPropMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineActivityTrackingInlineUnsupportedReasonPropCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCodeDescription := `If volume activity tracking is not supported on the volume, this field provides an appropriate error code.`

	var flagCodeName string
	if cmdPrefix == "" {
		flagCodeName = "code"
	} else {
		flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var flagCodeDefault string

	_ = cmd.PersistentFlags().String(flagCodeName, flagCodeDefault, flagCodeDescription)

	return nil
}

func registerVolumeInlineActivityTrackingInlineUnsupportedReasonPropMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMessageDescription := `If volume activity tracking is not supported on the volume, this field provides an error message detailing why this is the case.`

	var flagMessageName string
	if cmdPrefix == "" {
		flagMessageName = "message"
	} else {
		flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var flagMessageDefault string

	_ = cmd.PersistentFlags().String(flagMessageName, flagMessageDefault, flagMessageDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineActivityTrackingInlineUnsupportedReasonFlags(depth int, m *models.VolumeInlineActivityTrackingInlineUnsupportedReason, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CodeAdded := retrieveVolumeInlineActivityTrackingInlineUnsupportedReasonPropCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CodeAdded

	err, MessageAdded := retrieveVolumeInlineActivityTrackingInlineUnsupportedReasonPropMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MessageAdded

	return nil, retAdded
}

func retrieveVolumeInlineActivityTrackingInlineUnsupportedReasonPropCodeFlags(depth int, m *models.VolumeInlineActivityTrackingInlineUnsupportedReason, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCodeName := fmt.Sprintf("%v.code", cmdPrefix)
	if cmd.Flags().Changed(flagCodeName) {

		var flagCodeName string
		if cmdPrefix == "" {
			flagCodeName = "code"
		} else {
			flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		flagCodeValue, err := cmd.Flags().GetString(flagCodeName)
		if err != nil {
			return err, false
		}
		m.Code = &flagCodeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineActivityTrackingInlineUnsupportedReasonPropMessageFlags(depth int, m *models.VolumeInlineActivityTrackingInlineUnsupportedReason, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMessageName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(flagMessageName) {

		var flagMessageName string
		if cmdPrefix == "" {
			flagMessageName = "message"
		} else {
			flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		flagMessageValue, err := cmd.Flags().GetString(flagMessageName)
		if err != nil {
			return err, false
		}
		m.Message = &flagMessageValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAggregatesInlineArrayItem

// register flags to command
func registerModelVolumeInlineAggregatesInlineArrayItemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAggregatesInlineArrayItemPropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAggregatesInlineArrayItemPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAggregatesInlineArrayItemPropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAggregatesInlineArrayItemPropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineAggregatesInlineArrayItemInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAggregatesInlineArrayItemPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineAggregatesInlineArrayItemPropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := ``

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAggregatesInlineArrayItemFlags(depth int, m *models.VolumeInlineAggregatesInlineArrayItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeInlineAggregatesInlineArrayItemPropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, NameAdded := retrieveVolumeInlineAggregatesInlineArrayItemPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineAggregatesInlineArrayItemPropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineAggregatesInlineArrayItemPropLinksFlags(depth int, m *models.VolumeInlineAggregatesInlineArrayItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineAggregatesInlineArrayItemInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineAggregatesInlineArrayItemInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineAggregatesInlineArrayItemInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineAggregatesInlineArrayItemPropNameFlags(depth int, m *models.VolumeInlineAggregatesInlineArrayItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAggregatesInlineArrayItemPropUUIDFlags(depth int, m *models.VolumeInlineAggregatesInlineArrayItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAggregatesInlineArrayItemInlineLinks

// register flags to command
func registerModelVolumeInlineAggregatesInlineArrayItemInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAggregatesInlineArrayItemInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAggregatesInlineArrayItemInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAggregatesInlineArrayItemInlineLinksFlags(depth int, m *models.VolumeInlineAggregatesInlineArrayItemInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineAggregatesInlineArrayItemInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineAggregatesInlineArrayItemInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineAggregatesInlineArrayItemInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAnalytics

// register flags to command
func registerModelVolumeInlineAnalyticsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAnalyticsPropFilesScanned(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAnalyticsPropInitialization(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAnalyticsPropScanProgress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAnalyticsPropScanThrottleReason(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAnalyticsPropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAnalyticsPropSupported(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAnalyticsPropTotalFiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAnalyticsPropUnsupportedReason(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAnalyticsPropFilesScanned(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFilesScannedDescription := `Number of files in the volume that the file system analytics initialization scan has processed. Only returned when the state is ` + "`" + `initializing` + "`" + `.`

	var flagFilesScannedName string
	if cmdPrefix == "" {
		flagFilesScannedName = "files_scanned"
	} else {
		flagFilesScannedName = fmt.Sprintf("%v.files_scanned", cmdPrefix)
	}

	var flagFilesScannedDefault int64

	_ = cmd.PersistentFlags().Int64(flagFilesScannedName, flagFilesScannedDefault, flagFilesScannedDescription)

	return nil
}

func registerVolumeInlineAnalyticsPropInitialization(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagInitializationName string
	if cmdPrefix == "" {
		flagInitializationName = "initialization"
	} else {
		flagInitializationName = fmt.Sprintf("%v.initialization", cmdPrefix)
	}

	if err := registerModelVolumeInlineAnalyticsInlineInitializationFlags(depth+1, flagInitializationName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAnalyticsPropScanProgress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagScanProgressDescription := `Percentage of files in the volume that the file system analytics initialization scan has processed. Only returned when the state is ` + "`" + `initializing` + "`" + `.`

	var flagScanProgressName string
	if cmdPrefix == "" {
		flagScanProgressName = "scan_progress"
	} else {
		flagScanProgressName = fmt.Sprintf("%v.scan_progress", cmdPrefix)
	}

	var flagScanProgressDefault int64

	_ = cmd.PersistentFlags().Int64(flagScanProgressName, flagScanProgressDefault, flagScanProgressDescription)

	return nil
}

func registerVolumeInlineAnalyticsPropScanThrottleReason(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagScanThrottleReasonName string
	if cmdPrefix == "" {
		flagScanThrottleReasonName = "scan_throttle_reason"
	} else {
		flagScanThrottleReasonName = fmt.Sprintf("%v.scan_throttle_reason", cmdPrefix)
	}

	if err := registerModelVolumeInlineAnalyticsInlineScanThrottleReasonFlags(depth+1, flagScanThrottleReasonName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAnalyticsPropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := `Enum: ["unknown","initializing","initialization_paused","off","on"]. File system analytics state of the volume. If this value is "on", ONTAP collects extra file system analytics information for all directories on the volume. There will be a slight impact to I/O performance to collect this information. If this value is "off", file system analytics information is not collected and not available to be viewed. If this value is "initializing", that means file system analytics was recently turned on, and the initialization scan to gather information for all existing files and directories is currently running. If this value is "initialization_paused", this means that the initialization scan is currently paused. If this value is 'unknown', this means that there was an internal error when determining the file system analytics state for the volume.`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["unknown","initializing","initialization_paused","off","on"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAnalyticsPropSupported(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSupportedDescription := `This field indicates whether or not file system analytics is supported on the volume. If file system analytics is not supported, the reason will be specified in the "analytics.unsupported_reason" field.`

	var flagSupportedName string
	if cmdPrefix == "" {
		flagSupportedName = "supported"
	} else {
		flagSupportedName = fmt.Sprintf("%v.supported", cmdPrefix)
	}

	var flagSupportedDefault bool

	_ = cmd.PersistentFlags().Bool(flagSupportedName, flagSupportedDefault, flagSupportedDescription)

	return nil
}

func registerVolumeInlineAnalyticsPropTotalFiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalFilesDescription := `Total number of files in the volume that the file system analytics initialization scan will process. Only returned when the state is ` + "`" + `initializing` + "`" + `.`

	var flagTotalFilesName string
	if cmdPrefix == "" {
		flagTotalFilesName = "total_files"
	} else {
		flagTotalFilesName = fmt.Sprintf("%v.total_files", cmdPrefix)
	}

	var flagTotalFilesDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalFilesName, flagTotalFilesDefault, flagTotalFilesDescription)

	return nil
}

func registerVolumeInlineAnalyticsPropUnsupportedReason(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagUnsupportedReasonName string
	if cmdPrefix == "" {
		flagUnsupportedReasonName = "unsupported_reason"
	} else {
		flagUnsupportedReasonName = fmt.Sprintf("%v.unsupported_reason", cmdPrefix)
	}

	if err := registerModelVolumeInlineAnalyticsInlineUnsupportedReasonFlags(depth+1, flagUnsupportedReasonName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAnalyticsFlags(depth int, m *models.VolumeInlineAnalytics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, FilesScannedAdded := retrieveVolumeInlineAnalyticsPropFilesScannedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FilesScannedAdded

	err, InitializationAdded := retrieveVolumeInlineAnalyticsPropInitializationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InitializationAdded

	err, ScanProgressAdded := retrieveVolumeInlineAnalyticsPropScanProgressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScanProgressAdded

	err, ScanThrottleReasonAdded := retrieveVolumeInlineAnalyticsPropScanThrottleReasonFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScanThrottleReasonAdded

	err, StateAdded := retrieveVolumeInlineAnalyticsPropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, SupportedAdded := retrieveVolumeInlineAnalyticsPropSupportedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SupportedAdded

	err, TotalFilesAdded := retrieveVolumeInlineAnalyticsPropTotalFilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalFilesAdded

	err, UnsupportedReasonAdded := retrieveVolumeInlineAnalyticsPropUnsupportedReasonFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UnsupportedReasonAdded

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsPropFilesScannedFlags(depth int, m *models.VolumeInlineAnalytics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFilesScannedName := fmt.Sprintf("%v.files_scanned", cmdPrefix)
	if cmd.Flags().Changed(flagFilesScannedName) {

		var flagFilesScannedName string
		if cmdPrefix == "" {
			flagFilesScannedName = "files_scanned"
		} else {
			flagFilesScannedName = fmt.Sprintf("%v.files_scanned", cmdPrefix)
		}

		flagFilesScannedValue, err := cmd.Flags().GetInt64(flagFilesScannedName)
		if err != nil {
			return err, false
		}
		m.FilesScanned = &flagFilesScannedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsPropInitializationFlags(depth int, m *models.VolumeInlineAnalytics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagInitializationName := fmt.Sprintf("%v.initialization", cmdPrefix)
	if cmd.Flags().Changed(flagInitializationName) {
		// info: complex object initialization VolumeInlineAnalyticsInlineInitialization is retrieved outside this Changed() block
	}
	flagInitializationValue := m.Initialization
	if swag.IsZero(flagInitializationValue) {
		flagInitializationValue = &models.VolumeInlineAnalyticsInlineInitialization{}
	}

	err, InitializationAdded := retrieveModelVolumeInlineAnalyticsInlineInitializationFlags(depth+1, flagInitializationValue, flagInitializationName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InitializationAdded
	if InitializationAdded {
		m.Initialization = flagInitializationValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsPropScanProgressFlags(depth int, m *models.VolumeInlineAnalytics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScanProgressName := fmt.Sprintf("%v.scan_progress", cmdPrefix)
	if cmd.Flags().Changed(flagScanProgressName) {

		var flagScanProgressName string
		if cmdPrefix == "" {
			flagScanProgressName = "scan_progress"
		} else {
			flagScanProgressName = fmt.Sprintf("%v.scan_progress", cmdPrefix)
		}

		flagScanProgressValue, err := cmd.Flags().GetInt64(flagScanProgressName)
		if err != nil {
			return err, false
		}
		m.ScanProgress = &flagScanProgressValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsPropScanThrottleReasonFlags(depth int, m *models.VolumeInlineAnalytics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScanThrottleReasonName := fmt.Sprintf("%v.scan_throttle_reason", cmdPrefix)
	if cmd.Flags().Changed(flagScanThrottleReasonName) {
		// info: complex object scan_throttle_reason VolumeInlineAnalyticsInlineScanThrottleReason is retrieved outside this Changed() block
	}
	flagScanThrottleReasonValue := m.ScanThrottleReason
	if swag.IsZero(flagScanThrottleReasonValue) {
		flagScanThrottleReasonValue = &models.VolumeInlineAnalyticsInlineScanThrottleReason{}
	}

	err, ScanThrottleReasonAdded := retrieveModelVolumeInlineAnalyticsInlineScanThrottleReasonFlags(depth+1, flagScanThrottleReasonValue, flagScanThrottleReasonName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScanThrottleReasonAdded
	if ScanThrottleReasonAdded {
		m.ScanThrottleReason = flagScanThrottleReasonValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsPropStateFlags(depth int, m *models.VolumeInlineAnalytics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsPropSupportedFlags(depth int, m *models.VolumeInlineAnalytics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSupportedName := fmt.Sprintf("%v.supported", cmdPrefix)
	if cmd.Flags().Changed(flagSupportedName) {

		var flagSupportedName string
		if cmdPrefix == "" {
			flagSupportedName = "supported"
		} else {
			flagSupportedName = fmt.Sprintf("%v.supported", cmdPrefix)
		}

		flagSupportedValue, err := cmd.Flags().GetBool(flagSupportedName)
		if err != nil {
			return err, false
		}
		m.Supported = &flagSupportedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsPropTotalFilesFlags(depth int, m *models.VolumeInlineAnalytics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalFilesName := fmt.Sprintf("%v.total_files", cmdPrefix)
	if cmd.Flags().Changed(flagTotalFilesName) {

		var flagTotalFilesName string
		if cmdPrefix == "" {
			flagTotalFilesName = "total_files"
		} else {
			flagTotalFilesName = fmt.Sprintf("%v.total_files", cmdPrefix)
		}

		flagTotalFilesValue, err := cmd.Flags().GetInt64(flagTotalFilesName)
		if err != nil {
			return err, false
		}
		m.TotalFiles = &flagTotalFilesValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsPropUnsupportedReasonFlags(depth int, m *models.VolumeInlineAnalytics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUnsupportedReasonName := fmt.Sprintf("%v.unsupported_reason", cmdPrefix)
	if cmd.Flags().Changed(flagUnsupportedReasonName) {
		// info: complex object unsupported_reason VolumeInlineAnalyticsInlineUnsupportedReason is retrieved outside this Changed() block
	}
	flagUnsupportedReasonValue := m.UnsupportedReason
	if swag.IsZero(flagUnsupportedReasonValue) {
		flagUnsupportedReasonValue = &models.VolumeInlineAnalyticsInlineUnsupportedReason{}
	}

	err, UnsupportedReasonAdded := retrieveModelVolumeInlineAnalyticsInlineUnsupportedReasonFlags(depth+1, flagUnsupportedReasonValue, flagUnsupportedReasonName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UnsupportedReasonAdded
	if UnsupportedReasonAdded {
		m.UnsupportedReason = flagUnsupportedReasonValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAnalyticsInlineInitialization

// register flags to command
func registerModelVolumeInlineAnalyticsInlineInitializationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAnalyticsInlineInitializationPropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAnalyticsInlineInitializationPropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := `Enum: ["running","paused"]. State of the analytics file system scan.`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["running","paused"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAnalyticsInlineInitializationFlags(depth int, m *models.VolumeInlineAnalyticsInlineInitialization, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, StateAdded := retrieveVolumeInlineAnalyticsInlineInitializationPropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsInlineInitializationPropStateFlags(depth int, m *models.VolumeInlineAnalyticsInlineInitialization, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAnalyticsInlineScanThrottleReason

// register flags to command
func registerModelVolumeInlineAnalyticsInlineScanThrottleReasonFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAnalyticsInlineScanThrottleReasonPropArguments(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAnalyticsInlineScanThrottleReasonPropCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAnalyticsInlineScanThrottleReasonPropMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAnalyticsInlineScanThrottleReasonPropArguments(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: arguments []*string array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineAnalyticsInlineScanThrottleReasonPropCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCodeDescription := `Warning code indicating why scanner throttling is reported.`

	var flagCodeName string
	if cmdPrefix == "" {
		flagCodeName = "code"
	} else {
		flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var flagCodeDefault string

	_ = cmd.PersistentFlags().String(flagCodeName, flagCodeDefault, flagCodeDescription)

	return nil
}

func registerVolumeInlineAnalyticsInlineScanThrottleReasonPropMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMessageDescription := `A message that provides details for scan throttling.`

	var flagMessageName string
	if cmdPrefix == "" {
		flagMessageName = "message"
	} else {
		flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var flagMessageDefault string

	_ = cmd.PersistentFlags().String(flagMessageName, flagMessageDefault, flagMessageDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAnalyticsInlineScanThrottleReasonFlags(depth int, m *models.VolumeInlineAnalyticsInlineScanThrottleReason, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ArgumentsAdded := retrieveVolumeInlineAnalyticsInlineScanThrottleReasonPropArgumentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ArgumentsAdded

	err, CodeAdded := retrieveVolumeInlineAnalyticsInlineScanThrottleReasonPropCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CodeAdded

	err, MessageAdded := retrieveVolumeInlineAnalyticsInlineScanThrottleReasonPropMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MessageAdded

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsInlineScanThrottleReasonPropArgumentsFlags(depth int, m *models.VolumeInlineAnalyticsInlineScanThrottleReason, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagArgumentsName := fmt.Sprintf("%v.arguments", cmdPrefix)
	if cmd.Flags().Changed(flagArgumentsName) {
		// warning: arguments array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsInlineScanThrottleReasonPropCodeFlags(depth int, m *models.VolumeInlineAnalyticsInlineScanThrottleReason, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCodeName := fmt.Sprintf("%v.code", cmdPrefix)
	if cmd.Flags().Changed(flagCodeName) {

		var flagCodeName string
		if cmdPrefix == "" {
			flagCodeName = "code"
		} else {
			flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		flagCodeValue, err := cmd.Flags().GetString(flagCodeName)
		if err != nil {
			return err, false
		}
		m.Code = &flagCodeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsInlineScanThrottleReasonPropMessageFlags(depth int, m *models.VolumeInlineAnalyticsInlineScanThrottleReason, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMessageName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(flagMessageName) {

		var flagMessageName string
		if cmdPrefix == "" {
			flagMessageName = "message"
		} else {
			flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		flagMessageValue, err := cmd.Flags().GetString(flagMessageName)
		if err != nil {
			return err, false
		}
		m.Message = &flagMessageValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAnalyticsInlineUnsupportedReason

// register flags to command
func registerModelVolumeInlineAnalyticsInlineUnsupportedReasonFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAnalyticsInlineUnsupportedReasonPropCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAnalyticsInlineUnsupportedReasonPropMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAnalyticsInlineUnsupportedReasonPropCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCodeDescription := `If file system analytics is not supported on the volume, this field provides the error code explaining why.`

	var flagCodeName string
	if cmdPrefix == "" {
		flagCodeName = "code"
	} else {
		flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var flagCodeDefault string

	_ = cmd.PersistentFlags().String(flagCodeName, flagCodeDefault, flagCodeDescription)

	return nil
}

func registerVolumeInlineAnalyticsInlineUnsupportedReasonPropMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMessageDescription := `If file system analytics is not supported on the volume, this field provides the error message explaining why.`

	var flagMessageName string
	if cmdPrefix == "" {
		flagMessageName = "message"
	} else {
		flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var flagMessageDefault string

	_ = cmd.PersistentFlags().String(flagMessageName, flagMessageDefault, flagMessageDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAnalyticsInlineUnsupportedReasonFlags(depth int, m *models.VolumeInlineAnalyticsInlineUnsupportedReason, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CodeAdded := retrieveVolumeInlineAnalyticsInlineUnsupportedReasonPropCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CodeAdded

	err, MessageAdded := retrieveVolumeInlineAnalyticsInlineUnsupportedReasonPropMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MessageAdded

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsInlineUnsupportedReasonPropCodeFlags(depth int, m *models.VolumeInlineAnalyticsInlineUnsupportedReason, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCodeName := fmt.Sprintf("%v.code", cmdPrefix)
	if cmd.Flags().Changed(flagCodeName) {

		var flagCodeName string
		if cmdPrefix == "" {
			flagCodeName = "code"
		} else {
			flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		flagCodeValue, err := cmd.Flags().GetString(flagCodeName)
		if err != nil {
			return err, false
		}
		m.Code = &flagCodeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAnalyticsInlineUnsupportedReasonPropMessageFlags(depth int, m *models.VolumeInlineAnalyticsInlineUnsupportedReason, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMessageName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(flagMessageName) {

		var flagMessageName string
		if cmdPrefix == "" {
			flagMessageName = "message"
		} else {
			flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		flagMessageValue, err := cmd.Flags().GetString(flagMessageName)
		if err != nil {
			return err, false
		}
		m.Message = &flagMessageValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAntiRansomware

// register flags to command
func registerModelVolumeInlineAntiRansomwareFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAntiRansomwarePropAttackDetectionParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwarePropAttackProbability(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwarePropAttackReports(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwarePropDryRunStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwarePropEventLog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwarePropSpace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwarePropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwarePropSurgeAsNormal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwarePropSurgeUsage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwarePropSuspectFiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwarePropTypicalUsage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwarePropUpdateBaselineFromSurge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwarePropWorkload(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAntiRansomwarePropAttackDetectionParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAttackDetectionParametersName string
	if cmdPrefix == "" {
		flagAttackDetectionParametersName = "attack_detection_parameters"
	} else {
		flagAttackDetectionParametersName = fmt.Sprintf("%v.attack_detection_parameters", cmdPrefix)
	}

	if err := registerModelAntiRansomwareVolumeAttackDetectionParametersFlags(depth+1, flagAttackDetectionParametersName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAntiRansomwarePropAttackProbability(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAttackProbabilityDescription := `Enum: ["none","low","moderate","high"]. Probability of a ransomware attack.<br>` + "`" + `none` + "`" + ` No files are suspected of ransomware activity.<br>` + "`" + `low` + "`" + ` A number of files are suspected of ransomware activity.<br>` + "`" + `moderate` + "`" + ` A moderate number of files are suspected of ransomware activity.<br>` + "`" + `high` + "`" + ` A large number of files are suspected of ransomware activity.`

	var flagAttackProbabilityName string
	if cmdPrefix == "" {
		flagAttackProbabilityName = "attack_probability"
	} else {
		flagAttackProbabilityName = fmt.Sprintf("%v.attack_probability", cmdPrefix)
	}

	var flagAttackProbabilityDefault string

	_ = cmd.PersistentFlags().String(flagAttackProbabilityName, flagAttackProbabilityDefault, flagAttackProbabilityDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagAttackProbabilityName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["none","low","moderate","high"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAntiRansomwarePropAttackReports(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: attack_reports []*AntiRansomwareAttackReport array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineAntiRansomwarePropDryRunStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDryRunStartTimeDescription := `Time when Anti-ransomware monitoring ` + "`" + `state` + "`" + ` is set to dry-run value for starting evaluation mode.`

	var flagDryRunStartTimeName string
	if cmdPrefix == "" {
		flagDryRunStartTimeName = "dry_run_start_time"
	} else {
		flagDryRunStartTimeName = fmt.Sprintf("%v.dry_run_start_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagDryRunStartTimeName, "", flagDryRunStartTimeDescription)

	return nil
}

func registerVolumeInlineAntiRansomwarePropEventLog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagEventLogName string
	if cmdPrefix == "" {
		flagEventLogName = "event_log"
	} else {
		flagEventLogName = fmt.Sprintf("%v.event_log", cmdPrefix)
	}

	if err := registerModelVolumeInlineAntiRansomwareInlineEventLogFlags(depth+1, flagEventLogName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAntiRansomwarePropSpace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSpaceName string
	if cmdPrefix == "" {
		flagSpaceName = "space"
	} else {
		flagSpaceName = fmt.Sprintf("%v.space", cmdPrefix)
	}

	if err := registerModelVolumeInlineAntiRansomwareInlineSpaceFlags(depth+1, flagSpaceName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAntiRansomwarePropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := `Enum: ["disabled","disable_in_progress","dry_run","enabled","paused","enable_paused","dry_run_paused"]. Anti-ransomware state.<br>` + "`" + `disabled` + "`" + ` Anti-ransomware monitoring is disabled on the volume.  This is the default state in a POST operation.<br>` + "`" + `disable_in_progress` + "`" + ` Anti-ransomware monitoring is being disabled and a cleanup operation is in effect. Valid in GET operation.<br>` + "`" + `dry_run` + "`" + ` Anti-ransomware monitoring is enabled in the evaluation mode.<br>` + "`" + `enabled` + "`" + ` Anti-ransomware monitoring is active on the volume.<br>` + "`" + `paused` + "`" + ` Anti-ransomware monitoring is paused on the volume.<br>` + "`" + `enable_paused` + "`" + ` Anti-ransomware monitoring is paused on the volume from its earlier enabled state. Valid in GET operation. <br>` + "`" + `dry_run_paused` + "`" + ` Anti-ransomware monitoring is paused on the volume from its earlier dry_run state. Valid in GET operation. <br>For POST, the valid Anti-ransomware states are only ` + "`" + `disabled` + "`" + `, ` + "`" + `enabled` + "`" + ` and ` + "`" + `dry_run` + "`" + `, whereas for PATCH, ` + "`" + `paused` + "`" + ` is also valid along with the three valid states for POST.`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["disabled","disable_in_progress","dry_run","enabled","paused","enable_paused","dry_run_paused"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAntiRansomwarePropSurgeAsNormal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSurgeAsNormalDescription := `Indicates whether or not to set the surge values as historical values. This field is no longer supported. Use update_baseline_from_surge instead.`

	var flagSurgeAsNormalName string
	if cmdPrefix == "" {
		flagSurgeAsNormalName = "surge_as_normal"
	} else {
		flagSurgeAsNormalName = fmt.Sprintf("%v.surge_as_normal", cmdPrefix)
	}

	var flagSurgeAsNormalDefault bool

	_ = cmd.PersistentFlags().Bool(flagSurgeAsNormalName, flagSurgeAsNormalDefault, flagSurgeAsNormalDescription)

	return nil
}

func registerVolumeInlineAntiRansomwarePropSurgeUsage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSurgeUsageName string
	if cmdPrefix == "" {
		flagSurgeUsageName = "surge_usage"
	} else {
		flagSurgeUsageName = fmt.Sprintf("%v.surge_usage", cmdPrefix)
	}

	if err := registerModelVolumeInlineAntiRansomwareInlineSurgeUsageFlags(depth+1, flagSurgeUsageName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAntiRansomwarePropSuspectFiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: suspect_files []*VolumeAntiRansomwareSuspectFilesItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineAntiRansomwarePropTypicalUsage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagTypicalUsageName string
	if cmdPrefix == "" {
		flagTypicalUsageName = "typical_usage"
	} else {
		flagTypicalUsageName = fmt.Sprintf("%v.typical_usage", cmdPrefix)
	}

	if err := registerModelVolumeInlineAntiRansomwareInlineTypicalUsageFlags(depth+1, flagTypicalUsageName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAntiRansomwarePropUpdateBaselineFromSurge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUpdateBaselineFromSurgeDescription := `Sets the observed surge value as the new baseline on a volume.`

	var flagUpdateBaselineFromSurgeName string
	if cmdPrefix == "" {
		flagUpdateBaselineFromSurgeName = "update_baseline_from_surge"
	} else {
		flagUpdateBaselineFromSurgeName = fmt.Sprintf("%v.update_baseline_from_surge", cmdPrefix)
	}

	var flagUpdateBaselineFromSurgeDefault bool

	_ = cmd.PersistentFlags().Bool(flagUpdateBaselineFromSurgeName, flagUpdateBaselineFromSurgeDefault, flagUpdateBaselineFromSurgeDescription)

	return nil
}

func registerVolumeInlineAntiRansomwarePropWorkload(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagWorkloadName string
	if cmdPrefix == "" {
		flagWorkloadName = "workload"
	} else {
		flagWorkloadName = fmt.Sprintf("%v.workload", cmdPrefix)
	}

	if err := registerModelAntiRansomwareVolumeWorkloadFlags(depth+1, flagWorkloadName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAntiRansomwareFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AttackDetectionParametersAdded := retrieveVolumeInlineAntiRansomwarePropAttackDetectionParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AttackDetectionParametersAdded

	err, AttackProbabilityAdded := retrieveVolumeInlineAntiRansomwarePropAttackProbabilityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AttackProbabilityAdded

	err, AttackReportsAdded := retrieveVolumeInlineAntiRansomwarePropAttackReportsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AttackReportsAdded

	err, DryRunStartTimeAdded := retrieveVolumeInlineAntiRansomwarePropDryRunStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DryRunStartTimeAdded

	err, EventLogAdded := retrieveVolumeInlineAntiRansomwarePropEventLogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EventLogAdded

	err, SpaceAdded := retrieveVolumeInlineAntiRansomwarePropSpaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceAdded

	err, StateAdded := retrieveVolumeInlineAntiRansomwarePropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, SurgeAsNormalAdded := retrieveVolumeInlineAntiRansomwarePropSurgeAsNormalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SurgeAsNormalAdded

	err, SurgeUsageAdded := retrieveVolumeInlineAntiRansomwarePropSurgeUsageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SurgeUsageAdded

	err, SuspectFilesAdded := retrieveVolumeInlineAntiRansomwarePropSuspectFilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SuspectFilesAdded

	err, TypicalUsageAdded := retrieveVolumeInlineAntiRansomwarePropTypicalUsageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypicalUsageAdded

	err, UpdateBaselineFromSurgeAdded := retrieveVolumeInlineAntiRansomwarePropUpdateBaselineFromSurgeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UpdateBaselineFromSurgeAdded

	err, WorkloadAdded := retrieveVolumeInlineAntiRansomwarePropWorkloadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WorkloadAdded

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropAttackDetectionParametersFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAttackDetectionParametersName := fmt.Sprintf("%v.attack_detection_parameters", cmdPrefix)
	if cmd.Flags().Changed(flagAttackDetectionParametersName) {
		// info: complex object attack_detection_parameters AntiRansomwareVolumeAttackDetectionParameters is retrieved outside this Changed() block
	}
	flagAttackDetectionParametersValue := m.AttackDetectionParameters
	if swag.IsZero(flagAttackDetectionParametersValue) {
		flagAttackDetectionParametersValue = &models.AntiRansomwareVolumeAttackDetectionParameters{}
	}

	err, AttackDetectionParametersAdded := retrieveModelAntiRansomwareVolumeAttackDetectionParametersFlags(depth+1, flagAttackDetectionParametersValue, flagAttackDetectionParametersName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AttackDetectionParametersAdded
	if AttackDetectionParametersAdded {
		m.AttackDetectionParameters = flagAttackDetectionParametersValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropAttackProbabilityFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAttackProbabilityName := fmt.Sprintf("%v.attack_probability", cmdPrefix)
	if cmd.Flags().Changed(flagAttackProbabilityName) {

		var flagAttackProbabilityName string
		if cmdPrefix == "" {
			flagAttackProbabilityName = "attack_probability"
		} else {
			flagAttackProbabilityName = fmt.Sprintf("%v.attack_probability", cmdPrefix)
		}

		flagAttackProbabilityValue, err := cmd.Flags().GetString(flagAttackProbabilityName)
		if err != nil {
			return err, false
		}
		m.AttackProbability = &flagAttackProbabilityValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropAttackReportsFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAttackReportsName := fmt.Sprintf("%v.attack_reports", cmdPrefix)
	if cmd.Flags().Changed(flagAttackReportsName) {
		// warning: attack_reports array type []*AntiRansomwareAttackReport is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropDryRunStartTimeFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDryRunStartTimeName := fmt.Sprintf("%v.dry_run_start_time", cmdPrefix)
	if cmd.Flags().Changed(flagDryRunStartTimeName) {

		var flagDryRunStartTimeName string
		if cmdPrefix == "" {
			flagDryRunStartTimeName = "dry_run_start_time"
		} else {
			flagDryRunStartTimeName = fmt.Sprintf("%v.dry_run_start_time", cmdPrefix)
		}

		flagDryRunStartTimeValueStr, err := cmd.Flags().GetString(flagDryRunStartTimeName)
		if err != nil {
			return err, false
		}
		var flagDryRunStartTimeValue strfmt.DateTime
		if err := flagDryRunStartTimeValue.UnmarshalText([]byte(flagDryRunStartTimeValueStr)); err != nil {
			return err, false
		}
		m.DryRunStartTime = &flagDryRunStartTimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropEventLogFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEventLogName := fmt.Sprintf("%v.event_log", cmdPrefix)
	if cmd.Flags().Changed(flagEventLogName) {
		// info: complex object event_log VolumeInlineAntiRansomwareInlineEventLog is retrieved outside this Changed() block
	}
	flagEventLogValue := m.EventLog
	if swag.IsZero(flagEventLogValue) {
		flagEventLogValue = &models.VolumeInlineAntiRansomwareInlineEventLog{}
	}

	err, EventLogAdded := retrieveModelVolumeInlineAntiRansomwareInlineEventLogFlags(depth+1, flagEventLogValue, flagEventLogName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EventLogAdded
	if EventLogAdded {
		m.EventLog = flagEventLogValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropSpaceFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSpaceName := fmt.Sprintf("%v.space", cmdPrefix)
	if cmd.Flags().Changed(flagSpaceName) {
		// info: complex object space VolumeInlineAntiRansomwareInlineSpace is retrieved outside this Changed() block
	}
	flagSpaceValue := m.Space
	if swag.IsZero(flagSpaceValue) {
		flagSpaceValue = &models.VolumeInlineAntiRansomwareInlineSpace{}
	}

	err, SpaceAdded := retrieveModelVolumeInlineAntiRansomwareInlineSpaceFlags(depth+1, flagSpaceValue, flagSpaceName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceAdded
	if SpaceAdded {
		m.Space = flagSpaceValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropStateFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropSurgeAsNormalFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSurgeAsNormalName := fmt.Sprintf("%v.surge_as_normal", cmdPrefix)
	if cmd.Flags().Changed(flagSurgeAsNormalName) {

		var flagSurgeAsNormalName string
		if cmdPrefix == "" {
			flagSurgeAsNormalName = "surge_as_normal"
		} else {
			flagSurgeAsNormalName = fmt.Sprintf("%v.surge_as_normal", cmdPrefix)
		}

		flagSurgeAsNormalValue, err := cmd.Flags().GetBool(flagSurgeAsNormalName)
		if err != nil {
			return err, false
		}
		m.SurgeAsNormal = &flagSurgeAsNormalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropSurgeUsageFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSurgeUsageName := fmt.Sprintf("%v.surge_usage", cmdPrefix)
	if cmd.Flags().Changed(flagSurgeUsageName) {
		// info: complex object surge_usage VolumeInlineAntiRansomwareInlineSurgeUsage is retrieved outside this Changed() block
	}
	flagSurgeUsageValue := m.SurgeUsage
	if swag.IsZero(flagSurgeUsageValue) {
		flagSurgeUsageValue = &models.VolumeInlineAntiRansomwareInlineSurgeUsage{}
	}

	err, SurgeUsageAdded := retrieveModelVolumeInlineAntiRansomwareInlineSurgeUsageFlags(depth+1, flagSurgeUsageValue, flagSurgeUsageName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SurgeUsageAdded
	if SurgeUsageAdded {
		m.SurgeUsage = flagSurgeUsageValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropSuspectFilesFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSuspectFilesName := fmt.Sprintf("%v.suspect_files", cmdPrefix)
	if cmd.Flags().Changed(flagSuspectFilesName) {
		// warning: suspect_files array type []*VolumeAntiRansomwareSuspectFilesItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropTypicalUsageFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypicalUsageName := fmt.Sprintf("%v.typical_usage", cmdPrefix)
	if cmd.Flags().Changed(flagTypicalUsageName) {
		// info: complex object typical_usage VolumeInlineAntiRansomwareInlineTypicalUsage is retrieved outside this Changed() block
	}
	flagTypicalUsageValue := m.TypicalUsage
	if swag.IsZero(flagTypicalUsageValue) {
		flagTypicalUsageValue = &models.VolumeInlineAntiRansomwareInlineTypicalUsage{}
	}

	err, TypicalUsageAdded := retrieveModelVolumeInlineAntiRansomwareInlineTypicalUsageFlags(depth+1, flagTypicalUsageValue, flagTypicalUsageName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypicalUsageAdded
	if TypicalUsageAdded {
		m.TypicalUsage = flagTypicalUsageValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropUpdateBaselineFromSurgeFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUpdateBaselineFromSurgeName := fmt.Sprintf("%v.update_baseline_from_surge", cmdPrefix)
	if cmd.Flags().Changed(flagUpdateBaselineFromSurgeName) {

		var flagUpdateBaselineFromSurgeName string
		if cmdPrefix == "" {
			flagUpdateBaselineFromSurgeName = "update_baseline_from_surge"
		} else {
			flagUpdateBaselineFromSurgeName = fmt.Sprintf("%v.update_baseline_from_surge", cmdPrefix)
		}

		flagUpdateBaselineFromSurgeValue, err := cmd.Flags().GetBool(flagUpdateBaselineFromSurgeName)
		if err != nil {
			return err, false
		}
		m.UpdateBaselineFromSurge = &flagUpdateBaselineFromSurgeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwarePropWorkloadFlags(depth int, m *models.VolumeInlineAntiRansomware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWorkloadName := fmt.Sprintf("%v.workload", cmdPrefix)
	if cmd.Flags().Changed(flagWorkloadName) {
		// info: complex object workload AntiRansomwareVolumeWorkload is retrieved outside this Changed() block
	}
	flagWorkloadValue := m.Workload
	if swag.IsZero(flagWorkloadValue) {
		flagWorkloadValue = &models.AntiRansomwareVolumeWorkload{}
	}

	err, WorkloadAdded := retrieveModelAntiRansomwareVolumeWorkloadFlags(depth+1, flagWorkloadValue, flagWorkloadName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WorkloadAdded
	if WorkloadAdded {
		m.Workload = flagWorkloadValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAntiRansomwareInlineEventLog

// register flags to command
func registerModelVolumeInlineAntiRansomwareInlineEventLogFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAntiRansomwareInlineEventLogPropIsEnabledOnNewFileExtensionSeen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineEventLogPropIsEnabledOnSnapshotCopyCreation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAntiRansomwareInlineEventLogPropIsEnabledOnNewFileExtensionSeen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsEnabledOnNewFileExtensionSeenDescription := `Specifies whether to send an EMS when a new file extension is discovered.`

	var flagIsEnabledOnNewFileExtensionSeenName string
	if cmdPrefix == "" {
		flagIsEnabledOnNewFileExtensionSeenName = "is_enabled_on_new_file_extension_seen"
	} else {
		flagIsEnabledOnNewFileExtensionSeenName = fmt.Sprintf("%v.is_enabled_on_new_file_extension_seen", cmdPrefix)
	}

	var flagIsEnabledOnNewFileExtensionSeenDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsEnabledOnNewFileExtensionSeenName, flagIsEnabledOnNewFileExtensionSeenDefault, flagIsEnabledOnNewFileExtensionSeenDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineEventLogPropIsEnabledOnSnapshotCopyCreation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsEnabledOnSnapshotCopyCreationDescription := `Specifies whether to send an EMS when a snapshot is created.`

	var flagIsEnabledOnSnapshotCopyCreationName string
	if cmdPrefix == "" {
		flagIsEnabledOnSnapshotCopyCreationName = "is_enabled_on_snapshot_copy_creation"
	} else {
		flagIsEnabledOnSnapshotCopyCreationName = fmt.Sprintf("%v.is_enabled_on_snapshot_copy_creation", cmdPrefix)
	}

	var flagIsEnabledOnSnapshotCopyCreationDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsEnabledOnSnapshotCopyCreationName, flagIsEnabledOnSnapshotCopyCreationDefault, flagIsEnabledOnSnapshotCopyCreationDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAntiRansomwareInlineEventLogFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineEventLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, IsEnabledOnNewFileExtensionSeenAdded := retrieveVolumeInlineAntiRansomwareInlineEventLogPropIsEnabledOnNewFileExtensionSeenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsEnabledOnNewFileExtensionSeenAdded

	err, IsEnabledOnSnapshotCopyCreationAdded := retrieveVolumeInlineAntiRansomwareInlineEventLogPropIsEnabledOnSnapshotCopyCreationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsEnabledOnSnapshotCopyCreationAdded

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineEventLogPropIsEnabledOnNewFileExtensionSeenFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineEventLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsEnabledOnNewFileExtensionSeenName := fmt.Sprintf("%v.is_enabled_on_new_file_extension_seen", cmdPrefix)
	if cmd.Flags().Changed(flagIsEnabledOnNewFileExtensionSeenName) {

		var flagIsEnabledOnNewFileExtensionSeenName string
		if cmdPrefix == "" {
			flagIsEnabledOnNewFileExtensionSeenName = "is_enabled_on_new_file_extension_seen"
		} else {
			flagIsEnabledOnNewFileExtensionSeenName = fmt.Sprintf("%v.is_enabled_on_new_file_extension_seen", cmdPrefix)
		}

		flagIsEnabledOnNewFileExtensionSeenValue, err := cmd.Flags().GetBool(flagIsEnabledOnNewFileExtensionSeenName)
		if err != nil {
			return err, false
		}
		m.IsEnabledOnNewFileExtensionSeen = &flagIsEnabledOnNewFileExtensionSeenValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineEventLogPropIsEnabledOnSnapshotCopyCreationFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineEventLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsEnabledOnSnapshotCopyCreationName := fmt.Sprintf("%v.is_enabled_on_snapshot_copy_creation", cmdPrefix)
	if cmd.Flags().Changed(flagIsEnabledOnSnapshotCopyCreationName) {

		var flagIsEnabledOnSnapshotCopyCreationName string
		if cmdPrefix == "" {
			flagIsEnabledOnSnapshotCopyCreationName = "is_enabled_on_snapshot_copy_creation"
		} else {
			flagIsEnabledOnSnapshotCopyCreationName = fmt.Sprintf("%v.is_enabled_on_snapshot_copy_creation", cmdPrefix)
		}

		flagIsEnabledOnSnapshotCopyCreationValue, err := cmd.Flags().GetBool(flagIsEnabledOnSnapshotCopyCreationName)
		if err != nil {
			return err, false
		}
		m.IsEnabledOnSnapshotCopyCreation = &flagIsEnabledOnSnapshotCopyCreationValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAntiRansomwareInlineSpace

// register flags to command
func registerModelVolumeInlineAntiRansomwareInlineSpaceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAntiRansomwareInlineSpacePropSnapshotCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineSpacePropUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineSpacePropUsedByLogs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineSpacePropUsedBySnapshots(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAntiRansomwareInlineSpacePropSnapshotCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSnapshotCountDescription := `Total number of Anti-ransomware backup snapshots.`

	var flagSnapshotCountName string
	if cmdPrefix == "" {
		flagSnapshotCountName = "snapshot_count"
	} else {
		flagSnapshotCountName = fmt.Sprintf("%v.snapshot_count", cmdPrefix)
	}

	var flagSnapshotCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagSnapshotCountName, flagSnapshotCountDefault, flagSnapshotCountDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineSpacePropUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedDescription := `Total space in bytes used by the Anti-ransomware feature.`

	var flagUsedName string
	if cmdPrefix == "" {
		flagUsedName = "used"
	} else {
		flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
	}

	var flagUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedName, flagUsedDefault, flagUsedDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineSpacePropUsedByLogs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedByLogsDescription := `Space in bytes used by the Anti-ransomware analytics logs.`

	var flagUsedByLogsName string
	if cmdPrefix == "" {
		flagUsedByLogsName = "used_by_logs"
	} else {
		flagUsedByLogsName = fmt.Sprintf("%v.used_by_logs", cmdPrefix)
	}

	var flagUsedByLogsDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedByLogsName, flagUsedByLogsDefault, flagUsedByLogsDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineSpacePropUsedBySnapshots(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedBySnapshotsDescription := `Space in bytes used by the Anti-ransomware backup snapshots.`

	var flagUsedBySnapshotsName string
	if cmdPrefix == "" {
		flagUsedBySnapshotsName = "used_by_snapshots"
	} else {
		flagUsedBySnapshotsName = fmt.Sprintf("%v.used_by_snapshots", cmdPrefix)
	}

	var flagUsedBySnapshotsDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedBySnapshotsName, flagUsedBySnapshotsDefault, flagUsedBySnapshotsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAntiRansomwareInlineSpaceFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SnapshotCountAdded := retrieveVolumeInlineAntiRansomwareInlineSpacePropSnapshotCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotCountAdded

	err, UsedAdded := retrieveVolumeInlineAntiRansomwareInlineSpacePropUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedAdded

	err, UsedByLogsAdded := retrieveVolumeInlineAntiRansomwareInlineSpacePropUsedByLogsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedByLogsAdded

	err, UsedBySnapshotsAdded := retrieveVolumeInlineAntiRansomwareInlineSpacePropUsedBySnapshotsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedBySnapshotsAdded

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineSpacePropSnapshotCountFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnapshotCountName := fmt.Sprintf("%v.snapshot_count", cmdPrefix)
	if cmd.Flags().Changed(flagSnapshotCountName) {

		var flagSnapshotCountName string
		if cmdPrefix == "" {
			flagSnapshotCountName = "snapshot_count"
		} else {
			flagSnapshotCountName = fmt.Sprintf("%v.snapshot_count", cmdPrefix)
		}

		flagSnapshotCountValue, err := cmd.Flags().GetInt64(flagSnapshotCountName)
		if err != nil {
			return err, false
		}
		m.SnapshotCount = &flagSnapshotCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineSpacePropUsedFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedName := fmt.Sprintf("%v.used", cmdPrefix)
	if cmd.Flags().Changed(flagUsedName) {

		var flagUsedName string
		if cmdPrefix == "" {
			flagUsedName = "used"
		} else {
			flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
		}

		flagUsedValue, err := cmd.Flags().GetInt64(flagUsedName)
		if err != nil {
			return err, false
		}
		m.Used = &flagUsedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineSpacePropUsedByLogsFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedByLogsName := fmt.Sprintf("%v.used_by_logs", cmdPrefix)
	if cmd.Flags().Changed(flagUsedByLogsName) {

		var flagUsedByLogsName string
		if cmdPrefix == "" {
			flagUsedByLogsName = "used_by_logs"
		} else {
			flagUsedByLogsName = fmt.Sprintf("%v.used_by_logs", cmdPrefix)
		}

		flagUsedByLogsValue, err := cmd.Flags().GetInt64(flagUsedByLogsName)
		if err != nil {
			return err, false
		}
		m.UsedByLogs = &flagUsedByLogsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineSpacePropUsedBySnapshotsFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedBySnapshotsName := fmt.Sprintf("%v.used_by_snapshots", cmdPrefix)
	if cmd.Flags().Changed(flagUsedBySnapshotsName) {

		var flagUsedBySnapshotsName string
		if cmdPrefix == "" {
			flagUsedBySnapshotsName = "used_by_snapshots"
		} else {
			flagUsedBySnapshotsName = fmt.Sprintf("%v.used_by_snapshots", cmdPrefix)
		}

		flagUsedBySnapshotsValue, err := cmd.Flags().GetInt64(flagUsedBySnapshotsName)
		if err != nil {
			return err, false
		}
		m.UsedBySnapshots = &flagUsedBySnapshotsValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAntiRansomwareInlineSurgeUsage

// register flags to command
func registerModelVolumeInlineAntiRansomwareInlineSurgeUsageFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAntiRansomwareInlineSurgeUsagePropFileCreatePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineSurgeUsagePropFileDeletePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineSurgeUsagePropFileRenamePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineSurgeUsagePropHighEntropyDataWritePeakPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineSurgeUsagePropHighEntropyDataWritePeakRateKbPerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineSurgeUsagePropTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAntiRansomwareInlineSurgeUsagePropFileCreatePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileCreatePeakRatePerMinuteDescription := `Peak rate of file creates per minute in the workload of the volume during surge.`

	var flagFileCreatePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileCreatePeakRatePerMinuteName = "file_create_peak_rate_per_minute"
	} else {
		flagFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileCreatePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileCreatePeakRatePerMinuteName, flagFileCreatePeakRatePerMinuteDefault, flagFileCreatePeakRatePerMinuteDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineSurgeUsagePropFileDeletePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileDeletePeakRatePerMinuteDescription := `Peak rate of file deletes per minute in the workload of the volume during surge.`

	var flagFileDeletePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileDeletePeakRatePerMinuteName = "file_delete_peak_rate_per_minute"
	} else {
		flagFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileDeletePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileDeletePeakRatePerMinuteName, flagFileDeletePeakRatePerMinuteDefault, flagFileDeletePeakRatePerMinuteDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineSurgeUsagePropFileRenamePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileRenamePeakRatePerMinuteDescription := `Peak rate of file renames per minute in the workload of the volume during surge.`

	var flagFileRenamePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileRenamePeakRatePerMinuteName = "file_rename_peak_rate_per_minute"
	} else {
		flagFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileRenamePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileRenamePeakRatePerMinuteName, flagFileRenamePeakRatePerMinuteDefault, flagFileRenamePeakRatePerMinuteDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineSurgeUsagePropHighEntropyDataWritePeakPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHighEntropyDataWritePeakPercentDescription := `Peak percentage of high entropy data writes in the volume during surge.`

	var flagHighEntropyDataWritePeakPercentName string
	if cmdPrefix == "" {
		flagHighEntropyDataWritePeakPercentName = "high_entropy_data_write_peak_percent"
	} else {
		flagHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
	}

	var flagHighEntropyDataWritePeakPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagHighEntropyDataWritePeakPercentName, flagHighEntropyDataWritePeakPercentDefault, flagHighEntropyDataWritePeakPercentDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineSurgeUsagePropHighEntropyDataWritePeakRateKbPerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHighEntropyDataWritePeakRateKbPerMinuteDescription := `Peak high entropy data write rate in the volume during surge, in KBs per minute.`

	var flagHighEntropyDataWritePeakRateKbPerMinuteName string
	if cmdPrefix == "" {
		flagHighEntropyDataWritePeakRateKbPerMinuteName = "high_entropy_data_write_peak_rate_kb_per_minute"
	} else {
		flagHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	}

	var flagHighEntropyDataWritePeakRateKbPerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagHighEntropyDataWritePeakRateKbPerMinuteName, flagHighEntropyDataWritePeakRateKbPerMinuteDefault, flagHighEntropyDataWritePeakRateKbPerMinuteDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineSurgeUsagePropTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTimeDescription := `Timestamp at which the first surge in the volume's workload is observed.`

	var flagTimeName string
	if cmdPrefix == "" {
		flagTimeName = "time"
	} else {
		flagTimeName = fmt.Sprintf("%v.time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagTimeName, "", flagTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAntiRansomwareInlineSurgeUsageFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, FileCreatePeakRatePerMinuteAdded := retrieveVolumeInlineAntiRansomwareInlineSurgeUsagePropFileCreatePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileCreatePeakRatePerMinuteAdded

	err, FileDeletePeakRatePerMinuteAdded := retrieveVolumeInlineAntiRansomwareInlineSurgeUsagePropFileDeletePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileDeletePeakRatePerMinuteAdded

	err, FileRenamePeakRatePerMinuteAdded := retrieveVolumeInlineAntiRansomwareInlineSurgeUsagePropFileRenamePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileRenamePeakRatePerMinuteAdded

	err, HighEntropyDataWritePeakPercentAdded := retrieveVolumeInlineAntiRansomwareInlineSurgeUsagePropHighEntropyDataWritePeakPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HighEntropyDataWritePeakPercentAdded

	err, HighEntropyDataWritePeakRateKbPerMinuteAdded := retrieveVolumeInlineAntiRansomwareInlineSurgeUsagePropHighEntropyDataWritePeakRateKbPerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HighEntropyDataWritePeakRateKbPerMinuteAdded

	err, TimeAdded := retrieveVolumeInlineAntiRansomwareInlineSurgeUsagePropTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineSurgeUsagePropFileCreatePeakRatePerMinuteFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileCreatePeakRatePerMinuteName := fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileCreatePeakRatePerMinuteName) {

		var flagFileCreatePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileCreatePeakRatePerMinuteName = "file_create_peak_rate_per_minute"
		} else {
			flagFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
		}

		flagFileCreatePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileCreatePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileCreatePeakRatePerMinute = &flagFileCreatePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineSurgeUsagePropFileDeletePeakRatePerMinuteFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileDeletePeakRatePerMinuteName := fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileDeletePeakRatePerMinuteName) {

		var flagFileDeletePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileDeletePeakRatePerMinuteName = "file_delete_peak_rate_per_minute"
		} else {
			flagFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
		}

		flagFileDeletePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileDeletePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileDeletePeakRatePerMinute = &flagFileDeletePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineSurgeUsagePropFileRenamePeakRatePerMinuteFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileRenamePeakRatePerMinuteName := fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileRenamePeakRatePerMinuteName) {

		var flagFileRenamePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileRenamePeakRatePerMinuteName = "file_rename_peak_rate_per_minute"
		} else {
			flagFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
		}

		flagFileRenamePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileRenamePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileRenamePeakRatePerMinute = &flagFileRenamePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineSurgeUsagePropHighEntropyDataWritePeakPercentFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHighEntropyDataWritePeakPercentName := fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
	if cmd.Flags().Changed(flagHighEntropyDataWritePeakPercentName) {

		var flagHighEntropyDataWritePeakPercentName string
		if cmdPrefix == "" {
			flagHighEntropyDataWritePeakPercentName = "high_entropy_data_write_peak_percent"
		} else {
			flagHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
		}

		flagHighEntropyDataWritePeakPercentValue, err := cmd.Flags().GetInt64(flagHighEntropyDataWritePeakPercentName)
		if err != nil {
			return err, false
		}
		m.HighEntropyDataWritePeakPercent = &flagHighEntropyDataWritePeakPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineSurgeUsagePropHighEntropyDataWritePeakRateKbPerMinuteFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHighEntropyDataWritePeakRateKbPerMinuteName := fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagHighEntropyDataWritePeakRateKbPerMinuteName) {

		var flagHighEntropyDataWritePeakRateKbPerMinuteName string
		if cmdPrefix == "" {
			flagHighEntropyDataWritePeakRateKbPerMinuteName = "high_entropy_data_write_peak_rate_kb_per_minute"
		} else {
			flagHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
		}

		flagHighEntropyDataWritePeakRateKbPerMinuteValue, err := cmd.Flags().GetInt64(flagHighEntropyDataWritePeakRateKbPerMinuteName)
		if err != nil {
			return err, false
		}
		m.HighEntropyDataWritePeakRateKbPerMinute = &flagHighEntropyDataWritePeakRateKbPerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineSurgeUsagePropTimeFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineSurgeUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTimeName := fmt.Sprintf("%v.time", cmdPrefix)
	if cmd.Flags().Changed(flagTimeName) {

		var flagTimeName string
		if cmdPrefix == "" {
			flagTimeName = "time"
		} else {
			flagTimeName = fmt.Sprintf("%v.time", cmdPrefix)
		}

		flagTimeValueStr, err := cmd.Flags().GetString(flagTimeName)
		if err != nil {
			return err, false
		}
		var flagTimeValue strfmt.DateTime
		if err := flagTimeValue.UnmarshalText([]byte(flagTimeValueStr)); err != nil {
			return err, false
		}
		m.Time = &flagTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeAntiRansomwareSuspectFilesItems0

// register flags to command
func registerModelVolumeAntiRansomwareSuspectFilesItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeAntiRansomwareSuspectFilesItems0PropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeAntiRansomwareSuspectFilesItems0PropEntropy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeAntiRansomwareSuspectFilesItems0PropFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeAntiRansomwareSuspectFilesItems0PropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Total number of ` + "`" + `suspect_files.format` + "`" + ` files observed by the Anti-ransomware analytics engine on the volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeAntiRansomwareSuspectFilesItems0PropEntropy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEntropyDescription := `Indicates the entropy level of this file type.`

	var flagEntropyName string
	if cmdPrefix == "" {
		flagEntropyName = "entropy"
	} else {
		flagEntropyName = fmt.Sprintf("%v.entropy", cmdPrefix)
	}

	var flagEntropyDefault string

	_ = cmd.PersistentFlags().String(flagEntropyName, flagEntropyDefault, flagEntropyDescription)

	return nil
}

func registerVolumeAntiRansomwareSuspectFilesItems0PropFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFormatDescription := `File formats observed by the Anti-ransomware analytics engine on the volume.`

	var flagFormatName string
	if cmdPrefix == "" {
		flagFormatName = "format"
	} else {
		flagFormatName = fmt.Sprintf("%v.format", cmdPrefix)
	}

	var flagFormatDefault string

	_ = cmd.PersistentFlags().String(flagFormatName, flagFormatDefault, flagFormatDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeAntiRansomwareSuspectFilesItems0Flags(depth int, m *models.VolumeAntiRansomwareSuspectFilesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeAntiRansomwareSuspectFilesItems0PropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, EntropyAdded := retrieveVolumeAntiRansomwareSuspectFilesItems0PropEntropyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EntropyAdded

	err, FormatAdded := retrieveVolumeAntiRansomwareSuspectFilesItems0PropFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FormatAdded

	return nil, retAdded
}

func retrieveVolumeAntiRansomwareSuspectFilesItems0PropCountFlags(depth int, m *models.VolumeAntiRansomwareSuspectFilesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeAntiRansomwareSuspectFilesItems0PropEntropyFlags(depth int, m *models.VolumeAntiRansomwareSuspectFilesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEntropyName := fmt.Sprintf("%v.entropy", cmdPrefix)
	if cmd.Flags().Changed(flagEntropyName) {

		var flagEntropyName string
		if cmdPrefix == "" {
			flagEntropyName = "entropy"
		} else {
			flagEntropyName = fmt.Sprintf("%v.entropy", cmdPrefix)
		}

		flagEntropyValue, err := cmd.Flags().GetString(flagEntropyName)
		if err != nil {
			return err, false
		}
		m.Entropy = &flagEntropyValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeAntiRansomwareSuspectFilesItems0PropFormatFlags(depth int, m *models.VolumeAntiRansomwareSuspectFilesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFormatName := fmt.Sprintf("%v.format", cmdPrefix)
	if cmd.Flags().Changed(flagFormatName) {

		var flagFormatName string
		if cmdPrefix == "" {
			flagFormatName = "format"
		} else {
			flagFormatName = fmt.Sprintf("%v.format", cmdPrefix)
		}

		flagFormatValue, err := cmd.Flags().GetString(flagFormatName)
		if err != nil {
			return err, false
		}
		m.Format = &flagFormatValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAntiRansomwareInlineTypicalUsage

// register flags to command
func registerModelVolumeInlineAntiRansomwareInlineTypicalUsageFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAntiRansomwareInlineTypicalUsagePropFileCreatePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineTypicalUsagePropFileDeletePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineTypicalUsagePropFileRenamePeakRatePerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineTypicalUsagePropHighEntropyDataWritePeakPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAntiRansomwareInlineTypicalUsagePropHighEntropyDataWritePeakRateKbPerMinute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAntiRansomwareInlineTypicalUsagePropFileCreatePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileCreatePeakRatePerMinuteDescription := `Typical peak rate of file creates per minute in the workload of the volume.`

	var flagFileCreatePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileCreatePeakRatePerMinuteName = "file_create_peak_rate_per_minute"
	} else {
		flagFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileCreatePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileCreatePeakRatePerMinuteName, flagFileCreatePeakRatePerMinuteDefault, flagFileCreatePeakRatePerMinuteDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineTypicalUsagePropFileDeletePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileDeletePeakRatePerMinuteDescription := `Typical peak rate of file deletes per minute in the workload of the volume.`

	var flagFileDeletePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileDeletePeakRatePerMinuteName = "file_delete_peak_rate_per_minute"
	} else {
		flagFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileDeletePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileDeletePeakRatePerMinuteName, flagFileDeletePeakRatePerMinuteDefault, flagFileDeletePeakRatePerMinuteDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineTypicalUsagePropFileRenamePeakRatePerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileRenamePeakRatePerMinuteDescription := `Typical peak rate of file renames per minute in the workload of the volume.`

	var flagFileRenamePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagFileRenamePeakRatePerMinuteName = "file_rename_peak_rate_per_minute"
	} else {
		flagFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
	}

	var flagFileRenamePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileRenamePeakRatePerMinuteName, flagFileRenamePeakRatePerMinuteDefault, flagFileRenamePeakRatePerMinuteDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineTypicalUsagePropHighEntropyDataWritePeakPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHighEntropyDataWritePeakPercentDescription := `Typical peak percentage of high entropy data writes in the volume.`

	var flagHighEntropyDataWritePeakPercentName string
	if cmdPrefix == "" {
		flagHighEntropyDataWritePeakPercentName = "high_entropy_data_write_peak_percent"
	} else {
		flagHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
	}

	var flagHighEntropyDataWritePeakPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagHighEntropyDataWritePeakPercentName, flagHighEntropyDataWritePeakPercentDefault, flagHighEntropyDataWritePeakPercentDescription)

	return nil
}

func registerVolumeInlineAntiRansomwareInlineTypicalUsagePropHighEntropyDataWritePeakRateKbPerMinute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHighEntropyDataWritePeakRateKbPerMinuteDescription := `Typical peak high entropy data write rate in the volume, in KBs per minute.`

	var flagHighEntropyDataWritePeakRateKbPerMinuteName string
	if cmdPrefix == "" {
		flagHighEntropyDataWritePeakRateKbPerMinuteName = "high_entropy_data_write_peak_rate_kb_per_minute"
	} else {
		flagHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	}

	var flagHighEntropyDataWritePeakRateKbPerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagHighEntropyDataWritePeakRateKbPerMinuteName, flagHighEntropyDataWritePeakRateKbPerMinuteDefault, flagHighEntropyDataWritePeakRateKbPerMinuteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAntiRansomwareInlineTypicalUsageFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineTypicalUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, FileCreatePeakRatePerMinuteAdded := retrieveVolumeInlineAntiRansomwareInlineTypicalUsagePropFileCreatePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileCreatePeakRatePerMinuteAdded

	err, FileDeletePeakRatePerMinuteAdded := retrieveVolumeInlineAntiRansomwareInlineTypicalUsagePropFileDeletePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileDeletePeakRatePerMinuteAdded

	err, FileRenamePeakRatePerMinuteAdded := retrieveVolumeInlineAntiRansomwareInlineTypicalUsagePropFileRenamePeakRatePerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileRenamePeakRatePerMinuteAdded

	err, HighEntropyDataWritePeakPercentAdded := retrieveVolumeInlineAntiRansomwareInlineTypicalUsagePropHighEntropyDataWritePeakPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HighEntropyDataWritePeakPercentAdded

	err, HighEntropyDataWritePeakRateKbPerMinuteAdded := retrieveVolumeInlineAntiRansomwareInlineTypicalUsagePropHighEntropyDataWritePeakRateKbPerMinuteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HighEntropyDataWritePeakRateKbPerMinuteAdded

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineTypicalUsagePropFileCreatePeakRatePerMinuteFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineTypicalUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileCreatePeakRatePerMinuteName := fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileCreatePeakRatePerMinuteName) {

		var flagFileCreatePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileCreatePeakRatePerMinuteName = "file_create_peak_rate_per_minute"
		} else {
			flagFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.file_create_peak_rate_per_minute", cmdPrefix)
		}

		flagFileCreatePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileCreatePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileCreatePeakRatePerMinute = &flagFileCreatePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineTypicalUsagePropFileDeletePeakRatePerMinuteFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineTypicalUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileDeletePeakRatePerMinuteName := fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileDeletePeakRatePerMinuteName) {

		var flagFileDeletePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileDeletePeakRatePerMinuteName = "file_delete_peak_rate_per_minute"
		} else {
			flagFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.file_delete_peak_rate_per_minute", cmdPrefix)
		}

		flagFileDeletePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileDeletePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileDeletePeakRatePerMinute = &flagFileDeletePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineTypicalUsagePropFileRenamePeakRatePerMinuteFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineTypicalUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileRenamePeakRatePerMinuteName := fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagFileRenamePeakRatePerMinuteName) {

		var flagFileRenamePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagFileRenamePeakRatePerMinuteName = "file_rename_peak_rate_per_minute"
		} else {
			flagFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.file_rename_peak_rate_per_minute", cmdPrefix)
		}

		flagFileRenamePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagFileRenamePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.FileRenamePeakRatePerMinute = &flagFileRenamePeakRatePerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineTypicalUsagePropHighEntropyDataWritePeakPercentFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineTypicalUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHighEntropyDataWritePeakPercentName := fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
	if cmd.Flags().Changed(flagHighEntropyDataWritePeakPercentName) {

		var flagHighEntropyDataWritePeakPercentName string
		if cmdPrefix == "" {
			flagHighEntropyDataWritePeakPercentName = "high_entropy_data_write_peak_percent"
		} else {
			flagHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.high_entropy_data_write_peak_percent", cmdPrefix)
		}

		flagHighEntropyDataWritePeakPercentValue, err := cmd.Flags().GetInt64(flagHighEntropyDataWritePeakPercentName)
		if err != nil {
			return err, false
		}
		m.HighEntropyDataWritePeakPercent = &flagHighEntropyDataWritePeakPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAntiRansomwareInlineTypicalUsagePropHighEntropyDataWritePeakRateKbPerMinuteFlags(depth int, m *models.VolumeInlineAntiRansomwareInlineTypicalUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHighEntropyDataWritePeakRateKbPerMinuteName := fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	if cmd.Flags().Changed(flagHighEntropyDataWritePeakRateKbPerMinuteName) {

		var flagHighEntropyDataWritePeakRateKbPerMinuteName string
		if cmdPrefix == "" {
			flagHighEntropyDataWritePeakRateKbPerMinuteName = "high_entropy_data_write_peak_rate_kb_per_minute"
		} else {
			flagHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
		}

		flagHighEntropyDataWritePeakRateKbPerMinuteValue, err := cmd.Flags().GetInt64(flagHighEntropyDataWritePeakRateKbPerMinuteName)
		if err != nil {
			return err, false
		}
		m.HighEntropyDataWritePeakRateKbPerMinute = &flagHighEntropyDataWritePeakRateKbPerMinuteValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineApplication

// register flags to command
func registerModelVolumeInlineApplicationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineApplicationPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineApplicationPropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineApplicationPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `Name of the application to which the volume belongs. Available only when the volume is part of an application.`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineApplicationPropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := `UUID of the application to which the volume belongs. Available only when the volume is part of an application.`

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineApplicationFlags(depth int, m *models.VolumeInlineApplication, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NameAdded := retrieveVolumeInlineApplicationPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineApplicationPropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineApplicationPropNameFlags(depth int, m *models.VolumeInlineApplication, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineApplicationPropUUIDFlags(depth int, m *models.VolumeInlineApplication, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAsynchronousDirectoryDelete

// register flags to command
func registerModelVolumeInlineAsynchronousDirectoryDeleteFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAsynchronousDirectoryDeletePropEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAsynchronousDirectoryDeletePropTrashBin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAsynchronousDirectoryDeletePropEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEnabledDescription := `Specifies whether asynchronous directory delete from the client is enabled on the volume.`

	var flagEnabledName string
	if cmdPrefix == "" {
		flagEnabledName = "enabled"
	} else {
		flagEnabledName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var flagEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagEnabledName, flagEnabledDefault, flagEnabledDescription)

	return nil
}

func registerVolumeInlineAsynchronousDirectoryDeletePropTrashBin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTrashBinDescription := `Name of the trash bin directory. If no "trash_bin" property is specified when enabling, the default trash bin name, "._ontaptrashbin", is used.`

	var flagTrashBinName string
	if cmdPrefix == "" {
		flagTrashBinName = "trash_bin"
	} else {
		flagTrashBinName = fmt.Sprintf("%v.trash_bin", cmdPrefix)
	}

	var flagTrashBinDefault string

	_ = cmd.PersistentFlags().String(flagTrashBinName, flagTrashBinDefault, flagTrashBinDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAsynchronousDirectoryDeleteFlags(depth int, m *models.VolumeInlineAsynchronousDirectoryDelete, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EnabledAdded := retrieveVolumeInlineAsynchronousDirectoryDeletePropEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnabledAdded

	err, TrashBinAdded := retrieveVolumeInlineAsynchronousDirectoryDeletePropTrashBinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TrashBinAdded

	return nil, retAdded
}

func retrieveVolumeInlineAsynchronousDirectoryDeletePropEnabledFlags(depth int, m *models.VolumeInlineAsynchronousDirectoryDelete, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEnabledName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(flagEnabledName) {

		var flagEnabledName string
		if cmdPrefix == "" {
			flagEnabledName = "enabled"
		} else {
			flagEnabledName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		flagEnabledValue, err := cmd.Flags().GetBool(flagEnabledName)
		if err != nil {
			return err, false
		}
		m.Enabled = &flagEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAsynchronousDirectoryDeletePropTrashBinFlags(depth int, m *models.VolumeInlineAsynchronousDirectoryDelete, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTrashBinName := fmt.Sprintf("%v.trash_bin", cmdPrefix)
	if cmd.Flags().Changed(flagTrashBinName) {

		var flagTrashBinName string
		if cmdPrefix == "" {
			flagTrashBinName = "trash_bin"
		} else {
			flagTrashBinName = fmt.Sprintf("%v.trash_bin", cmdPrefix)
		}

		flagTrashBinValue, err := cmd.Flags().GetString(flagTrashBinName)
		if err != nil {
			return err, false
		}
		m.TrashBin = &flagTrashBinValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineAutosize

// register flags to command
func registerModelVolumeInlineAutosizeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineAutosizePropGrowThreshold(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAutosizePropMaximum(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAutosizePropMinimum(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAutosizePropMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineAutosizePropShrinkThreshold(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAutosizePropGrowThreshold(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagGrowThresholdDescription := `Used space threshold size, in percentage, for the automatic growth of the volume. When the amount of used space in the volume becomes greater than this threshold, the volume automatically grows unless it has reached the maximum size. The volume grows when 'space.used' is greater than this percent of 'space.size'. The 'grow_threshold' size cannot be less than or equal to the 'shrink_threshold' size..`

	var flagGrowThresholdName string
	if cmdPrefix == "" {
		flagGrowThresholdName = "grow_threshold"
	} else {
		flagGrowThresholdName = fmt.Sprintf("%v.grow_threshold", cmdPrefix)
	}

	var flagGrowThresholdDefault int64

	_ = cmd.PersistentFlags().Int64(flagGrowThresholdName, flagGrowThresholdDefault, flagGrowThresholdDescription)

	return nil
}

func registerVolumeInlineAutosizePropMaximum(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMaximumDescription := `Maximum size in bytes up to which a volume grows automatically. This size cannot be less than the current volume size, or less than or equal to the minimum size of volume.`

	var flagMaximumName string
	if cmdPrefix == "" {
		flagMaximumName = "maximum"
	} else {
		flagMaximumName = fmt.Sprintf("%v.maximum", cmdPrefix)
	}

	var flagMaximumDefault int64

	_ = cmd.PersistentFlags().Int64(flagMaximumName, flagMaximumDefault, flagMaximumDescription)

	return nil
}

func registerVolumeInlineAutosizePropMinimum(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMinimumDescription := `Minimum size in bytes up to which the volume shrinks automatically. This size cannot be greater than or equal to the maximum size of volume.`

	var flagMinimumName string
	if cmdPrefix == "" {
		flagMinimumName = "minimum"
	} else {
		flagMinimumName = fmt.Sprintf("%v.minimum", cmdPrefix)
	}

	var flagMinimumDefault int64

	_ = cmd.PersistentFlags().Int64(flagMinimumName, flagMinimumDefault, flagMinimumDescription)

	return nil
}

func registerVolumeInlineAutosizePropMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagModeDescription := `Enum: ["grow","grow_shrink","off"]. Autosize mode for the volume.<br>grow &dash; Volume automatically grows when the amount of used space is above the 'grow_threshold' value.<br>grow_shrink &dash; Volume grows or shrinks in response to the amount of space used.<br>off &dash; Autosizing of the volume is disabled.`

	var flagModeName string
	if cmdPrefix == "" {
		flagModeName = "mode"
	} else {
		flagModeName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var flagModeDefault string

	_ = cmd.PersistentFlags().String(flagModeName, flagModeDefault, flagModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagModeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["grow","grow_shrink","off"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineAutosizePropShrinkThreshold(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagShrinkThresholdDescription := `Used space threshold size, in percentage, for the automatic shrinkage of the volume.  When the amount of used space in the volume drops below this threshold, the volume automatically shrinks unless it has reached the minimum size. The volume shrinks when the 'space.used' is less than the 'shrink_threshold' percent of 'space.size'. The 'shrink_threshold' size cannot be greater than or equal to the 'grow_threshold' size.`

	var flagShrinkThresholdName string
	if cmdPrefix == "" {
		flagShrinkThresholdName = "shrink_threshold"
	} else {
		flagShrinkThresholdName = fmt.Sprintf("%v.shrink_threshold", cmdPrefix)
	}

	var flagShrinkThresholdDefault int64

	_ = cmd.PersistentFlags().Int64(flagShrinkThresholdName, flagShrinkThresholdDefault, flagShrinkThresholdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineAutosizeFlags(depth int, m *models.VolumeInlineAutosize, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, GrowThresholdAdded := retrieveVolumeInlineAutosizePropGrowThresholdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GrowThresholdAdded

	err, MaximumAdded := retrieveVolumeInlineAutosizePropMaximumFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaximumAdded

	err, MinimumAdded := retrieveVolumeInlineAutosizePropMinimumFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MinimumAdded

	err, ModeAdded := retrieveVolumeInlineAutosizePropModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ModeAdded

	err, ShrinkThresholdAdded := retrieveVolumeInlineAutosizePropShrinkThresholdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ShrinkThresholdAdded

	return nil, retAdded
}

func retrieveVolumeInlineAutosizePropGrowThresholdFlags(depth int, m *models.VolumeInlineAutosize, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagGrowThresholdName := fmt.Sprintf("%v.grow_threshold", cmdPrefix)
	if cmd.Flags().Changed(flagGrowThresholdName) {

		var flagGrowThresholdName string
		if cmdPrefix == "" {
			flagGrowThresholdName = "grow_threshold"
		} else {
			flagGrowThresholdName = fmt.Sprintf("%v.grow_threshold", cmdPrefix)
		}

		flagGrowThresholdValue, err := cmd.Flags().GetInt64(flagGrowThresholdName)
		if err != nil {
			return err, false
		}
		m.GrowThreshold = &flagGrowThresholdValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAutosizePropMaximumFlags(depth int, m *models.VolumeInlineAutosize, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMaximumName := fmt.Sprintf("%v.maximum", cmdPrefix)
	if cmd.Flags().Changed(flagMaximumName) {

		var flagMaximumName string
		if cmdPrefix == "" {
			flagMaximumName = "maximum"
		} else {
			flagMaximumName = fmt.Sprintf("%v.maximum", cmdPrefix)
		}

		flagMaximumValue, err := cmd.Flags().GetInt64(flagMaximumName)
		if err != nil {
			return err, false
		}
		m.Maximum = &flagMaximumValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAutosizePropMinimumFlags(depth int, m *models.VolumeInlineAutosize, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMinimumName := fmt.Sprintf("%v.minimum", cmdPrefix)
	if cmd.Flags().Changed(flagMinimumName) {

		var flagMinimumName string
		if cmdPrefix == "" {
			flagMinimumName = "minimum"
		} else {
			flagMinimumName = fmt.Sprintf("%v.minimum", cmdPrefix)
		}

		flagMinimumValue, err := cmd.Flags().GetInt64(flagMinimumName)
		if err != nil {
			return err, false
		}
		m.Minimum = &flagMinimumValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAutosizePropModeFlags(depth int, m *models.VolumeInlineAutosize, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagModeName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(flagModeName) {

		var flagModeName string
		if cmdPrefix == "" {
			flagModeName = "mode"
		} else {
			flagModeName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		flagModeValue, err := cmd.Flags().GetString(flagModeName)
		if err != nil {
			return err, false
		}
		m.Mode = &flagModeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineAutosizePropShrinkThresholdFlags(depth int, m *models.VolumeInlineAutosize, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagShrinkThresholdName := fmt.Sprintf("%v.shrink_threshold", cmdPrefix)
	if cmd.Flags().Changed(flagShrinkThresholdName) {

		var flagShrinkThresholdName string
		if cmdPrefix == "" {
			flagShrinkThresholdName = "shrink_threshold"
		} else {
			flagShrinkThresholdName = fmt.Sprintf("%v.shrink_threshold", cmdPrefix)
		}

		flagShrinkThresholdValue, err := cmd.Flags().GetInt64(flagShrinkThresholdName)
		if err != nil {
			return err, false
		}
		m.ShrinkThreshold = &flagShrinkThresholdValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineClone

// register flags to command
func registerModelVolumeInlineCloneFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineClonePropHasFlexclone(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineClonePropInheritedPhysicalUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineClonePropInheritedSavings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineClonePropIsFlexclone(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineClonePropParentSnapshot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineClonePropParentSvm(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineClonePropParentVolume(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineClonePropSplitCompletePercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineClonePropSplitEstimate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineClonePropSplitInitiated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineClonePropHasFlexclone(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHasFlexcloneDescription := `Specifies whether this volume is a parent of any FlexClone volume.`

	var flagHasFlexcloneName string
	if cmdPrefix == "" {
		flagHasFlexcloneName = "has_flexclone"
	} else {
		flagHasFlexcloneName = fmt.Sprintf("%v.has_flexclone", cmdPrefix)
	}

	var flagHasFlexcloneDefault bool

	_ = cmd.PersistentFlags().Bool(flagHasFlexcloneName, flagHasFlexcloneDefault, flagHasFlexcloneDescription)

	return nil
}

func registerVolumeInlineClonePropInheritedPhysicalUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagInheritedPhysicalUsedDescription := `Inherited physical used from the clone's base snapshot.`

	var flagInheritedPhysicalUsedName string
	if cmdPrefix == "" {
		flagInheritedPhysicalUsedName = "inherited_physical_used"
	} else {
		flagInheritedPhysicalUsedName = fmt.Sprintf("%v.inherited_physical_used", cmdPrefix)
	}

	var flagInheritedPhysicalUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagInheritedPhysicalUsedName, flagInheritedPhysicalUsedDefault, flagInheritedPhysicalUsedDescription)

	return nil
}

func registerVolumeInlineClonePropInheritedSavings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagInheritedSavingsDescription := `Inherited savings from the clone's base snapshot.`

	var flagInheritedSavingsName string
	if cmdPrefix == "" {
		flagInheritedSavingsName = "inherited_savings"
	} else {
		flagInheritedSavingsName = fmt.Sprintf("%v.inherited_savings", cmdPrefix)
	}

	var flagInheritedSavingsDefault int64

	_ = cmd.PersistentFlags().Int64(flagInheritedSavingsName, flagInheritedSavingsDefault, flagInheritedSavingsDescription)

	return nil
}

func registerVolumeInlineClonePropIsFlexclone(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsFlexcloneDescription := `Specifies if this volume is a normal FlexVol volume or FlexClone volume. This field needs to be set when creating a FlexClone volume. Valid in POST.`

	var flagIsFlexcloneName string
	if cmdPrefix == "" {
		flagIsFlexcloneName = "is_flexclone"
	} else {
		flagIsFlexcloneName = fmt.Sprintf("%v.is_flexclone", cmdPrefix)
	}

	var flagIsFlexcloneDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsFlexcloneName, flagIsFlexcloneDefault, flagIsFlexcloneDescription)

	return nil
}

func registerVolumeInlineClonePropParentSnapshot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagParentSnapshotName string
	if cmdPrefix == "" {
		flagParentSnapshotName = "parent_snapshot"
	} else {
		flagParentSnapshotName = fmt.Sprintf("%v.parent_snapshot", cmdPrefix)
	}

	if err := registerModelSnapshotReferenceFlags(depth+1, flagParentSnapshotName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineClonePropParentSvm(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagParentSvmName string
	if cmdPrefix == "" {
		flagParentSvmName = "parent_svm"
	} else {
		flagParentSvmName = fmt.Sprintf("%v.parent_svm", cmdPrefix)
	}

	if err := registerModelVolumeInlineCloneInlineParentSvmFlags(depth+1, flagParentSvmName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineClonePropParentVolume(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagParentVolumeName string
	if cmdPrefix == "" {
		flagParentVolumeName = "parent_volume"
	} else {
		flagParentVolumeName = fmt.Sprintf("%v.parent_volume", cmdPrefix)
	}

	if err := registerModelVolumeInlineCloneInlineParentVolumeFlags(depth+1, flagParentVolumeName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineClonePropSplitCompletePercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSplitCompletePercentDescription := `Percentage of FlexClone volume blocks split from its parent volume.`

	var flagSplitCompletePercentName string
	if cmdPrefix == "" {
		flagSplitCompletePercentName = "split_complete_percent"
	} else {
		flagSplitCompletePercentName = fmt.Sprintf("%v.split_complete_percent", cmdPrefix)
	}

	var flagSplitCompletePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagSplitCompletePercentName, flagSplitCompletePercentDefault, flagSplitCompletePercentDescription)

	return nil
}

func registerVolumeInlineClonePropSplitEstimate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSplitEstimateDescription := `Space required by the containing-aggregate to split the FlexClone volume.`

	var flagSplitEstimateName string
	if cmdPrefix == "" {
		flagSplitEstimateName = "split_estimate"
	} else {
		flagSplitEstimateName = fmt.Sprintf("%v.split_estimate", cmdPrefix)
	}

	var flagSplitEstimateDefault int64

	_ = cmd.PersistentFlags().Int64(flagSplitEstimateName, flagSplitEstimateDefault, flagSplitEstimateDescription)

	return nil
}

func registerVolumeInlineClonePropSplitInitiated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSplitInitiatedDescription := `This field is set when a split is executed on any FlexClone volume, that is when the FlexClone volume is split from its parent FlexVol volume. Setting this field initiates a split of a FlexClone volume from a FlexVol volume. Valid in PATCH.`

	var flagSplitInitiatedName string
	if cmdPrefix == "" {
		flagSplitInitiatedName = "split_initiated"
	} else {
		flagSplitInitiatedName = fmt.Sprintf("%v.split_initiated", cmdPrefix)
	}

	var flagSplitInitiatedDefault bool

	_ = cmd.PersistentFlags().Bool(flagSplitInitiatedName, flagSplitInitiatedDefault, flagSplitInitiatedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineCloneFlags(depth int, m *models.VolumeInlineClone, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, HasFlexcloneAdded := retrieveVolumeInlineClonePropHasFlexcloneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HasFlexcloneAdded

	err, InheritedPhysicalUsedAdded := retrieveVolumeInlineClonePropInheritedPhysicalUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InheritedPhysicalUsedAdded

	err, InheritedSavingsAdded := retrieveVolumeInlineClonePropInheritedSavingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InheritedSavingsAdded

	err, IsFlexcloneAdded := retrieveVolumeInlineClonePropIsFlexcloneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsFlexcloneAdded

	err, ParentSnapshotAdded := retrieveVolumeInlineClonePropParentSnapshotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ParentSnapshotAdded

	err, ParentSvmAdded := retrieveVolumeInlineClonePropParentSvmFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ParentSvmAdded

	err, ParentVolumeAdded := retrieveVolumeInlineClonePropParentVolumeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ParentVolumeAdded

	err, SplitCompletePercentAdded := retrieveVolumeInlineClonePropSplitCompletePercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SplitCompletePercentAdded

	err, SplitEstimateAdded := retrieveVolumeInlineClonePropSplitEstimateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SplitEstimateAdded

	err, SplitInitiatedAdded := retrieveVolumeInlineClonePropSplitInitiatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SplitInitiatedAdded

	return nil, retAdded
}

func retrieveVolumeInlineClonePropHasFlexcloneFlags(depth int, m *models.VolumeInlineClone, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHasFlexcloneName := fmt.Sprintf("%v.has_flexclone", cmdPrefix)
	if cmd.Flags().Changed(flagHasFlexcloneName) {

		var flagHasFlexcloneName string
		if cmdPrefix == "" {
			flagHasFlexcloneName = "has_flexclone"
		} else {
			flagHasFlexcloneName = fmt.Sprintf("%v.has_flexclone", cmdPrefix)
		}

		flagHasFlexcloneValue, err := cmd.Flags().GetBool(flagHasFlexcloneName)
		if err != nil {
			return err, false
		}
		m.HasFlexclone = &flagHasFlexcloneValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineClonePropInheritedPhysicalUsedFlags(depth int, m *models.VolumeInlineClone, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagInheritedPhysicalUsedName := fmt.Sprintf("%v.inherited_physical_used", cmdPrefix)
	if cmd.Flags().Changed(flagInheritedPhysicalUsedName) {

		var flagInheritedPhysicalUsedName string
		if cmdPrefix == "" {
			flagInheritedPhysicalUsedName = "inherited_physical_used"
		} else {
			flagInheritedPhysicalUsedName = fmt.Sprintf("%v.inherited_physical_used", cmdPrefix)
		}

		flagInheritedPhysicalUsedValue, err := cmd.Flags().GetInt64(flagInheritedPhysicalUsedName)
		if err != nil {
			return err, false
		}
		m.InheritedPhysicalUsed = &flagInheritedPhysicalUsedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineClonePropInheritedSavingsFlags(depth int, m *models.VolumeInlineClone, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagInheritedSavingsName := fmt.Sprintf("%v.inherited_savings", cmdPrefix)
	if cmd.Flags().Changed(flagInheritedSavingsName) {

		var flagInheritedSavingsName string
		if cmdPrefix == "" {
			flagInheritedSavingsName = "inherited_savings"
		} else {
			flagInheritedSavingsName = fmt.Sprintf("%v.inherited_savings", cmdPrefix)
		}

		flagInheritedSavingsValue, err := cmd.Flags().GetInt64(flagInheritedSavingsName)
		if err != nil {
			return err, false
		}
		m.InheritedSavings = &flagInheritedSavingsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineClonePropIsFlexcloneFlags(depth int, m *models.VolumeInlineClone, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsFlexcloneName := fmt.Sprintf("%v.is_flexclone", cmdPrefix)
	if cmd.Flags().Changed(flagIsFlexcloneName) {

		var flagIsFlexcloneName string
		if cmdPrefix == "" {
			flagIsFlexcloneName = "is_flexclone"
		} else {
			flagIsFlexcloneName = fmt.Sprintf("%v.is_flexclone", cmdPrefix)
		}

		flagIsFlexcloneValue, err := cmd.Flags().GetBool(flagIsFlexcloneName)
		if err != nil {
			return err, false
		}
		m.IsFlexclone = &flagIsFlexcloneValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineClonePropParentSnapshotFlags(depth int, m *models.VolumeInlineClone, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagParentSnapshotName := fmt.Sprintf("%v.parent_snapshot", cmdPrefix)
	if cmd.Flags().Changed(flagParentSnapshotName) {
		// info: complex object parent_snapshot SnapshotReference is retrieved outside this Changed() block
	}
	flagParentSnapshotValue := m.ParentSnapshot
	if swag.IsZero(flagParentSnapshotValue) {
		flagParentSnapshotValue = &models.SnapshotReference{}
	}

	err, ParentSnapshotAdded := retrieveModelSnapshotReferenceFlags(depth+1, flagParentSnapshotValue, flagParentSnapshotName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ParentSnapshotAdded
	if ParentSnapshotAdded {
		m.ParentSnapshot = flagParentSnapshotValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineClonePropParentSvmFlags(depth int, m *models.VolumeInlineClone, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagParentSvmName := fmt.Sprintf("%v.parent_svm", cmdPrefix)
	if cmd.Flags().Changed(flagParentSvmName) {
		// info: complex object parent_svm VolumeInlineCloneInlineParentSvm is retrieved outside this Changed() block
	}
	flagParentSvmValue := m.ParentSvm
	if swag.IsZero(flagParentSvmValue) {
		flagParentSvmValue = &models.VolumeInlineCloneInlineParentSvm{}
	}

	err, ParentSvmAdded := retrieveModelVolumeInlineCloneInlineParentSvmFlags(depth+1, flagParentSvmValue, flagParentSvmName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ParentSvmAdded
	if ParentSvmAdded {
		m.ParentSvm = flagParentSvmValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineClonePropParentVolumeFlags(depth int, m *models.VolumeInlineClone, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagParentVolumeName := fmt.Sprintf("%v.parent_volume", cmdPrefix)
	if cmd.Flags().Changed(flagParentVolumeName) {
		// info: complex object parent_volume VolumeInlineCloneInlineParentVolume is retrieved outside this Changed() block
	}
	flagParentVolumeValue := m.ParentVolume
	if swag.IsZero(flagParentVolumeValue) {
		flagParentVolumeValue = &models.VolumeInlineCloneInlineParentVolume{}
	}

	err, ParentVolumeAdded := retrieveModelVolumeInlineCloneInlineParentVolumeFlags(depth+1, flagParentVolumeValue, flagParentVolumeName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ParentVolumeAdded
	if ParentVolumeAdded {
		m.ParentVolume = flagParentVolumeValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineClonePropSplitCompletePercentFlags(depth int, m *models.VolumeInlineClone, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSplitCompletePercentName := fmt.Sprintf("%v.split_complete_percent", cmdPrefix)
	if cmd.Flags().Changed(flagSplitCompletePercentName) {

		var flagSplitCompletePercentName string
		if cmdPrefix == "" {
			flagSplitCompletePercentName = "split_complete_percent"
		} else {
			flagSplitCompletePercentName = fmt.Sprintf("%v.split_complete_percent", cmdPrefix)
		}

		flagSplitCompletePercentValue, err := cmd.Flags().GetInt64(flagSplitCompletePercentName)
		if err != nil {
			return err, false
		}
		m.SplitCompletePercent = &flagSplitCompletePercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineClonePropSplitEstimateFlags(depth int, m *models.VolumeInlineClone, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSplitEstimateName := fmt.Sprintf("%v.split_estimate", cmdPrefix)
	if cmd.Flags().Changed(flagSplitEstimateName) {

		var flagSplitEstimateName string
		if cmdPrefix == "" {
			flagSplitEstimateName = "split_estimate"
		} else {
			flagSplitEstimateName = fmt.Sprintf("%v.split_estimate", cmdPrefix)
		}

		flagSplitEstimateValue, err := cmd.Flags().GetInt64(flagSplitEstimateName)
		if err != nil {
			return err, false
		}
		m.SplitEstimate = &flagSplitEstimateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineClonePropSplitInitiatedFlags(depth int, m *models.VolumeInlineClone, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSplitInitiatedName := fmt.Sprintf("%v.split_initiated", cmdPrefix)
	if cmd.Flags().Changed(flagSplitInitiatedName) {

		var flagSplitInitiatedName string
		if cmdPrefix == "" {
			flagSplitInitiatedName = "split_initiated"
		} else {
			flagSplitInitiatedName = fmt.Sprintf("%v.split_initiated", cmdPrefix)
		}

		flagSplitInitiatedValue, err := cmd.Flags().GetBool(flagSplitInitiatedName)
		if err != nil {
			return err, false
		}
		m.SplitInitiated = &flagSplitInitiatedValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineCloneInlineParentSvm

// register flags to command
func registerModelVolumeInlineCloneInlineParentSvmFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineCloneInlineParentSvmPropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineCloneInlineParentSvmPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineCloneInlineParentSvmPropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineCloneInlineParentSvmPropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineCloneInlineParentSvmInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineCloneInlineParentSvmPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `The name of the SVM. This field cannot be specified in a PATCH method.
`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineCloneInlineParentSvmPropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := `The unique identifier of the SVM. This field cannot be specified in a PATCH method.
`

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineCloneInlineParentSvmFlags(depth int, m *models.VolumeInlineCloneInlineParentSvm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeInlineCloneInlineParentSvmPropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, NameAdded := retrieveVolumeInlineCloneInlineParentSvmPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineCloneInlineParentSvmPropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineCloneInlineParentSvmPropLinksFlags(depth int, m *models.VolumeInlineCloneInlineParentSvm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineCloneInlineParentSvmInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineCloneInlineParentSvmInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineCloneInlineParentSvmInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineCloneInlineParentSvmPropNameFlags(depth int, m *models.VolumeInlineCloneInlineParentSvm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineCloneInlineParentSvmPropUUIDFlags(depth int, m *models.VolumeInlineCloneInlineParentSvm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineCloneInlineParentSvmInlineLinks

// register flags to command
func registerModelVolumeInlineCloneInlineParentSvmInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineCloneInlineParentSvmInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineCloneInlineParentSvmInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineCloneInlineParentSvmInlineLinksFlags(depth int, m *models.VolumeInlineCloneInlineParentSvmInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineCloneInlineParentSvmInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineCloneInlineParentSvmInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineCloneInlineParentSvmInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineCloneInlineParentVolume

// register flags to command
func registerModelVolumeInlineCloneInlineParentVolumeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineCloneInlineParentVolumePropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineCloneInlineParentVolumePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineCloneInlineParentVolumePropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineCloneInlineParentVolumePropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineCloneInlineParentVolumeInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineCloneInlineParentVolumePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `The name of the volume. This field cannot be specified in a PATCH method.`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineCloneInlineParentVolumePropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := `Unique identifier for the volume. This corresponds to the instance-uuid that is exposed in the CLI and ONTAPI. It does not change due to a volume move.`

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineCloneInlineParentVolumeFlags(depth int, m *models.VolumeInlineCloneInlineParentVolume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeInlineCloneInlineParentVolumePropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, NameAdded := retrieveVolumeInlineCloneInlineParentVolumePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineCloneInlineParentVolumePropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineCloneInlineParentVolumePropLinksFlags(depth int, m *models.VolumeInlineCloneInlineParentVolume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineCloneInlineParentVolumeInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineCloneInlineParentVolumeInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineCloneInlineParentVolumeInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineCloneInlineParentVolumePropNameFlags(depth int, m *models.VolumeInlineCloneInlineParentVolume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineCloneInlineParentVolumePropUUIDFlags(depth int, m *models.VolumeInlineCloneInlineParentVolume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineCloneInlineParentVolumeInlineLinks

// register flags to command
func registerModelVolumeInlineCloneInlineParentVolumeInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineCloneInlineParentVolumeInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineCloneInlineParentVolumeInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineCloneInlineParentVolumeInlineLinksFlags(depth int, m *models.VolumeInlineCloneInlineParentVolumeInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineCloneInlineParentVolumeInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineCloneInlineParentVolumeInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineCloneInlineParentVolumeInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineConsistencyGroup

// register flags to command
func registerModelVolumeInlineConsistencyGroupFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineConsistencyGroupPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConsistencyGroupPropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConsistencyGroupPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `The name of the consistency group to which the volume belongs. Available only when the volume is part of a consistency group. If this volume belongs to a child consistency group, then this will be the UUID of the parent consistency group.`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineConsistencyGroupPropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := `The UUID of the consistency group to which the volume belongs. Available only when the volume is part of a consistency group. If this volume belongs to a child consistency group, then this will be the UUID of the parent consistency group.`

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineConsistencyGroupFlags(depth int, m *models.VolumeInlineConsistencyGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NameAdded := retrieveVolumeInlineConsistencyGroupPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineConsistencyGroupPropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineConsistencyGroupPropNameFlags(depth int, m *models.VolumeInlineConsistencyGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConsistencyGroupPropUUIDFlags(depth int, m *models.VolumeInlineConsistencyGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineConstituentsInlineArrayItem

// register flags to command
func registerModelVolumeInlineConstituentsInlineArrayItemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineConstituentsInlineArrayItemPropAggregates(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemPropMovement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemPropSpace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemPropAggregates(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAggregatesName string
	if cmdPrefix == "" {
		flagAggregatesName = "aggregates"
	} else {
		flagAggregatesName = fmt.Sprintf("%v.aggregates", cmdPrefix)
	}

	if err := registerModelVolumeInlineConstituentsInlineArrayItemInlineAggregatesFlags(depth+1, flagAggregatesName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemPropMovement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagMovementName string
	if cmdPrefix == "" {
		flagMovementName = "movement"
	} else {
		flagMovementName = fmt.Sprintf("%v.movement", cmdPrefix)
	}

	if err := registerModelVolumeInlineConstituentsInlineArrayItemInlineMovementFlags(depth+1, flagMovementName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `FlexGroup volume constituent name.`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemPropSpace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSpaceName string
	if cmdPrefix == "" {
		flagSpaceName = "space"
	} else {
		flagSpaceName = fmt.Sprintf("%v.space", cmdPrefix)
	}

	if err := registerModelVolumeInlineConstituentsInlineArrayItemInlineSpaceFlags(depth+1, flagSpaceName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineConstituentsInlineArrayItemFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AggregatesAdded := retrieveVolumeInlineConstituentsInlineArrayItemPropAggregatesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AggregatesAdded

	err, MovementAdded := retrieveVolumeInlineConstituentsInlineArrayItemPropMovementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MovementAdded

	err, NameAdded := retrieveVolumeInlineConstituentsInlineArrayItemPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, SpaceAdded := retrieveVolumeInlineConstituentsInlineArrayItemPropSpaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceAdded

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemPropAggregatesFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAggregatesName := fmt.Sprintf("%v.aggregates", cmdPrefix)
	if cmd.Flags().Changed(flagAggregatesName) {
		// info: complex object aggregates VolumeInlineConstituentsInlineArrayItemInlineAggregates is retrieved outside this Changed() block
	}
	flagAggregatesValue := m.Aggregates
	if swag.IsZero(flagAggregatesValue) {
		flagAggregatesValue = &models.VolumeInlineConstituentsInlineArrayItemInlineAggregates{}
	}

	err, AggregatesAdded := retrieveModelVolumeInlineConstituentsInlineArrayItemInlineAggregatesFlags(depth+1, flagAggregatesValue, flagAggregatesName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AggregatesAdded
	if AggregatesAdded {
		m.Aggregates = flagAggregatesValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemPropMovementFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMovementName := fmt.Sprintf("%v.movement", cmdPrefix)
	if cmd.Flags().Changed(flagMovementName) {
		// info: complex object movement VolumeInlineConstituentsInlineArrayItemInlineMovement is retrieved outside this Changed() block
	}
	flagMovementValue := m.Movement
	if swag.IsZero(flagMovementValue) {
		flagMovementValue = &models.VolumeInlineConstituentsInlineArrayItemInlineMovement{}
	}

	err, MovementAdded := retrieveModelVolumeInlineConstituentsInlineArrayItemInlineMovementFlags(depth+1, flagMovementValue, flagMovementName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MovementAdded
	if MovementAdded {
		m.Movement = flagMovementValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemPropNameFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemPropSpaceFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSpaceName := fmt.Sprintf("%v.space", cmdPrefix)
	if cmd.Flags().Changed(flagSpaceName) {
		// info: complex object space VolumeInlineConstituentsInlineArrayItemInlineSpace is retrieved outside this Changed() block
	}
	flagSpaceValue := m.Space
	if swag.IsZero(flagSpaceValue) {
		flagSpaceValue = &models.VolumeInlineConstituentsInlineArrayItemInlineSpace{}
	}

	err, SpaceAdded := retrieveModelVolumeInlineConstituentsInlineArrayItemInlineSpaceFlags(depth+1, flagSpaceValue, flagSpaceName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceAdded
	if SpaceAdded {
		m.Space = flagSpaceValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineConstituentsInlineArrayItemInlineAggregates

// register flags to command
func registerModelVolumeInlineConstituentsInlineArrayItemInlineAggregatesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineAggregatesPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineAggregatesPropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineAggregatesPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `Name of the aggregate hosting the FlexGroup volume constituent.`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineAggregatesPropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := `Unique identifier for the aggregate.`

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineConstituentsInlineArrayItemInlineAggregatesFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineAggregates, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NameAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineAggregatesPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineAggregatesPropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineAggregatesPropNameFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineAggregates, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineAggregatesPropUUIDFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineAggregates, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineConstituentsInlineArrayItemInlineMovement

// register flags to command
func registerModelVolumeInlineConstituentsInlineArrayItemInlineMovementFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineMovementPropCutoverWindow(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineMovementPropDestinationAggregate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineMovementPropPercentComplete(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineMovementPropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineMovementPropTieringPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineMovementPropCutoverWindow(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCutoverWindowDescription := `Time window in seconds for cutover. The allowed range is between 30 to 300 seconds.`

	var flagCutoverWindowName string
	if cmdPrefix == "" {
		flagCutoverWindowName = "cutover_window"
	} else {
		flagCutoverWindowName = fmt.Sprintf("%v.cutover_window", cmdPrefix)
	}

	var flagCutoverWindowDefault int64 = 30

	_ = cmd.PersistentFlags().Int64(flagCutoverWindowName, flagCutoverWindowDefault, flagCutoverWindowDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineMovementPropDestinationAggregate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagDestinationAggregateName string
	if cmdPrefix == "" {
		flagDestinationAggregateName = "destination_aggregate"
	} else {
		flagDestinationAggregateName = fmt.Sprintf("%v.destination_aggregate", cmdPrefix)
	}

	if err := registerModelVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateFlags(depth+1, flagDestinationAggregateName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineMovementPropPercentComplete(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPercentCompleteDescription := `Completion percentage`

	var flagPercentCompleteName string
	if cmdPrefix == "" {
		flagPercentCompleteName = "percent_complete"
	} else {
		flagPercentCompleteName = fmt.Sprintf("%v.percent_complete", cmdPrefix)
	}

	var flagPercentCompleteDefault int64

	_ = cmd.PersistentFlags().Int64(flagPercentCompleteName, flagPercentCompleteDefault, flagPercentCompleteDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineMovementPropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := `Enum: ["aborted","cutover","cutover_wait","cutover_pending","failed","paused","queued","replicating","success"]. State of volume move operation. PATCH the state to "aborted" to abort the move operation. PATCH the state to "cutover" to trigger cutover. PATCH the state to "paused" to pause the volume move operation in progress. PATCH the state to "replicating" to resume the paused volume move operation. PATCH the state to "cutover_wait" to go into cutover manually. When volume move operation is waiting to go into "cutover" state, this is indicated by the "cutover_pending" state. A change of state is only supported if volume movement is in progress.`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["aborted","cutover","cutover_wait","cutover_pending","failed","paused","queued","replicating","success"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineMovementPropTieringPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTieringPolicyDescription := `Enum: ["all","auto","backup","none","snapshot_only"]. Tiering policy for FabricPool`

	var flagTieringPolicyName string
	if cmdPrefix == "" {
		flagTieringPolicyName = "tiering_policy"
	} else {
		flagTieringPolicyName = fmt.Sprintf("%v.tiering_policy", cmdPrefix)
	}

	var flagTieringPolicyDefault string

	_ = cmd.PersistentFlags().String(flagTieringPolicyName, flagTieringPolicyDefault, flagTieringPolicyDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagTieringPolicyName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["all","auto","backup","none","snapshot_only"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineConstituentsInlineArrayItemInlineMovementFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CutoverWindowAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementPropCutoverWindowFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CutoverWindowAdded

	err, DestinationAggregateAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementPropDestinationAggregateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DestinationAggregateAdded

	err, PercentCompleteAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementPropPercentCompleteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PercentCompleteAdded

	err, StateAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementPropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, TieringPolicyAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementPropTieringPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TieringPolicyAdded

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementPropCutoverWindowFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCutoverWindowName := fmt.Sprintf("%v.cutover_window", cmdPrefix)
	if cmd.Flags().Changed(flagCutoverWindowName) {

		var flagCutoverWindowName string
		if cmdPrefix == "" {
			flagCutoverWindowName = "cutover_window"
		} else {
			flagCutoverWindowName = fmt.Sprintf("%v.cutover_window", cmdPrefix)
		}

		flagCutoverWindowValue, err := cmd.Flags().GetInt64(flagCutoverWindowName)
		if err != nil {
			return err, false
		}
		m.CutoverWindow = &flagCutoverWindowValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementPropDestinationAggregateFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDestinationAggregateName := fmt.Sprintf("%v.destination_aggregate", cmdPrefix)
	if cmd.Flags().Changed(flagDestinationAggregateName) {
		// info: complex object destination_aggregate VolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregate is retrieved outside this Changed() block
	}
	flagDestinationAggregateValue := m.DestinationAggregate
	if swag.IsZero(flagDestinationAggregateValue) {
		flagDestinationAggregateValue = &models.VolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregate{}
	}

	err, DestinationAggregateAdded := retrieveModelVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateFlags(depth+1, flagDestinationAggregateValue, flagDestinationAggregateName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DestinationAggregateAdded
	if DestinationAggregateAdded {
		m.DestinationAggregate = flagDestinationAggregateValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementPropPercentCompleteFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPercentCompleteName := fmt.Sprintf("%v.percent_complete", cmdPrefix)
	if cmd.Flags().Changed(flagPercentCompleteName) {

		var flagPercentCompleteName string
		if cmdPrefix == "" {
			flagPercentCompleteName = "percent_complete"
		} else {
			flagPercentCompleteName = fmt.Sprintf("%v.percent_complete", cmdPrefix)
		}

		flagPercentCompleteValue, err := cmd.Flags().GetInt64(flagPercentCompleteName)
		if err != nil {
			return err, false
		}
		m.PercentComplete = &flagPercentCompleteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementPropStateFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementPropTieringPolicyFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTieringPolicyName := fmt.Sprintf("%v.tiering_policy", cmdPrefix)
	if cmd.Flags().Changed(flagTieringPolicyName) {

		var flagTieringPolicyName string
		if cmdPrefix == "" {
			flagTieringPolicyName = "tiering_policy"
		} else {
			flagTieringPolicyName = fmt.Sprintf("%v.tiering_policy", cmdPrefix)
		}

		flagTieringPolicyValue, err := cmd.Flags().GetString(flagTieringPolicyName)
		if err != nil {
			return err, false
		}
		m.TieringPolicy = &flagTieringPolicyValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregate

// register flags to command
func registerModelVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregatePropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregatePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregatePropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregatePropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregatePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregatePropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := ``

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregatePropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, NameAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregatePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregatePropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregatePropLinksFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregatePropNameFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregatePropUUIDFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinks

// register flags to command
func registerModelVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinksFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineMovementInlineDestinationAggregateInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineConstituentsInlineArrayItemInlineSpace

// register flags to command
func registerModelVolumeInlineConstituentsInlineArrayItemInlineSpaceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropAfsTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropAvailablePercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropBlockStorageInactiveUserData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropCapacityTierFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropLargeSizeEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropLocalTierFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropLogicalSpace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropMaxSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropOverProvisioned(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropPerformanceTierFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropSnapshot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropTotalFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropTotalMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropTotalMetadataFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropUsedByAfs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropUsedPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropAfsTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAfsTotalDescription := `Total size of AFS, excluding snap-reserve, in bytes.`

	var flagAfsTotalName string
	if cmdPrefix == "" {
		flagAfsTotalName = "afs_total"
	} else {
		flagAfsTotalName = fmt.Sprintf("%v.afs_total", cmdPrefix)
	}

	var flagAfsTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagAfsTotalName, flagAfsTotalDefault, flagAfsTotalDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAvailableDescription := `The available space, in bytes.`

	var flagAvailableName string
	if cmdPrefix == "" {
		flagAvailableName = "available"
	} else {
		flagAvailableName = fmt.Sprintf("%v.available", cmdPrefix)
	}

	var flagAvailableDefault int64

	_ = cmd.PersistentFlags().Int64(flagAvailableName, flagAvailableDefault, flagAvailableDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropAvailablePercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAvailablePercentDescription := `The space available, as a percent.`

	var flagAvailablePercentName string
	if cmdPrefix == "" {
		flagAvailablePercentName = "available_percent"
	} else {
		flagAvailablePercentName = fmt.Sprintf("%v.available_percent", cmdPrefix)
	}

	var flagAvailablePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagAvailablePercentName, flagAvailablePercentDefault, flagAvailablePercentDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropBlockStorageInactiveUserData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagBlockStorageInactiveUserDataDescription := `The size that is physically used in the block storage of the volume and has a cold temperature. In bytes. This parameter is only supported if the volume is in an aggregate that is either attached to a cloud store or could be attached to a cloud store.`

	var flagBlockStorageInactiveUserDataName string
	if cmdPrefix == "" {
		flagBlockStorageInactiveUserDataName = "block_storage_inactive_user_data"
	} else {
		flagBlockStorageInactiveUserDataName = fmt.Sprintf("%v.block_storage_inactive_user_data", cmdPrefix)
	}

	var flagBlockStorageInactiveUserDataDefault int64

	_ = cmd.PersistentFlags().Int64(flagBlockStorageInactiveUserDataName, flagBlockStorageInactiveUserDataDefault, flagBlockStorageInactiveUserDataDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropCapacityTierFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCapacityTierFootprintDescription := `Space used by capacity tier for this volume in the FabricPool aggregate, in bytes.`

	var flagCapacityTierFootprintName string
	if cmdPrefix == "" {
		flagCapacityTierFootprintName = "capacity_tier_footprint"
	} else {
		flagCapacityTierFootprintName = fmt.Sprintf("%v.capacity_tier_footprint", cmdPrefix)
	}

	var flagCapacityTierFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagCapacityTierFootprintName, flagCapacityTierFootprintDefault, flagCapacityTierFootprintDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFootprintDescription := `Data used for this volume in the aggregate, in bytes.`

	var flagFootprintName string
	if cmdPrefix == "" {
		flagFootprintName = "footprint"
	} else {
		flagFootprintName = fmt.Sprintf("%v.footprint", cmdPrefix)
	}

	var flagFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagFootprintName, flagFootprintDefault, flagFootprintDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropLargeSizeEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLargeSizeEnabledDescription := `Specifies whether the support for large volumes and large files is enabled on the volume.`

	var flagLargeSizeEnabledName string
	if cmdPrefix == "" {
		flagLargeSizeEnabledName = "large_size_enabled"
	} else {
		flagLargeSizeEnabledName = fmt.Sprintf("%v.large_size_enabled", cmdPrefix)
	}

	var flagLargeSizeEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagLargeSizeEnabledName, flagLargeSizeEnabledDefault, flagLargeSizeEnabledDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropLocalTierFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLocalTierFootprintDescription := `Space used by the local tier for this volume in the aggregate, in bytes.`

	var flagLocalTierFootprintName string
	if cmdPrefix == "" {
		flagLocalTierFootprintName = "local_tier_footprint"
	} else {
		flagLocalTierFootprintName = fmt.Sprintf("%v.local_tier_footprint", cmdPrefix)
	}

	var flagLocalTierFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagLocalTierFootprintName, flagLocalTierFootprintDefault, flagLocalTierFootprintDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropLogicalSpace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLogicalSpaceName string
	if cmdPrefix == "" {
		flagLogicalSpaceName = "logical_space"
	} else {
		flagLogicalSpaceName = fmt.Sprintf("%v.logical_space", cmdPrefix)
	}

	if err := registerModelVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpaceFlags(depth+1, flagLogicalSpaceName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropMaxSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMaxSizeDescription := `Enum: ["100T","300T","600T"]. Indicates the maximum size supported for each constituent of the FlexGroup volume.`

	var flagMaxSizeName string
	if cmdPrefix == "" {
		flagMaxSizeName = "max_size"
	} else {
		flagMaxSizeName = fmt.Sprintf("%v.max_size", cmdPrefix)
	}

	var flagMaxSizeDefault string = "100T"

	_ = cmd.PersistentFlags().String(flagMaxSizeName, flagMaxSizeDefault, flagMaxSizeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagMaxSizeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["100T","300T","600T"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMetadataDescription := `Space used by the volume metadata in the aggregate, in bytes.`

	var flagMetadataName string
	if cmdPrefix == "" {
		flagMetadataName = "metadata"
	} else {
		flagMetadataName = fmt.Sprintf("%v.metadata", cmdPrefix)
	}

	var flagMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetadataName, flagMetadataDefault, flagMetadataDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropOverProvisioned(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOverProvisionedDescription := `The amount of space not available for this volume in the aggregate, in bytes.`

	var flagOverProvisionedName string
	if cmdPrefix == "" {
		flagOverProvisionedName = "over_provisioned"
	} else {
		flagOverProvisionedName = fmt.Sprintf("%v.over_provisioned", cmdPrefix)
	}

	var flagOverProvisionedDefault int64

	_ = cmd.PersistentFlags().Int64(flagOverProvisionedName, flagOverProvisionedDefault, flagOverProvisionedDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropPerformanceTierFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPerformanceTierFootprintDescription := `Space used by the performance tier for this volume in the FabricPool aggregate, in bytes.`

	var flagPerformanceTierFootprintName string
	if cmdPrefix == "" {
		flagPerformanceTierFootprintName = "performance_tier_footprint"
	} else {
		flagPerformanceTierFootprintName = fmt.Sprintf("%v.performance_tier_footprint", cmdPrefix)
	}

	var flagPerformanceTierFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagPerformanceTierFootprintName, flagPerformanceTierFootprintDefault, flagPerformanceTierFootprintDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSizeDescription := `Total provisioned size. The default size is equal to the minimum size of 20MB, in bytes.`

	var flagSizeName string
	if cmdPrefix == "" {
		flagSizeName = "size"
	} else {
		flagSizeName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var flagSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagSizeName, flagSizeDefault, flagSizeDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropSnapshot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSnapshotName string
	if cmdPrefix == "" {
		flagSnapshotName = "snapshot"
	} else {
		flagSnapshotName = fmt.Sprintf("%v.snapshot", cmdPrefix)
	}

	if err := registerModelVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotFlags(depth+1, flagSnapshotName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropTotalFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalFootprintDescription := `Data and metadata used for this volume in the aggregate, in bytes.`

	var flagTotalFootprintName string
	if cmdPrefix == "" {
		flagTotalFootprintName = "total_footprint"
	} else {
		flagTotalFootprintName = fmt.Sprintf("%v.total_footprint", cmdPrefix)
	}

	var flagTotalFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalFootprintName, flagTotalFootprintDefault, flagTotalFootprintDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropTotalMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalMetadataDescription := `Space used by the total metadata in the volume, in bytes.`

	var flagTotalMetadataName string
	if cmdPrefix == "" {
		flagTotalMetadataName = "total_metadata"
	} else {
		flagTotalMetadataName = fmt.Sprintf("%v.total_metadata", cmdPrefix)
	}

	var flagTotalMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalMetadataName, flagTotalMetadataDefault, flagTotalMetadataDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropTotalMetadataFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalMetadataFootprintDescription := `Space used by the volume metadata footprint in the aggregate, in bytes.`

	var flagTotalMetadataFootprintName string
	if cmdPrefix == "" {
		flagTotalMetadataFootprintName = "total_metadata_footprint"
	} else {
		flagTotalMetadataFootprintName = fmt.Sprintf("%v.total_metadata_footprint", cmdPrefix)
	}

	var flagTotalMetadataFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalMetadataFootprintName, flagTotalMetadataFootprintDefault, flagTotalMetadataFootprintDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedDescription := `The virtual space used (includes volume reserves) before storage efficiency, in bytes.`

	var flagUsedName string
	if cmdPrefix == "" {
		flagUsedName = "used"
	} else {
		flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
	}

	var flagUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedName, flagUsedDefault, flagUsedDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropUsedByAfs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedByAfsDescription := `The space used by Active Filesystem, in bytes.`

	var flagUsedByAfsName string
	if cmdPrefix == "" {
		flagUsedByAfsName = "used_by_afs"
	} else {
		flagUsedByAfsName = fmt.Sprintf("%v.used_by_afs", cmdPrefix)
	}

	var flagUsedByAfsDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedByAfsName, flagUsedByAfsDefault, flagUsedByAfsDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpacePropUsedPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedPercentDescription := `The virtual space used (includes volume reserves) before storage efficiency, as a percent.`

	var flagUsedPercentName string
	if cmdPrefix == "" {
		flagUsedPercentName = "used_percent"
	} else {
		flagUsedPercentName = fmt.Sprintf("%v.used_percent", cmdPrefix)
	}

	var flagUsedPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedPercentName, flagUsedPercentDefault, flagUsedPercentDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineConstituentsInlineArrayItemInlineSpaceFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AfsTotalAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropAfsTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AfsTotalAdded

	err, AvailableAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AvailableAdded

	err, AvailablePercentAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropAvailablePercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AvailablePercentAdded

	err, BlockStorageInactiveUserDataAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropBlockStorageInactiveUserDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlockStorageInactiveUserDataAdded

	err, CapacityTierFootprintAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropCapacityTierFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CapacityTierFootprintAdded

	err, FootprintAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FootprintAdded

	err, LargeSizeEnabledAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropLargeSizeEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LargeSizeEnabledAdded

	err, LocalTierFootprintAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropLocalTierFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LocalTierFootprintAdded

	err, LogicalSpaceAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropLogicalSpaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LogicalSpaceAdded

	err, MaxSizeAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropMaxSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxSizeAdded

	err, MetadataAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MetadataAdded

	err, OverProvisionedAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropOverProvisionedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OverProvisionedAdded

	err, PerformanceTierFootprintAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropPerformanceTierFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PerformanceTierFootprintAdded

	err, SizeAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeAdded

	err, SnapshotAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropSnapshotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotAdded

	err, TotalFootprintAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropTotalFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalFootprintAdded

	err, TotalMetadataAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropTotalMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalMetadataAdded

	err, TotalMetadataFootprintAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropTotalMetadataFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalMetadataFootprintAdded

	err, UsedAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedAdded

	err, UsedByAfsAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropUsedByAfsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedByAfsAdded

	err, UsedPercentAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropUsedPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedPercentAdded

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropAfsTotalFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAfsTotalName := fmt.Sprintf("%v.afs_total", cmdPrefix)
	if cmd.Flags().Changed(flagAfsTotalName) {

		var flagAfsTotalName string
		if cmdPrefix == "" {
			flagAfsTotalName = "afs_total"
		} else {
			flagAfsTotalName = fmt.Sprintf("%v.afs_total", cmdPrefix)
		}

		flagAfsTotalValue, err := cmd.Flags().GetInt64(flagAfsTotalName)
		if err != nil {
			return err, false
		}
		m.AfsTotal = &flagAfsTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropAvailableFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAvailableName := fmt.Sprintf("%v.available", cmdPrefix)
	if cmd.Flags().Changed(flagAvailableName) {

		var flagAvailableName string
		if cmdPrefix == "" {
			flagAvailableName = "available"
		} else {
			flagAvailableName = fmt.Sprintf("%v.available", cmdPrefix)
		}

		flagAvailableValue, err := cmd.Flags().GetInt64(flagAvailableName)
		if err != nil {
			return err, false
		}
		m.Available = &flagAvailableValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropAvailablePercentFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAvailablePercentName := fmt.Sprintf("%v.available_percent", cmdPrefix)
	if cmd.Flags().Changed(flagAvailablePercentName) {

		var flagAvailablePercentName string
		if cmdPrefix == "" {
			flagAvailablePercentName = "available_percent"
		} else {
			flagAvailablePercentName = fmt.Sprintf("%v.available_percent", cmdPrefix)
		}

		flagAvailablePercentValue, err := cmd.Flags().GetInt64(flagAvailablePercentName)
		if err != nil {
			return err, false
		}
		m.AvailablePercent = &flagAvailablePercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropBlockStorageInactiveUserDataFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBlockStorageInactiveUserDataName := fmt.Sprintf("%v.block_storage_inactive_user_data", cmdPrefix)
	if cmd.Flags().Changed(flagBlockStorageInactiveUserDataName) {

		var flagBlockStorageInactiveUserDataName string
		if cmdPrefix == "" {
			flagBlockStorageInactiveUserDataName = "block_storage_inactive_user_data"
		} else {
			flagBlockStorageInactiveUserDataName = fmt.Sprintf("%v.block_storage_inactive_user_data", cmdPrefix)
		}

		flagBlockStorageInactiveUserDataValue, err := cmd.Flags().GetInt64(flagBlockStorageInactiveUserDataName)
		if err != nil {
			return err, false
		}
		m.BlockStorageInactiveUserData = &flagBlockStorageInactiveUserDataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropCapacityTierFootprintFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCapacityTierFootprintName := fmt.Sprintf("%v.capacity_tier_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagCapacityTierFootprintName) {

		var flagCapacityTierFootprintName string
		if cmdPrefix == "" {
			flagCapacityTierFootprintName = "capacity_tier_footprint"
		} else {
			flagCapacityTierFootprintName = fmt.Sprintf("%v.capacity_tier_footprint", cmdPrefix)
		}

		flagCapacityTierFootprintValue, err := cmd.Flags().GetInt64(flagCapacityTierFootprintName)
		if err != nil {
			return err, false
		}
		m.CapacityTierFootprint = &flagCapacityTierFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropFootprintFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFootprintName := fmt.Sprintf("%v.footprint", cmdPrefix)
	if cmd.Flags().Changed(flagFootprintName) {

		var flagFootprintName string
		if cmdPrefix == "" {
			flagFootprintName = "footprint"
		} else {
			flagFootprintName = fmt.Sprintf("%v.footprint", cmdPrefix)
		}

		flagFootprintValue, err := cmd.Flags().GetInt64(flagFootprintName)
		if err != nil {
			return err, false
		}
		m.Footprint = &flagFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropLargeSizeEnabledFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLargeSizeEnabledName := fmt.Sprintf("%v.large_size_enabled", cmdPrefix)
	if cmd.Flags().Changed(flagLargeSizeEnabledName) {

		var flagLargeSizeEnabledName string
		if cmdPrefix == "" {
			flagLargeSizeEnabledName = "large_size_enabled"
		} else {
			flagLargeSizeEnabledName = fmt.Sprintf("%v.large_size_enabled", cmdPrefix)
		}

		flagLargeSizeEnabledValue, err := cmd.Flags().GetBool(flagLargeSizeEnabledName)
		if err != nil {
			return err, false
		}
		m.LargeSizeEnabled = &flagLargeSizeEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropLocalTierFootprintFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLocalTierFootprintName := fmt.Sprintf("%v.local_tier_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagLocalTierFootprintName) {

		var flagLocalTierFootprintName string
		if cmdPrefix == "" {
			flagLocalTierFootprintName = "local_tier_footprint"
		} else {
			flagLocalTierFootprintName = fmt.Sprintf("%v.local_tier_footprint", cmdPrefix)
		}

		flagLocalTierFootprintValue, err := cmd.Flags().GetInt64(flagLocalTierFootprintName)
		if err != nil {
			return err, false
		}
		m.LocalTierFootprint = &flagLocalTierFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropLogicalSpaceFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLogicalSpaceName := fmt.Sprintf("%v.logical_space", cmdPrefix)
	if cmd.Flags().Changed(flagLogicalSpaceName) {
		// info: complex object logical_space VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpace is retrieved outside this Changed() block
	}
	flagLogicalSpaceValue := m.LogicalSpace
	if swag.IsZero(flagLogicalSpaceValue) {
		flagLogicalSpaceValue = &models.VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpace{}
	}

	err, LogicalSpaceAdded := retrieveModelVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpaceFlags(depth+1, flagLogicalSpaceValue, flagLogicalSpaceName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LogicalSpaceAdded
	if LogicalSpaceAdded {
		m.LogicalSpace = flagLogicalSpaceValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropMaxSizeFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMaxSizeName := fmt.Sprintf("%v.max_size", cmdPrefix)
	if cmd.Flags().Changed(flagMaxSizeName) {

		var flagMaxSizeName string
		if cmdPrefix == "" {
			flagMaxSizeName = "max_size"
		} else {
			flagMaxSizeName = fmt.Sprintf("%v.max_size", cmdPrefix)
		}

		flagMaxSizeValue, err := cmd.Flags().GetString(flagMaxSizeName)
		if err != nil {
			return err, false
		}
		m.MaxSize = &flagMaxSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropMetadataFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMetadataName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(flagMetadataName) {

		var flagMetadataName string
		if cmdPrefix == "" {
			flagMetadataName = "metadata"
		} else {
			flagMetadataName = fmt.Sprintf("%v.metadata", cmdPrefix)
		}

		flagMetadataValue, err := cmd.Flags().GetInt64(flagMetadataName)
		if err != nil {
			return err, false
		}
		m.Metadata = &flagMetadataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropOverProvisionedFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOverProvisionedName := fmt.Sprintf("%v.over_provisioned", cmdPrefix)
	if cmd.Flags().Changed(flagOverProvisionedName) {

		var flagOverProvisionedName string
		if cmdPrefix == "" {
			flagOverProvisionedName = "over_provisioned"
		} else {
			flagOverProvisionedName = fmt.Sprintf("%v.over_provisioned", cmdPrefix)
		}

		flagOverProvisionedValue, err := cmd.Flags().GetInt64(flagOverProvisionedName)
		if err != nil {
			return err, false
		}
		m.OverProvisioned = &flagOverProvisionedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropPerformanceTierFootprintFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPerformanceTierFootprintName := fmt.Sprintf("%v.performance_tier_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagPerformanceTierFootprintName) {

		var flagPerformanceTierFootprintName string
		if cmdPrefix == "" {
			flagPerformanceTierFootprintName = "performance_tier_footprint"
		} else {
			flagPerformanceTierFootprintName = fmt.Sprintf("%v.performance_tier_footprint", cmdPrefix)
		}

		flagPerformanceTierFootprintValue, err := cmd.Flags().GetInt64(flagPerformanceTierFootprintName)
		if err != nil {
			return err, false
		}
		m.PerformanceTierFootprint = &flagPerformanceTierFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropSizeFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSizeName := fmt.Sprintf("%v.size", cmdPrefix)
	if cmd.Flags().Changed(flagSizeName) {

		var flagSizeName string
		if cmdPrefix == "" {
			flagSizeName = "size"
		} else {
			flagSizeName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		flagSizeValue, err := cmd.Flags().GetInt64(flagSizeName)
		if err != nil {
			return err, false
		}
		m.Size = &flagSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropSnapshotFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnapshotName := fmt.Sprintf("%v.snapshot", cmdPrefix)
	if cmd.Flags().Changed(flagSnapshotName) {
		// info: complex object snapshot VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshot is retrieved outside this Changed() block
	}
	flagSnapshotValue := m.Snapshot
	if swag.IsZero(flagSnapshotValue) {
		flagSnapshotValue = &models.VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshot{}
	}

	err, SnapshotAdded := retrieveModelVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotFlags(depth+1, flagSnapshotValue, flagSnapshotName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotAdded
	if SnapshotAdded {
		m.Snapshot = flagSnapshotValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropTotalFootprintFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalFootprintName := fmt.Sprintf("%v.total_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagTotalFootprintName) {

		var flagTotalFootprintName string
		if cmdPrefix == "" {
			flagTotalFootprintName = "total_footprint"
		} else {
			flagTotalFootprintName = fmt.Sprintf("%v.total_footprint", cmdPrefix)
		}

		flagTotalFootprintValue, err := cmd.Flags().GetInt64(flagTotalFootprintName)
		if err != nil {
			return err, false
		}
		m.TotalFootprint = &flagTotalFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropTotalMetadataFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalMetadataName := fmt.Sprintf("%v.total_metadata", cmdPrefix)
	if cmd.Flags().Changed(flagTotalMetadataName) {

		var flagTotalMetadataName string
		if cmdPrefix == "" {
			flagTotalMetadataName = "total_metadata"
		} else {
			flagTotalMetadataName = fmt.Sprintf("%v.total_metadata", cmdPrefix)
		}

		flagTotalMetadataValue, err := cmd.Flags().GetInt64(flagTotalMetadataName)
		if err != nil {
			return err, false
		}
		m.TotalMetadata = &flagTotalMetadataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropTotalMetadataFootprintFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalMetadataFootprintName := fmt.Sprintf("%v.total_metadata_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagTotalMetadataFootprintName) {

		var flagTotalMetadataFootprintName string
		if cmdPrefix == "" {
			flagTotalMetadataFootprintName = "total_metadata_footprint"
		} else {
			flagTotalMetadataFootprintName = fmt.Sprintf("%v.total_metadata_footprint", cmdPrefix)
		}

		flagTotalMetadataFootprintValue, err := cmd.Flags().GetInt64(flagTotalMetadataFootprintName)
		if err != nil {
			return err, false
		}
		m.TotalMetadataFootprint = &flagTotalMetadataFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropUsedFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedName := fmt.Sprintf("%v.used", cmdPrefix)
	if cmd.Flags().Changed(flagUsedName) {

		var flagUsedName string
		if cmdPrefix == "" {
			flagUsedName = "used"
		} else {
			flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
		}

		flagUsedValue, err := cmd.Flags().GetInt64(flagUsedName)
		if err != nil {
			return err, false
		}
		m.Used = &flagUsedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropUsedByAfsFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedByAfsName := fmt.Sprintf("%v.used_by_afs", cmdPrefix)
	if cmd.Flags().Changed(flagUsedByAfsName) {

		var flagUsedByAfsName string
		if cmdPrefix == "" {
			flagUsedByAfsName = "used_by_afs"
		} else {
			flagUsedByAfsName = fmt.Sprintf("%v.used_by_afs", cmdPrefix)
		}

		flagUsedByAfsValue, err := cmd.Flags().GetInt64(flagUsedByAfsName)
		if err != nil {
			return err, false
		}
		m.UsedByAfs = &flagUsedByAfsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpacePropUsedPercentFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedPercentName := fmt.Sprintf("%v.used_percent", cmdPrefix)
	if cmd.Flags().Changed(flagUsedPercentName) {

		var flagUsedPercentName string
		if cmdPrefix == "" {
			flagUsedPercentName = "used_percent"
		} else {
			flagUsedPercentName = fmt.Sprintf("%v.used_percent", cmdPrefix)
		}

		flagUsedPercentValue, err := cmd.Flags().GetInt64(flagUsedPercentName)
		if err != nil {
			return err, false
		}
		m.UsedPercent = &flagUsedPercentValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpace

// register flags to command
func registerModelVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpaceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropEnforcement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropReporting(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropUsedByAfs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAvailableDescription := `The amount of space available in this volume with storage efficiency space considered used, in bytes.`

	var flagAvailableName string
	if cmdPrefix == "" {
		flagAvailableName = "available"
	} else {
		flagAvailableName = fmt.Sprintf("%v.available", cmdPrefix)
	}

	var flagAvailableDefault int64

	_ = cmd.PersistentFlags().Int64(flagAvailableName, flagAvailableDefault, flagAvailableDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropEnforcement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEnforcementDescription := `Specifies whether space accounting for operations on the volume is done along with storage efficiency.`

	var flagEnforcementName string
	if cmdPrefix == "" {
		flagEnforcementName = "enforcement"
	} else {
		flagEnforcementName = fmt.Sprintf("%v.enforcement", cmdPrefix)
	}

	var flagEnforcementDefault bool

	_ = cmd.PersistentFlags().Bool(flagEnforcementName, flagEnforcementDefault, flagEnforcementDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropReporting(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReportingDescription := `Specifies whether space reporting on the volume is done along with storage efficiency.`

	var flagReportingName string
	if cmdPrefix == "" {
		flagReportingName = "reporting"
	} else {
		flagReportingName = fmt.Sprintf("%v.reporting", cmdPrefix)
	}

	var flagReportingDefault bool

	_ = cmd.PersistentFlags().Bool(flagReportingName, flagReportingDefault, flagReportingDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropUsedByAfs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedByAfsDescription := `The virtual space used by AFS alone (includes volume reserves) and along with storage efficiency, in bytes.`

	var flagUsedByAfsName string
	if cmdPrefix == "" {
		flagUsedByAfsName = "used_by_afs"
	} else {
		flagUsedByAfsName = fmt.Sprintf("%v.used_by_afs", cmdPrefix)
	}

	var flagUsedByAfsDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedByAfsName, flagUsedByAfsDefault, flagUsedByAfsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpaceFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AvailableAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AvailableAdded

	err, EnforcementAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropEnforcementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnforcementAdded

	err, ReportingAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropReportingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReportingAdded

	err, UsedByAfsAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropUsedByAfsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedByAfsAdded

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropAvailableFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAvailableName := fmt.Sprintf("%v.available", cmdPrefix)
	if cmd.Flags().Changed(flagAvailableName) {

		var flagAvailableName string
		if cmdPrefix == "" {
			flagAvailableName = "available"
		} else {
			flagAvailableName = fmt.Sprintf("%v.available", cmdPrefix)
		}

		flagAvailableValue, err := cmd.Flags().GetInt64(flagAvailableName)
		if err != nil {
			return err, false
		}
		m.Available = &flagAvailableValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropEnforcementFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEnforcementName := fmt.Sprintf("%v.enforcement", cmdPrefix)
	if cmd.Flags().Changed(flagEnforcementName) {

		var flagEnforcementName string
		if cmdPrefix == "" {
			flagEnforcementName = "enforcement"
		} else {
			flagEnforcementName = fmt.Sprintf("%v.enforcement", cmdPrefix)
		}

		flagEnforcementValue, err := cmd.Flags().GetBool(flagEnforcementName)
		if err != nil {
			return err, false
		}
		m.Enforcement = &flagEnforcementValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropReportingFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReportingName := fmt.Sprintf("%v.reporting", cmdPrefix)
	if cmd.Flags().Changed(flagReportingName) {

		var flagReportingName string
		if cmdPrefix == "" {
			flagReportingName = "reporting"
		} else {
			flagReportingName = fmt.Sprintf("%v.reporting", cmdPrefix)
		}

		flagReportingValue, err := cmd.Flags().GetBool(flagReportingName)
		if err != nil {
			return err, false
		}
		m.Reporting = &flagReportingValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpacePropUsedByAfsFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedByAfsName := fmt.Sprintf("%v.used_by_afs", cmdPrefix)
	if cmd.Flags().Changed(flagUsedByAfsName) {

		var flagUsedByAfsName string
		if cmdPrefix == "" {
			flagUsedByAfsName = "used_by_afs"
		} else {
			flagUsedByAfsName = fmt.Sprintf("%v.used_by_afs", cmdPrefix)
		}

		flagUsedByAfsValue, err := cmd.Flags().GetInt64(flagUsedByAfsName)
		if err != nil {
			return err, false
		}
		m.UsedByAfs = &flagUsedByAfsValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshot

// register flags to command
func registerModelVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotPropAutodeleteEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotPropReservePercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotPropUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotPropAutodeleteEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAutodeleteEnabledDescription := `Specifies whether snapshot autodelete is currently enabled on this volume.`

	var flagAutodeleteEnabledName string
	if cmdPrefix == "" {
		flagAutodeleteEnabledName = "autodelete_enabled"
	} else {
		flagAutodeleteEnabledName = fmt.Sprintf("%v.autodelete_enabled", cmdPrefix)
	}

	var flagAutodeleteEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagAutodeleteEnabledName, flagAutodeleteEnabledDefault, flagAutodeleteEnabledDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotPropReservePercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReservePercentDescription := `The space that has been set aside as a reserve for snapshot usage, in percent.`

	var flagReservePercentName string
	if cmdPrefix == "" {
		flagReservePercentName = "reserve_percent"
	} else {
		flagReservePercentName = fmt.Sprintf("%v.reserve_percent", cmdPrefix)
	}

	var flagReservePercentDefault int64 = 5

	_ = cmd.PersistentFlags().Int64(flagReservePercentName, flagReservePercentDefault, flagReservePercentDescription)

	return nil
}

func registerVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotPropUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedDescription := `The total space used by snapshots in the volume, in bytes.`

	var flagUsedName string
	if cmdPrefix == "" {
		flagUsedName = "used"
	} else {
		flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
	}

	var flagUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedName, flagUsedDefault, flagUsedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AutodeleteEnabledAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotPropAutodeleteEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AutodeleteEnabledAdded

	err, ReservePercentAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotPropReservePercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReservePercentAdded

	err, UsedAdded := retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotPropUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedAdded

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotPropAutodeleteEnabledFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAutodeleteEnabledName := fmt.Sprintf("%v.autodelete_enabled", cmdPrefix)
	if cmd.Flags().Changed(flagAutodeleteEnabledName) {

		var flagAutodeleteEnabledName string
		if cmdPrefix == "" {
			flagAutodeleteEnabledName = "autodelete_enabled"
		} else {
			flagAutodeleteEnabledName = fmt.Sprintf("%v.autodelete_enabled", cmdPrefix)
		}

		flagAutodeleteEnabledValue, err := cmd.Flags().GetBool(flagAutodeleteEnabledName)
		if err != nil {
			return err, false
		}
		m.AutodeleteEnabled = &flagAutodeleteEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotPropReservePercentFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReservePercentName := fmt.Sprintf("%v.reserve_percent", cmdPrefix)
	if cmd.Flags().Changed(flagReservePercentName) {

		var flagReservePercentName string
		if cmdPrefix == "" {
			flagReservePercentName = "reserve_percent"
		} else {
			flagReservePercentName = fmt.Sprintf("%v.reserve_percent", cmdPrefix)
		}

		flagReservePercentValue, err := cmd.Flags().GetInt64(flagReservePercentName)
		if err != nil {
			return err, false
		}
		m.ReservePercent = &flagReservePercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshotPropUsedFlags(depth int, m *models.VolumeInlineConstituentsInlineArrayItemInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedName := fmt.Sprintf("%v.used", cmdPrefix)
	if cmd.Flags().Changed(flagUsedName) {

		var flagUsedName string
		if cmdPrefix == "" {
			flagUsedName = "used"
		} else {
			flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
		}

		flagUsedValue, err := cmd.Flags().GetInt64(flagUsedName)
		if err != nil {
			return err, false
		}
		m.Used = &flagUsedValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineEfficiency

// register flags to command
func registerModelVolumeInlineEfficiencyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineEfficiencyPropApplicationIoSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropAutoState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropCompaction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropCompression(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropCompressionType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropCrossVolumeDedupe(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropDedupe(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropHasSavings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropIdcsScanner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropLastOpBegin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropLastOpEnd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropLastOpErr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropLastOpSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropLastOpState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropLoggingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropOpState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropProgress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropScanner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropSchedule(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropSpaceSavings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropStorageEfficiencyMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyPropVolumePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropApplicationIoSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagApplicationIoSizeDescription := `Enum: ["8k","16k","32k","auto"]. Block size to use by compression. 8k and auto are only allowed for POST. Only auto is supported on QAT supported platforms.`

	var flagApplicationIoSizeName string
	if cmdPrefix == "" {
		flagApplicationIoSizeName = "application_io_size"
	} else {
		flagApplicationIoSizeName = fmt.Sprintf("%v.application_io_size", cmdPrefix)
	}

	var flagApplicationIoSizeDefault string

	_ = cmd.PersistentFlags().String(flagApplicationIoSizeName, flagApplicationIoSizeDefault, flagApplicationIoSizeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagApplicationIoSizeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["8k","16k","32k","auto"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropAutoState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAutoStateDescription := `Enum: ["auto","deprioritized"]. Automatic deduplication schedule volume state.<br>auto &dash; Volumes with auto_state set to auto start post-process deduplication automatically.<br>deprioritized &dash; Volumes with auto_state set to deprioritized do not start post-process deduplication automatically.`

	var flagAutoStateName string
	if cmdPrefix == "" {
		flagAutoStateName = "auto_state"
	} else {
		flagAutoStateName = fmt.Sprintf("%v.auto_state", cmdPrefix)
	}

	var flagAutoStateDefault string

	_ = cmd.PersistentFlags().String(flagAutoStateName, flagAutoStateDefault, flagAutoStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagAutoStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["auto","deprioritized"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropCompaction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCompactionDescription := `Enum: ["inline","none","mixed"]. The system can be enabled/disabled compaction.<br>inline &dash; Data will be compacted first and written to the volume.<br>none &dash; None<br>mixed &dash; Read only field for FlexGroup volumes, where some of the constituent volumes are compaction enabled and some are disabled.`

	var flagCompactionName string
	if cmdPrefix == "" {
		flagCompactionName = "compaction"
	} else {
		flagCompactionName = fmt.Sprintf("%v.compaction", cmdPrefix)
	}

	var flagCompactionDefault string

	_ = cmd.PersistentFlags().String(flagCompactionName, flagCompactionDefault, flagCompactionDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagCompactionName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["inline","none","mixed"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropCompression(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCompressionDescription := `Enum: ["inline","background","both","none","mixed"]. The system can be enabled/disabled compression. Disabling compression is not allowed on Capacity optimized Flash with QAT supported platforms.<br>inline &dash; Data will be compressed first and written to the volume. <br>background &dash; Data will be written to the volume and compressed later. <br>both &dash; Inline compression compresses the data and write to the volume, background compression compresses only the blocks on which inline compression is not run.<br>none &dash; None<br>mixed &dash; Read only field for FlexGroup volumes, where some of the constituent volumes are compression enabled and some are disabled. <br>Note that On volumes with container compression enabled, background compression refers to inactive data compression scan enabled on the volume.`

	var flagCompressionName string
	if cmdPrefix == "" {
		flagCompressionName = "compression"
	} else {
		flagCompressionName = fmt.Sprintf("%v.compression", cmdPrefix)
	}

	var flagCompressionDefault string

	_ = cmd.PersistentFlags().String(flagCompressionName, flagCompressionDefault, flagCompressionDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagCompressionName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["inline","background","both","none","mixed"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropCompressionType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCompressionTypeDescription := `Enum: ["none","secondary","adaptive"]. Compression type to use by compression. Valid for PATCH and GET.`

	var flagCompressionTypeName string
	if cmdPrefix == "" {
		flagCompressionTypeName = "compression_type"
	} else {
		flagCompressionTypeName = fmt.Sprintf("%v.compression_type", cmdPrefix)
	}

	var flagCompressionTypeDefault string

	_ = cmd.PersistentFlags().String(flagCompressionTypeName, flagCompressionTypeDefault, flagCompressionTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagCompressionTypeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["none","secondary","adaptive"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropCrossVolumeDedupe(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCrossVolumeDedupeDescription := `Enum: ["inline","background","both","none","mixed"]. The system can be enabled/disabled cross volume dedupe. it can be enabled only when dedupe is enabled. Disabling cross volume dedupe is not allowed on Capacity optimized Flash with QAT supported platforms.<br>inline &dash; Data will be cross volume deduped first and written to the volume.<br>background &dash; Data will be written to the volume and cross volume deduped later.<br>both &dash; Inline cross volume dedupe dedupes the data and write to the volume, background cross volume dedupe dedupes only the blocks on which inline dedupe is not run.<br>none &dash; None<br>mixed &dash; Read only field for FlexGroup volumes, where some of the constituent volumes are cross volume dedupe enabled and some are disabled.`

	var flagCrossVolumeDedupeName string
	if cmdPrefix == "" {
		flagCrossVolumeDedupeName = "cross_volume_dedupe"
	} else {
		flagCrossVolumeDedupeName = fmt.Sprintf("%v.cross_volume_dedupe", cmdPrefix)
	}

	var flagCrossVolumeDedupeDefault string

	_ = cmd.PersistentFlags().String(flagCrossVolumeDedupeName, flagCrossVolumeDedupeDefault, flagCrossVolumeDedupeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagCrossVolumeDedupeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["inline","background","both","none","mixed"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropDedupe(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDedupeDescription := `Enum: ["inline","background","both","none","mixed"]. The system can be enabled/disabled dedupe. Disabling dedupe is not allowed on Capacity optimized Flash with QAT supported platforms.<br>inline &dash; Data will be deduped first and written to the volume.<br>background &dash; Data will be written to the volume and deduped later.<br>both &dash; Inline dedupe dedupes the data and write to the volume, background dedupe dedupes only the blocks on which inline dedupe is not run.<br>none &dash; None<br>mixed &dash; Read only field for FlexGroup volumes, where some of the constituent volumes are dedupe enabled and some are disabled.`

	var flagDedupeName string
	if cmdPrefix == "" {
		flagDedupeName = "dedupe"
	} else {
		flagDedupeName = fmt.Sprintf("%v.dedupe", cmdPrefix)
	}

	var flagDedupeDefault string

	_ = cmd.PersistentFlags().String(flagDedupeName, flagDedupeDefault, flagDedupeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagDedupeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["inline","background","both","none","mixed"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropHasSavings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHasSavingsDescription := `When true, indicates that the volume contains shared(deduplication, file clones) or compressed data.`

	var flagHasSavingsName string
	if cmdPrefix == "" {
		flagHasSavingsName = "has_savings"
	} else {
		flagHasSavingsName = fmt.Sprintf("%v.has_savings", cmdPrefix)
	}

	var flagHasSavingsDefault bool

	_ = cmd.PersistentFlags().Bool(flagHasSavingsName, flagHasSavingsDefault, flagHasSavingsDescription)

	return nil
}

func registerVolumeInlineEfficiencyPropIdcsScanner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagIdcsScannerName string
	if cmdPrefix == "" {
		flagIdcsScannerName = "idcs_scanner"
	} else {
		flagIdcsScannerName = fmt.Sprintf("%v.idcs_scanner", cmdPrefix)
	}

	if err := registerModelVolumeInlineEfficiencyInlineIdcsScannerFlags(depth+1, flagIdcsScannerName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropLastOpBegin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLastOpBeginDescription := `Last sis operation begin timestamp.`

	var flagLastOpBeginName string
	if cmdPrefix == "" {
		flagLastOpBeginName = "last_op_begin"
	} else {
		flagLastOpBeginName = fmt.Sprintf("%v.last_op_begin", cmdPrefix)
	}

	var flagLastOpBeginDefault string

	_ = cmd.PersistentFlags().String(flagLastOpBeginName, flagLastOpBeginDefault, flagLastOpBeginDescription)

	return nil
}

func registerVolumeInlineEfficiencyPropLastOpEnd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLastOpEndDescription := `Last sis operation end timestamp.`

	var flagLastOpEndName string
	if cmdPrefix == "" {
		flagLastOpEndName = "last_op_end"
	} else {
		flagLastOpEndName = fmt.Sprintf("%v.last_op_end", cmdPrefix)
	}

	var flagLastOpEndDefault string

	_ = cmd.PersistentFlags().String(flagLastOpEndName, flagLastOpEndDefault, flagLastOpEndDescription)

	return nil
}

func registerVolumeInlineEfficiencyPropLastOpErr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLastOpErrDescription := `Last sis operation error text.`

	var flagLastOpErrName string
	if cmdPrefix == "" {
		flagLastOpErrName = "last_op_err"
	} else {
		flagLastOpErrName = fmt.Sprintf("%v.last_op_err", cmdPrefix)
	}

	var flagLastOpErrDefault string

	_ = cmd.PersistentFlags().String(flagLastOpErrName, flagLastOpErrDefault, flagLastOpErrDescription)

	return nil
}

func registerVolumeInlineEfficiencyPropLastOpSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLastOpSizeDescription := `Last sis operation size.`

	var flagLastOpSizeName string
	if cmdPrefix == "" {
		flagLastOpSizeName = "last_op_size"
	} else {
		flagLastOpSizeName = fmt.Sprintf("%v.last_op_size", cmdPrefix)
	}

	var flagLastOpSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagLastOpSizeName, flagLastOpSizeDefault, flagLastOpSizeDescription)

	return nil
}

func registerVolumeInlineEfficiencyPropLastOpState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLastOpStateDescription := `Last sis operation state.`

	var flagLastOpStateName string
	if cmdPrefix == "" {
		flagLastOpStateName = "last_op_state"
	} else {
		flagLastOpStateName = fmt.Sprintf("%v.last_op_state", cmdPrefix)
	}

	var flagLastOpStateDefault string

	_ = cmd.PersistentFlags().String(flagLastOpStateName, flagLastOpStateDefault, flagLastOpStateDescription)

	return nil
}

func registerVolumeInlineEfficiencyPropLoggingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLoggingEnabledDescription := `When true, indicates that space savings for any newly-written data are being logged.`

	var flagLoggingEnabledName string
	if cmdPrefix == "" {
		flagLoggingEnabledName = "logging_enabled"
	} else {
		flagLoggingEnabledName = fmt.Sprintf("%v.logging_enabled", cmdPrefix)
	}

	var flagLoggingEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagLoggingEnabledName, flagLoggingEnabledDefault, flagLoggingEnabledDescription)

	return nil
}

func registerVolumeInlineEfficiencyPropOpState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOpStateDescription := `Enum: ["idle","initializing","active","undoing","pending","downgrading","disabled"]. Sis status of the volume.`

	var flagOpStateName string
	if cmdPrefix == "" {
		flagOpStateName = "op_state"
	} else {
		flagOpStateName = fmt.Sprintf("%v.op_state", cmdPrefix)
	}

	var flagOpStateDefault string

	_ = cmd.PersistentFlags().String(flagOpStateName, flagOpStateDefault, flagOpStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagOpStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["idle","initializing","active","undoing","pending","downgrading","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagPolicyName string
	if cmdPrefix == "" {
		flagPolicyName = "policy"
	} else {
		flagPolicyName = fmt.Sprintf("%v.policy", cmdPrefix)
	}

	if err := registerModelVolumeInlineEfficiencyInlinePolicyFlags(depth+1, flagPolicyName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropProgress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagProgressDescription := `Sis progress of the volume.`

	var flagProgressName string
	if cmdPrefix == "" {
		flagProgressName = "progress"
	} else {
		flagProgressName = fmt.Sprintf("%v.progress", cmdPrefix)
	}

	var flagProgressDefault string

	_ = cmd.PersistentFlags().String(flagProgressName, flagProgressDefault, flagProgressDescription)

	return nil
}

func registerVolumeInlineEfficiencyPropScanner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagScannerName string
	if cmdPrefix == "" {
		flagScannerName = "scanner"
	} else {
		flagScannerName = fmt.Sprintf("%v.scanner", cmdPrefix)
	}

	if err := registerModelVolumeInlineEfficiencyInlineScannerFlags(depth+1, flagScannerName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropSchedule(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagScheduleDescription := `Schedule associated with volume.`

	var flagScheduleName string
	if cmdPrefix == "" {
		flagScheduleName = "schedule"
	} else {
		flagScheduleName = fmt.Sprintf("%v.schedule", cmdPrefix)
	}

	var flagScheduleDefault string

	_ = cmd.PersistentFlags().String(flagScheduleName, flagScheduleDefault, flagScheduleDescription)

	return nil
}

func registerVolumeInlineEfficiencyPropSpaceSavings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSpaceSavingsName string
	if cmdPrefix == "" {
		flagSpaceSavingsName = "space_savings"
	} else {
		flagSpaceSavingsName = fmt.Sprintf("%v.space_savings", cmdPrefix)
	}

	if err := registerModelVolumeInlineEfficiencyInlineSpaceSavingsFlags(depth+1, flagSpaceSavingsName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := `Enum: ["disabled","enabled","mixed","custom"]. Storage efficiency state of the volume. Currently, this field supports POST/PATCH only for RW (Read-Write) volumes on FSx for ONTAP and Cloud Volumes ONTAP.<br>disabled &dash; All storage efficiency features are disabled.<br>mixed &dash; Read-only field for FlexGroup volumes, storage efficiency is enabled on certain constituents and disabled on others.<br>On FSx for ONTAP and Cloud Volumes ONTAP &dash; <br> &emsp; enabled &dash; All supported storage efficiency features for the volume are enabled.<br> &emsp; custom &dash; Read-only field currently only supported for the FSx for ONTAP and Cloud Volumes ONTAP, user-defined storage efficiency features are enabled.<br>For other platforms &dash; <br> &emsp; enabled &dash; At least one storage efficiency feature for the volume is enabled.`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["disabled","enabled","mixed","custom"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropStorageEfficiencyMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStorageEfficiencyModeDescription := `Enum: ["default","efficient"]. Storage efficiency mode used by volume. This parameter is supported only on AFF platforms. There is no difference between default and efficient modes on QAT supported platforms and auto adaptive compression is set irrespective of the modes.`

	var flagStorageEfficiencyModeName string
	if cmdPrefix == "" {
		flagStorageEfficiencyModeName = "storage_efficiency_mode"
	} else {
		flagStorageEfficiencyModeName = fmt.Sprintf("%v.storage_efficiency_mode", cmdPrefix)
	}

	var flagStorageEfficiencyModeDefault string

	_ = cmd.PersistentFlags().String(flagStorageEfficiencyModeName, flagStorageEfficiencyModeDefault, flagStorageEfficiencyModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStorageEfficiencyModeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["default","efficient"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTypeDescription := `Enum: ["regular","snapvault"]. Sis Type of the volume.`

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagTypeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["regular","snapvault"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyPropVolumePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagVolumePathDescription := `Absolute volume path of the volume.`

	var flagVolumePathName string
	if cmdPrefix == "" {
		flagVolumePathName = "volume_path"
	} else {
		flagVolumePathName = fmt.Sprintf("%v.volume_path", cmdPrefix)
	}

	var flagVolumePathDefault string

	_ = cmd.PersistentFlags().String(flagVolumePathName, flagVolumePathDefault, flagVolumePathDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineEfficiencyFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ApplicationIoSizeAdded := retrieveVolumeInlineEfficiencyPropApplicationIoSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ApplicationIoSizeAdded

	err, AutoStateAdded := retrieveVolumeInlineEfficiencyPropAutoStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AutoStateAdded

	err, CompactionAdded := retrieveVolumeInlineEfficiencyPropCompactionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CompactionAdded

	err, CompressionAdded := retrieveVolumeInlineEfficiencyPropCompressionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CompressionAdded

	err, CompressionTypeAdded := retrieveVolumeInlineEfficiencyPropCompressionTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CompressionTypeAdded

	err, CrossVolumeDedupeAdded := retrieveVolumeInlineEfficiencyPropCrossVolumeDedupeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CrossVolumeDedupeAdded

	err, DedupeAdded := retrieveVolumeInlineEfficiencyPropDedupeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DedupeAdded

	err, HasSavingsAdded := retrieveVolumeInlineEfficiencyPropHasSavingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HasSavingsAdded

	err, IdcsScannerAdded := retrieveVolumeInlineEfficiencyPropIdcsScannerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IdcsScannerAdded

	err, LastOpBeginAdded := retrieveVolumeInlineEfficiencyPropLastOpBeginFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastOpBeginAdded

	err, LastOpEndAdded := retrieveVolumeInlineEfficiencyPropLastOpEndFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastOpEndAdded

	err, LastOpErrAdded := retrieveVolumeInlineEfficiencyPropLastOpErrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastOpErrAdded

	err, LastOpSizeAdded := retrieveVolumeInlineEfficiencyPropLastOpSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastOpSizeAdded

	err, LastOpStateAdded := retrieveVolumeInlineEfficiencyPropLastOpStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastOpStateAdded

	err, LoggingEnabledAdded := retrieveVolumeInlineEfficiencyPropLoggingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LoggingEnabledAdded

	err, OpStateAdded := retrieveVolumeInlineEfficiencyPropOpStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OpStateAdded

	err, PolicyAdded := retrieveVolumeInlineEfficiencyPropPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PolicyAdded

	err, ProgressAdded := retrieveVolumeInlineEfficiencyPropProgressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProgressAdded

	err, ScannerAdded := retrieveVolumeInlineEfficiencyPropScannerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScannerAdded

	err, ScheduleAdded := retrieveVolumeInlineEfficiencyPropScheduleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScheduleAdded

	err, SpaceSavingsAdded := retrieveVolumeInlineEfficiencyPropSpaceSavingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceSavingsAdded

	err, StateAdded := retrieveVolumeInlineEfficiencyPropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, StorageEfficiencyModeAdded := retrieveVolumeInlineEfficiencyPropStorageEfficiencyModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StorageEfficiencyModeAdded

	err, TypeAdded := retrieveVolumeInlineEfficiencyPropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	err, VolumePathAdded := retrieveVolumeInlineEfficiencyPropVolumePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumePathAdded

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropApplicationIoSizeFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagApplicationIoSizeName := fmt.Sprintf("%v.application_io_size", cmdPrefix)
	if cmd.Flags().Changed(flagApplicationIoSizeName) {

		var flagApplicationIoSizeName string
		if cmdPrefix == "" {
			flagApplicationIoSizeName = "application_io_size"
		} else {
			flagApplicationIoSizeName = fmt.Sprintf("%v.application_io_size", cmdPrefix)
		}

		flagApplicationIoSizeValue, err := cmd.Flags().GetString(flagApplicationIoSizeName)
		if err != nil {
			return err, false
		}
		m.ApplicationIoSize = &flagApplicationIoSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropAutoStateFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAutoStateName := fmt.Sprintf("%v.auto_state", cmdPrefix)
	if cmd.Flags().Changed(flagAutoStateName) {

		var flagAutoStateName string
		if cmdPrefix == "" {
			flagAutoStateName = "auto_state"
		} else {
			flagAutoStateName = fmt.Sprintf("%v.auto_state", cmdPrefix)
		}

		flagAutoStateValue, err := cmd.Flags().GetString(flagAutoStateName)
		if err != nil {
			return err, false
		}
		m.AutoState = &flagAutoStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropCompactionFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCompactionName := fmt.Sprintf("%v.compaction", cmdPrefix)
	if cmd.Flags().Changed(flagCompactionName) {

		var flagCompactionName string
		if cmdPrefix == "" {
			flagCompactionName = "compaction"
		} else {
			flagCompactionName = fmt.Sprintf("%v.compaction", cmdPrefix)
		}

		flagCompactionValue, err := cmd.Flags().GetString(flagCompactionName)
		if err != nil {
			return err, false
		}
		m.Compaction = &flagCompactionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropCompressionFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCompressionName := fmt.Sprintf("%v.compression", cmdPrefix)
	if cmd.Flags().Changed(flagCompressionName) {

		var flagCompressionName string
		if cmdPrefix == "" {
			flagCompressionName = "compression"
		} else {
			flagCompressionName = fmt.Sprintf("%v.compression", cmdPrefix)
		}

		flagCompressionValue, err := cmd.Flags().GetString(flagCompressionName)
		if err != nil {
			return err, false
		}
		m.Compression = &flagCompressionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropCompressionTypeFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCompressionTypeName := fmt.Sprintf("%v.compression_type", cmdPrefix)
	if cmd.Flags().Changed(flagCompressionTypeName) {

		var flagCompressionTypeName string
		if cmdPrefix == "" {
			flagCompressionTypeName = "compression_type"
		} else {
			flagCompressionTypeName = fmt.Sprintf("%v.compression_type", cmdPrefix)
		}

		flagCompressionTypeValue, err := cmd.Flags().GetString(flagCompressionTypeName)
		if err != nil {
			return err, false
		}
		m.CompressionType = &flagCompressionTypeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropCrossVolumeDedupeFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCrossVolumeDedupeName := fmt.Sprintf("%v.cross_volume_dedupe", cmdPrefix)
	if cmd.Flags().Changed(flagCrossVolumeDedupeName) {

		var flagCrossVolumeDedupeName string
		if cmdPrefix == "" {
			flagCrossVolumeDedupeName = "cross_volume_dedupe"
		} else {
			flagCrossVolumeDedupeName = fmt.Sprintf("%v.cross_volume_dedupe", cmdPrefix)
		}

		flagCrossVolumeDedupeValue, err := cmd.Flags().GetString(flagCrossVolumeDedupeName)
		if err != nil {
			return err, false
		}
		m.CrossVolumeDedupe = &flagCrossVolumeDedupeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropDedupeFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDedupeName := fmt.Sprintf("%v.dedupe", cmdPrefix)
	if cmd.Flags().Changed(flagDedupeName) {

		var flagDedupeName string
		if cmdPrefix == "" {
			flagDedupeName = "dedupe"
		} else {
			flagDedupeName = fmt.Sprintf("%v.dedupe", cmdPrefix)
		}

		flagDedupeValue, err := cmd.Flags().GetString(flagDedupeName)
		if err != nil {
			return err, false
		}
		m.Dedupe = &flagDedupeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropHasSavingsFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHasSavingsName := fmt.Sprintf("%v.has_savings", cmdPrefix)
	if cmd.Flags().Changed(flagHasSavingsName) {

		var flagHasSavingsName string
		if cmdPrefix == "" {
			flagHasSavingsName = "has_savings"
		} else {
			flagHasSavingsName = fmt.Sprintf("%v.has_savings", cmdPrefix)
		}

		flagHasSavingsValue, err := cmd.Flags().GetBool(flagHasSavingsName)
		if err != nil {
			return err, false
		}
		m.HasSavings = &flagHasSavingsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropIdcsScannerFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIdcsScannerName := fmt.Sprintf("%v.idcs_scanner", cmdPrefix)
	if cmd.Flags().Changed(flagIdcsScannerName) {
		// info: complex object idcs_scanner VolumeInlineEfficiencyInlineIdcsScanner is retrieved outside this Changed() block
	}
	flagIdcsScannerValue := m.IdcsScanner
	if swag.IsZero(flagIdcsScannerValue) {
		flagIdcsScannerValue = &models.VolumeInlineEfficiencyInlineIdcsScanner{}
	}

	err, IdcsScannerAdded := retrieveModelVolumeInlineEfficiencyInlineIdcsScannerFlags(depth+1, flagIdcsScannerValue, flagIdcsScannerName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IdcsScannerAdded
	if IdcsScannerAdded {
		m.IdcsScanner = flagIdcsScannerValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropLastOpBeginFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastOpBeginName := fmt.Sprintf("%v.last_op_begin", cmdPrefix)
	if cmd.Flags().Changed(flagLastOpBeginName) {

		var flagLastOpBeginName string
		if cmdPrefix == "" {
			flagLastOpBeginName = "last_op_begin"
		} else {
			flagLastOpBeginName = fmt.Sprintf("%v.last_op_begin", cmdPrefix)
		}

		flagLastOpBeginValue, err := cmd.Flags().GetString(flagLastOpBeginName)
		if err != nil {
			return err, false
		}
		m.LastOpBegin = &flagLastOpBeginValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropLastOpEndFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastOpEndName := fmt.Sprintf("%v.last_op_end", cmdPrefix)
	if cmd.Flags().Changed(flagLastOpEndName) {

		var flagLastOpEndName string
		if cmdPrefix == "" {
			flagLastOpEndName = "last_op_end"
		} else {
			flagLastOpEndName = fmt.Sprintf("%v.last_op_end", cmdPrefix)
		}

		flagLastOpEndValue, err := cmd.Flags().GetString(flagLastOpEndName)
		if err != nil {
			return err, false
		}
		m.LastOpEnd = &flagLastOpEndValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropLastOpErrFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastOpErrName := fmt.Sprintf("%v.last_op_err", cmdPrefix)
	if cmd.Flags().Changed(flagLastOpErrName) {

		var flagLastOpErrName string
		if cmdPrefix == "" {
			flagLastOpErrName = "last_op_err"
		} else {
			flagLastOpErrName = fmt.Sprintf("%v.last_op_err", cmdPrefix)
		}

		flagLastOpErrValue, err := cmd.Flags().GetString(flagLastOpErrName)
		if err != nil {
			return err, false
		}
		m.LastOpErr = &flagLastOpErrValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropLastOpSizeFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastOpSizeName := fmt.Sprintf("%v.last_op_size", cmdPrefix)
	if cmd.Flags().Changed(flagLastOpSizeName) {

		var flagLastOpSizeName string
		if cmdPrefix == "" {
			flagLastOpSizeName = "last_op_size"
		} else {
			flagLastOpSizeName = fmt.Sprintf("%v.last_op_size", cmdPrefix)
		}

		flagLastOpSizeValue, err := cmd.Flags().GetInt64(flagLastOpSizeName)
		if err != nil {
			return err, false
		}
		m.LastOpSize = &flagLastOpSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropLastOpStateFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastOpStateName := fmt.Sprintf("%v.last_op_state", cmdPrefix)
	if cmd.Flags().Changed(flagLastOpStateName) {

		var flagLastOpStateName string
		if cmdPrefix == "" {
			flagLastOpStateName = "last_op_state"
		} else {
			flagLastOpStateName = fmt.Sprintf("%v.last_op_state", cmdPrefix)
		}

		flagLastOpStateValue, err := cmd.Flags().GetString(flagLastOpStateName)
		if err != nil {
			return err, false
		}
		m.LastOpState = &flagLastOpStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropLoggingEnabledFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLoggingEnabledName := fmt.Sprintf("%v.logging_enabled", cmdPrefix)
	if cmd.Flags().Changed(flagLoggingEnabledName) {

		var flagLoggingEnabledName string
		if cmdPrefix == "" {
			flagLoggingEnabledName = "logging_enabled"
		} else {
			flagLoggingEnabledName = fmt.Sprintf("%v.logging_enabled", cmdPrefix)
		}

		flagLoggingEnabledValue, err := cmd.Flags().GetBool(flagLoggingEnabledName)
		if err != nil {
			return err, false
		}
		m.LoggingEnabled = &flagLoggingEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropOpStateFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOpStateName := fmt.Sprintf("%v.op_state", cmdPrefix)
	if cmd.Flags().Changed(flagOpStateName) {

		var flagOpStateName string
		if cmdPrefix == "" {
			flagOpStateName = "op_state"
		} else {
			flagOpStateName = fmt.Sprintf("%v.op_state", cmdPrefix)
		}

		flagOpStateValue, err := cmd.Flags().GetString(flagOpStateName)
		if err != nil {
			return err, false
		}
		m.OpState = &flagOpStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropPolicyFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPolicyName := fmt.Sprintf("%v.policy", cmdPrefix)
	if cmd.Flags().Changed(flagPolicyName) {
		// info: complex object policy VolumeInlineEfficiencyInlinePolicy is retrieved outside this Changed() block
	}
	flagPolicyValue := m.Policy
	if swag.IsZero(flagPolicyValue) {
		flagPolicyValue = &models.VolumeInlineEfficiencyInlinePolicy{}
	}

	err, PolicyAdded := retrieveModelVolumeInlineEfficiencyInlinePolicyFlags(depth+1, flagPolicyValue, flagPolicyName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PolicyAdded
	if PolicyAdded {
		m.Policy = flagPolicyValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropProgressFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagProgressName := fmt.Sprintf("%v.progress", cmdPrefix)
	if cmd.Flags().Changed(flagProgressName) {

		var flagProgressName string
		if cmdPrefix == "" {
			flagProgressName = "progress"
		} else {
			flagProgressName = fmt.Sprintf("%v.progress", cmdPrefix)
		}

		flagProgressValue, err := cmd.Flags().GetString(flagProgressName)
		if err != nil {
			return err, false
		}
		m.Progress = &flagProgressValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropScannerFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScannerName := fmt.Sprintf("%v.scanner", cmdPrefix)
	if cmd.Flags().Changed(flagScannerName) {
		// info: complex object scanner VolumeInlineEfficiencyInlineScanner is retrieved outside this Changed() block
	}
	flagScannerValue := m.Scanner
	if swag.IsZero(flagScannerValue) {
		flagScannerValue = &models.VolumeInlineEfficiencyInlineScanner{}
	}

	err, ScannerAdded := retrieveModelVolumeInlineEfficiencyInlineScannerFlags(depth+1, flagScannerValue, flagScannerName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScannerAdded
	if ScannerAdded {
		m.Scanner = flagScannerValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropScheduleFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScheduleName := fmt.Sprintf("%v.schedule", cmdPrefix)
	if cmd.Flags().Changed(flagScheduleName) {

		var flagScheduleName string
		if cmdPrefix == "" {
			flagScheduleName = "schedule"
		} else {
			flagScheduleName = fmt.Sprintf("%v.schedule", cmdPrefix)
		}

		flagScheduleValue, err := cmd.Flags().GetString(flagScheduleName)
		if err != nil {
			return err, false
		}
		m.Schedule = &flagScheduleValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropSpaceSavingsFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSpaceSavingsName := fmt.Sprintf("%v.space_savings", cmdPrefix)
	if cmd.Flags().Changed(flagSpaceSavingsName) {
		// info: complex object space_savings VolumeInlineEfficiencyInlineSpaceSavings is retrieved outside this Changed() block
	}
	flagSpaceSavingsValue := m.SpaceSavings
	if swag.IsZero(flagSpaceSavingsValue) {
		flagSpaceSavingsValue = &models.VolumeInlineEfficiencyInlineSpaceSavings{}
	}

	err, SpaceSavingsAdded := retrieveModelVolumeInlineEfficiencyInlineSpaceSavingsFlags(depth+1, flagSpaceSavingsValue, flagSpaceSavingsName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceSavingsAdded
	if SpaceSavingsAdded {
		m.SpaceSavings = flagSpaceSavingsValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropStateFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropStorageEfficiencyModeFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStorageEfficiencyModeName := fmt.Sprintf("%v.storage_efficiency_mode", cmdPrefix)
	if cmd.Flags().Changed(flagStorageEfficiencyModeName) {

		var flagStorageEfficiencyModeName string
		if cmdPrefix == "" {
			flagStorageEfficiencyModeName = "storage_efficiency_mode"
		} else {
			flagStorageEfficiencyModeName = fmt.Sprintf("%v.storage_efficiency_mode", cmdPrefix)
		}

		flagStorageEfficiencyModeValue, err := cmd.Flags().GetString(flagStorageEfficiencyModeName)
		if err != nil {
			return err, false
		}
		m.StorageEfficiencyMode = &flagStorageEfficiencyModeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropTypeFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = &flagTypeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyPropVolumePathFlags(depth int, m *models.VolumeInlineEfficiency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumePathName := fmt.Sprintf("%v.volume_path", cmdPrefix)
	if cmd.Flags().Changed(flagVolumePathName) {

		var flagVolumePathName string
		if cmdPrefix == "" {
			flagVolumePathName = "volume_path"
		} else {
			flagVolumePathName = fmt.Sprintf("%v.volume_path", cmdPrefix)
		}

		flagVolumePathValue, err := cmd.Flags().GetString(flagVolumePathName)
		if err != nil {
			return err, false
		}
		m.VolumePath = &flagVolumePathValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineEfficiencyInlineIdcsScanner

// register flags to command
func registerModelVolumeInlineEfficiencyInlineIdcsScannerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineEfficiencyInlineIdcsScannerPropEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineIdcsScannerPropInactiveDays(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineIdcsScannerPropMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineIdcsScannerPropOperationState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineIdcsScannerPropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineIdcsScannerPropThresholdInactiveTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyInlineIdcsScannerPropEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEnabledDescription := `Specifies the administrative state of the inactive data compression scanner. Disabling inactive data compression is not allowed on Capacity optimized Flash with QAT supported platforms.`

	var flagEnabledName string
	if cmdPrefix == "" {
		flagEnabledName = "enabled"
	} else {
		flagEnabledName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var flagEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagEnabledName, flagEnabledDefault, flagEnabledDescription)

	return nil
}

func registerVolumeInlineEfficiencyInlineIdcsScannerPropInactiveDays(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagInactiveDaysDescription := `Data blocks older than, or equal to, 'inactive_days' are picked up by the inactive data compression scanner. Valid for PATCH only. Only applicable when 'operation_state' set to 'active'.`

	var flagInactiveDaysName string
	if cmdPrefix == "" {
		flagInactiveDaysName = "inactive_days"
	} else {
		flagInactiveDaysName = fmt.Sprintf("%v.inactive_days", cmdPrefix)
	}

	var flagInactiveDaysDefault int64 = 14

	_ = cmd.PersistentFlags().Int64(flagInactiveDaysName, flagInactiveDaysDefault, flagInactiveDaysDescription)

	return nil
}

func registerVolumeInlineEfficiencyInlineIdcsScannerPropMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagModeDescription := `Enum: ["default","compute_compression_savings"]. Specifies the mode of inactive data compression scanner. Valid for PATCH and GET.`

	var flagModeName string
	if cmdPrefix == "" {
		flagModeName = "mode"
	} else {
		flagModeName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var flagModeDefault string

	_ = cmd.PersistentFlags().String(flagModeName, flagModeDefault, flagModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagModeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["default","compute_compression_savings"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyInlineIdcsScannerPropOperationState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOperationStateDescription := `Enum: ["idle","active"]. Specifies the operational state of the inactive data compression scanner. VALID for PATCH and GET. Valid options for PATCH are "idle" and "active".`

	var flagOperationStateName string
	if cmdPrefix == "" {
		flagOperationStateName = "operation_state"
	} else {
		flagOperationStateName = fmt.Sprintf("%v.operation_state", cmdPrefix)
	}

	var flagOperationStateDefault string

	_ = cmd.PersistentFlags().String(flagOperationStateName, flagOperationStateDefault, flagOperationStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagOperationStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["idle","active"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyInlineIdcsScannerPropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStatusDescription := `Enum: ["success","failure"]. Status of last inactive data compression scan on the volume.`

	var flagStatusName string
	if cmdPrefix == "" {
		flagStatusName = "status"
	} else {
		flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var flagStatusDefault string

	_ = cmd.PersistentFlags().String(flagStatusName, flagStatusDefault, flagStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStatusName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["success","failure"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyInlineIdcsScannerPropThresholdInactiveTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagThresholdInactiveTimeDescription := `Time interval after which inactive data compression is automatically triggered. The value is in days and is represented in the ISO-8601 format "P<num>D", for example "P3D" represents a duration of 3 days. This field is not supported on QAT supported platforms.`

	var flagThresholdInactiveTimeName string
	if cmdPrefix == "" {
		flagThresholdInactiveTimeName = "threshold_inactive_time"
	} else {
		flagThresholdInactiveTimeName = fmt.Sprintf("%v.threshold_inactive_time", cmdPrefix)
	}

	var flagThresholdInactiveTimeDefault string

	_ = cmd.PersistentFlags().String(flagThresholdInactiveTimeName, flagThresholdInactiveTimeDefault, flagThresholdInactiveTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineEfficiencyInlineIdcsScannerFlags(depth int, m *models.VolumeInlineEfficiencyInlineIdcsScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EnabledAdded := retrieveVolumeInlineEfficiencyInlineIdcsScannerPropEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnabledAdded

	err, InactiveDaysAdded := retrieveVolumeInlineEfficiencyInlineIdcsScannerPropInactiveDaysFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InactiveDaysAdded

	err, ModeAdded := retrieveVolumeInlineEfficiencyInlineIdcsScannerPropModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ModeAdded

	err, OperationStateAdded := retrieveVolumeInlineEfficiencyInlineIdcsScannerPropOperationStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OperationStateAdded

	err, StatusAdded := retrieveVolumeInlineEfficiencyInlineIdcsScannerPropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	err, ThresholdInactiveTimeAdded := retrieveVolumeInlineEfficiencyInlineIdcsScannerPropThresholdInactiveTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ThresholdInactiveTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineIdcsScannerPropEnabledFlags(depth int, m *models.VolumeInlineEfficiencyInlineIdcsScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEnabledName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(flagEnabledName) {

		var flagEnabledName string
		if cmdPrefix == "" {
			flagEnabledName = "enabled"
		} else {
			flagEnabledName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		flagEnabledValue, err := cmd.Flags().GetBool(flagEnabledName)
		if err != nil {
			return err, false
		}
		m.Enabled = &flagEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineIdcsScannerPropInactiveDaysFlags(depth int, m *models.VolumeInlineEfficiencyInlineIdcsScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagInactiveDaysName := fmt.Sprintf("%v.inactive_days", cmdPrefix)
	if cmd.Flags().Changed(flagInactiveDaysName) {

		var flagInactiveDaysName string
		if cmdPrefix == "" {
			flagInactiveDaysName = "inactive_days"
		} else {
			flagInactiveDaysName = fmt.Sprintf("%v.inactive_days", cmdPrefix)
		}

		flagInactiveDaysValue, err := cmd.Flags().GetInt64(flagInactiveDaysName)
		if err != nil {
			return err, false
		}
		m.InactiveDays = &flagInactiveDaysValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineIdcsScannerPropModeFlags(depth int, m *models.VolumeInlineEfficiencyInlineIdcsScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagModeName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(flagModeName) {

		var flagModeName string
		if cmdPrefix == "" {
			flagModeName = "mode"
		} else {
			flagModeName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		flagModeValue, err := cmd.Flags().GetString(flagModeName)
		if err != nil {
			return err, false
		}
		m.Mode = &flagModeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineIdcsScannerPropOperationStateFlags(depth int, m *models.VolumeInlineEfficiencyInlineIdcsScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOperationStateName := fmt.Sprintf("%v.operation_state", cmdPrefix)
	if cmd.Flags().Changed(flagOperationStateName) {

		var flagOperationStateName string
		if cmdPrefix == "" {
			flagOperationStateName = "operation_state"
		} else {
			flagOperationStateName = fmt.Sprintf("%v.operation_state", cmdPrefix)
		}

		flagOperationStateValue, err := cmd.Flags().GetString(flagOperationStateName)
		if err != nil {
			return err, false
		}
		m.OperationState = &flagOperationStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineIdcsScannerPropStatusFlags(depth int, m *models.VolumeInlineEfficiencyInlineIdcsScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStatusName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(flagStatusName) {

		var flagStatusName string
		if cmdPrefix == "" {
			flagStatusName = "status"
		} else {
			flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		flagStatusValue, err := cmd.Flags().GetString(flagStatusName)
		if err != nil {
			return err, false
		}
		m.Status = &flagStatusValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineIdcsScannerPropThresholdInactiveTimeFlags(depth int, m *models.VolumeInlineEfficiencyInlineIdcsScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagThresholdInactiveTimeName := fmt.Sprintf("%v.threshold_inactive_time", cmdPrefix)
	if cmd.Flags().Changed(flagThresholdInactiveTimeName) {

		var flagThresholdInactiveTimeName string
		if cmdPrefix == "" {
			flagThresholdInactiveTimeName = "threshold_inactive_time"
		} else {
			flagThresholdInactiveTimeName = fmt.Sprintf("%v.threshold_inactive_time", cmdPrefix)
		}

		flagThresholdInactiveTimeValue, err := cmd.Flags().GetString(flagThresholdInactiveTimeName)
		if err != nil {
			return err, false
		}
		m.ThresholdInactiveTime = &flagThresholdInactiveTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineEfficiencyInlinePolicy

// register flags to command
func registerModelVolumeInlineEfficiencyInlinePolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineEfficiencyInlinePolicyPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyInlinePolicyPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `Specifies the name of the efficiency policy. The "inline-only" and "none" policies are not supported on Capacity optimized Flash with QAT supported platform.`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineEfficiencyInlinePolicyFlags(depth int, m *models.VolumeInlineEfficiencyInlinePolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NameAdded := retrieveVolumeInlineEfficiencyInlinePolicyPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlinePolicyPropNameFlags(depth int, m *models.VolumeInlineEfficiencyInlinePolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineEfficiencyInlineScanner

// register flags to command
func registerModelVolumeInlineEfficiencyInlineScannerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineEfficiencyInlineScannerPropCompression(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineScannerPropDedupe(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineScannerPropScanOldData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineScannerPropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyInlineScannerPropCompression(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCompressionDescription := `Start compression if scanning old data. Valid for PATCH and GET. This option is not supported for FSX/CVO platforms.`

	var flagCompressionName string
	if cmdPrefix == "" {
		flagCompressionName = "compression"
	} else {
		flagCompressionName = fmt.Sprintf("%v.compression", cmdPrefix)
	}

	var flagCompressionDefault bool

	_ = cmd.PersistentFlags().Bool(flagCompressionName, flagCompressionDefault, flagCompressionDescription)

	return nil
}

func registerVolumeInlineEfficiencyInlineScannerPropDedupe(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDedupeDescription := `Start deduplication if scanning old data. Valid for PATCH and GET.`

	var flagDedupeName string
	if cmdPrefix == "" {
		flagDedupeName = "dedupe"
	} else {
		flagDedupeName = fmt.Sprintf("%v.dedupe", cmdPrefix)
	}

	var flagDedupeDefault bool

	_ = cmd.PersistentFlags().Bool(flagDedupeName, flagDedupeDefault, flagDedupeDescription)

	return nil
}

func registerVolumeInlineEfficiencyInlineScannerPropScanOldData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagScanOldDataDescription := `Indicates whether or not to scan old data. Valid for PATCH and GET.`

	var flagScanOldDataName string
	if cmdPrefix == "" {
		flagScanOldDataName = "scan_old_data"
	} else {
		flagScanOldDataName = fmt.Sprintf("%v.scan_old_data", cmdPrefix)
	}

	var flagScanOldDataDefault bool

	_ = cmd.PersistentFlags().Bool(flagScanOldDataName, flagScanOldDataDefault, flagScanOldDataDescription)

	return nil
}

func registerVolumeInlineEfficiencyInlineScannerPropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := `Enum: ["idle","initializing","active","undoing","pending","downgrading","disabled"]. State of the volume efficiency scanner. Valid for PATCH and GET. Valid options for PATCH are "idle" and "active".`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["idle","initializing","active","undoing","pending","downgrading","disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineEfficiencyInlineScannerFlags(depth int, m *models.VolumeInlineEfficiencyInlineScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CompressionAdded := retrieveVolumeInlineEfficiencyInlineScannerPropCompressionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CompressionAdded

	err, DedupeAdded := retrieveVolumeInlineEfficiencyInlineScannerPropDedupeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DedupeAdded

	err, ScanOldDataAdded := retrieveVolumeInlineEfficiencyInlineScannerPropScanOldDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScanOldDataAdded

	err, StateAdded := retrieveVolumeInlineEfficiencyInlineScannerPropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineScannerPropCompressionFlags(depth int, m *models.VolumeInlineEfficiencyInlineScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCompressionName := fmt.Sprintf("%v.compression", cmdPrefix)
	if cmd.Flags().Changed(flagCompressionName) {

		var flagCompressionName string
		if cmdPrefix == "" {
			flagCompressionName = "compression"
		} else {
			flagCompressionName = fmt.Sprintf("%v.compression", cmdPrefix)
		}

		flagCompressionValue, err := cmd.Flags().GetBool(flagCompressionName)
		if err != nil {
			return err, false
		}
		m.Compression = &flagCompressionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineScannerPropDedupeFlags(depth int, m *models.VolumeInlineEfficiencyInlineScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDedupeName := fmt.Sprintf("%v.dedupe", cmdPrefix)
	if cmd.Flags().Changed(flagDedupeName) {

		var flagDedupeName string
		if cmdPrefix == "" {
			flagDedupeName = "dedupe"
		} else {
			flagDedupeName = fmt.Sprintf("%v.dedupe", cmdPrefix)
		}

		flagDedupeValue, err := cmd.Flags().GetBool(flagDedupeName)
		if err != nil {
			return err, false
		}
		m.Dedupe = &flagDedupeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineScannerPropScanOldDataFlags(depth int, m *models.VolumeInlineEfficiencyInlineScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScanOldDataName := fmt.Sprintf("%v.scan_old_data", cmdPrefix)
	if cmd.Flags().Changed(flagScanOldDataName) {

		var flagScanOldDataName string
		if cmdPrefix == "" {
			flagScanOldDataName = "scan_old_data"
		} else {
			flagScanOldDataName = fmt.Sprintf("%v.scan_old_data", cmdPrefix)
		}

		flagScanOldDataValue, err := cmd.Flags().GetBool(flagScanOldDataName)
		if err != nil {
			return err, false
		}
		m.ScanOldData = &flagScanOldDataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineScannerPropStateFlags(depth int, m *models.VolumeInlineEfficiencyInlineScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineEfficiencyInlineSpaceSavings

// register flags to command
func registerModelVolumeInlineEfficiencyInlineSpaceSavingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineEfficiencyInlineSpaceSavingsPropCompression(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineSpaceSavingsPropCompressionPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineSpaceSavingsPropDedupe(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineSpaceSavingsPropDedupePercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineSpaceSavingsPropDedupeSharing(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineSpaceSavingsPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEfficiencyInlineSpaceSavingsPropTotalPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEfficiencyInlineSpaceSavingsPropCompression(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCompressionDescription := `Total disk space that is saved by compressing blocks on the referenced file system, in bytes.`

	var flagCompressionName string
	if cmdPrefix == "" {
		flagCompressionName = "compression"
	} else {
		flagCompressionName = fmt.Sprintf("%v.compression", cmdPrefix)
	}

	var flagCompressionDefault int64

	_ = cmd.PersistentFlags().Int64(flagCompressionName, flagCompressionDefault, flagCompressionDescription)

	return nil
}

func registerVolumeInlineEfficiencyInlineSpaceSavingsPropCompressionPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCompressionPercentDescription := `Percentage of total disk space that is saved by compressing blocks on the referenced file system.`

	var flagCompressionPercentName string
	if cmdPrefix == "" {
		flagCompressionPercentName = "compression_percent"
	} else {
		flagCompressionPercentName = fmt.Sprintf("%v.compression_percent", cmdPrefix)
	}

	var flagCompressionPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagCompressionPercentName, flagCompressionPercentDefault, flagCompressionPercentDescription)

	return nil
}

func registerVolumeInlineEfficiencyInlineSpaceSavingsPropDedupe(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDedupeDescription := `Total disk space that is saved by deduplication and file cloning, in bytes.`

	var flagDedupeName string
	if cmdPrefix == "" {
		flagDedupeName = "dedupe"
	} else {
		flagDedupeName = fmt.Sprintf("%v.dedupe", cmdPrefix)
	}

	var flagDedupeDefault int64

	_ = cmd.PersistentFlags().Int64(flagDedupeName, flagDedupeDefault, flagDedupeDescription)

	return nil
}

func registerVolumeInlineEfficiencyInlineSpaceSavingsPropDedupePercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDedupePercentDescription := `Percentage of total disk space that is saved by deduplication and file cloning.`

	var flagDedupePercentName string
	if cmdPrefix == "" {
		flagDedupePercentName = "dedupe_percent"
	} else {
		flagDedupePercentName = fmt.Sprintf("%v.dedupe_percent", cmdPrefix)
	}

	var flagDedupePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagDedupePercentName, flagDedupePercentDefault, flagDedupePercentDescription)

	return nil
}

func registerVolumeInlineEfficiencyInlineSpaceSavingsPropDedupeSharing(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDedupeSharingDescription := `Total disk space that is shared due to deduplication and file cloning.`

	var flagDedupeSharingName string
	if cmdPrefix == "" {
		flagDedupeSharingName = "dedupe_sharing"
	} else {
		flagDedupeSharingName = fmt.Sprintf("%v.dedupe_sharing", cmdPrefix)
	}

	var flagDedupeSharingDefault int64

	_ = cmd.PersistentFlags().Int64(flagDedupeSharingName, flagDedupeSharingDefault, flagDedupeSharingDescription)

	return nil
}

func registerVolumeInlineEfficiencyInlineSpaceSavingsPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := `Total disk space saved in the volume due to deduplication, compression and file cloning, in bytes.`

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

func registerVolumeInlineEfficiencyInlineSpaceSavingsPropTotalPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalPercentDescription := `Percentage of total disk space saved in the volume due to deduplication, compression and file cloning.`

	var flagTotalPercentName string
	if cmdPrefix == "" {
		flagTotalPercentName = "total_percent"
	} else {
		flagTotalPercentName = fmt.Sprintf("%v.total_percent", cmdPrefix)
	}

	var flagTotalPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalPercentName, flagTotalPercentDefault, flagTotalPercentDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineEfficiencyInlineSpaceSavingsFlags(depth int, m *models.VolumeInlineEfficiencyInlineSpaceSavings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CompressionAdded := retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropCompressionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CompressionAdded

	err, CompressionPercentAdded := retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropCompressionPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CompressionPercentAdded

	err, DedupeAdded := retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropDedupeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DedupeAdded

	err, DedupePercentAdded := retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropDedupePercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DedupePercentAdded

	err, DedupeSharingAdded := retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropDedupeSharingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DedupeSharingAdded

	err, TotalAdded := retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	err, TotalPercentAdded := retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropTotalPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalPercentAdded

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropCompressionFlags(depth int, m *models.VolumeInlineEfficiencyInlineSpaceSavings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCompressionName := fmt.Sprintf("%v.compression", cmdPrefix)
	if cmd.Flags().Changed(flagCompressionName) {

		var flagCompressionName string
		if cmdPrefix == "" {
			flagCompressionName = "compression"
		} else {
			flagCompressionName = fmt.Sprintf("%v.compression", cmdPrefix)
		}

		flagCompressionValue, err := cmd.Flags().GetInt64(flagCompressionName)
		if err != nil {
			return err, false
		}
		m.Compression = &flagCompressionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropCompressionPercentFlags(depth int, m *models.VolumeInlineEfficiencyInlineSpaceSavings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCompressionPercentName := fmt.Sprintf("%v.compression_percent", cmdPrefix)
	if cmd.Flags().Changed(flagCompressionPercentName) {

		var flagCompressionPercentName string
		if cmdPrefix == "" {
			flagCompressionPercentName = "compression_percent"
		} else {
			flagCompressionPercentName = fmt.Sprintf("%v.compression_percent", cmdPrefix)
		}

		flagCompressionPercentValue, err := cmd.Flags().GetInt64(flagCompressionPercentName)
		if err != nil {
			return err, false
		}
		m.CompressionPercent = &flagCompressionPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropDedupeFlags(depth int, m *models.VolumeInlineEfficiencyInlineSpaceSavings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDedupeName := fmt.Sprintf("%v.dedupe", cmdPrefix)
	if cmd.Flags().Changed(flagDedupeName) {

		var flagDedupeName string
		if cmdPrefix == "" {
			flagDedupeName = "dedupe"
		} else {
			flagDedupeName = fmt.Sprintf("%v.dedupe", cmdPrefix)
		}

		flagDedupeValue, err := cmd.Flags().GetInt64(flagDedupeName)
		if err != nil {
			return err, false
		}
		m.Dedupe = &flagDedupeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropDedupePercentFlags(depth int, m *models.VolumeInlineEfficiencyInlineSpaceSavings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDedupePercentName := fmt.Sprintf("%v.dedupe_percent", cmdPrefix)
	if cmd.Flags().Changed(flagDedupePercentName) {

		var flagDedupePercentName string
		if cmdPrefix == "" {
			flagDedupePercentName = "dedupe_percent"
		} else {
			flagDedupePercentName = fmt.Sprintf("%v.dedupe_percent", cmdPrefix)
		}

		flagDedupePercentValue, err := cmd.Flags().GetInt64(flagDedupePercentName)
		if err != nil {
			return err, false
		}
		m.DedupePercent = &flagDedupePercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropDedupeSharingFlags(depth int, m *models.VolumeInlineEfficiencyInlineSpaceSavings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDedupeSharingName := fmt.Sprintf("%v.dedupe_sharing", cmdPrefix)
	if cmd.Flags().Changed(flagDedupeSharingName) {

		var flagDedupeSharingName string
		if cmdPrefix == "" {
			flagDedupeSharingName = "dedupe_sharing"
		} else {
			flagDedupeSharingName = fmt.Sprintf("%v.dedupe_sharing", cmdPrefix)
		}

		flagDedupeSharingValue, err := cmd.Flags().GetInt64(flagDedupeSharingName)
		if err != nil {
			return err, false
		}
		m.DedupeSharing = &flagDedupeSharingValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropTotalFlags(depth int, m *models.VolumeInlineEfficiencyInlineSpaceSavings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = &flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEfficiencyInlineSpaceSavingsPropTotalPercentFlags(depth int, m *models.VolumeInlineEfficiencyInlineSpaceSavings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalPercentName := fmt.Sprintf("%v.total_percent", cmdPrefix)
	if cmd.Flags().Changed(flagTotalPercentName) {

		var flagTotalPercentName string
		if cmdPrefix == "" {
			flagTotalPercentName = "total_percent"
		} else {
			flagTotalPercentName = fmt.Sprintf("%v.total_percent", cmdPrefix)
		}

		flagTotalPercentValue, err := cmd.Flags().GetInt64(flagTotalPercentName)
		if err != nil {
			return err, false
		}
		m.TotalPercent = &flagTotalPercentValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineEncryption

// register flags to command
func registerModelVolumeInlineEncryptionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineEncryptionPropAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEncryptionPropEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEncryptionPropKeyCreateTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEncryptionPropKeyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEncryptionPropKeyManagerAttribute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEncryptionPropRekey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEncryptionPropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEncryptionPropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEncryptionPropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEncryptionPropAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagActionDescription := `Enum: ["conversion_pause","conversion_resume","rekey_pause","rekey_resume"]. This field can be used to pause an ongoing rekey or conversion operation or resume a paused rekey or conversion operation. Valid in PATCH. The following actions are supported for this field:<br>conversion_pause &dash; Pause an encryption conversion operation currently in progress.<br>conversion_resume &dash; Resume a paused encryption conversion operation.<br>rekey_pause &dash; Pause an encryption rekey operation currently in progress.<br>rekey_resume &dash; Resume a paused encryption rekey operation.`

	var flagActionName string
	if cmdPrefix == "" {
		flagActionName = "action"
	} else {
		flagActionName = fmt.Sprintf("%v.action", cmdPrefix)
	}

	var flagActionDefault string

	_ = cmd.PersistentFlags().String(flagActionName, flagActionDefault, flagActionDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagActionName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["conversion_pause","conversion_resume","rekey_pause","rekey_resume"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEncryptionPropEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEnabledDescription := `Creates an encrypted or an unencrypted volume. For POST, when set to 'true', a new key is generated and used to encrypt the given volume. In that case, the underlying SVM must be configured with the key manager. When set to 'false', the volume created will be unencrypted. For PATCH, when set to 'true', it encrypts an unencrypted volume. Specifying the parameter as 'false' in a PATCH operation for an encrypted volume is only supported when moving the volume to another aggregate.`

	var flagEnabledName string
	if cmdPrefix == "" {
		flagEnabledName = "enabled"
	} else {
		flagEnabledName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var flagEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagEnabledName, flagEnabledDefault, flagEnabledDescription)

	return nil
}

func registerVolumeInlineEncryptionPropKeyCreateTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagKeyCreateTimeDescription := `Encryption key creation time of the volume.`

	var flagKeyCreateTimeName string
	if cmdPrefix == "" {
		flagKeyCreateTimeName = "key_create_time"
	} else {
		flagKeyCreateTimeName = fmt.Sprintf("%v.key_create_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagKeyCreateTimeName, "", flagKeyCreateTimeDescription)

	return nil
}

func registerVolumeInlineEncryptionPropKeyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagKeyIDDescription := `The key ID used for creating encrypted volume. A new key-id is generated for creating an encrypted volume. This key-id is associated with the generated key.`

	var flagKeyIDName string
	if cmdPrefix == "" {
		flagKeyIDName = "key_id"
	} else {
		flagKeyIDName = fmt.Sprintf("%v.key_id", cmdPrefix)
	}

	var flagKeyIDDefault string

	_ = cmd.PersistentFlags().String(flagKeyIDName, flagKeyIDDefault, flagKeyIDDescription)

	return nil
}

func registerVolumeInlineEncryptionPropKeyManagerAttribute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagKeyManagerAttributeDescription := `Specifies an additional key manager attribute that is an identifier-value pair, separated by '='. For example, CRN=unique-value. This parameter is required when using the POST method and an IBM Key Lore key manager is configured on the SVM.`

	var flagKeyManagerAttributeName string
	if cmdPrefix == "" {
		flagKeyManagerAttributeName = "key_manager_attribute"
	} else {
		flagKeyManagerAttributeName = fmt.Sprintf("%v.key_manager_attribute", cmdPrefix)
	}

	var flagKeyManagerAttributeDefault string

	_ = cmd.PersistentFlags().String(flagKeyManagerAttributeName, flagKeyManagerAttributeDefault, flagKeyManagerAttributeDescription)

	return nil
}

func registerVolumeInlineEncryptionPropRekey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagRekeyDescription := `If set to 'true', re-encrypts the volume with a new key. Valid in PATCH.`

	var flagRekeyName string
	if cmdPrefix == "" {
		flagRekeyName = "rekey"
	} else {
		flagRekeyName = fmt.Sprintf("%v.rekey", cmdPrefix)
	}

	var flagRekeyDefault bool

	_ = cmd.PersistentFlags().Bool(flagRekeyName, flagRekeyDefault, flagRekeyDescription)

	return nil
}

func registerVolumeInlineEncryptionPropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := `Enum: ["encrypted","encrypting","partial","rekeying","unencrypted"]. Volume encryption state.<br>encrypted &dash; The volume is completely encrypted.<br>encrypting &dash; Encryption operation is in progress.<br>partial &dash; Some constituents are encrypted and some are not. Applicable only for FlexGroup volume.<br>rekeying. Encryption of volume with a new key is in progress.<br>unencrypted &dash; The volume is a plain-text one.`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["encrypted","encrypting","partial","rekeying","unencrypted"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEncryptionPropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagStatusName string
	if cmdPrefix == "" {
		flagStatusName = "status"
	} else {
		flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	if err := registerModelVolumeInlineEncryptionInlineStatusFlags(depth+1, flagStatusName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEncryptionPropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTypeDescription := `Enum: ["none","volume","aggregate"]. Volume encryption type.<br>none &dash; The volume is a plain-text one.<br>volume &dash; The volume is encrypted with NVE (NetApp Volume Encryption).<br>aggregate &dash; The volume is encrypted with NAE (NetApp Aggregate Encryption).`

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagTypeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["none","volume","aggregate"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineEncryptionFlags(depth int, m *models.VolumeInlineEncryption, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ActionAdded := retrieveVolumeInlineEncryptionPropActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ActionAdded

	err, EnabledAdded := retrieveVolumeInlineEncryptionPropEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnabledAdded

	err, KeyCreateTimeAdded := retrieveVolumeInlineEncryptionPropKeyCreateTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || KeyCreateTimeAdded

	err, KeyIDAdded := retrieveVolumeInlineEncryptionPropKeyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || KeyIDAdded

	err, KeyManagerAttributeAdded := retrieveVolumeInlineEncryptionPropKeyManagerAttributeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || KeyManagerAttributeAdded

	err, RekeyAdded := retrieveVolumeInlineEncryptionPropRekeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RekeyAdded

	err, StateAdded := retrieveVolumeInlineEncryptionPropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, StatusAdded := retrieveVolumeInlineEncryptionPropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	err, TypeAdded := retrieveVolumeInlineEncryptionPropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	return nil, retAdded
}

func retrieveVolumeInlineEncryptionPropActionFlags(depth int, m *models.VolumeInlineEncryption, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagActionName := fmt.Sprintf("%v.action", cmdPrefix)
	if cmd.Flags().Changed(flagActionName) {

		var flagActionName string
		if cmdPrefix == "" {
			flagActionName = "action"
		} else {
			flagActionName = fmt.Sprintf("%v.action", cmdPrefix)
		}

		flagActionValue, err := cmd.Flags().GetString(flagActionName)
		if err != nil {
			return err, false
		}
		m.Action = &flagActionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEncryptionPropEnabledFlags(depth int, m *models.VolumeInlineEncryption, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEnabledName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(flagEnabledName) {

		var flagEnabledName string
		if cmdPrefix == "" {
			flagEnabledName = "enabled"
		} else {
			flagEnabledName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		flagEnabledValue, err := cmd.Flags().GetBool(flagEnabledName)
		if err != nil {
			return err, false
		}
		m.Enabled = &flagEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEncryptionPropKeyCreateTimeFlags(depth int, m *models.VolumeInlineEncryption, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagKeyCreateTimeName := fmt.Sprintf("%v.key_create_time", cmdPrefix)
	if cmd.Flags().Changed(flagKeyCreateTimeName) {

		var flagKeyCreateTimeName string
		if cmdPrefix == "" {
			flagKeyCreateTimeName = "key_create_time"
		} else {
			flagKeyCreateTimeName = fmt.Sprintf("%v.key_create_time", cmdPrefix)
		}

		flagKeyCreateTimeValueStr, err := cmd.Flags().GetString(flagKeyCreateTimeName)
		if err != nil {
			return err, false
		}
		var flagKeyCreateTimeValue strfmt.DateTime
		if err := flagKeyCreateTimeValue.UnmarshalText([]byte(flagKeyCreateTimeValueStr)); err != nil {
			return err, false
		}
		m.KeyCreateTime = &flagKeyCreateTimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEncryptionPropKeyIDFlags(depth int, m *models.VolumeInlineEncryption, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagKeyIDName := fmt.Sprintf("%v.key_id", cmdPrefix)
	if cmd.Flags().Changed(flagKeyIDName) {

		var flagKeyIDName string
		if cmdPrefix == "" {
			flagKeyIDName = "key_id"
		} else {
			flagKeyIDName = fmt.Sprintf("%v.key_id", cmdPrefix)
		}

		flagKeyIDValue, err := cmd.Flags().GetString(flagKeyIDName)
		if err != nil {
			return err, false
		}
		m.KeyID = &flagKeyIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEncryptionPropKeyManagerAttributeFlags(depth int, m *models.VolumeInlineEncryption, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagKeyManagerAttributeName := fmt.Sprintf("%v.key_manager_attribute", cmdPrefix)
	if cmd.Flags().Changed(flagKeyManagerAttributeName) {

		var flagKeyManagerAttributeName string
		if cmdPrefix == "" {
			flagKeyManagerAttributeName = "key_manager_attribute"
		} else {
			flagKeyManagerAttributeName = fmt.Sprintf("%v.key_manager_attribute", cmdPrefix)
		}

		flagKeyManagerAttributeValue, err := cmd.Flags().GetString(flagKeyManagerAttributeName)
		if err != nil {
			return err, false
		}
		m.KeyManagerAttribute = &flagKeyManagerAttributeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEncryptionPropRekeyFlags(depth int, m *models.VolumeInlineEncryption, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRekeyName := fmt.Sprintf("%v.rekey", cmdPrefix)
	if cmd.Flags().Changed(flagRekeyName) {

		var flagRekeyName string
		if cmdPrefix == "" {
			flagRekeyName = "rekey"
		} else {
			flagRekeyName = fmt.Sprintf("%v.rekey", cmdPrefix)
		}

		flagRekeyValue, err := cmd.Flags().GetBool(flagRekeyName)
		if err != nil {
			return err, false
		}
		m.Rekey = &flagRekeyValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEncryptionPropStateFlags(depth int, m *models.VolumeInlineEncryption, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEncryptionPropStatusFlags(depth int, m *models.VolumeInlineEncryption, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStatusName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(flagStatusName) {
		// info: complex object status VolumeInlineEncryptionInlineStatus is retrieved outside this Changed() block
	}
	flagStatusValue := m.Status
	if swag.IsZero(flagStatusValue) {
		flagStatusValue = &models.VolumeInlineEncryptionInlineStatus{}
	}

	err, StatusAdded := retrieveModelVolumeInlineEncryptionInlineStatusFlags(depth+1, flagStatusValue, flagStatusName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded
	if StatusAdded {
		m.Status = flagStatusValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineEncryptionPropTypeFlags(depth int, m *models.VolumeInlineEncryption, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = &flagTypeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineEncryptionInlineStatus

// register flags to command
func registerModelVolumeInlineEncryptionInlineStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineEncryptionInlineStatusPropCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineEncryptionInlineStatusPropMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineEncryptionInlineStatusPropCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCodeDescription := `Encryption progress message code.`

	var flagCodeName string
	if cmdPrefix == "" {
		flagCodeName = "code"
	} else {
		flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var flagCodeDefault string

	_ = cmd.PersistentFlags().String(flagCodeName, flagCodeDefault, flagCodeDescription)

	return nil
}

func registerVolumeInlineEncryptionInlineStatusPropMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMessageDescription := `Encryption progress message.`

	var flagMessageName string
	if cmdPrefix == "" {
		flagMessageName = "message"
	} else {
		flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var flagMessageDefault string

	_ = cmd.PersistentFlags().String(flagMessageName, flagMessageDefault, flagMessageDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineEncryptionInlineStatusFlags(depth int, m *models.VolumeInlineEncryptionInlineStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CodeAdded := retrieveVolumeInlineEncryptionInlineStatusPropCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CodeAdded

	err, MessageAdded := retrieveVolumeInlineEncryptionInlineStatusPropMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MessageAdded

	return nil, retAdded
}

func retrieveVolumeInlineEncryptionInlineStatusPropCodeFlags(depth int, m *models.VolumeInlineEncryptionInlineStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCodeName := fmt.Sprintf("%v.code", cmdPrefix)
	if cmd.Flags().Changed(flagCodeName) {

		var flagCodeName string
		if cmdPrefix == "" {
			flagCodeName = "code"
		} else {
			flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		flagCodeValue, err := cmd.Flags().GetString(flagCodeName)
		if err != nil {
			return err, false
		}
		m.Code = &flagCodeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineEncryptionInlineStatusPropMessageFlags(depth int, m *models.VolumeInlineEncryptionInlineStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMessageName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(flagMessageName) {

		var flagMessageName string
		if cmdPrefix == "" {
			flagMessageName = "message"
		} else {
			flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		flagMessageValue, err := cmd.Flags().GetString(flagMessageName)
		if err != nil {
			return err, false
		}
		m.Message = &flagMessageValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineErrorState

// register flags to command
func registerModelVolumeInlineErrorStateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineErrorStatePropHasBadBlocks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineErrorStatePropIsInconsistent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineErrorStatePropHasBadBlocks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHasBadBlocksDescription := `Indicates whether the volume has any corrupt data blocks. If the damaged data block is accessed, an IO error, such as EIO for NFS or STATUS_FILE_CORRUPT for CIFS, is returned.`

	var flagHasBadBlocksName string
	if cmdPrefix == "" {
		flagHasBadBlocksName = "has_bad_blocks"
	} else {
		flagHasBadBlocksName = fmt.Sprintf("%v.has_bad_blocks", cmdPrefix)
	}

	var flagHasBadBlocksDefault bool

	_ = cmd.PersistentFlags().Bool(flagHasBadBlocksName, flagHasBadBlocksDefault, flagHasBadBlocksDescription)

	return nil
}

func registerVolumeInlineErrorStatePropIsInconsistent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsInconsistentDescription := `Indicates whether the file system has any inconsistencies.<br>true &dash; File system is inconsistent.<br>false &dash; File system in not inconsistent.`

	var flagIsInconsistentName string
	if cmdPrefix == "" {
		flagIsInconsistentName = "is_inconsistent"
	} else {
		flagIsInconsistentName = fmt.Sprintf("%v.is_inconsistent", cmdPrefix)
	}

	var flagIsInconsistentDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsInconsistentName, flagIsInconsistentDefault, flagIsInconsistentDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineErrorStateFlags(depth int, m *models.VolumeInlineErrorState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, HasBadBlocksAdded := retrieveVolumeInlineErrorStatePropHasBadBlocksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HasBadBlocksAdded

	err, IsInconsistentAdded := retrieveVolumeInlineErrorStatePropIsInconsistentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsInconsistentAdded

	return nil, retAdded
}

func retrieveVolumeInlineErrorStatePropHasBadBlocksFlags(depth int, m *models.VolumeInlineErrorState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHasBadBlocksName := fmt.Sprintf("%v.has_bad_blocks", cmdPrefix)
	if cmd.Flags().Changed(flagHasBadBlocksName) {

		var flagHasBadBlocksName string
		if cmdPrefix == "" {
			flagHasBadBlocksName = "has_bad_blocks"
		} else {
			flagHasBadBlocksName = fmt.Sprintf("%v.has_bad_blocks", cmdPrefix)
		}

		flagHasBadBlocksValue, err := cmd.Flags().GetBool(flagHasBadBlocksName)
		if err != nil {
			return err, false
		}
		m.HasBadBlocks = &flagHasBadBlocksValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineErrorStatePropIsInconsistentFlags(depth int, m *models.VolumeInlineErrorState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsInconsistentName := fmt.Sprintf("%v.is_inconsistent", cmdPrefix)
	if cmd.Flags().Changed(flagIsInconsistentName) {

		var flagIsInconsistentName string
		if cmdPrefix == "" {
			flagIsInconsistentName = "is_inconsistent"
		} else {
			flagIsInconsistentName = fmt.Sprintf("%v.is_inconsistent", cmdPrefix)
		}

		flagIsInconsistentValue, err := cmd.Flags().GetBool(flagIsInconsistentName)
		if err != nil {
			return err, false
		}
		m.IsInconsistent = &flagIsInconsistentValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineFiles

// register flags to command
func registerModelVolumeInlineFilesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineFilesPropMaximum(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineFilesPropUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineFilesPropMaximum(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMaximumDescription := `The maximum number of files (inodes) for user-visible data allowed on the volume. This value can be increased or decreased. Increasing the maximum number of files does not immediately cause additional disk space to be used to track files. Instead, as more files are created on the volume, the system dynamically increases the number of disk blocks that are used to track files. The space assigned to track files is never freed, and this value cannot be decreased below the current number of files that can be tracked within the assigned space for the volume. Valid in PATCH.`

	var flagMaximumName string
	if cmdPrefix == "" {
		flagMaximumName = "maximum"
	} else {
		flagMaximumName = fmt.Sprintf("%v.maximum", cmdPrefix)
	}

	var flagMaximumDefault int64

	_ = cmd.PersistentFlags().Int64(flagMaximumName, flagMaximumDefault, flagMaximumDescription)

	return nil
}

func registerVolumeInlineFilesPropUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedDescription := `Number of files (inodes) used for user-visible data permitted on the volume. This field is valid only when the volume is online.`

	var flagUsedName string
	if cmdPrefix == "" {
		flagUsedName = "used"
	} else {
		flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
	}

	var flagUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedName, flagUsedDefault, flagUsedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineFilesFlags(depth int, m *models.VolumeInlineFiles, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, MaximumAdded := retrieveVolumeInlineFilesPropMaximumFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaximumAdded

	err, UsedAdded := retrieveVolumeInlineFilesPropUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedAdded

	return nil, retAdded
}

func retrieveVolumeInlineFilesPropMaximumFlags(depth int, m *models.VolumeInlineFiles, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMaximumName := fmt.Sprintf("%v.maximum", cmdPrefix)
	if cmd.Flags().Changed(flagMaximumName) {

		var flagMaximumName string
		if cmdPrefix == "" {
			flagMaximumName = "maximum"
		} else {
			flagMaximumName = fmt.Sprintf("%v.maximum", cmdPrefix)
		}

		flagMaximumValue, err := cmd.Flags().GetInt64(flagMaximumName)
		if err != nil {
			return err, false
		}
		m.Maximum = &flagMaximumValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineFilesPropUsedFlags(depth int, m *models.VolumeInlineFiles, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedName := fmt.Sprintf("%v.used", cmdPrefix)
	if cmd.Flags().Changed(flagUsedName) {

		var flagUsedName string
		if cmdPrefix == "" {
			flagUsedName = "used"
		} else {
			flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
		}

		flagUsedValue, err := cmd.Flags().GetInt64(flagUsedName)
		if err != nil {
			return err, false
		}
		m.Used = &flagUsedValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineFlashPool

// register flags to command
func registerModelVolumeInlineFlashPoolFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineFlashPoolPropCacheEligibility(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineFlashPoolPropCacheRetentionPriority(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineFlashPoolPropCachingPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineFlashPoolPropCacheEligibility(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCacheEligibilityDescription := `Enum: ["read","read_write","none"]. If this parameter is specified, the command displays information only about the volume or volumes with the specified Flash Pool caching attributes.`

	var flagCacheEligibilityName string
	if cmdPrefix == "" {
		flagCacheEligibilityName = "cache_eligibility"
	} else {
		flagCacheEligibilityName = fmt.Sprintf("%v.cache_eligibility", cmdPrefix)
	}

	var flagCacheEligibilityDefault string

	_ = cmd.PersistentFlags().String(flagCacheEligibilityName, flagCacheEligibilityDefault, flagCacheEligibilityDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagCacheEligibilityName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["read","read_write","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineFlashPoolPropCacheRetentionPriority(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCacheRetentionPriorityDescription := `Enum: ["normal","low","high"]. If this parameter is specified, the command displays the volumes that match the specified cache retention priority policy. A cache retention priority defines how long the blocks of a volume will be cached in the Flash Pool once they become cold.`

	var flagCacheRetentionPriorityName string
	if cmdPrefix == "" {
		flagCacheRetentionPriorityName = "cache_retention_priority"
	} else {
		flagCacheRetentionPriorityName = fmt.Sprintf("%v.cache_retention_priority", cmdPrefix)
	}

	var flagCacheRetentionPriorityDefault string = "normal"

	_ = cmd.PersistentFlags().String(flagCacheRetentionPriorityName, flagCacheRetentionPriorityDefault, flagCacheRetentionPriorityDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagCacheRetentionPriorityName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["normal","low","high"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineFlashPoolPropCachingPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCachingPolicyDescription := `Enum: ["none","auto","meta","random_read","random_read_write","all_read","all_read_random_write","all","noread_random_write","meta_random_write","random_read_write_random_write","all_read_random_write_random_write","all_random_write"]. This optionally specifies the caching policy to apply to the volume. A caching policy defines how the system caches a volume's data in Flash Cache modules. If a caching policy is not assigned to a volume, the system uses the caching policy that is assigned to the containing SVM. If a caching policy is not assigned to the containing SVM, the system uses the default cluster-wide policy.`

	var flagCachingPolicyName string
	if cmdPrefix == "" {
		flagCachingPolicyName = "caching_policy"
	} else {
		flagCachingPolicyName = fmt.Sprintf("%v.caching_policy", cmdPrefix)
	}

	var flagCachingPolicyDefault string = "auto"

	_ = cmd.PersistentFlags().String(flagCachingPolicyName, flagCachingPolicyDefault, flagCachingPolicyDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagCachingPolicyName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["none","auto","meta","random_read","random_read_write","all_read","all_read_random_write","all","noread_random_write","meta_random_write","random_read_write_random_write","all_read_random_write_random_write","all_random_write"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineFlashPoolFlags(depth int, m *models.VolumeInlineFlashPool, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CacheEligibilityAdded := retrieveVolumeInlineFlashPoolPropCacheEligibilityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CacheEligibilityAdded

	err, CacheRetentionPriorityAdded := retrieveVolumeInlineFlashPoolPropCacheRetentionPriorityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CacheRetentionPriorityAdded

	err, CachingPolicyAdded := retrieveVolumeInlineFlashPoolPropCachingPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CachingPolicyAdded

	return nil, retAdded
}

func retrieveVolumeInlineFlashPoolPropCacheEligibilityFlags(depth int, m *models.VolumeInlineFlashPool, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCacheEligibilityName := fmt.Sprintf("%v.cache_eligibility", cmdPrefix)
	if cmd.Flags().Changed(flagCacheEligibilityName) {

		var flagCacheEligibilityName string
		if cmdPrefix == "" {
			flagCacheEligibilityName = "cache_eligibility"
		} else {
			flagCacheEligibilityName = fmt.Sprintf("%v.cache_eligibility", cmdPrefix)
		}

		flagCacheEligibilityValue, err := cmd.Flags().GetString(flagCacheEligibilityName)
		if err != nil {
			return err, false
		}
		m.CacheEligibility = &flagCacheEligibilityValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineFlashPoolPropCacheRetentionPriorityFlags(depth int, m *models.VolumeInlineFlashPool, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCacheRetentionPriorityName := fmt.Sprintf("%v.cache_retention_priority", cmdPrefix)
	if cmd.Flags().Changed(flagCacheRetentionPriorityName) {

		var flagCacheRetentionPriorityName string
		if cmdPrefix == "" {
			flagCacheRetentionPriorityName = "cache_retention_priority"
		} else {
			flagCacheRetentionPriorityName = fmt.Sprintf("%v.cache_retention_priority", cmdPrefix)
		}

		flagCacheRetentionPriorityValue, err := cmd.Flags().GetString(flagCacheRetentionPriorityName)
		if err != nil {
			return err, false
		}
		m.CacheRetentionPriority = &flagCacheRetentionPriorityValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineFlashPoolPropCachingPolicyFlags(depth int, m *models.VolumeInlineFlashPool, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCachingPolicyName := fmt.Sprintf("%v.caching_policy", cmdPrefix)
	if cmd.Flags().Changed(flagCachingPolicyName) {

		var flagCachingPolicyName string
		if cmdPrefix == "" {
			flagCachingPolicyName = "caching_policy"
		} else {
			flagCachingPolicyName = fmt.Sprintf("%v.caching_policy", cmdPrefix)
		}

		flagCachingPolicyValue, err := cmd.Flags().GetString(flagCachingPolicyName)
		if err != nil {
			return err, false
		}
		m.CachingPolicy = &flagCachingPolicyValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineFlexgroup

// register flags to command
func registerModelVolumeInlineFlexgroupFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineFlexgroupPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineFlexgroupPropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineFlexgroupPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `Name of the FlexGroup volume that the constituent is part of.`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineFlexgroupPropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := `Unique identifier for the FlexGroup volume that the constituent is part of.`

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineFlexgroupFlags(depth int, m *models.VolumeInlineFlexgroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NameAdded := retrieveVolumeInlineFlexgroupPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineFlexgroupPropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineFlexgroupPropNameFlags(depth int, m *models.VolumeInlineFlexgroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineFlexgroupPropUUIDFlags(depth int, m *models.VolumeInlineFlexgroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineGuarantee

// register flags to command
func registerModelVolumeInlineGuaranteeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineGuaranteePropHonored(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineGuaranteePropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineGuaranteePropHonored(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHonoredDescription := `Is the space guarantee of this volume honored in the aggregate?`

	var flagHonoredName string
	if cmdPrefix == "" {
		flagHonoredName = "honored"
	} else {
		flagHonoredName = fmt.Sprintf("%v.honored", cmdPrefix)
	}

	var flagHonoredDefault bool

	_ = cmd.PersistentFlags().Bool(flagHonoredName, flagHonoredDefault, flagHonoredDescription)

	return nil
}

func registerVolumeInlineGuaranteePropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTypeDescription := `Enum: ["volume","none"]. The type of space guarantee of this volume in the aggregate.`

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagTypeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["volume","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineGuaranteeFlags(depth int, m *models.VolumeInlineGuarantee, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, HonoredAdded := retrieveVolumeInlineGuaranteePropHonoredFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HonoredAdded

	err, TypeAdded := retrieveVolumeInlineGuaranteePropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	return nil, retAdded
}

func retrieveVolumeInlineGuaranteePropHonoredFlags(depth int, m *models.VolumeInlineGuarantee, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHonoredName := fmt.Sprintf("%v.honored", cmdPrefix)
	if cmd.Flags().Changed(flagHonoredName) {

		var flagHonoredName string
		if cmdPrefix == "" {
			flagHonoredName = "honored"
		} else {
			flagHonoredName = fmt.Sprintf("%v.honored", cmdPrefix)
		}

		flagHonoredValue, err := cmd.Flags().GetBool(flagHonoredName)
		if err != nil {
			return err, false
		}
		m.Honored = &flagHonoredValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineGuaranteePropTypeFlags(depth int, m *models.VolumeInlineGuarantee, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = &flagTypeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineLinks

// register flags to command
func registerModelVolumeInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineLinksFlags(depth int, m *models.VolumeInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineMetric

// register flags to command
func registerModelVolumeInlineMetricFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineMetricPropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricPropCloud(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricPropDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricPropFlexcache(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricPropIops(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricPropLatency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricPropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricPropThroughput(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricPropTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricPropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineMetricInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricPropCloud(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagCloudName string
	if cmdPrefix == "" {
		flagCloudName = "cloud"
	} else {
		flagCloudName = fmt.Sprintf("%v.cloud", cmdPrefix)
	}

	if err := registerModelVolumeInlineMetricInlineCloudFlags(depth+1, flagCloudName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricPropDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDurationDescription := `Enum: ["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]. The duration over which this sample is calculated. The time durations are represented in the ISO-8601 standard format. Samples can be calculated over the following durations:
`

	var flagDurationName string
	if cmdPrefix == "" {
		flagDurationName = "duration"
	} else {
		flagDurationName = fmt.Sprintf("%v.duration", cmdPrefix)
	}

	var flagDurationDefault string

	_ = cmd.PersistentFlags().String(flagDurationName, flagDurationDefault, flagDurationDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagDurationName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricPropFlexcache(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagFlexcacheName string
	if cmdPrefix == "" {
		flagFlexcacheName = "flexcache"
	} else {
		flagFlexcacheName = fmt.Sprintf("%v.flexcache", cmdPrefix)
	}

	if err := registerModelVolumeInlineMetricInlineFlexcacheFlags(depth+1, flagFlexcacheName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricPropIops(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagIopsName string
	if cmdPrefix == "" {
		flagIopsName = "iops"
	} else {
		flagIopsName = fmt.Sprintf("%v.iops", cmdPrefix)
	}

	if err := registerModelVolumeInlineMetricInlineIopsFlags(depth+1, flagIopsName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricPropLatency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLatencyName string
	if cmdPrefix == "" {
		flagLatencyName = "latency"
	} else {
		flagLatencyName = fmt.Sprintf("%v.latency", cmdPrefix)
	}

	if err := registerModelVolumeInlineMetricInlineLatencyFlags(depth+1, flagLatencyName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricPropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStatusDescription := `Enum: ["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]. Errors associated with the sample. For example, if the aggregation of data over multiple nodes fails, then any partial errors might return "ok" on success or "error" on an internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.`

	var flagStatusName string
	if cmdPrefix == "" {
		flagStatusName = "status"
	} else {
		flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var flagStatusDefault string

	_ = cmd.PersistentFlags().String(flagStatusName, flagStatusDefault, flagStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStatusName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricPropThroughput(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagThroughputName string
	if cmdPrefix == "" {
		flagThroughputName = "throughput"
	} else {
		flagThroughputName = fmt.Sprintf("%v.throughput", cmdPrefix)
	}

	if err := registerModelVolumeInlineMetricInlineThroughputFlags(depth+1, flagThroughputName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricPropTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTimestampDescription := `The timestamp of the performance data.`

	var flagTimestampName string
	if cmdPrefix == "" {
		flagTimestampName = "timestamp"
	} else {
		flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagTimestampName, "", flagTimestampDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineMetricFlags(depth int, m *models.VolumeInlineMetric, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeInlineMetricPropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, CloudAdded := retrieveVolumeInlineMetricPropCloudFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CloudAdded

	err, DurationAdded := retrieveVolumeInlineMetricPropDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DurationAdded

	err, FlexcacheAdded := retrieveVolumeInlineMetricPropFlexcacheFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FlexcacheAdded

	err, IopsAdded := retrieveVolumeInlineMetricPropIopsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IopsAdded

	err, LatencyAdded := retrieveVolumeInlineMetricPropLatencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LatencyAdded

	err, StatusAdded := retrieveVolumeInlineMetricPropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	err, ThroughputAdded := retrieveVolumeInlineMetricPropThroughputFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ThroughputAdded

	err, TimestampAdded := retrieveVolumeInlineMetricPropTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimestampAdded

	return nil, retAdded
}

func retrieveVolumeInlineMetricPropLinksFlags(depth int, m *models.VolumeInlineMetric, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineMetricInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineMetricInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineMetricInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricPropCloudFlags(depth int, m *models.VolumeInlineMetric, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCloudName := fmt.Sprintf("%v.cloud", cmdPrefix)
	if cmd.Flags().Changed(flagCloudName) {
		// info: complex object cloud VolumeInlineMetricInlineCloud is retrieved outside this Changed() block
	}
	flagCloudValue := m.Cloud
	if swag.IsZero(flagCloudValue) {
		flagCloudValue = &models.VolumeInlineMetricInlineCloud{}
	}

	err, CloudAdded := retrieveModelVolumeInlineMetricInlineCloudFlags(depth+1, flagCloudValue, flagCloudName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CloudAdded
	if CloudAdded {
		m.Cloud = flagCloudValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricPropDurationFlags(depth int, m *models.VolumeInlineMetric, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDurationName := fmt.Sprintf("%v.duration", cmdPrefix)
	if cmd.Flags().Changed(flagDurationName) {

		var flagDurationName string
		if cmdPrefix == "" {
			flagDurationName = "duration"
		} else {
			flagDurationName = fmt.Sprintf("%v.duration", cmdPrefix)
		}

		flagDurationValue, err := cmd.Flags().GetString(flagDurationName)
		if err != nil {
			return err, false
		}
		m.Duration = &flagDurationValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricPropFlexcacheFlags(depth int, m *models.VolumeInlineMetric, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFlexcacheName := fmt.Sprintf("%v.flexcache", cmdPrefix)
	if cmd.Flags().Changed(flagFlexcacheName) {
		// info: complex object flexcache VolumeInlineMetricInlineFlexcache is retrieved outside this Changed() block
	}
	flagFlexcacheValue := m.Flexcache
	if swag.IsZero(flagFlexcacheValue) {
		flagFlexcacheValue = &models.VolumeInlineMetricInlineFlexcache{}
	}

	err, FlexcacheAdded := retrieveModelVolumeInlineMetricInlineFlexcacheFlags(depth+1, flagFlexcacheValue, flagFlexcacheName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FlexcacheAdded
	if FlexcacheAdded {
		m.Flexcache = flagFlexcacheValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricPropIopsFlags(depth int, m *models.VolumeInlineMetric, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIopsName := fmt.Sprintf("%v.iops", cmdPrefix)
	if cmd.Flags().Changed(flagIopsName) {
		// info: complex object iops VolumeInlineMetricInlineIops is retrieved outside this Changed() block
	}
	flagIopsValue := m.Iops
	if swag.IsZero(flagIopsValue) {
		flagIopsValue = &models.VolumeInlineMetricInlineIops{}
	}

	err, IopsAdded := retrieveModelVolumeInlineMetricInlineIopsFlags(depth+1, flagIopsValue, flagIopsName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IopsAdded
	if IopsAdded {
		m.Iops = flagIopsValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricPropLatencyFlags(depth int, m *models.VolumeInlineMetric, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLatencyName := fmt.Sprintf("%v.latency", cmdPrefix)
	if cmd.Flags().Changed(flagLatencyName) {
		// info: complex object latency VolumeInlineMetricInlineLatency is retrieved outside this Changed() block
	}
	flagLatencyValue := m.Latency
	if swag.IsZero(flagLatencyValue) {
		flagLatencyValue = &models.VolumeInlineMetricInlineLatency{}
	}

	err, LatencyAdded := retrieveModelVolumeInlineMetricInlineLatencyFlags(depth+1, flagLatencyValue, flagLatencyName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LatencyAdded
	if LatencyAdded {
		m.Latency = flagLatencyValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricPropStatusFlags(depth int, m *models.VolumeInlineMetric, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStatusName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(flagStatusName) {

		var flagStatusName string
		if cmdPrefix == "" {
			flagStatusName = "status"
		} else {
			flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		flagStatusValue, err := cmd.Flags().GetString(flagStatusName)
		if err != nil {
			return err, false
		}
		m.Status = &flagStatusValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricPropThroughputFlags(depth int, m *models.VolumeInlineMetric, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagThroughputName := fmt.Sprintf("%v.throughput", cmdPrefix)
	if cmd.Flags().Changed(flagThroughputName) {
		// info: complex object throughput VolumeInlineMetricInlineThroughput is retrieved outside this Changed() block
	}
	flagThroughputValue := m.Throughput
	if swag.IsZero(flagThroughputValue) {
		flagThroughputValue = &models.VolumeInlineMetricInlineThroughput{}
	}

	err, ThroughputAdded := retrieveModelVolumeInlineMetricInlineThroughputFlags(depth+1, flagThroughputValue, flagThroughputName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ThroughputAdded
	if ThroughputAdded {
		m.Throughput = flagThroughputValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricPropTimestampFlags(depth int, m *models.VolumeInlineMetric, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTimestampName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(flagTimestampName) {

		var flagTimestampName string
		if cmdPrefix == "" {
			flagTimestampName = "timestamp"
		} else {
			flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
		}

		flagTimestampValueStr, err := cmd.Flags().GetString(flagTimestampName)
		if err != nil {
			return err, false
		}
		var flagTimestampValue strfmt.DateTime
		if err := flagTimestampValue.UnmarshalText([]byte(flagTimestampValueStr)); err != nil {
			return err, false
		}
		m.Timestamp = &flagTimestampValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineMetricInlineCloud

// register flags to command
func registerModelVolumeInlineMetricInlineCloudFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineMetricInlineCloudPropDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineCloudPropIops(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineCloudPropLatency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineCloudPropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineCloudPropTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineCloudPropDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDurationDescription := `Enum: ["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]. The duration over which this sample is calculated. The time durations are represented in the ISO-8601 standard format. Samples can be calculated over the following durations:
`

	var flagDurationName string
	if cmdPrefix == "" {
		flagDurationName = "duration"
	} else {
		flagDurationName = fmt.Sprintf("%v.duration", cmdPrefix)
	}

	var flagDurationDefault string

	_ = cmd.PersistentFlags().String(flagDurationName, flagDurationDefault, flagDurationDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagDurationName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineCloudPropIops(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagIopsName string
	if cmdPrefix == "" {
		flagIopsName = "iops"
	} else {
		flagIopsName = fmt.Sprintf("%v.iops", cmdPrefix)
	}

	if err := registerModelVolumeInlineMetricInlineCloudInlineIopsFlags(depth+1, flagIopsName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineCloudPropLatency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLatencyName string
	if cmdPrefix == "" {
		flagLatencyName = "latency"
	} else {
		flagLatencyName = fmt.Sprintf("%v.latency", cmdPrefix)
	}

	if err := registerModelVolumeInlineMetricInlineCloudInlineLatencyFlags(depth+1, flagLatencyName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineCloudPropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStatusDescription := `Enum: ["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]. Errors associated with the sample. For example, if the aggregation of data over multiple nodes fails, then any partial errors might return "ok" on success or "error" on an internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.`

	var flagStatusName string
	if cmdPrefix == "" {
		flagStatusName = "status"
	} else {
		flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var flagStatusDefault string

	_ = cmd.PersistentFlags().String(flagStatusName, flagStatusDefault, flagStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStatusName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineCloudPropTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTimestampDescription := `The timestamp of the performance data.`

	var flagTimestampName string
	if cmdPrefix == "" {
		flagTimestampName = "timestamp"
	} else {
		flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagTimestampName, "", flagTimestampDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineMetricInlineCloudFlags(depth int, m *models.VolumeInlineMetricInlineCloud, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DurationAdded := retrieveVolumeInlineMetricInlineCloudPropDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DurationAdded

	err, IopsAdded := retrieveVolumeInlineMetricInlineCloudPropIopsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IopsAdded

	err, LatencyAdded := retrieveVolumeInlineMetricInlineCloudPropLatencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LatencyAdded

	err, StatusAdded := retrieveVolumeInlineMetricInlineCloudPropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	err, TimestampAdded := retrieveVolumeInlineMetricInlineCloudPropTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimestampAdded

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudPropDurationFlags(depth int, m *models.VolumeInlineMetricInlineCloud, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDurationName := fmt.Sprintf("%v.duration", cmdPrefix)
	if cmd.Flags().Changed(flagDurationName) {

		var flagDurationName string
		if cmdPrefix == "" {
			flagDurationName = "duration"
		} else {
			flagDurationName = fmt.Sprintf("%v.duration", cmdPrefix)
		}

		flagDurationValue, err := cmd.Flags().GetString(flagDurationName)
		if err != nil {
			return err, false
		}
		m.Duration = &flagDurationValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudPropIopsFlags(depth int, m *models.VolumeInlineMetricInlineCloud, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIopsName := fmt.Sprintf("%v.iops", cmdPrefix)
	if cmd.Flags().Changed(flagIopsName) {
		// info: complex object iops VolumeInlineMetricInlineCloudInlineIops is retrieved outside this Changed() block
	}
	flagIopsValue := m.Iops
	if swag.IsZero(flagIopsValue) {
		flagIopsValue = &models.VolumeInlineMetricInlineCloudInlineIops{}
	}

	err, IopsAdded := retrieveModelVolumeInlineMetricInlineCloudInlineIopsFlags(depth+1, flagIopsValue, flagIopsName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IopsAdded
	if IopsAdded {
		m.Iops = flagIopsValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudPropLatencyFlags(depth int, m *models.VolumeInlineMetricInlineCloud, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLatencyName := fmt.Sprintf("%v.latency", cmdPrefix)
	if cmd.Flags().Changed(flagLatencyName) {
		// info: complex object latency VolumeInlineMetricInlineCloudInlineLatency is retrieved outside this Changed() block
	}
	flagLatencyValue := m.Latency
	if swag.IsZero(flagLatencyValue) {
		flagLatencyValue = &models.VolumeInlineMetricInlineCloudInlineLatency{}
	}

	err, LatencyAdded := retrieveModelVolumeInlineMetricInlineCloudInlineLatencyFlags(depth+1, flagLatencyValue, flagLatencyName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LatencyAdded
	if LatencyAdded {
		m.Latency = flagLatencyValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudPropStatusFlags(depth int, m *models.VolumeInlineMetricInlineCloud, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStatusName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(flagStatusName) {

		var flagStatusName string
		if cmdPrefix == "" {
			flagStatusName = "status"
		} else {
			flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		flagStatusValue, err := cmd.Flags().GetString(flagStatusName)
		if err != nil {
			return err, false
		}
		m.Status = &flagStatusValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudPropTimestampFlags(depth int, m *models.VolumeInlineMetricInlineCloud, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTimestampName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(flagTimestampName) {

		var flagTimestampName string
		if cmdPrefix == "" {
			flagTimestampName = "timestamp"
		} else {
			flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
		}

		flagTimestampValueStr, err := cmd.Flags().GetString(flagTimestampName)
		if err != nil {
			return err, false
		}
		var flagTimestampValue strfmt.DateTime
		if err := flagTimestampValue.UnmarshalText([]byte(flagTimestampValueStr)); err != nil {
			return err, false
		}
		m.Timestamp = &flagTimestampValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineMetricInlineCloudInlineIops

// register flags to command
func registerModelVolumeInlineMetricInlineCloudInlineIopsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineMetricInlineCloudInlineIopsPropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineCloudInlineIopsPropRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineCloudInlineIopsPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineCloudInlineIopsPropWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineCloudInlineIopsPropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOtherDescription := `Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.`

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var flagOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagOtherName, flagOtherDefault, flagOtherDescription)

	return nil
}

func registerVolumeInlineMetricInlineCloudInlineIopsPropRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReadDescription := `Performance metric for read I/O operations.`

	var flagReadName string
	if cmdPrefix == "" {
		flagReadName = "read"
	} else {
		flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	var flagReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagReadName, flagReadDefault, flagReadDescription)

	return nil
}

func registerVolumeInlineMetricInlineCloudInlineIopsPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := `Performance metric aggregated over all types of I/O operations.`

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

func registerVolumeInlineMetricInlineCloudInlineIopsPropWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWriteDescription := `Performance metric for write I/O operations.`

	var flagWriteName string
	if cmdPrefix == "" {
		flagWriteName = "write"
	} else {
		flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
	}

	var flagWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagWriteName, flagWriteDefault, flagWriteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineMetricInlineCloudInlineIopsFlags(depth int, m *models.VolumeInlineMetricInlineCloudInlineIops, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, OtherAdded := retrieveVolumeInlineMetricInlineCloudInlineIopsPropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, ReadAdded := retrieveVolumeInlineMetricInlineCloudInlineIopsPropReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded

	err, TotalAdded := retrieveVolumeInlineMetricInlineCloudInlineIopsPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	err, WriteAdded := retrieveVolumeInlineMetricInlineCloudInlineIopsPropWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudInlineIopsPropOtherFlags(depth int, m *models.VolumeInlineMetricInlineCloudInlineIops, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {

		var flagOtherName string
		if cmdPrefix == "" {
			flagOtherName = "other"
		} else {
			flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		flagOtherValue, err := cmd.Flags().GetInt64(flagOtherName)
		if err != nil {
			return err, false
		}
		m.Other = &flagOtherValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudInlineIopsPropReadFlags(depth int, m *models.VolumeInlineMetricInlineCloudInlineIops, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(flagReadName) {

		var flagReadName string
		if cmdPrefix == "" {
			flagReadName = "read"
		} else {
			flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
		}

		flagReadValue, err := cmd.Flags().GetInt64(flagReadName)
		if err != nil {
			return err, false
		}
		m.Read = &flagReadValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudInlineIopsPropTotalFlags(depth int, m *models.VolumeInlineMetricInlineCloudInlineIops, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = &flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudInlineIopsPropWriteFlags(depth int, m *models.VolumeInlineMetricInlineCloudInlineIops, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteName := fmt.Sprintf("%v.write", cmdPrefix)
	if cmd.Flags().Changed(flagWriteName) {

		var flagWriteName string
		if cmdPrefix == "" {
			flagWriteName = "write"
		} else {
			flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
		}

		flagWriteValue, err := cmd.Flags().GetInt64(flagWriteName)
		if err != nil {
			return err, false
		}
		m.Write = &flagWriteValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineMetricInlineCloudInlineLatency

// register flags to command
func registerModelVolumeInlineMetricInlineCloudInlineLatencyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineMetricInlineCloudInlineLatencyPropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineCloudInlineLatencyPropRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineCloudInlineLatencyPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineCloudInlineLatencyPropWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineCloudInlineLatencyPropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOtherDescription := `Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.`

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var flagOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagOtherName, flagOtherDefault, flagOtherDescription)

	return nil
}

func registerVolumeInlineMetricInlineCloudInlineLatencyPropRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReadDescription := `Performance metric for read I/O operations.`

	var flagReadName string
	if cmdPrefix == "" {
		flagReadName = "read"
	} else {
		flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	var flagReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagReadName, flagReadDefault, flagReadDescription)

	return nil
}

func registerVolumeInlineMetricInlineCloudInlineLatencyPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := `Performance metric aggregated over all types of I/O operations.`

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

func registerVolumeInlineMetricInlineCloudInlineLatencyPropWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWriteDescription := `Performance metric for write I/O operations.`

	var flagWriteName string
	if cmdPrefix == "" {
		flagWriteName = "write"
	} else {
		flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
	}

	var flagWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagWriteName, flagWriteDefault, flagWriteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineMetricInlineCloudInlineLatencyFlags(depth int, m *models.VolumeInlineMetricInlineCloudInlineLatency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, OtherAdded := retrieveVolumeInlineMetricInlineCloudInlineLatencyPropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, ReadAdded := retrieveVolumeInlineMetricInlineCloudInlineLatencyPropReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded

	err, TotalAdded := retrieveVolumeInlineMetricInlineCloudInlineLatencyPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	err, WriteAdded := retrieveVolumeInlineMetricInlineCloudInlineLatencyPropWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudInlineLatencyPropOtherFlags(depth int, m *models.VolumeInlineMetricInlineCloudInlineLatency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {

		var flagOtherName string
		if cmdPrefix == "" {
			flagOtherName = "other"
		} else {
			flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		flagOtherValue, err := cmd.Flags().GetInt64(flagOtherName)
		if err != nil {
			return err, false
		}
		m.Other = &flagOtherValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudInlineLatencyPropReadFlags(depth int, m *models.VolumeInlineMetricInlineCloudInlineLatency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(flagReadName) {

		var flagReadName string
		if cmdPrefix == "" {
			flagReadName = "read"
		} else {
			flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
		}

		flagReadValue, err := cmd.Flags().GetInt64(flagReadName)
		if err != nil {
			return err, false
		}
		m.Read = &flagReadValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudInlineLatencyPropTotalFlags(depth int, m *models.VolumeInlineMetricInlineCloudInlineLatency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = &flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineCloudInlineLatencyPropWriteFlags(depth int, m *models.VolumeInlineMetricInlineCloudInlineLatency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteName := fmt.Sprintf("%v.write", cmdPrefix)
	if cmd.Flags().Changed(flagWriteName) {

		var flagWriteName string
		if cmdPrefix == "" {
			flagWriteName = "write"
		} else {
			flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
		}

		flagWriteValue, err := cmd.Flags().GetInt64(flagWriteName)
		if err != nil {
			return err, false
		}
		m.Write = &flagWriteValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineMetricInlineFlexcache

// register flags to command
func registerModelVolumeInlineMetricInlineFlexcacheFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineMetricInlineFlexcachePropBandwidthSavings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineFlexcachePropCacheMissPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineFlexcachePropDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineFlexcachePropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineFlexcachePropTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineFlexcachePropBandwidthSavings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagBandwidthSavingsDescription := `Bandwidth savings denoting the amount of data served locally by the cache, in bytes.`

	var flagBandwidthSavingsName string
	if cmdPrefix == "" {
		flagBandwidthSavingsName = "bandwidth_savings"
	} else {
		flagBandwidthSavingsName = fmt.Sprintf("%v.bandwidth_savings", cmdPrefix)
	}

	var flagBandwidthSavingsDefault int64

	_ = cmd.PersistentFlags().Int64(flagBandwidthSavingsName, flagBandwidthSavingsDefault, flagBandwidthSavingsDescription)

	return nil
}

func registerVolumeInlineMetricInlineFlexcachePropCacheMissPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCacheMissPercentDescription := `Cache miss percentage.`

	var flagCacheMissPercentName string
	if cmdPrefix == "" {
		flagCacheMissPercentName = "cache_miss_percent"
	} else {
		flagCacheMissPercentName = fmt.Sprintf("%v.cache_miss_percent", cmdPrefix)
	}

	var flagCacheMissPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagCacheMissPercentName, flagCacheMissPercentDefault, flagCacheMissPercentDescription)

	return nil
}

func registerVolumeInlineMetricInlineFlexcachePropDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDurationDescription := `Enum: ["PT15S","PT5M","PT30M","PT2H","PT1D"]. The duration over which this sample is calculated. The time durations are represented in the ISO-8601 standard format. Samples can be calculated over the following durations:
`

	var flagDurationName string
	if cmdPrefix == "" {
		flagDurationName = "duration"
	} else {
		flagDurationName = fmt.Sprintf("%v.duration", cmdPrefix)
	}

	var flagDurationDefault string

	_ = cmd.PersistentFlags().String(flagDurationName, flagDurationDefault, flagDurationDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagDurationName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["PT15S","PT5M","PT30M","PT2H","PT1D"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineFlexcachePropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStatusDescription := `Enum: ["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]. Errors associated with the sample. For example, if the aggregation of data over multiple nodes fails, then any partial errors might return "ok" on success or "error" on an internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.`

	var flagStatusName string
	if cmdPrefix == "" {
		flagStatusName = "status"
	} else {
		flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var flagStatusDefault string

	_ = cmd.PersistentFlags().String(flagStatusName, flagStatusDefault, flagStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStatusName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineFlexcachePropTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTimestampDescription := `The timestamp of the performance data.`

	var flagTimestampName string
	if cmdPrefix == "" {
		flagTimestampName = "timestamp"
	} else {
		flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagTimestampName, "", flagTimestampDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineMetricInlineFlexcacheFlags(depth int, m *models.VolumeInlineMetricInlineFlexcache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, BandwidthSavingsAdded := retrieveVolumeInlineMetricInlineFlexcachePropBandwidthSavingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BandwidthSavingsAdded

	err, CacheMissPercentAdded := retrieveVolumeInlineMetricInlineFlexcachePropCacheMissPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CacheMissPercentAdded

	err, DurationAdded := retrieveVolumeInlineMetricInlineFlexcachePropDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DurationAdded

	err, StatusAdded := retrieveVolumeInlineMetricInlineFlexcachePropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	err, TimestampAdded := retrieveVolumeInlineMetricInlineFlexcachePropTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimestampAdded

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineFlexcachePropBandwidthSavingsFlags(depth int, m *models.VolumeInlineMetricInlineFlexcache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBandwidthSavingsName := fmt.Sprintf("%v.bandwidth_savings", cmdPrefix)
	if cmd.Flags().Changed(flagBandwidthSavingsName) {

		var flagBandwidthSavingsName string
		if cmdPrefix == "" {
			flagBandwidthSavingsName = "bandwidth_savings"
		} else {
			flagBandwidthSavingsName = fmt.Sprintf("%v.bandwidth_savings", cmdPrefix)
		}

		flagBandwidthSavingsValue, err := cmd.Flags().GetInt64(flagBandwidthSavingsName)
		if err != nil {
			return err, false
		}
		m.BandwidthSavings = &flagBandwidthSavingsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineFlexcachePropCacheMissPercentFlags(depth int, m *models.VolumeInlineMetricInlineFlexcache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCacheMissPercentName := fmt.Sprintf("%v.cache_miss_percent", cmdPrefix)
	if cmd.Flags().Changed(flagCacheMissPercentName) {

		var flagCacheMissPercentName string
		if cmdPrefix == "" {
			flagCacheMissPercentName = "cache_miss_percent"
		} else {
			flagCacheMissPercentName = fmt.Sprintf("%v.cache_miss_percent", cmdPrefix)
		}

		flagCacheMissPercentValue, err := cmd.Flags().GetInt64(flagCacheMissPercentName)
		if err != nil {
			return err, false
		}
		m.CacheMissPercent = &flagCacheMissPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineFlexcachePropDurationFlags(depth int, m *models.VolumeInlineMetricInlineFlexcache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDurationName := fmt.Sprintf("%v.duration", cmdPrefix)
	if cmd.Flags().Changed(flagDurationName) {

		var flagDurationName string
		if cmdPrefix == "" {
			flagDurationName = "duration"
		} else {
			flagDurationName = fmt.Sprintf("%v.duration", cmdPrefix)
		}

		flagDurationValue, err := cmd.Flags().GetString(flagDurationName)
		if err != nil {
			return err, false
		}
		m.Duration = &flagDurationValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineFlexcachePropStatusFlags(depth int, m *models.VolumeInlineMetricInlineFlexcache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStatusName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(flagStatusName) {

		var flagStatusName string
		if cmdPrefix == "" {
			flagStatusName = "status"
		} else {
			flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		flagStatusValue, err := cmd.Flags().GetString(flagStatusName)
		if err != nil {
			return err, false
		}
		m.Status = &flagStatusValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineFlexcachePropTimestampFlags(depth int, m *models.VolumeInlineMetricInlineFlexcache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTimestampName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(flagTimestampName) {

		var flagTimestampName string
		if cmdPrefix == "" {
			flagTimestampName = "timestamp"
		} else {
			flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
		}

		flagTimestampValueStr, err := cmd.Flags().GetString(flagTimestampName)
		if err != nil {
			return err, false
		}
		var flagTimestampValue strfmt.DateTime
		if err := flagTimestampValue.UnmarshalText([]byte(flagTimestampValueStr)); err != nil {
			return err, false
		}
		m.Timestamp = &flagTimestampValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineMetricInlineIops

// register flags to command
func registerModelVolumeInlineMetricInlineIopsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineMetricInlineIopsPropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineIopsPropRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineIopsPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineIopsPropWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineIopsPropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOtherDescription := `Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.`

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var flagOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagOtherName, flagOtherDefault, flagOtherDescription)

	return nil
}

func registerVolumeInlineMetricInlineIopsPropRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReadDescription := `Performance metric for read I/O operations.`

	var flagReadName string
	if cmdPrefix == "" {
		flagReadName = "read"
	} else {
		flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	var flagReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagReadName, flagReadDefault, flagReadDescription)

	return nil
}

func registerVolumeInlineMetricInlineIopsPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := `Performance metric aggregated over all types of I/O operations.`

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

func registerVolumeInlineMetricInlineIopsPropWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWriteDescription := `Performance metric for write I/O operations.`

	var flagWriteName string
	if cmdPrefix == "" {
		flagWriteName = "write"
	} else {
		flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
	}

	var flagWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagWriteName, flagWriteDefault, flagWriteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineMetricInlineIopsFlags(depth int, m *models.VolumeInlineMetricInlineIops, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, OtherAdded := retrieveVolumeInlineMetricInlineIopsPropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, ReadAdded := retrieveVolumeInlineMetricInlineIopsPropReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded

	err, TotalAdded := retrieveVolumeInlineMetricInlineIopsPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	err, WriteAdded := retrieveVolumeInlineMetricInlineIopsPropWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineIopsPropOtherFlags(depth int, m *models.VolumeInlineMetricInlineIops, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {

		var flagOtherName string
		if cmdPrefix == "" {
			flagOtherName = "other"
		} else {
			flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		flagOtherValue, err := cmd.Flags().GetInt64(flagOtherName)
		if err != nil {
			return err, false
		}
		m.Other = &flagOtherValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineIopsPropReadFlags(depth int, m *models.VolumeInlineMetricInlineIops, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(flagReadName) {

		var flagReadName string
		if cmdPrefix == "" {
			flagReadName = "read"
		} else {
			flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
		}

		flagReadValue, err := cmd.Flags().GetInt64(flagReadName)
		if err != nil {
			return err, false
		}
		m.Read = &flagReadValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineIopsPropTotalFlags(depth int, m *models.VolumeInlineMetricInlineIops, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = &flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineIopsPropWriteFlags(depth int, m *models.VolumeInlineMetricInlineIops, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteName := fmt.Sprintf("%v.write", cmdPrefix)
	if cmd.Flags().Changed(flagWriteName) {

		var flagWriteName string
		if cmdPrefix == "" {
			flagWriteName = "write"
		} else {
			flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
		}

		flagWriteValue, err := cmd.Flags().GetInt64(flagWriteName)
		if err != nil {
			return err, false
		}
		m.Write = &flagWriteValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineMetricInlineLatency

// register flags to command
func registerModelVolumeInlineMetricInlineLatencyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineMetricInlineLatencyPropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineLatencyPropRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineLatencyPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineLatencyPropWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineLatencyPropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOtherDescription := `Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.`

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var flagOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagOtherName, flagOtherDefault, flagOtherDescription)

	return nil
}

func registerVolumeInlineMetricInlineLatencyPropRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReadDescription := `Performance metric for read I/O operations.`

	var flagReadName string
	if cmdPrefix == "" {
		flagReadName = "read"
	} else {
		flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	var flagReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagReadName, flagReadDefault, flagReadDescription)

	return nil
}

func registerVolumeInlineMetricInlineLatencyPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := `Performance metric aggregated over all types of I/O operations.`

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

func registerVolumeInlineMetricInlineLatencyPropWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWriteDescription := `Performance metric for write I/O operations.`

	var flagWriteName string
	if cmdPrefix == "" {
		flagWriteName = "write"
	} else {
		flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
	}

	var flagWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagWriteName, flagWriteDefault, flagWriteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineMetricInlineLatencyFlags(depth int, m *models.VolumeInlineMetricInlineLatency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, OtherAdded := retrieveVolumeInlineMetricInlineLatencyPropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, ReadAdded := retrieveVolumeInlineMetricInlineLatencyPropReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded

	err, TotalAdded := retrieveVolumeInlineMetricInlineLatencyPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	err, WriteAdded := retrieveVolumeInlineMetricInlineLatencyPropWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineLatencyPropOtherFlags(depth int, m *models.VolumeInlineMetricInlineLatency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {

		var flagOtherName string
		if cmdPrefix == "" {
			flagOtherName = "other"
		} else {
			flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		flagOtherValue, err := cmd.Flags().GetInt64(flagOtherName)
		if err != nil {
			return err, false
		}
		m.Other = &flagOtherValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineLatencyPropReadFlags(depth int, m *models.VolumeInlineMetricInlineLatency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(flagReadName) {

		var flagReadName string
		if cmdPrefix == "" {
			flagReadName = "read"
		} else {
			flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
		}

		flagReadValue, err := cmd.Flags().GetInt64(flagReadName)
		if err != nil {
			return err, false
		}
		m.Read = &flagReadValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineLatencyPropTotalFlags(depth int, m *models.VolumeInlineMetricInlineLatency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = &flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineLatencyPropWriteFlags(depth int, m *models.VolumeInlineMetricInlineLatency, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteName := fmt.Sprintf("%v.write", cmdPrefix)
	if cmd.Flags().Changed(flagWriteName) {

		var flagWriteName string
		if cmdPrefix == "" {
			flagWriteName = "write"
		} else {
			flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
		}

		flagWriteValue, err := cmd.Flags().GetInt64(flagWriteName)
		if err != nil {
			return err, false
		}
		m.Write = &flagWriteValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineMetricInlineLinks

// register flags to command
func registerModelVolumeInlineMetricInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineMetricInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineMetricInlineLinksFlags(depth int, m *models.VolumeInlineMetricInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineMetricInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineMetricInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineMetricInlineThroughput

// register flags to command
func registerModelVolumeInlineMetricInlineThroughputFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineMetricInlineThroughputPropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineThroughputPropRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineThroughputPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMetricInlineThroughputPropWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMetricInlineThroughputPropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOtherDescription := `Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.`

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var flagOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagOtherName, flagOtherDefault, flagOtherDescription)

	return nil
}

func registerVolumeInlineMetricInlineThroughputPropRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReadDescription := `Performance metric for read I/O operations.`

	var flagReadName string
	if cmdPrefix == "" {
		flagReadName = "read"
	} else {
		flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	var flagReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagReadName, flagReadDefault, flagReadDescription)

	return nil
}

func registerVolumeInlineMetricInlineThroughputPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := `Performance metric aggregated over all types of I/O operations.`

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

func registerVolumeInlineMetricInlineThroughputPropWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWriteDescription := `Performance metric for write I/O operations.`

	var flagWriteName string
	if cmdPrefix == "" {
		flagWriteName = "write"
	} else {
		flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
	}

	var flagWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagWriteName, flagWriteDefault, flagWriteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineMetricInlineThroughputFlags(depth int, m *models.VolumeInlineMetricInlineThroughput, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, OtherAdded := retrieveVolumeInlineMetricInlineThroughputPropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, ReadAdded := retrieveVolumeInlineMetricInlineThroughputPropReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded

	err, TotalAdded := retrieveVolumeInlineMetricInlineThroughputPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	err, WriteAdded := retrieveVolumeInlineMetricInlineThroughputPropWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineThroughputPropOtherFlags(depth int, m *models.VolumeInlineMetricInlineThroughput, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {

		var flagOtherName string
		if cmdPrefix == "" {
			flagOtherName = "other"
		} else {
			flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		flagOtherValue, err := cmd.Flags().GetInt64(flagOtherName)
		if err != nil {
			return err, false
		}
		m.Other = &flagOtherValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineThroughputPropReadFlags(depth int, m *models.VolumeInlineMetricInlineThroughput, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(flagReadName) {

		var flagReadName string
		if cmdPrefix == "" {
			flagReadName = "read"
		} else {
			flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
		}

		flagReadValue, err := cmd.Flags().GetInt64(flagReadName)
		if err != nil {
			return err, false
		}
		m.Read = &flagReadValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineThroughputPropTotalFlags(depth int, m *models.VolumeInlineMetricInlineThroughput, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = &flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMetricInlineThroughputPropWriteFlags(depth int, m *models.VolumeInlineMetricInlineThroughput, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteName := fmt.Sprintf("%v.write", cmdPrefix)
	if cmd.Flags().Changed(flagWriteName) {

		var flagWriteName string
		if cmdPrefix == "" {
			flagWriteName = "write"
		} else {
			flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
		}

		flagWriteValue, err := cmd.Flags().GetInt64(flagWriteName)
		if err != nil {
			return err, false
		}
		m.Write = &flagWriteValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineMovement

// register flags to command
func registerModelVolumeInlineMovementFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineMovementPropCapacityTierOptimized(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMovementPropCutoverWindow(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMovementPropDestinationAggregate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMovementPropPercentComplete(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMovementPropStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMovementPropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMovementPropTieringPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMovementPropCapacityTierOptimized(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCapacityTierOptimizedDescription := `Specifies whether this move should perform optimized volume move for the capacity tier, in which data in the capacity tier does not need to be copied over.`

	var flagCapacityTierOptimizedName string
	if cmdPrefix == "" {
		flagCapacityTierOptimizedName = "capacity_tier_optimized"
	} else {
		flagCapacityTierOptimizedName = fmt.Sprintf("%v.capacity_tier_optimized", cmdPrefix)
	}

	var flagCapacityTierOptimizedDefault bool

	_ = cmd.PersistentFlags().Bool(flagCapacityTierOptimizedName, flagCapacityTierOptimizedDefault, flagCapacityTierOptimizedDescription)

	return nil
}

func registerVolumeInlineMovementPropCutoverWindow(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCutoverWindowDescription := `Time window in seconds for cutover. The allowed range is between 30 to 300 seconds.`

	var flagCutoverWindowName string
	if cmdPrefix == "" {
		flagCutoverWindowName = "cutover_window"
	} else {
		flagCutoverWindowName = fmt.Sprintf("%v.cutover_window", cmdPrefix)
	}

	var flagCutoverWindowDefault int64 = 30

	_ = cmd.PersistentFlags().Int64(flagCutoverWindowName, flagCutoverWindowDefault, flagCutoverWindowDescription)

	return nil
}

func registerVolumeInlineMovementPropDestinationAggregate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagDestinationAggregateName string
	if cmdPrefix == "" {
		flagDestinationAggregateName = "destination_aggregate"
	} else {
		flagDestinationAggregateName = fmt.Sprintf("%v.destination_aggregate", cmdPrefix)
	}

	if err := registerModelVolumeInlineMovementInlineDestinationAggregateFlags(depth+1, flagDestinationAggregateName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMovementPropPercentComplete(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPercentCompleteDescription := `Completion percentage`

	var flagPercentCompleteName string
	if cmdPrefix == "" {
		flagPercentCompleteName = "percent_complete"
	} else {
		flagPercentCompleteName = fmt.Sprintf("%v.percent_complete", cmdPrefix)
	}

	var flagPercentCompleteDefault int64

	_ = cmd.PersistentFlags().Int64(flagPercentCompleteName, flagPercentCompleteDefault, flagPercentCompleteDescription)

	return nil
}

func registerVolumeInlineMovementPropStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStartTimeDescription := `Start time of volume move.`

	var flagStartTimeName string
	if cmdPrefix == "" {
		flagStartTimeName = "start_time"
	} else {
		flagStartTimeName = fmt.Sprintf("%v.start_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagStartTimeName, "", flagStartTimeDescription)

	return nil
}

func registerVolumeInlineMovementPropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := `Enum: ["aborted","cutover","cutover_wait","cutover_pending","failed","paused","queued","replicating","success"]. State of volume move operation. PATCH the state to "aborted" to abort the move operation. PATCH the state to "cutover" to trigger cutover. PATCH the state to "paused" to pause the volume move operation in progress. PATCH the state to "replicating" to resume the paused volume move operation. PATCH the state to "cutover_wait" to go into cutover manually. When volume move operation is waiting to go into "cutover" state, this is indicated by the "cutover_pending" state. A change of state is only supported if volume movement is in progress.`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["aborted","cutover","cutover_wait","cutover_pending","failed","paused","queued","replicating","success"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMovementPropTieringPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTieringPolicyDescription := `Enum: ["all","auto","backup","none","snapshot_only"]. Tiering policy for FabricPool`

	var flagTieringPolicyName string
	if cmdPrefix == "" {
		flagTieringPolicyName = "tiering_policy"
	} else {
		flagTieringPolicyName = fmt.Sprintf("%v.tiering_policy", cmdPrefix)
	}

	var flagTieringPolicyDefault string

	_ = cmd.PersistentFlags().String(flagTieringPolicyName, flagTieringPolicyDefault, flagTieringPolicyDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagTieringPolicyName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["all","auto","backup","none","snapshot_only"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineMovementFlags(depth int, m *models.VolumeInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CapacityTierOptimizedAdded := retrieveVolumeInlineMovementPropCapacityTierOptimizedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CapacityTierOptimizedAdded

	err, CutoverWindowAdded := retrieveVolumeInlineMovementPropCutoverWindowFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CutoverWindowAdded

	err, DestinationAggregateAdded := retrieveVolumeInlineMovementPropDestinationAggregateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DestinationAggregateAdded

	err, PercentCompleteAdded := retrieveVolumeInlineMovementPropPercentCompleteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PercentCompleteAdded

	err, StartTimeAdded := retrieveVolumeInlineMovementPropStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StartTimeAdded

	err, StateAdded := retrieveVolumeInlineMovementPropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, TieringPolicyAdded := retrieveVolumeInlineMovementPropTieringPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TieringPolicyAdded

	return nil, retAdded
}

func retrieveVolumeInlineMovementPropCapacityTierOptimizedFlags(depth int, m *models.VolumeInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCapacityTierOptimizedName := fmt.Sprintf("%v.capacity_tier_optimized", cmdPrefix)
	if cmd.Flags().Changed(flagCapacityTierOptimizedName) {

		var flagCapacityTierOptimizedName string
		if cmdPrefix == "" {
			flagCapacityTierOptimizedName = "capacity_tier_optimized"
		} else {
			flagCapacityTierOptimizedName = fmt.Sprintf("%v.capacity_tier_optimized", cmdPrefix)
		}

		flagCapacityTierOptimizedValue, err := cmd.Flags().GetBool(flagCapacityTierOptimizedName)
		if err != nil {
			return err, false
		}
		m.CapacityTierOptimized = &flagCapacityTierOptimizedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMovementPropCutoverWindowFlags(depth int, m *models.VolumeInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCutoverWindowName := fmt.Sprintf("%v.cutover_window", cmdPrefix)
	if cmd.Flags().Changed(flagCutoverWindowName) {

		var flagCutoverWindowName string
		if cmdPrefix == "" {
			flagCutoverWindowName = "cutover_window"
		} else {
			flagCutoverWindowName = fmt.Sprintf("%v.cutover_window", cmdPrefix)
		}

		flagCutoverWindowValue, err := cmd.Flags().GetInt64(flagCutoverWindowName)
		if err != nil {
			return err, false
		}
		m.CutoverWindow = &flagCutoverWindowValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMovementPropDestinationAggregateFlags(depth int, m *models.VolumeInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDestinationAggregateName := fmt.Sprintf("%v.destination_aggregate", cmdPrefix)
	if cmd.Flags().Changed(flagDestinationAggregateName) {
		// info: complex object destination_aggregate VolumeInlineMovementInlineDestinationAggregate is retrieved outside this Changed() block
	}
	flagDestinationAggregateValue := m.DestinationAggregate
	if swag.IsZero(flagDestinationAggregateValue) {
		flagDestinationAggregateValue = &models.VolumeInlineMovementInlineDestinationAggregate{}
	}

	err, DestinationAggregateAdded := retrieveModelVolumeInlineMovementInlineDestinationAggregateFlags(depth+1, flagDestinationAggregateValue, flagDestinationAggregateName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DestinationAggregateAdded
	if DestinationAggregateAdded {
		m.DestinationAggregate = flagDestinationAggregateValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineMovementPropPercentCompleteFlags(depth int, m *models.VolumeInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPercentCompleteName := fmt.Sprintf("%v.percent_complete", cmdPrefix)
	if cmd.Flags().Changed(flagPercentCompleteName) {

		var flagPercentCompleteName string
		if cmdPrefix == "" {
			flagPercentCompleteName = "percent_complete"
		} else {
			flagPercentCompleteName = fmt.Sprintf("%v.percent_complete", cmdPrefix)
		}

		flagPercentCompleteValue, err := cmd.Flags().GetInt64(flagPercentCompleteName)
		if err != nil {
			return err, false
		}
		m.PercentComplete = &flagPercentCompleteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMovementPropStartTimeFlags(depth int, m *models.VolumeInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStartTimeName := fmt.Sprintf("%v.start_time", cmdPrefix)
	if cmd.Flags().Changed(flagStartTimeName) {

		var flagStartTimeName string
		if cmdPrefix == "" {
			flagStartTimeName = "start_time"
		} else {
			flagStartTimeName = fmt.Sprintf("%v.start_time", cmdPrefix)
		}

		flagStartTimeValueStr, err := cmd.Flags().GetString(flagStartTimeName)
		if err != nil {
			return err, false
		}
		var flagStartTimeValue strfmt.DateTime
		if err := flagStartTimeValue.UnmarshalText([]byte(flagStartTimeValueStr)); err != nil {
			return err, false
		}
		m.StartTime = &flagStartTimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMovementPropStateFlags(depth int, m *models.VolumeInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMovementPropTieringPolicyFlags(depth int, m *models.VolumeInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTieringPolicyName := fmt.Sprintf("%v.tiering_policy", cmdPrefix)
	if cmd.Flags().Changed(flagTieringPolicyName) {

		var flagTieringPolicyName string
		if cmdPrefix == "" {
			flagTieringPolicyName = "tiering_policy"
		} else {
			flagTieringPolicyName = fmt.Sprintf("%v.tiering_policy", cmdPrefix)
		}

		flagTieringPolicyValue, err := cmd.Flags().GetString(flagTieringPolicyName)
		if err != nil {
			return err, false
		}
		m.TieringPolicy = &flagTieringPolicyValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineMovementInlineDestinationAggregate

// register flags to command
func registerModelVolumeInlineMovementInlineDestinationAggregateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineMovementInlineDestinationAggregatePropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMovementInlineDestinationAggregatePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineMovementInlineDestinationAggregatePropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMovementInlineDestinationAggregatePropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineMovementInlineDestinationAggregateInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMovementInlineDestinationAggregatePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineMovementInlineDestinationAggregatePropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := ``

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineMovementInlineDestinationAggregateFlags(depth int, m *models.VolumeInlineMovementInlineDestinationAggregate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeInlineMovementInlineDestinationAggregatePropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, NameAdded := retrieveVolumeInlineMovementInlineDestinationAggregatePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineMovementInlineDestinationAggregatePropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineMovementInlineDestinationAggregatePropLinksFlags(depth int, m *models.VolumeInlineMovementInlineDestinationAggregate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineMovementInlineDestinationAggregateInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineMovementInlineDestinationAggregateInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineMovementInlineDestinationAggregateInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineMovementInlineDestinationAggregatePropNameFlags(depth int, m *models.VolumeInlineMovementInlineDestinationAggregate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineMovementInlineDestinationAggregatePropUUIDFlags(depth int, m *models.VolumeInlineMovementInlineDestinationAggregate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineMovementInlineDestinationAggregateInlineLinks

// register flags to command
func registerModelVolumeInlineMovementInlineDestinationAggregateInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineMovementInlineDestinationAggregateInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineMovementInlineDestinationAggregateInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineMovementInlineDestinationAggregateInlineLinksFlags(depth int, m *models.VolumeInlineMovementInlineDestinationAggregateInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineMovementInlineDestinationAggregateInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineMovementInlineDestinationAggregateInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineMovementInlineDestinationAggregateInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineNas

// register flags to command
func registerModelVolumeInlineNasFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineNasPropExportPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineNasPropGid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineNasPropJunctionParent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineNasPropPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineNasPropSecurityStyle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineNasPropUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineNasPropUnixPermissions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineNasPropExportPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagExportPolicyName string
	if cmdPrefix == "" {
		flagExportPolicyName = "export_policy"
	} else {
		flagExportPolicyName = fmt.Sprintf("%v.export_policy", cmdPrefix)
	}

	if err := registerModelVolumeInlineNasInlineExportPolicyFlags(depth+1, flagExportPolicyName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineNasPropGid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagGidDescription := `The UNIX group ID of the volume. Valid in POST or PATCH.`

	var flagGidName string
	if cmdPrefix == "" {
		flagGidName = "gid"
	} else {
		flagGidName = fmt.Sprintf("%v.gid", cmdPrefix)
	}

	var flagGidDefault int64

	_ = cmd.PersistentFlags().Int64(flagGidName, flagGidDefault, flagGidDescription)

	return nil
}

func registerVolumeInlineNasPropJunctionParent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagJunctionParentName string
	if cmdPrefix == "" {
		flagJunctionParentName = "junction_parent"
	} else {
		flagJunctionParentName = fmt.Sprintf("%v.junction_parent", cmdPrefix)
	}

	if err := registerModelVolumeInlineNasInlineJunctionParentFlags(depth+1, flagJunctionParentName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineNasPropPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPathDescription := `The fully-qualified path in the owning SVM's namespace at which the volume is mounted. The path is case insensitive and must be unique within a SVM's namespace. Path must begin with '/' and must not end with '/'. Only one volume can be mounted at any given junction path. An empty path in POST creates an unmounted volume. An empty path in PATCH deactivates and unmounts the volume. Taking a volume offline or restricted state removes its junction path. This attribute is reported in GET only when the volume is mounted.`

	var flagPathName string
	if cmdPrefix == "" {
		flagPathName = "path"
	} else {
		flagPathName = fmt.Sprintf("%v.path", cmdPrefix)
	}

	var flagPathDefault string

	_ = cmd.PersistentFlags().String(flagPathName, flagPathDefault, flagPathDescription)

	return nil
}

func registerVolumeInlineNasPropSecurityStyle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSecurityStyleDescription := `Enum: ["mixed","ntfs","unified","unix"]. Security style associated with the volume. Valid in POST or PATCH.<br>mixed &dash; Mixed-style security<br>ntfs &dash; NTFS/WIndows-style security<br>unified &dash; Unified-style security, unified UNIX, NFS and CIFS permissions<br>unix &dash; Unix-style security.`

	var flagSecurityStyleName string
	if cmdPrefix == "" {
		flagSecurityStyleName = "security_style"
	} else {
		flagSecurityStyleName = fmt.Sprintf("%v.security_style", cmdPrefix)
	}

	var flagSecurityStyleDefault string = "unix"

	_ = cmd.PersistentFlags().String(flagSecurityStyleName, flagSecurityStyleDefault, flagSecurityStyleDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagSecurityStyleName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["mixed","ntfs","unified","unix"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineNasPropUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUIDDescription := `The UNIX user ID of the volume. Valid in POST or PATCH.`

	var flagUIDName string
	if cmdPrefix == "" {
		flagUIDName = "uid"
	} else {
		flagUIDName = fmt.Sprintf("%v.uid", cmdPrefix)
	}

	var flagUIDDefault int64

	_ = cmd.PersistentFlags().Int64(flagUIDName, flagUIDDefault, flagUIDDescription)

	return nil
}

func registerVolumeInlineNasPropUnixPermissions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUnixPermissionsDescription := `UNIX permissions to be viewed as an octal number. It consists of 4 digits derived by adding up bits 4 (read), 2 (write) and 1 (execute). First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. The second digit selects permission for the owner of the file; the third selects permissions for other users in the same group; the fourth for other users not in the group. Valid in POST or PATCH. For security style "mixed" or "unix", the default setting is 0755 in octal (493 in decimal) and for security style "ntfs", the default setting is 0000. In cases where only owner, group and other permissions are given (as in 755, representing the second, third and fourth dight), first digit is assumed to be zero.`

	var flagUnixPermissionsName string
	if cmdPrefix == "" {
		flagUnixPermissionsName = "unix_permissions"
	} else {
		flagUnixPermissionsName = fmt.Sprintf("%v.unix_permissions", cmdPrefix)
	}

	var flagUnixPermissionsDefault int64

	_ = cmd.PersistentFlags().Int64(flagUnixPermissionsName, flagUnixPermissionsDefault, flagUnixPermissionsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineNasFlags(depth int, m *models.VolumeInlineNas, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ExportPolicyAdded := retrieveVolumeInlineNasPropExportPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExportPolicyAdded

	err, GidAdded := retrieveVolumeInlineNasPropGidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GidAdded

	err, JunctionParentAdded := retrieveVolumeInlineNasPropJunctionParentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || JunctionParentAdded

	err, PathAdded := retrieveVolumeInlineNasPropPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PathAdded

	err, SecurityStyleAdded := retrieveVolumeInlineNasPropSecurityStyleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SecurityStyleAdded

	err, UIDAdded := retrieveVolumeInlineNasPropUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UIDAdded

	err, UnixPermissionsAdded := retrieveVolumeInlineNasPropUnixPermissionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UnixPermissionsAdded

	return nil, retAdded
}

func retrieveVolumeInlineNasPropExportPolicyFlags(depth int, m *models.VolumeInlineNas, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExportPolicyName := fmt.Sprintf("%v.export_policy", cmdPrefix)
	if cmd.Flags().Changed(flagExportPolicyName) {
		// info: complex object export_policy VolumeInlineNasInlineExportPolicy is retrieved outside this Changed() block
	}
	flagExportPolicyValue := m.ExportPolicy
	if swag.IsZero(flagExportPolicyValue) {
		flagExportPolicyValue = &models.VolumeInlineNasInlineExportPolicy{}
	}

	err, ExportPolicyAdded := retrieveModelVolumeInlineNasInlineExportPolicyFlags(depth+1, flagExportPolicyValue, flagExportPolicyName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExportPolicyAdded
	if ExportPolicyAdded {
		m.ExportPolicy = flagExportPolicyValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineNasPropGidFlags(depth int, m *models.VolumeInlineNas, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagGidName := fmt.Sprintf("%v.gid", cmdPrefix)
	if cmd.Flags().Changed(flagGidName) {

		var flagGidName string
		if cmdPrefix == "" {
			flagGidName = "gid"
		} else {
			flagGidName = fmt.Sprintf("%v.gid", cmdPrefix)
		}

		flagGidValue, err := cmd.Flags().GetInt64(flagGidName)
		if err != nil {
			return err, false
		}
		m.Gid = &flagGidValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineNasPropJunctionParentFlags(depth int, m *models.VolumeInlineNas, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagJunctionParentName := fmt.Sprintf("%v.junction_parent", cmdPrefix)
	if cmd.Flags().Changed(flagJunctionParentName) {
		// info: complex object junction_parent VolumeInlineNasInlineJunctionParent is retrieved outside this Changed() block
	}
	flagJunctionParentValue := m.JunctionParent
	if swag.IsZero(flagJunctionParentValue) {
		flagJunctionParentValue = &models.VolumeInlineNasInlineJunctionParent{}
	}

	err, JunctionParentAdded := retrieveModelVolumeInlineNasInlineJunctionParentFlags(depth+1, flagJunctionParentValue, flagJunctionParentName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || JunctionParentAdded
	if JunctionParentAdded {
		m.JunctionParent = flagJunctionParentValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineNasPropPathFlags(depth int, m *models.VolumeInlineNas, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPathName := fmt.Sprintf("%v.path", cmdPrefix)
	if cmd.Flags().Changed(flagPathName) {

		var flagPathName string
		if cmdPrefix == "" {
			flagPathName = "path"
		} else {
			flagPathName = fmt.Sprintf("%v.path", cmdPrefix)
		}

		flagPathValue, err := cmd.Flags().GetString(flagPathName)
		if err != nil {
			return err, false
		}
		m.Path = &flagPathValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineNasPropSecurityStyleFlags(depth int, m *models.VolumeInlineNas, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSecurityStyleName := fmt.Sprintf("%v.security_style", cmdPrefix)
	if cmd.Flags().Changed(flagSecurityStyleName) {

		var flagSecurityStyleName string
		if cmdPrefix == "" {
			flagSecurityStyleName = "security_style"
		} else {
			flagSecurityStyleName = fmt.Sprintf("%v.security_style", cmdPrefix)
		}

		flagSecurityStyleValue, err := cmd.Flags().GetString(flagSecurityStyleName)
		if err != nil {
			return err, false
		}
		m.SecurityStyle = &flagSecurityStyleValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineNasPropUIDFlags(depth int, m *models.VolumeInlineNas, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUIDName := fmt.Sprintf("%v.uid", cmdPrefix)
	if cmd.Flags().Changed(flagUIDName) {

		var flagUIDName string
		if cmdPrefix == "" {
			flagUIDName = "uid"
		} else {
			flagUIDName = fmt.Sprintf("%v.uid", cmdPrefix)
		}

		flagUIDValue, err := cmd.Flags().GetInt64(flagUIDName)
		if err != nil {
			return err, false
		}
		m.UID = &flagUIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineNasPropUnixPermissionsFlags(depth int, m *models.VolumeInlineNas, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUnixPermissionsName := fmt.Sprintf("%v.unix_permissions", cmdPrefix)
	if cmd.Flags().Changed(flagUnixPermissionsName) {

		var flagUnixPermissionsName string
		if cmdPrefix == "" {
			flagUnixPermissionsName = "unix_permissions"
		} else {
			flagUnixPermissionsName = fmt.Sprintf("%v.unix_permissions", cmdPrefix)
		}

		flagUnixPermissionsValue, err := cmd.Flags().GetInt64(flagUnixPermissionsName)
		if err != nil {
			return err, false
		}
		m.UnixPermissions = &flagUnixPermissionsValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineNasInlineExportPolicy

// register flags to command
func registerModelVolumeInlineNasInlineExportPolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineNasInlineExportPolicyPropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineNasInlineExportPolicyPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineNasInlineExportPolicyPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineNasInlineExportPolicyPropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineNasInlineExportPolicyInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineNasInlineExportPolicyPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIDDescription := ``

	var flagIDName string
	if cmdPrefix == "" {
		flagIDName = "id"
	} else {
		flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var flagIDDefault int64

	_ = cmd.PersistentFlags().Int64(flagIDName, flagIDDefault, flagIDDescription)

	return nil
}

func registerVolumeInlineNasInlineExportPolicyPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineNasInlineExportPolicyFlags(depth int, m *models.VolumeInlineNasInlineExportPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeInlineNasInlineExportPolicyPropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, IDAdded := retrieveVolumeInlineNasInlineExportPolicyPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, NameAdded := retrieveVolumeInlineNasInlineExportPolicyPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	return nil, retAdded
}

func retrieveVolumeInlineNasInlineExportPolicyPropLinksFlags(depth int, m *models.VolumeInlineNasInlineExportPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineNasInlineExportPolicyInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineNasInlineExportPolicyInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineNasInlineExportPolicyInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineNasInlineExportPolicyPropIDFlags(depth int, m *models.VolumeInlineNasInlineExportPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIDName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(flagIDName) {

		var flagIDName string
		if cmdPrefix == "" {
			flagIDName = "id"
		} else {
			flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		flagIDValue, err := cmd.Flags().GetInt64(flagIDName)
		if err != nil {
			return err, false
		}
		m.ID = &flagIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineNasInlineExportPolicyPropNameFlags(depth int, m *models.VolumeInlineNasInlineExportPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineNasInlineExportPolicyInlineLinks

// register flags to command
func registerModelVolumeInlineNasInlineExportPolicyInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineNasInlineExportPolicyInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineNasInlineExportPolicyInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineNasInlineExportPolicyInlineLinksFlags(depth int, m *models.VolumeInlineNasInlineExportPolicyInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineNasInlineExportPolicyInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineNasInlineExportPolicyInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineNasInlineExportPolicyInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineNasInlineJunctionParent

// register flags to command
func registerModelVolumeInlineNasInlineJunctionParentFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineNasInlineJunctionParentPropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineNasInlineJunctionParentPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineNasInlineJunctionParentPropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineNasInlineJunctionParentPropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineNasInlineJunctionParentInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineNasInlineJunctionParentPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `The name of the parent volume that contains the junction inode of this volume. The junction parent volume must belong to the same SVM that owns this volume.`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineNasInlineJunctionParentPropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := `Unique identifier for the parent volume.`

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineNasInlineJunctionParentFlags(depth int, m *models.VolumeInlineNasInlineJunctionParent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeInlineNasInlineJunctionParentPropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, NameAdded := retrieveVolumeInlineNasInlineJunctionParentPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineNasInlineJunctionParentPropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineNasInlineJunctionParentPropLinksFlags(depth int, m *models.VolumeInlineNasInlineJunctionParent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineNasInlineJunctionParentInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineNasInlineJunctionParentInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineNasInlineJunctionParentInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineNasInlineJunctionParentPropNameFlags(depth int, m *models.VolumeInlineNasInlineJunctionParent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineNasInlineJunctionParentPropUUIDFlags(depth int, m *models.VolumeInlineNasInlineJunctionParent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineNasInlineJunctionParentInlineLinks

// register flags to command
func registerModelVolumeInlineNasInlineJunctionParentInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineNasInlineJunctionParentInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineNasInlineJunctionParentInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineNasInlineJunctionParentInlineLinksFlags(depth int, m *models.VolumeInlineNasInlineJunctionParentInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineNasInlineJunctionParentInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineNasInlineJunctionParentInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineNasInlineJunctionParentInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineQos

// register flags to command
func registerModelVolumeInlineQosFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineQosPropPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineQosPropPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagPolicyName string
	if cmdPrefix == "" {
		flagPolicyName = "policy"
	} else {
		flagPolicyName = fmt.Sprintf("%v.policy", cmdPrefix)
	}

	if err := registerModelVolumeInlineQosInlinePolicyFlags(depth+1, flagPolicyName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineQosFlags(depth int, m *models.VolumeInlineQos, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, PolicyAdded := retrieveVolumeInlineQosPropPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PolicyAdded

	return nil, retAdded
}

func retrieveVolumeInlineQosPropPolicyFlags(depth int, m *models.VolumeInlineQos, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPolicyName := fmt.Sprintf("%v.policy", cmdPrefix)
	if cmd.Flags().Changed(flagPolicyName) {
		// info: complex object policy VolumeInlineQosInlinePolicy is retrieved outside this Changed() block
	}
	flagPolicyValue := m.Policy
	if swag.IsZero(flagPolicyValue) {
		flagPolicyValue = &models.VolumeInlineQosInlinePolicy{}
	}

	err, PolicyAdded := retrieveModelVolumeInlineQosInlinePolicyFlags(depth+1, flagPolicyValue, flagPolicyName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PolicyAdded
	if PolicyAdded {
		m.Policy = flagPolicyValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineQosInlinePolicy

// register flags to command
func registerModelVolumeInlineQosInlinePolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineQosInlinePolicyPropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineQosInlinePolicyPropMaxThroughputIops(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineQosInlinePolicyPropMaxThroughputMbps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineQosInlinePolicyPropMinThroughputIops(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineQosInlinePolicyPropMinThroughputMbps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineQosInlinePolicyPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineQosInlinePolicyPropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineQosInlinePolicyPropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineQosInlinePolicyInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineQosInlinePolicyPropMaxThroughputIops(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMaxThroughputIopsDescription := `Specifies the maximum throughput in IOPS, 0 means none. This is mutually exclusive with name and UUID during POST and PATCH.`

	var flagMaxThroughputIopsName string
	if cmdPrefix == "" {
		flagMaxThroughputIopsName = "max_throughput_iops"
	} else {
		flagMaxThroughputIopsName = fmt.Sprintf("%v.max_throughput_iops", cmdPrefix)
	}

	var flagMaxThroughputIopsDefault int64

	_ = cmd.PersistentFlags().Int64(flagMaxThroughputIopsName, flagMaxThroughputIopsDefault, flagMaxThroughputIopsDescription)

	return nil
}

func registerVolumeInlineQosInlinePolicyPropMaxThroughputMbps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMaxThroughputMbpsDescription := `Specifies the maximum throughput in Megabytes per sec, 0 means none. This is mutually exclusive with name and UUID during POST and PATCH.`

	var flagMaxThroughputMbpsName string
	if cmdPrefix == "" {
		flagMaxThroughputMbpsName = "max_throughput_mbps"
	} else {
		flagMaxThroughputMbpsName = fmt.Sprintf("%v.max_throughput_mbps", cmdPrefix)
	}

	var flagMaxThroughputMbpsDefault int64

	_ = cmd.PersistentFlags().Int64(flagMaxThroughputMbpsName, flagMaxThroughputMbpsDefault, flagMaxThroughputMbpsDescription)

	return nil
}

func registerVolumeInlineQosInlinePolicyPropMinThroughputIops(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMinThroughputIopsDescription := `Specifies the minimum throughput in IOPS, 0 means none. Setting "min_throughput" is supported on AFF platforms only, unless FabricPool tiering policies are set. This is mutually exclusive with name and UUID during POST and PATCH.`

	var flagMinThroughputIopsName string
	if cmdPrefix == "" {
		flagMinThroughputIopsName = "min_throughput_iops"
	} else {
		flagMinThroughputIopsName = fmt.Sprintf("%v.min_throughput_iops", cmdPrefix)
	}

	var flagMinThroughputIopsDefault int64

	_ = cmd.PersistentFlags().Int64(flagMinThroughputIopsName, flagMinThroughputIopsDefault, flagMinThroughputIopsDescription)

	return nil
}

func registerVolumeInlineQosInlinePolicyPropMinThroughputMbps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMinThroughputMbpsDescription := `Specifies the minimum throughput in Megabytes per sec, 0 means none. This is mutually exclusive with name and UUID during POST and PATCH.`

	var flagMinThroughputMbpsName string
	if cmdPrefix == "" {
		flagMinThroughputMbpsName = "min_throughput_mbps"
	} else {
		flagMinThroughputMbpsName = fmt.Sprintf("%v.min_throughput_mbps", cmdPrefix)
	}

	var flagMinThroughputMbpsDefault int64

	_ = cmd.PersistentFlags().Int64(flagMinThroughputMbpsName, flagMinThroughputMbpsDefault, flagMinThroughputMbpsDescription)

	return nil
}

func registerVolumeInlineQosInlinePolicyPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `The QoS policy group name. This is mutually exclusive with UUID and other QoS attributes during POST and PATCH.`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineQosInlinePolicyPropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := `The QoS policy group UUID. This is mutually exclusive with name and other QoS attributes during POST and PATCH.`

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineQosInlinePolicyFlags(depth int, m *models.VolumeInlineQosInlinePolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeInlineQosInlinePolicyPropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, MaxThroughputIopsAdded := retrieveVolumeInlineQosInlinePolicyPropMaxThroughputIopsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxThroughputIopsAdded

	err, MaxThroughputMbpsAdded := retrieveVolumeInlineQosInlinePolicyPropMaxThroughputMbpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxThroughputMbpsAdded

	err, MinThroughputIopsAdded := retrieveVolumeInlineQosInlinePolicyPropMinThroughputIopsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MinThroughputIopsAdded

	err, MinThroughputMbpsAdded := retrieveVolumeInlineQosInlinePolicyPropMinThroughputMbpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MinThroughputMbpsAdded

	err, NameAdded := retrieveVolumeInlineQosInlinePolicyPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineQosInlinePolicyPropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineQosInlinePolicyPropLinksFlags(depth int, m *models.VolumeInlineQosInlinePolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineQosInlinePolicyInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineQosInlinePolicyInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineQosInlinePolicyInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineQosInlinePolicyPropMaxThroughputIopsFlags(depth int, m *models.VolumeInlineQosInlinePolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMaxThroughputIopsName := fmt.Sprintf("%v.max_throughput_iops", cmdPrefix)
	if cmd.Flags().Changed(flagMaxThroughputIopsName) {

		var flagMaxThroughputIopsName string
		if cmdPrefix == "" {
			flagMaxThroughputIopsName = "max_throughput_iops"
		} else {
			flagMaxThroughputIopsName = fmt.Sprintf("%v.max_throughput_iops", cmdPrefix)
		}

		flagMaxThroughputIopsValue, err := cmd.Flags().GetInt64(flagMaxThroughputIopsName)
		if err != nil {
			return err, false
		}
		m.MaxThroughputIops = &flagMaxThroughputIopsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineQosInlinePolicyPropMaxThroughputMbpsFlags(depth int, m *models.VolumeInlineQosInlinePolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMaxThroughputMbpsName := fmt.Sprintf("%v.max_throughput_mbps", cmdPrefix)
	if cmd.Flags().Changed(flagMaxThroughputMbpsName) {

		var flagMaxThroughputMbpsName string
		if cmdPrefix == "" {
			flagMaxThroughputMbpsName = "max_throughput_mbps"
		} else {
			flagMaxThroughputMbpsName = fmt.Sprintf("%v.max_throughput_mbps", cmdPrefix)
		}

		flagMaxThroughputMbpsValue, err := cmd.Flags().GetInt64(flagMaxThroughputMbpsName)
		if err != nil {
			return err, false
		}
		m.MaxThroughputMbps = &flagMaxThroughputMbpsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineQosInlinePolicyPropMinThroughputIopsFlags(depth int, m *models.VolumeInlineQosInlinePolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMinThroughputIopsName := fmt.Sprintf("%v.min_throughput_iops", cmdPrefix)
	if cmd.Flags().Changed(flagMinThroughputIopsName) {

		var flagMinThroughputIopsName string
		if cmdPrefix == "" {
			flagMinThroughputIopsName = "min_throughput_iops"
		} else {
			flagMinThroughputIopsName = fmt.Sprintf("%v.min_throughput_iops", cmdPrefix)
		}

		flagMinThroughputIopsValue, err := cmd.Flags().GetInt64(flagMinThroughputIopsName)
		if err != nil {
			return err, false
		}
		m.MinThroughputIops = &flagMinThroughputIopsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineQosInlinePolicyPropMinThroughputMbpsFlags(depth int, m *models.VolumeInlineQosInlinePolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMinThroughputMbpsName := fmt.Sprintf("%v.min_throughput_mbps", cmdPrefix)
	if cmd.Flags().Changed(flagMinThroughputMbpsName) {

		var flagMinThroughputMbpsName string
		if cmdPrefix == "" {
			flagMinThroughputMbpsName = "min_throughput_mbps"
		} else {
			flagMinThroughputMbpsName = fmt.Sprintf("%v.min_throughput_mbps", cmdPrefix)
		}

		flagMinThroughputMbpsValue, err := cmd.Flags().GetInt64(flagMinThroughputMbpsName)
		if err != nil {
			return err, false
		}
		m.MinThroughputMbps = &flagMinThroughputMbpsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineQosInlinePolicyPropNameFlags(depth int, m *models.VolumeInlineQosInlinePolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineQosInlinePolicyPropUUIDFlags(depth int, m *models.VolumeInlineQosInlinePolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineQosInlinePolicyInlineLinks

// register flags to command
func registerModelVolumeInlineQosInlinePolicyInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineQosInlinePolicyInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineQosInlinePolicyInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineQosInlinePolicyInlineLinksFlags(depth int, m *models.VolumeInlineQosInlinePolicyInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineQosInlinePolicyInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineQosInlinePolicyInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineQosInlinePolicyInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineQuota

// register flags to command
func registerModelVolumeInlineQuotaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineQuotaPropEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineQuotaPropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineQuotaPropEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEnabledDescription := `This option is used to enable or disable the quota for the volume. This option is valid only in PATCH. Quotas are enabled for FlexVol volumes or FlexGroup volumes when the quota state is "on". Quotas are disabled for FlexVol volumes or FlexGroup volumes when the quota state is "off".`

	var flagEnabledName string
	if cmdPrefix == "" {
		flagEnabledName = "enabled"
	} else {
		flagEnabledName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var flagEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagEnabledName, flagEnabledDefault, flagEnabledDescription)

	return nil
}

func registerVolumeInlineQuotaPropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := `Enum: ["corrupt","initializing","mixed","off","on","resizing"]. Quota state of the volume`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["corrupt","initializing","mixed","off","on","resizing"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineQuotaFlags(depth int, m *models.VolumeInlineQuota, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EnabledAdded := retrieveVolumeInlineQuotaPropEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnabledAdded

	err, StateAdded := retrieveVolumeInlineQuotaPropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	return nil, retAdded
}

func retrieveVolumeInlineQuotaPropEnabledFlags(depth int, m *models.VolumeInlineQuota, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEnabledName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(flagEnabledName) {

		var flagEnabledName string
		if cmdPrefix == "" {
			flagEnabledName = "enabled"
		} else {
			flagEnabledName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		flagEnabledValue, err := cmd.Flags().GetBool(flagEnabledName)
		if err != nil {
			return err, false
		}
		m.Enabled = &flagEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineQuotaPropStateFlags(depth int, m *models.VolumeInlineQuota, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineRebalancing

// register flags to command
func registerModelVolumeInlineRebalancingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineRebalancingPropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropDataMoved(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropEngine(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropExcludeSnapshots(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropImbalancePercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropImbalanceSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropMaxConstituentImbalancePercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropMaxFileMoves(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropMaxRuntime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropMaxThreshold(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropMinFileSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropMinThreshold(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropNotices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropRuntime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropStopTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropTargetUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingPropUsedForImbalance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingPropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineRebalancingInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingPropDataMoved(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDataMovedDescription := `The amount of data that has been moved in or out of a constituent. A positive value represents data moving into the constituent while a negative value is data moving out of the constituent.`

	var flagDataMovedName string
	if cmdPrefix == "" {
		flagDataMovedName = "data_moved"
	} else {
		flagDataMovedName = fmt.Sprintf("%v.data_moved", cmdPrefix)
	}

	var flagDataMovedDefault int64

	_ = cmd.PersistentFlags().Int64(flagDataMovedName, flagDataMovedDefault, flagDataMovedDescription)

	return nil
}

func registerVolumeInlineRebalancingPropEngine(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagEngineName string
	if cmdPrefix == "" {
		flagEngineName = "engine"
	} else {
		flagEngineName = fmt.Sprintf("%v.engine", cmdPrefix)
	}

	if err := registerModelVolumeInlineRebalancingInlineEngineFlags(depth+1, flagEngineName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingPropExcludeSnapshots(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagExcludeSnapshotsDescription := `Specifies whether or not to exclude files that are stuck in snapshots during rebalancing operation. When a new capacity rebalancing operation is started on a FlexGroup volume, it uses the current "exclude_snapshots" value. Once the operation is started, any changes to the "exclude_snapshots" value do not affect the currently running capacity rebalancing operation. Only future capacity rebalancing operations will use the new "exclude_snapshots" value.`

	var flagExcludeSnapshotsName string
	if cmdPrefix == "" {
		flagExcludeSnapshotsName = "exclude_snapshots"
	} else {
		flagExcludeSnapshotsName = fmt.Sprintf("%v.exclude_snapshots", cmdPrefix)
	}

	var flagExcludeSnapshotsDefault bool = true

	_ = cmd.PersistentFlags().Bool(flagExcludeSnapshotsName, flagExcludeSnapshotsDefault, flagExcludeSnapshotsDescription)

	return nil
}

func registerVolumeInlineRebalancingPropImbalancePercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagImbalancePercentDescription := `Represents the percentage the volume is out of balance.`

	var flagImbalancePercentName string
	if cmdPrefix == "" {
		flagImbalancePercentName = "imbalance_percent"
	} else {
		flagImbalancePercentName = fmt.Sprintf("%v.imbalance_percent", cmdPrefix)
	}

	var flagImbalancePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagImbalancePercentName, flagImbalancePercentDefault, flagImbalancePercentDescription)

	return nil
}

func registerVolumeInlineRebalancingPropImbalanceSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagImbalanceSizeDescription := `Represents how much the volume is out of balance, in bytes.`

	var flagImbalanceSizeName string
	if cmdPrefix == "" {
		flagImbalanceSizeName = "imbalance_size"
	} else {
		flagImbalanceSizeName = fmt.Sprintf("%v.imbalance_size", cmdPrefix)
	}

	var flagImbalanceSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagImbalanceSizeName, flagImbalanceSizeDefault, flagImbalanceSizeDescription)

	return nil
}

func registerVolumeInlineRebalancingPropMaxConstituentImbalancePercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMaxConstituentImbalancePercentDescription := `Absolute percentage of the constituent that is most out of balance. This value will update every 30 seconds when rebalancing is not active and every 10 seconds when rebalancing is active.`

	var flagMaxConstituentImbalancePercentName string
	if cmdPrefix == "" {
		flagMaxConstituentImbalancePercentName = "max_constituent_imbalance_percent"
	} else {
		flagMaxConstituentImbalancePercentName = fmt.Sprintf("%v.max_constituent_imbalance_percent", cmdPrefix)
	}

	var flagMaxConstituentImbalancePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagMaxConstituentImbalancePercentName, flagMaxConstituentImbalancePercentDefault, flagMaxConstituentImbalancePercentDescription)

	return nil
}

func registerVolumeInlineRebalancingPropMaxFileMoves(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMaxFileMovesDescription := `Specifies the maximum number of concurrent file moves in a volume capacity rebalancing operation on a constituent of the FlexGroup volume. When a new capacity rebalancing operation is started on a FlexGroup volume, it uses the current "max_file_moves" value. Once the operation is started, any changes to the "max_file_moves" value do not affect the currently running capacity rebalancing operation. Only future capacity rebalancing operations will use the new "max_file_moves" value.`

	var flagMaxFileMovesName string
	if cmdPrefix == "" {
		flagMaxFileMovesName = "max_file_moves"
	} else {
		flagMaxFileMovesName = fmt.Sprintf("%v.max_file_moves", cmdPrefix)
	}

	var flagMaxFileMovesDefault int64 = 25

	_ = cmd.PersistentFlags().Int64(flagMaxFileMovesName, flagMaxFileMovesDefault, flagMaxFileMovesDescription)

	return nil
}

func registerVolumeInlineRebalancingPropMaxRuntime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMaxRuntimeDescription := `This optional field specifies the maximum time a capacity rebalancing operation runs for. Once the maximum runtime has passed, the capacity rebalancing operation stops. If it is not set, the default value is 6 hours. This value cannot be updated while a capacity rebalancing operation is running.  The maximum runtime can be in years, months, days, hours, and minutes. A period specified for years, months, and days is represented in the ISO-8601 format as "P<num>Y", "P<num>M", "P<num>D" respectively, for example "P3D" represents a duration of 3 days. A duration in hours and minutes is represented by "PT<num>H" and "PT<num>M" respectively.`

	var flagMaxRuntimeName string
	if cmdPrefix == "" {
		flagMaxRuntimeName = "max_runtime"
	} else {
		flagMaxRuntimeName = fmt.Sprintf("%v.max_runtime", cmdPrefix)
	}

	var flagMaxRuntimeDefault string = "PT6H"

	_ = cmd.PersistentFlags().String(flagMaxRuntimeName, flagMaxRuntimeDefault, flagMaxRuntimeDescription)

	return nil
}

func registerVolumeInlineRebalancingPropMaxThreshold(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMaxThresholdDescription := `Specifies the maximum imbalance percentage for FlexGroup volume constituents. When a constituent's imbalance percentage is larger than this value, files are moved from the constituent. When a new capacity rebalancing operation is started on a FlexGroup volume, it uses the current "max_threshold" value. Once the operation is started, any changes to the "max_threshold" value do not affect the currently running capacity rebalancing operation. Only future capacity rebalancing operations will use the new "max_threshold" value.`

	var flagMaxThresholdName string
	if cmdPrefix == "" {
		flagMaxThresholdName = "max_threshold"
	} else {
		flagMaxThresholdName = fmt.Sprintf("%v.max_threshold", cmdPrefix)
	}

	var flagMaxThresholdDefault int64 = 20

	_ = cmd.PersistentFlags().Int64(flagMaxThresholdName, flagMaxThresholdDefault, flagMaxThresholdDescription)

	return nil
}

func registerVolumeInlineRebalancingPropMinFileSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMinFileSizeDescription := `Specifies the minimum file size to consider for a volume capacity rebalancing operation. When a new capacity rebalancing operation is started on a FlexGroup volume, it uses the current "min_file_size" value. Once the operation is started, any changes to the "min_file_size" value do not affect the currently running capacity rebalancing operation. Only future capacity rebalancing operations will use the new "min_file_size" value. The value must be a multiple of 4KB. If it is not set, the default value is 100MB. Setting "min-file-size" to less than the default value leads to more files being moved. Moved files use granular data, which may impact read/write I/O performance.`

	var flagMinFileSizeName string
	if cmdPrefix == "" {
		flagMinFileSizeName = "min_file_size"
	} else {
		flagMinFileSizeName = fmt.Sprintf("%v.min_file_size", cmdPrefix)
	}

	var flagMinFileSizeDefault int64 = 1.048576e+08

	_ = cmd.PersistentFlags().Int64(flagMinFileSizeName, flagMinFileSizeDefault, flagMinFileSizeDescription)

	return nil
}

func registerVolumeInlineRebalancingPropMinThreshold(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMinThresholdDescription := `Specifies the minimum imbalance percentage for FlexGroup volume constituents. When a constituent's imbalance percentage is smaller than this value, files are not moved from the constituent. When a new capacity rebalancing operation is started on a FlexGroup volume, it will use the current "min_threshold" value. Once the operation is started, any changes to the "min_threshold" value do not affect the currently running capacity rebalancing operation. Only future capacity rebalancing operations will use the new "min_threshold" value.`

	var flagMinThresholdName string
	if cmdPrefix == "" {
		flagMinThresholdName = "min_threshold"
	} else {
		flagMinThresholdName = fmt.Sprintf("%v.min_threshold", cmdPrefix)
	}

	var flagMinThresholdDefault int64 = 5

	_ = cmd.PersistentFlags().Int64(flagMinThresholdName, flagMinThresholdDefault, flagMinThresholdDescription)

	return nil
}

func registerVolumeInlineRebalancingPropNotices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: notices []*Error array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineRebalancingPropRuntime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagRuntimeDescription := `Duration the capacity rebalancing operation has been running.`

	var flagRuntimeName string
	if cmdPrefix == "" {
		flagRuntimeName = "runtime"
	} else {
		flagRuntimeName = fmt.Sprintf("%v.runtime", cmdPrefix)
	}

	var flagRuntimeDefault string

	_ = cmd.PersistentFlags().String(flagRuntimeName, flagRuntimeDefault, flagRuntimeDescription)

	return nil
}

func registerVolumeInlineRebalancingPropStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStartTimeDescription := `Time when the current capacity rebalancing operation started, or when a future scheduled rebalancing operation begins.`

	var flagStartTimeName string
	if cmdPrefix == "" {
		flagStartTimeName = "start_time"
	} else {
		flagStartTimeName = fmt.Sprintf("%v.start_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagStartTimeName, "", flagStartTimeDescription)

	return nil
}

func registerVolumeInlineRebalancingPropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := `Enum: ["not_running","starting","rebalancing","paused","stopping","idle","scanning","rebalancing_source","rebalancing_dest","unknown"]. State of the volume capacity rebalancing operation. PATCH the state to "starting" to trigger the capacity rebalance operation, and include start_time to schedule rebalancing. PATCH the state to "stopping" to stop the capacity rebalance operation, or cancel a scheduled rebalancing operation. PATCH without the state with a valid start_time to modify the start_time of an existing scheduled rebalance operation.<br><br>While a FlexGroup volume is rebalancing, every constituent will have a rebalancing engine that can either be scanning the filesystem for space usage and files to move, actively moving files or temporarily doing neither.<br><br>If one or more constituents has a state of "rebalancing_source" or "rebalancing_dest", then files are being moved to rebalance the FlexGroup volume.<br><br>If no files are being moved, more information about what the rebalancing engine is doing for each constituent is available using the "rebalancing.engine" property.<br><br>The following values apply to FlexGroup volumes.<br>not_running &dash; capacity rebalancing is not running on the volume.<br>starting &dash; used in a PATCH operation to start a capacity rebalancing operation.<br>rebalancing &dash; capacity rebalancing is running on the volume.<br> paused &dash; volume capacity rebalancing is paused on the volume.<br>stopping &dash; used in a PATCH operation to stop a capacity rebalancing operation.<br>unknown &dash; the system was unable to determine the rebalancing state for the volume.<br><br>The following values apply to FlexGroup volume constituents.<br>idle &dash; capacity rebalancing is running on the constituent, however, no active scanning or file movement is currently occurring.<br>scanning &dash; the constituent's file system is being scanned to find files to move and determine free space.<br>rebalancing_source &dash; a file is being moved off of the constituent.<br>rebalancing_dest &dash; a file is being moved to the constituent.<br>not_running &dash; capacity rebalancing is not running on the constituent.<br>unknown &dash; the system was unable to determine the rebalancing state for the constituent.`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStateName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["not_running","starting","rebalancing","paused","stopping","idle","scanning","rebalancing_source","rebalancing_dest","unknown"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingPropStopTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStopTimeDescription := `Time when the capacity rebalancing operation stopped.`

	var flagStopTimeName string
	if cmdPrefix == "" {
		flagStopTimeName = "stop_time"
	} else {
		flagStopTimeName = fmt.Sprintf("%v.stop_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagStopTimeName, "", flagStopTimeDescription)

	return nil
}

func registerVolumeInlineRebalancingPropTargetUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTargetUsedDescription := `Represents the ideal used size of each constituent. Calculated by dividing the total FlexGroup volume used size by the number of constituents.`

	var flagTargetUsedName string
	if cmdPrefix == "" {
		flagTargetUsedName = "target_used"
	} else {
		flagTargetUsedName = fmt.Sprintf("%v.target_used", cmdPrefix)
	}

	var flagTargetUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagTargetUsedName, flagTargetUsedDefault, flagTargetUsedDescription)

	return nil
}

func registerVolumeInlineRebalancingPropUsedForImbalance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedForImbalanceDescription := `Represents the used size of each constituent, as determined by the rebalancing engine. Calculated by subtracting the size used by snapshots, the size of files pending deletion and the size of filesystem metadata from the volume used size.`

	var flagUsedForImbalanceName string
	if cmdPrefix == "" {
		flagUsedForImbalanceName = "used_for_imbalance"
	} else {
		flagUsedForImbalanceName = fmt.Sprintf("%v.used_for_imbalance", cmdPrefix)
	}

	var flagUsedForImbalanceDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedForImbalanceName, flagUsedForImbalanceDefault, flagUsedForImbalanceDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineRebalancingFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeInlineRebalancingPropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, DataMovedAdded := retrieveVolumeInlineRebalancingPropDataMovedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataMovedAdded

	err, EngineAdded := retrieveVolumeInlineRebalancingPropEngineFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EngineAdded

	err, ExcludeSnapshotsAdded := retrieveVolumeInlineRebalancingPropExcludeSnapshotsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExcludeSnapshotsAdded

	err, ImbalancePercentAdded := retrieveVolumeInlineRebalancingPropImbalancePercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ImbalancePercentAdded

	err, ImbalanceSizeAdded := retrieveVolumeInlineRebalancingPropImbalanceSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ImbalanceSizeAdded

	err, MaxConstituentImbalancePercentAdded := retrieveVolumeInlineRebalancingPropMaxConstituentImbalancePercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxConstituentImbalancePercentAdded

	err, MaxFileMovesAdded := retrieveVolumeInlineRebalancingPropMaxFileMovesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxFileMovesAdded

	err, MaxRuntimeAdded := retrieveVolumeInlineRebalancingPropMaxRuntimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxRuntimeAdded

	err, MaxThresholdAdded := retrieveVolumeInlineRebalancingPropMaxThresholdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxThresholdAdded

	err, MinFileSizeAdded := retrieveVolumeInlineRebalancingPropMinFileSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MinFileSizeAdded

	err, MinThresholdAdded := retrieveVolumeInlineRebalancingPropMinThresholdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MinThresholdAdded

	err, NoticesAdded := retrieveVolumeInlineRebalancingPropNoticesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NoticesAdded

	err, RuntimeAdded := retrieveVolumeInlineRebalancingPropRuntimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RuntimeAdded

	err, StartTimeAdded := retrieveVolumeInlineRebalancingPropStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StartTimeAdded

	err, StateAdded := retrieveVolumeInlineRebalancingPropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, StopTimeAdded := retrieveVolumeInlineRebalancingPropStopTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StopTimeAdded

	err, TargetUsedAdded := retrieveVolumeInlineRebalancingPropTargetUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TargetUsedAdded

	err, UsedForImbalanceAdded := retrieveVolumeInlineRebalancingPropUsedForImbalanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedForImbalanceAdded

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropLinksFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineRebalancingInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineRebalancingInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineRebalancingInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropDataMovedFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDataMovedName := fmt.Sprintf("%v.data_moved", cmdPrefix)
	if cmd.Flags().Changed(flagDataMovedName) {

		var flagDataMovedName string
		if cmdPrefix == "" {
			flagDataMovedName = "data_moved"
		} else {
			flagDataMovedName = fmt.Sprintf("%v.data_moved", cmdPrefix)
		}

		flagDataMovedValue, err := cmd.Flags().GetInt64(flagDataMovedName)
		if err != nil {
			return err, false
		}
		m.DataMoved = &flagDataMovedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropEngineFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEngineName := fmt.Sprintf("%v.engine", cmdPrefix)
	if cmd.Flags().Changed(flagEngineName) {
		// info: complex object engine VolumeInlineRebalancingInlineEngine is retrieved outside this Changed() block
	}
	flagEngineValue := m.Engine
	if swag.IsZero(flagEngineValue) {
		flagEngineValue = &models.VolumeInlineRebalancingInlineEngine{}
	}

	err, EngineAdded := retrieveModelVolumeInlineRebalancingInlineEngineFlags(depth+1, flagEngineValue, flagEngineName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EngineAdded
	if EngineAdded {
		m.Engine = flagEngineValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropExcludeSnapshotsFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExcludeSnapshotsName := fmt.Sprintf("%v.exclude_snapshots", cmdPrefix)
	if cmd.Flags().Changed(flagExcludeSnapshotsName) {

		var flagExcludeSnapshotsName string
		if cmdPrefix == "" {
			flagExcludeSnapshotsName = "exclude_snapshots"
		} else {
			flagExcludeSnapshotsName = fmt.Sprintf("%v.exclude_snapshots", cmdPrefix)
		}

		flagExcludeSnapshotsValue, err := cmd.Flags().GetBool(flagExcludeSnapshotsName)
		if err != nil {
			return err, false
		}
		m.ExcludeSnapshots = &flagExcludeSnapshotsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropImbalancePercentFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagImbalancePercentName := fmt.Sprintf("%v.imbalance_percent", cmdPrefix)
	if cmd.Flags().Changed(flagImbalancePercentName) {

		var flagImbalancePercentName string
		if cmdPrefix == "" {
			flagImbalancePercentName = "imbalance_percent"
		} else {
			flagImbalancePercentName = fmt.Sprintf("%v.imbalance_percent", cmdPrefix)
		}

		flagImbalancePercentValue, err := cmd.Flags().GetInt64(flagImbalancePercentName)
		if err != nil {
			return err, false
		}
		m.ImbalancePercent = &flagImbalancePercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropImbalanceSizeFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagImbalanceSizeName := fmt.Sprintf("%v.imbalance_size", cmdPrefix)
	if cmd.Flags().Changed(flagImbalanceSizeName) {

		var flagImbalanceSizeName string
		if cmdPrefix == "" {
			flagImbalanceSizeName = "imbalance_size"
		} else {
			flagImbalanceSizeName = fmt.Sprintf("%v.imbalance_size", cmdPrefix)
		}

		flagImbalanceSizeValue, err := cmd.Flags().GetInt64(flagImbalanceSizeName)
		if err != nil {
			return err, false
		}
		m.ImbalanceSize = &flagImbalanceSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropMaxConstituentImbalancePercentFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMaxConstituentImbalancePercentName := fmt.Sprintf("%v.max_constituent_imbalance_percent", cmdPrefix)
	if cmd.Flags().Changed(flagMaxConstituentImbalancePercentName) {

		var flagMaxConstituentImbalancePercentName string
		if cmdPrefix == "" {
			flagMaxConstituentImbalancePercentName = "max_constituent_imbalance_percent"
		} else {
			flagMaxConstituentImbalancePercentName = fmt.Sprintf("%v.max_constituent_imbalance_percent", cmdPrefix)
		}

		flagMaxConstituentImbalancePercentValue, err := cmd.Flags().GetInt64(flagMaxConstituentImbalancePercentName)
		if err != nil {
			return err, false
		}
		m.MaxConstituentImbalancePercent = &flagMaxConstituentImbalancePercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropMaxFileMovesFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMaxFileMovesName := fmt.Sprintf("%v.max_file_moves", cmdPrefix)
	if cmd.Flags().Changed(flagMaxFileMovesName) {

		var flagMaxFileMovesName string
		if cmdPrefix == "" {
			flagMaxFileMovesName = "max_file_moves"
		} else {
			flagMaxFileMovesName = fmt.Sprintf("%v.max_file_moves", cmdPrefix)
		}

		flagMaxFileMovesValue, err := cmd.Flags().GetInt64(flagMaxFileMovesName)
		if err != nil {
			return err, false
		}
		m.MaxFileMoves = &flagMaxFileMovesValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropMaxRuntimeFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMaxRuntimeName := fmt.Sprintf("%v.max_runtime", cmdPrefix)
	if cmd.Flags().Changed(flagMaxRuntimeName) {

		var flagMaxRuntimeName string
		if cmdPrefix == "" {
			flagMaxRuntimeName = "max_runtime"
		} else {
			flagMaxRuntimeName = fmt.Sprintf("%v.max_runtime", cmdPrefix)
		}

		flagMaxRuntimeValue, err := cmd.Flags().GetString(flagMaxRuntimeName)
		if err != nil {
			return err, false
		}
		m.MaxRuntime = &flagMaxRuntimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropMaxThresholdFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMaxThresholdName := fmt.Sprintf("%v.max_threshold", cmdPrefix)
	if cmd.Flags().Changed(flagMaxThresholdName) {

		var flagMaxThresholdName string
		if cmdPrefix == "" {
			flagMaxThresholdName = "max_threshold"
		} else {
			flagMaxThresholdName = fmt.Sprintf("%v.max_threshold", cmdPrefix)
		}

		flagMaxThresholdValue, err := cmd.Flags().GetInt64(flagMaxThresholdName)
		if err != nil {
			return err, false
		}
		m.MaxThreshold = &flagMaxThresholdValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropMinFileSizeFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMinFileSizeName := fmt.Sprintf("%v.min_file_size", cmdPrefix)
	if cmd.Flags().Changed(flagMinFileSizeName) {

		var flagMinFileSizeName string
		if cmdPrefix == "" {
			flagMinFileSizeName = "min_file_size"
		} else {
			flagMinFileSizeName = fmt.Sprintf("%v.min_file_size", cmdPrefix)
		}

		flagMinFileSizeValue, err := cmd.Flags().GetInt64(flagMinFileSizeName)
		if err != nil {
			return err, false
		}
		m.MinFileSize = &flagMinFileSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropMinThresholdFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMinThresholdName := fmt.Sprintf("%v.min_threshold", cmdPrefix)
	if cmd.Flags().Changed(flagMinThresholdName) {

		var flagMinThresholdName string
		if cmdPrefix == "" {
			flagMinThresholdName = "min_threshold"
		} else {
			flagMinThresholdName = fmt.Sprintf("%v.min_threshold", cmdPrefix)
		}

		flagMinThresholdValue, err := cmd.Flags().GetInt64(flagMinThresholdName)
		if err != nil {
			return err, false
		}
		m.MinThreshold = &flagMinThresholdValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropNoticesFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNoticesName := fmt.Sprintf("%v.notices", cmdPrefix)
	if cmd.Flags().Changed(flagNoticesName) {
		// warning: notices array type []*Error is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropRuntimeFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRuntimeName := fmt.Sprintf("%v.runtime", cmdPrefix)
	if cmd.Flags().Changed(flagRuntimeName) {

		var flagRuntimeName string
		if cmdPrefix == "" {
			flagRuntimeName = "runtime"
		} else {
			flagRuntimeName = fmt.Sprintf("%v.runtime", cmdPrefix)
		}

		flagRuntimeValue, err := cmd.Flags().GetString(flagRuntimeName)
		if err != nil {
			return err, false
		}
		m.Runtime = &flagRuntimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropStartTimeFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStartTimeName := fmt.Sprintf("%v.start_time", cmdPrefix)
	if cmd.Flags().Changed(flagStartTimeName) {

		var flagStartTimeName string
		if cmdPrefix == "" {
			flagStartTimeName = "start_time"
		} else {
			flagStartTimeName = fmt.Sprintf("%v.start_time", cmdPrefix)
		}

		flagStartTimeValueStr, err := cmd.Flags().GetString(flagStartTimeName)
		if err != nil {
			return err, false
		}
		var flagStartTimeValue strfmt.DateTime
		if err := flagStartTimeValue.UnmarshalText([]byte(flagStartTimeValueStr)); err != nil {
			return err, false
		}
		m.StartTime = &flagStartTimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropStateFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropStopTimeFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStopTimeName := fmt.Sprintf("%v.stop_time", cmdPrefix)
	if cmd.Flags().Changed(flagStopTimeName) {

		var flagStopTimeName string
		if cmdPrefix == "" {
			flagStopTimeName = "stop_time"
		} else {
			flagStopTimeName = fmt.Sprintf("%v.stop_time", cmdPrefix)
		}

		flagStopTimeValueStr, err := cmd.Flags().GetString(flagStopTimeName)
		if err != nil {
			return err, false
		}
		var flagStopTimeValue strfmt.DateTime
		if err := flagStopTimeValue.UnmarshalText([]byte(flagStopTimeValueStr)); err != nil {
			return err, false
		}
		m.StopTime = &flagStopTimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropTargetUsedFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTargetUsedName := fmt.Sprintf("%v.target_used", cmdPrefix)
	if cmd.Flags().Changed(flagTargetUsedName) {

		var flagTargetUsedName string
		if cmdPrefix == "" {
			flagTargetUsedName = "target_used"
		} else {
			flagTargetUsedName = fmt.Sprintf("%v.target_used", cmdPrefix)
		}

		flagTargetUsedValue, err := cmd.Flags().GetInt64(flagTargetUsedName)
		if err != nil {
			return err, false
		}
		m.TargetUsed = &flagTargetUsedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingPropUsedForImbalanceFlags(depth int, m *models.VolumeInlineRebalancing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedForImbalanceName := fmt.Sprintf("%v.used_for_imbalance", cmdPrefix)
	if cmd.Flags().Changed(flagUsedForImbalanceName) {

		var flagUsedForImbalanceName string
		if cmdPrefix == "" {
			flagUsedForImbalanceName = "used_for_imbalance"
		} else {
			flagUsedForImbalanceName = fmt.Sprintf("%v.used_for_imbalance", cmdPrefix)
		}

		flagUsedForImbalanceValue, err := cmd.Flags().GetInt64(flagUsedForImbalanceName)
		if err != nil {
			return err, false
		}
		m.UsedForImbalance = &flagUsedForImbalanceValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineRebalancingInlineEngine

// register flags to command
func registerModelVolumeInlineRebalancingInlineEngineFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineRebalancingInlineEnginePropMovement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEnginePropScanner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingInlineEnginePropMovement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagMovementName string
	if cmdPrefix == "" {
		flagMovementName = "movement"
	} else {
		flagMovementName = fmt.Sprintf("%v.movement", cmdPrefix)
	}

	if err := registerModelVolumeInlineRebalancingInlineEngineInlineMovementFlags(depth+1, flagMovementName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingInlineEnginePropScanner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagScannerName string
	if cmdPrefix == "" {
		flagScannerName = "scanner"
	} else {
		flagScannerName = fmt.Sprintf("%v.scanner", cmdPrefix)
	}

	if err := registerModelVolumeInlineRebalancingInlineEngineInlineScannerFlags(depth+1, flagScannerName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineRebalancingInlineEngineFlags(depth int, m *models.VolumeInlineRebalancingInlineEngine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, MovementAdded := retrieveVolumeInlineRebalancingInlineEnginePropMovementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MovementAdded

	err, ScannerAdded := retrieveVolumeInlineRebalancingInlineEnginePropScannerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScannerAdded

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEnginePropMovementFlags(depth int, m *models.VolumeInlineRebalancingInlineEngine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMovementName := fmt.Sprintf("%v.movement", cmdPrefix)
	if cmd.Flags().Changed(flagMovementName) {
		// info: complex object movement VolumeInlineRebalancingInlineEngineInlineMovement is retrieved outside this Changed() block
	}
	flagMovementValue := m.Movement
	if swag.IsZero(flagMovementValue) {
		flagMovementValue = &models.VolumeInlineRebalancingInlineEngineInlineMovement{}
	}

	err, MovementAdded := retrieveModelVolumeInlineRebalancingInlineEngineInlineMovementFlags(depth+1, flagMovementValue, flagMovementName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MovementAdded
	if MovementAdded {
		m.Movement = flagMovementValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEnginePropScannerFlags(depth int, m *models.VolumeInlineRebalancingInlineEngine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScannerName := fmt.Sprintf("%v.scanner", cmdPrefix)
	if cmd.Flags().Changed(flagScannerName) {
		// info: complex object scanner VolumeInlineRebalancingInlineEngineInlineScanner is retrieved outside this Changed() block
	}
	flagScannerValue := m.Scanner
	if swag.IsZero(flagScannerValue) {
		flagScannerValue = &models.VolumeInlineRebalancingInlineEngineInlineScanner{}
	}

	err, ScannerAdded := retrieveModelVolumeInlineRebalancingInlineEngineInlineScannerFlags(depth+1, flagScannerValue, flagScannerName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScannerAdded
	if ScannerAdded {
		m.Scanner = flagScannerValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineRebalancingInlineEngineInlineMovement

// register flags to command
func registerModelVolumeInlineRebalancingInlineEngineInlineMovementFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineRebalancingInlineEngineInlineMovementPropFileMovesStarted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineMovementPropLastError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineMovementPropMostRecentStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineMovementPropFileMovesStarted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileMovesStartedDescription := `Number of file moves started on this constituent.`

	var flagFileMovesStartedName string
	if cmdPrefix == "" {
		flagFileMovesStartedName = "file_moves_started"
	} else {
		flagFileMovesStartedName = fmt.Sprintf("%v.file_moves_started", cmdPrefix)
	}

	var flagFileMovesStartedDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileMovesStartedName, flagFileMovesStartedDefault, flagFileMovesStartedDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineMovementPropLastError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLastErrorName string
	if cmdPrefix == "" {
		flagLastErrorName = "last_error"
	} else {
		flagLastErrorName = fmt.Sprintf("%v.last_error", cmdPrefix)
	}

	if err := registerModelVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorFlags(depth+1, flagLastErrorName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineMovementPropMostRecentStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMostRecentStartTimeDescription := `Start time of the most recent file move on the constituent.`

	var flagMostRecentStartTimeName string
	if cmdPrefix == "" {
		flagMostRecentStartTimeName = "most_recent_start_time"
	} else {
		flagMostRecentStartTimeName = fmt.Sprintf("%v.most_recent_start_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagMostRecentStartTimeName, "", flagMostRecentStartTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineRebalancingInlineEngineInlineMovementFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, FileMovesStartedAdded := retrieveVolumeInlineRebalancingInlineEngineInlineMovementPropFileMovesStartedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileMovesStartedAdded

	err, LastErrorAdded := retrieveVolumeInlineRebalancingInlineEngineInlineMovementPropLastErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastErrorAdded

	err, MostRecentStartTimeAdded := retrieveVolumeInlineRebalancingInlineEngineInlineMovementPropMostRecentStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MostRecentStartTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineMovementPropFileMovesStartedFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileMovesStartedName := fmt.Sprintf("%v.file_moves_started", cmdPrefix)
	if cmd.Flags().Changed(flagFileMovesStartedName) {

		var flagFileMovesStartedName string
		if cmdPrefix == "" {
			flagFileMovesStartedName = "file_moves_started"
		} else {
			flagFileMovesStartedName = fmt.Sprintf("%v.file_moves_started", cmdPrefix)
		}

		flagFileMovesStartedValue, err := cmd.Flags().GetInt64(flagFileMovesStartedName)
		if err != nil {
			return err, false
		}
		m.FileMovesStarted = &flagFileMovesStartedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineMovementPropLastErrorFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastErrorName := fmt.Sprintf("%v.last_error", cmdPrefix)
	if cmd.Flags().Changed(flagLastErrorName) {
		// info: complex object last_error VolumeInlineRebalancingInlineEngineInlineMovementInlineLastError is retrieved outside this Changed() block
	}
	flagLastErrorValue := m.LastError
	if swag.IsZero(flagLastErrorValue) {
		flagLastErrorValue = &models.VolumeInlineRebalancingInlineEngineInlineMovementInlineLastError{}
	}

	err, LastErrorAdded := retrieveModelVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorFlags(depth+1, flagLastErrorValue, flagLastErrorName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastErrorAdded
	if LastErrorAdded {
		m.LastError = flagLastErrorValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineMovementPropMostRecentStartTimeFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineMovement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMostRecentStartTimeName := fmt.Sprintf("%v.most_recent_start_time", cmdPrefix)
	if cmd.Flags().Changed(flagMostRecentStartTimeName) {

		var flagMostRecentStartTimeName string
		if cmdPrefix == "" {
			flagMostRecentStartTimeName = "most_recent_start_time"
		} else {
			flagMostRecentStartTimeName = fmt.Sprintf("%v.most_recent_start_time", cmdPrefix)
		}

		flagMostRecentStartTimeValueStr, err := cmd.Flags().GetString(flagMostRecentStartTimeName)
		if err != nil {
			return err, false
		}
		var flagMostRecentStartTimeValue strfmt.DateTime
		if err := flagMostRecentStartTimeValue.UnmarshalText([]byte(flagMostRecentStartTimeValueStr)); err != nil {
			return err, false
		}
		m.MostRecentStartTime = &flagMostRecentStartTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineRebalancingInlineEngineInlineMovementInlineLastError

// register flags to command
func registerModelVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropDestination(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropFileID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCodeDescription := `Error code of the last file move error on the constituent.`

	var flagCodeName string
	if cmdPrefix == "" {
		flagCodeName = "code"
	} else {
		flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var flagCodeDefault int64

	_ = cmd.PersistentFlags().Int64(flagCodeName, flagCodeDefault, flagCodeDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropDestination(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDestinationDescription := `DSID of the destination constituent of the last file move error on the constituent.`

	var flagDestinationName string
	if cmdPrefix == "" {
		flagDestinationName = "destination"
	} else {
		flagDestinationName = fmt.Sprintf("%v.destination", cmdPrefix)
	}

	var flagDestinationDefault int64

	_ = cmd.PersistentFlags().Int64(flagDestinationName, flagDestinationDefault, flagDestinationDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropFileID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileIDDescription := `File ID of the last file move error on the constituent.`

	var flagFileIDName string
	if cmdPrefix == "" {
		flagFileIDName = "file_id"
	} else {
		flagFileIDName = fmt.Sprintf("%v.file_id", cmdPrefix)
	}

	var flagFileIDDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileIDName, flagFileIDDefault, flagFileIDDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTimeDescription := `Time of the last file move error on the constituent.`

	var flagTimeName string
	if cmdPrefix == "" {
		flagTimeName = "time"
	} else {
		flagTimeName = fmt.Sprintf("%v.time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagTimeName, "", flagTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineMovementInlineLastError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CodeAdded := retrieveVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CodeAdded

	err, DestinationAdded := retrieveVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropDestinationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DestinationAdded

	err, FileIDAdded := retrieveVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropFileIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileIDAdded

	err, TimeAdded := retrieveVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropCodeFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineMovementInlineLastError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCodeName := fmt.Sprintf("%v.code", cmdPrefix)
	if cmd.Flags().Changed(flagCodeName) {

		var flagCodeName string
		if cmdPrefix == "" {
			flagCodeName = "code"
		} else {
			flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		flagCodeValue, err := cmd.Flags().GetInt64(flagCodeName)
		if err != nil {
			return err, false
		}
		m.Code = &flagCodeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropDestinationFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineMovementInlineLastError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDestinationName := fmt.Sprintf("%v.destination", cmdPrefix)
	if cmd.Flags().Changed(flagDestinationName) {

		var flagDestinationName string
		if cmdPrefix == "" {
			flagDestinationName = "destination"
		} else {
			flagDestinationName = fmt.Sprintf("%v.destination", cmdPrefix)
		}

		flagDestinationValue, err := cmd.Flags().GetInt64(flagDestinationName)
		if err != nil {
			return err, false
		}
		m.Destination = &flagDestinationValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropFileIDFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineMovementInlineLastError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileIDName := fmt.Sprintf("%v.file_id", cmdPrefix)
	if cmd.Flags().Changed(flagFileIDName) {

		var flagFileIDName string
		if cmdPrefix == "" {
			flagFileIDName = "file_id"
		} else {
			flagFileIDName = fmt.Sprintf("%v.file_id", cmdPrefix)
		}

		flagFileIDValue, err := cmd.Flags().GetInt64(flagFileIDName)
		if err != nil {
			return err, false
		}
		m.FileID = &flagFileIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineMovementInlineLastErrorPropTimeFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineMovementInlineLastError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTimeName := fmt.Sprintf("%v.time", cmdPrefix)
	if cmd.Flags().Changed(flagTimeName) {

		var flagTimeName string
		if cmdPrefix == "" {
			flagTimeName = "time"
		} else {
			flagTimeName = fmt.Sprintf("%v.time", cmdPrefix)
		}

		flagTimeValueStr, err := cmd.Flags().GetString(flagTimeName)
		if err != nil {
			return err, false
		}
		var flagTimeValue strfmt.DateTime
		if err := flagTimeValue.UnmarshalText([]byte(flagTimeValueStr)); err != nil {
			return err, false
		}
		m.Time = &flagTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineRebalancingInlineEngineInlineScanner

// register flags to command
func registerModelVolumeInlineRebalancingInlineEngineInlineScannerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerPropBlocksScanned(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerPropBlocksSkipped(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerPropFilesScanned(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerPropFilesSkipped(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerPropBlocksScanned(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagBlocksScannedDescription := `Number of blocks scanned on this constituent.`

	var flagBlocksScannedName string
	if cmdPrefix == "" {
		flagBlocksScannedName = "blocks_scanned"
	} else {
		flagBlocksScannedName = fmt.Sprintf("%v.blocks_scanned", cmdPrefix)
	}

	var flagBlocksScannedDefault int64

	_ = cmd.PersistentFlags().Int64(flagBlocksScannedName, flagBlocksScannedDefault, flagBlocksScannedDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerPropBlocksSkipped(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagBlocksSkippedName string
	if cmdPrefix == "" {
		flagBlocksSkippedName = "blocks_skipped"
	} else {
		flagBlocksSkippedName = fmt.Sprintf("%v.blocks_skipped", cmdPrefix)
	}

	if err := registerModelVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedFlags(depth+1, flagBlocksSkippedName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerPropFilesScanned(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFilesScannedDescription := `Number of files scanned on this constituent.`

	var flagFilesScannedName string
	if cmdPrefix == "" {
		flagFilesScannedName = "files_scanned"
	} else {
		flagFilesScannedName = fmt.Sprintf("%v.files_scanned", cmdPrefix)
	}

	var flagFilesScannedDefault int64

	_ = cmd.PersistentFlags().Int64(flagFilesScannedName, flagFilesScannedDefault, flagFilesScannedDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerPropFilesSkipped(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagFilesSkippedName string
	if cmdPrefix == "" {
		flagFilesSkippedName = "files_skipped"
	} else {
		flagFilesSkippedName = fmt.Sprintf("%v.files_skipped", cmdPrefix)
	}

	if err := registerModelVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedFlags(depth+1, flagFilesSkippedName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineRebalancingInlineEngineInlineScannerFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, BlocksScannedAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerPropBlocksScannedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlocksScannedAdded

	err, BlocksSkippedAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerPropBlocksSkippedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlocksSkippedAdded

	err, FilesScannedAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerPropFilesScannedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FilesScannedAdded

	err, FilesSkippedAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerPropFilesSkippedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FilesSkippedAdded

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerPropBlocksScannedFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBlocksScannedName := fmt.Sprintf("%v.blocks_scanned", cmdPrefix)
	if cmd.Flags().Changed(flagBlocksScannedName) {

		var flagBlocksScannedName string
		if cmdPrefix == "" {
			flagBlocksScannedName = "blocks_scanned"
		} else {
			flagBlocksScannedName = fmt.Sprintf("%v.blocks_scanned", cmdPrefix)
		}

		flagBlocksScannedValue, err := cmd.Flags().GetInt64(flagBlocksScannedName)
		if err != nil {
			return err, false
		}
		m.BlocksScanned = &flagBlocksScannedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerPropBlocksSkippedFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBlocksSkippedName := fmt.Sprintf("%v.blocks_skipped", cmdPrefix)
	if cmd.Flags().Changed(flagBlocksSkippedName) {
		// info: complex object blocks_skipped VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped is retrieved outside this Changed() block
	}
	flagBlocksSkippedValue := m.BlocksSkipped
	if swag.IsZero(flagBlocksSkippedValue) {
		flagBlocksSkippedValue = &models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped{}
	}

	err, BlocksSkippedAdded := retrieveModelVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedFlags(depth+1, flagBlocksSkippedValue, flagBlocksSkippedName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlocksSkippedAdded
	if BlocksSkippedAdded {
		m.BlocksSkipped = flagBlocksSkippedValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerPropFilesScannedFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFilesScannedName := fmt.Sprintf("%v.files_scanned", cmdPrefix)
	if cmd.Flags().Changed(flagFilesScannedName) {

		var flagFilesScannedName string
		if cmdPrefix == "" {
			flagFilesScannedName = "files_scanned"
		} else {
			flagFilesScannedName = fmt.Sprintf("%v.files_scanned", cmdPrefix)
		}

		flagFilesScannedValue, err := cmd.Flags().GetInt64(flagFilesScannedName)
		if err != nil {
			return err, false
		}
		m.FilesScanned = &flagFilesScannedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerPropFilesSkippedFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFilesSkippedName := fmt.Sprintf("%v.files_skipped", cmdPrefix)
	if cmd.Flags().Changed(flagFilesSkippedName) {
		// info: complex object files_skipped VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped is retrieved outside this Changed() block
	}
	flagFilesSkippedValue := m.FilesSkipped
	if swag.IsZero(flagFilesSkippedValue) {
		flagFilesSkippedValue = &models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped{}
	}

	err, FilesSkippedAdded := retrieveModelVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedFlags(depth+1, flagFilesSkippedValue, flagFilesSkippedName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FilesSkippedAdded
	if FilesSkippedAdded {
		m.FilesSkipped = flagFilesSkippedValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped

// register flags to command
func registerModelVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropEfficiencyBlocks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropEfficiencyPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropFastTruncate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropFootprintInvalid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropInSnapshot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropIncompatible(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropOnDemandDestination(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropRemoteCache(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropTooLarge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropTooSmall(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropWriteFenced(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropEfficiencyBlocks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEfficiencyBlocksDescription := `Number of blocks skipped by the scanner on this constituent because storage efficiency lost, in blocks, would be too high.`

	var flagEfficiencyBlocksName string
	if cmdPrefix == "" {
		flagEfficiencyBlocksName = "efficiency_blocks"
	} else {
		flagEfficiencyBlocksName = fmt.Sprintf("%v.efficiency_blocks", cmdPrefix)
	}

	var flagEfficiencyBlocksDefault int64

	_ = cmd.PersistentFlags().Int64(flagEfficiencyBlocksName, flagEfficiencyBlocksDefault, flagEfficiencyBlocksDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropEfficiencyPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEfficiencyPercentDescription := `Number of blocks skipped by the scanner on this constituent because storage efficiency lost, in percent, would be too high.`

	var flagEfficiencyPercentName string
	if cmdPrefix == "" {
		flagEfficiencyPercentName = "efficiency_percent"
	} else {
		flagEfficiencyPercentName = fmt.Sprintf("%v.efficiency_percent", cmdPrefix)
	}

	var flagEfficiencyPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagEfficiencyPercentName, flagEfficiencyPercentDefault, flagEfficiencyPercentDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropFastTruncate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFastTruncateDescription := `Number of blocks skipped by the scanner on this constituent because fast truncate is currently running on files.`

	var flagFastTruncateName string
	if cmdPrefix == "" {
		flagFastTruncateName = "fast_truncate"
	} else {
		flagFastTruncateName = fmt.Sprintf("%v.fast_truncate", cmdPrefix)
	}

	var flagFastTruncateDefault int64

	_ = cmd.PersistentFlags().Int64(flagFastTruncateName, flagFastTruncateDefault, flagFastTruncateDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropFootprintInvalid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFootprintInvalidDescription := `Number of blocks skipped by the scanner on this constituent because of files with invalid space footprints.`

	var flagFootprintInvalidName string
	if cmdPrefix == "" {
		flagFootprintInvalidName = "footprint_invalid"
	} else {
		flagFootprintInvalidName = fmt.Sprintf("%v.footprint_invalid", cmdPrefix)
	}

	var flagFootprintInvalidDefault int64

	_ = cmd.PersistentFlags().Int64(flagFootprintInvalidName, flagFootprintInvalidDefault, flagFootprintInvalidDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropInSnapshot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagInSnapshotDescription := `Number of blocks skipped by the scanner on this constituent because of files in snapshots.`

	var flagInSnapshotName string
	if cmdPrefix == "" {
		flagInSnapshotName = "in_snapshot"
	} else {
		flagInSnapshotName = fmt.Sprintf("%v.in_snapshot", cmdPrefix)
	}

	var flagInSnapshotDefault int64

	_ = cmd.PersistentFlags().Int64(flagInSnapshotName, flagInSnapshotDefault, flagInSnapshotDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropIncompatible(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIncompatibleDescription := `Number of blocks skipped by the scanner on this constituent because of incompatible files.`

	var flagIncompatibleName string
	if cmdPrefix == "" {
		flagIncompatibleName = "incompatible"
	} else {
		flagIncompatibleName = fmt.Sprintf("%v.incompatible", cmdPrefix)
	}

	var flagIncompatibleDefault int64

	_ = cmd.PersistentFlags().Int64(flagIncompatibleName, flagIncompatibleDefault, flagIncompatibleDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMetadataDescription := `Number of blocks skipped by the scanner on this constituent because of metadata files.`

	var flagMetadataName string
	if cmdPrefix == "" {
		flagMetadataName = "metadata"
	} else {
		flagMetadataName = fmt.Sprintf("%v.metadata", cmdPrefix)
	}

	var flagMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetadataName, flagMetadataDefault, flagMetadataDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropOnDemandDestination(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOnDemandDestinationDescription := `Number of blocks skipped by the scanner on this constituent because of on demand destination files.`

	var flagOnDemandDestinationName string
	if cmdPrefix == "" {
		flagOnDemandDestinationName = "on_demand_destination"
	} else {
		flagOnDemandDestinationName = fmt.Sprintf("%v.on_demand_destination", cmdPrefix)
	}

	var flagOnDemandDestinationDefault int64

	_ = cmd.PersistentFlags().Int64(flagOnDemandDestinationName, flagOnDemandDestinationDefault, flagOnDemandDestinationDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOtherDescription := `Number of blocks skipped by the scanner on this constituent for all other reasons.`

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var flagOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagOtherName, flagOtherDefault, flagOtherDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropRemoteCache(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagRemoteCacheDescription := `Number of blocks skipped by the scanner on this constituent because of remote caches.`

	var flagRemoteCacheName string
	if cmdPrefix == "" {
		flagRemoteCacheName = "remote_cache"
	} else {
		flagRemoteCacheName = fmt.Sprintf("%v.remote_cache", cmdPrefix)
	}

	var flagRemoteCacheDefault int64

	_ = cmd.PersistentFlags().Int64(flagRemoteCacheName, flagRemoteCacheDefault, flagRemoteCacheDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropTooLarge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTooLargeDescription := `Number of blocks skipped by the scanner on this constituent because of files that are larger than rebalancing.max_file_size.`

	var flagTooLargeName string
	if cmdPrefix == "" {
		flagTooLargeName = "too_large"
	} else {
		flagTooLargeName = fmt.Sprintf("%v.too_large", cmdPrefix)
	}

	var flagTooLargeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTooLargeName, flagTooLargeDefault, flagTooLargeDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropTooSmall(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTooSmallDescription := `Number of blocks skipped by the scanner on this constituent because of files that are smaller than rebalancing.min_file_size.`

	var flagTooSmallName string
	if cmdPrefix == "" {
		flagTooSmallName = "too_small"
	} else {
		flagTooSmallName = fmt.Sprintf("%v.too_small", cmdPrefix)
	}

	var flagTooSmallDefault int64

	_ = cmd.PersistentFlags().Int64(flagTooSmallName, flagTooSmallDefault, flagTooSmallDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropWriteFenced(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWriteFencedDescription := `Number of blocks skipped by the scanner on this constituent because of files fenced for write operations.`

	var flagWriteFencedName string
	if cmdPrefix == "" {
		flagWriteFencedName = "write_fenced"
	} else {
		flagWriteFencedName = fmt.Sprintf("%v.write_fenced", cmdPrefix)
	}

	var flagWriteFencedDefault int64

	_ = cmd.PersistentFlags().Int64(flagWriteFencedName, flagWriteFencedDefault, flagWriteFencedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EfficiencyBlocksAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropEfficiencyBlocksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EfficiencyBlocksAdded

	err, EfficiencyPercentAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropEfficiencyPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EfficiencyPercentAdded

	err, FastTruncateAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropFastTruncateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FastTruncateAdded

	err, FootprintInvalidAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropFootprintInvalidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FootprintInvalidAdded

	err, InSnapshotAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropInSnapshotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InSnapshotAdded

	err, IncompatibleAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropIncompatibleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IncompatibleAdded

	err, MetadataAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MetadataAdded

	err, OnDemandDestinationAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropOnDemandDestinationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OnDemandDestinationAdded

	err, OtherAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, RemoteCacheAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropRemoteCacheFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RemoteCacheAdded

	err, TooLargeAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropTooLargeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TooLargeAdded

	err, TooSmallAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropTooSmallFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TooSmallAdded

	err, WriteFencedAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropWriteFencedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteFencedAdded

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropEfficiencyBlocksFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEfficiencyBlocksName := fmt.Sprintf("%v.efficiency_blocks", cmdPrefix)
	if cmd.Flags().Changed(flagEfficiencyBlocksName) {

		var flagEfficiencyBlocksName string
		if cmdPrefix == "" {
			flagEfficiencyBlocksName = "efficiency_blocks"
		} else {
			flagEfficiencyBlocksName = fmt.Sprintf("%v.efficiency_blocks", cmdPrefix)
		}

		flagEfficiencyBlocksValue, err := cmd.Flags().GetInt64(flagEfficiencyBlocksName)
		if err != nil {
			return err, false
		}
		m.EfficiencyBlocks = &flagEfficiencyBlocksValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropEfficiencyPercentFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEfficiencyPercentName := fmt.Sprintf("%v.efficiency_percent", cmdPrefix)
	if cmd.Flags().Changed(flagEfficiencyPercentName) {

		var flagEfficiencyPercentName string
		if cmdPrefix == "" {
			flagEfficiencyPercentName = "efficiency_percent"
		} else {
			flagEfficiencyPercentName = fmt.Sprintf("%v.efficiency_percent", cmdPrefix)
		}

		flagEfficiencyPercentValue, err := cmd.Flags().GetInt64(flagEfficiencyPercentName)
		if err != nil {
			return err, false
		}
		m.EfficiencyPercent = &flagEfficiencyPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropFastTruncateFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFastTruncateName := fmt.Sprintf("%v.fast_truncate", cmdPrefix)
	if cmd.Flags().Changed(flagFastTruncateName) {

		var flagFastTruncateName string
		if cmdPrefix == "" {
			flagFastTruncateName = "fast_truncate"
		} else {
			flagFastTruncateName = fmt.Sprintf("%v.fast_truncate", cmdPrefix)
		}

		flagFastTruncateValue, err := cmd.Flags().GetInt64(flagFastTruncateName)
		if err != nil {
			return err, false
		}
		m.FastTruncate = &flagFastTruncateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropFootprintInvalidFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFootprintInvalidName := fmt.Sprintf("%v.footprint_invalid", cmdPrefix)
	if cmd.Flags().Changed(flagFootprintInvalidName) {

		var flagFootprintInvalidName string
		if cmdPrefix == "" {
			flagFootprintInvalidName = "footprint_invalid"
		} else {
			flagFootprintInvalidName = fmt.Sprintf("%v.footprint_invalid", cmdPrefix)
		}

		flagFootprintInvalidValue, err := cmd.Flags().GetInt64(flagFootprintInvalidName)
		if err != nil {
			return err, false
		}
		m.FootprintInvalid = &flagFootprintInvalidValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropInSnapshotFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagInSnapshotName := fmt.Sprintf("%v.in_snapshot", cmdPrefix)
	if cmd.Flags().Changed(flagInSnapshotName) {

		var flagInSnapshotName string
		if cmdPrefix == "" {
			flagInSnapshotName = "in_snapshot"
		} else {
			flagInSnapshotName = fmt.Sprintf("%v.in_snapshot", cmdPrefix)
		}

		flagInSnapshotValue, err := cmd.Flags().GetInt64(flagInSnapshotName)
		if err != nil {
			return err, false
		}
		m.InSnapshot = &flagInSnapshotValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropIncompatibleFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIncompatibleName := fmt.Sprintf("%v.incompatible", cmdPrefix)
	if cmd.Flags().Changed(flagIncompatibleName) {

		var flagIncompatibleName string
		if cmdPrefix == "" {
			flagIncompatibleName = "incompatible"
		} else {
			flagIncompatibleName = fmt.Sprintf("%v.incompatible", cmdPrefix)
		}

		flagIncompatibleValue, err := cmd.Flags().GetInt64(flagIncompatibleName)
		if err != nil {
			return err, false
		}
		m.Incompatible = &flagIncompatibleValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropMetadataFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMetadataName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(flagMetadataName) {

		var flagMetadataName string
		if cmdPrefix == "" {
			flagMetadataName = "metadata"
		} else {
			flagMetadataName = fmt.Sprintf("%v.metadata", cmdPrefix)
		}

		flagMetadataValue, err := cmd.Flags().GetInt64(flagMetadataName)
		if err != nil {
			return err, false
		}
		m.Metadata = &flagMetadataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropOnDemandDestinationFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOnDemandDestinationName := fmt.Sprintf("%v.on_demand_destination", cmdPrefix)
	if cmd.Flags().Changed(flagOnDemandDestinationName) {

		var flagOnDemandDestinationName string
		if cmdPrefix == "" {
			flagOnDemandDestinationName = "on_demand_destination"
		} else {
			flagOnDemandDestinationName = fmt.Sprintf("%v.on_demand_destination", cmdPrefix)
		}

		flagOnDemandDestinationValue, err := cmd.Flags().GetInt64(flagOnDemandDestinationName)
		if err != nil {
			return err, false
		}
		m.OnDemandDestination = &flagOnDemandDestinationValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropOtherFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {

		var flagOtherName string
		if cmdPrefix == "" {
			flagOtherName = "other"
		} else {
			flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		flagOtherValue, err := cmd.Flags().GetInt64(flagOtherName)
		if err != nil {
			return err, false
		}
		m.Other = &flagOtherValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropRemoteCacheFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRemoteCacheName := fmt.Sprintf("%v.remote_cache", cmdPrefix)
	if cmd.Flags().Changed(flagRemoteCacheName) {

		var flagRemoteCacheName string
		if cmdPrefix == "" {
			flagRemoteCacheName = "remote_cache"
		} else {
			flagRemoteCacheName = fmt.Sprintf("%v.remote_cache", cmdPrefix)
		}

		flagRemoteCacheValue, err := cmd.Flags().GetInt64(flagRemoteCacheName)
		if err != nil {
			return err, false
		}
		m.RemoteCache = &flagRemoteCacheValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropTooLargeFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTooLargeName := fmt.Sprintf("%v.too_large", cmdPrefix)
	if cmd.Flags().Changed(flagTooLargeName) {

		var flagTooLargeName string
		if cmdPrefix == "" {
			flagTooLargeName = "too_large"
		} else {
			flagTooLargeName = fmt.Sprintf("%v.too_large", cmdPrefix)
		}

		flagTooLargeValue, err := cmd.Flags().GetInt64(flagTooLargeName)
		if err != nil {
			return err, false
		}
		m.TooLarge = &flagTooLargeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropTooSmallFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTooSmallName := fmt.Sprintf("%v.too_small", cmdPrefix)
	if cmd.Flags().Changed(flagTooSmallName) {

		var flagTooSmallName string
		if cmdPrefix == "" {
			flagTooSmallName = "too_small"
		} else {
			flagTooSmallName = fmt.Sprintf("%v.too_small", cmdPrefix)
		}

		flagTooSmallValue, err := cmd.Flags().GetInt64(flagTooSmallName)
		if err != nil {
			return err, false
		}
		m.TooSmall = &flagTooSmallValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkippedPropWriteFencedFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineBlocksSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteFencedName := fmt.Sprintf("%v.write_fenced", cmdPrefix)
	if cmd.Flags().Changed(flagWriteFencedName) {

		var flagWriteFencedName string
		if cmdPrefix == "" {
			flagWriteFencedName = "write_fenced"
		} else {
			flagWriteFencedName = fmt.Sprintf("%v.write_fenced", cmdPrefix)
		}

		flagWriteFencedValue, err := cmd.Flags().GetInt64(flagWriteFencedName)
		if err != nil {
			return err, false
		}
		m.WriteFenced = &flagWriteFencedValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped

// register flags to command
func registerModelVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropEfficiencyBlocks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropEfficiencyPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropFastTruncate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropFootprintInvalid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropInSnapshot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropIncompatible(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropOnDemandDestination(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropRemoteCache(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropTooLarge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropTooSmall(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropWriteFenced(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropEfficiencyBlocks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEfficiencyBlocksDescription := `Number of files skipped by the scanner on this constituent because storage efficiency lost, in blocks, would be too high.`

	var flagEfficiencyBlocksName string
	if cmdPrefix == "" {
		flagEfficiencyBlocksName = "efficiency_blocks"
	} else {
		flagEfficiencyBlocksName = fmt.Sprintf("%v.efficiency_blocks", cmdPrefix)
	}

	var flagEfficiencyBlocksDefault int64

	_ = cmd.PersistentFlags().Int64(flagEfficiencyBlocksName, flagEfficiencyBlocksDefault, flagEfficiencyBlocksDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropEfficiencyPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEfficiencyPercentDescription := `Number of files skipped by the scanner on this constituent because storage efficiency lost, in percent, would be too high.`

	var flagEfficiencyPercentName string
	if cmdPrefix == "" {
		flagEfficiencyPercentName = "efficiency_percent"
	} else {
		flagEfficiencyPercentName = fmt.Sprintf("%v.efficiency_percent", cmdPrefix)
	}

	var flagEfficiencyPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagEfficiencyPercentName, flagEfficiencyPercentDefault, flagEfficiencyPercentDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropFastTruncate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFastTruncateDescription := `Number of files skipped by the scanner on this constituent because fast truncate is currently running on the file.`

	var flagFastTruncateName string
	if cmdPrefix == "" {
		flagFastTruncateName = "fast_truncate"
	} else {
		flagFastTruncateName = fmt.Sprintf("%v.fast_truncate", cmdPrefix)
	}

	var flagFastTruncateDefault int64

	_ = cmd.PersistentFlags().Int64(flagFastTruncateName, flagFastTruncateDefault, flagFastTruncateDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropFootprintInvalid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFootprintInvalidDescription := `Number of files skipped by the scanner on this constituent because their space footprints are invalid.`

	var flagFootprintInvalidName string
	if cmdPrefix == "" {
		flagFootprintInvalidName = "footprint_invalid"
	} else {
		flagFootprintInvalidName = fmt.Sprintf("%v.footprint_invalid", cmdPrefix)
	}

	var flagFootprintInvalidDefault int64

	_ = cmd.PersistentFlags().Int64(flagFootprintInvalidName, flagFootprintInvalidDefault, flagFootprintInvalidDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropInSnapshot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagInSnapshotDescription := `Number of files skipped by the scanner on this constituent because they are trapped in snapshots.`

	var flagInSnapshotName string
	if cmdPrefix == "" {
		flagInSnapshotName = "in_snapshot"
	} else {
		flagInSnapshotName = fmt.Sprintf("%v.in_snapshot", cmdPrefix)
	}

	var flagInSnapshotDefault int64

	_ = cmd.PersistentFlags().Int64(flagInSnapshotName, flagInSnapshotDefault, flagInSnapshotDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropIncompatible(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIncompatibleDescription := `Number of files skipped by the scanner on this constituent because they are incompatible.`

	var flagIncompatibleName string
	if cmdPrefix == "" {
		flagIncompatibleName = "incompatible"
	} else {
		flagIncompatibleName = fmt.Sprintf("%v.incompatible", cmdPrefix)
	}

	var flagIncompatibleDefault int64

	_ = cmd.PersistentFlags().Int64(flagIncompatibleName, flagIncompatibleDefault, flagIncompatibleDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMetadataDescription := `Number of files skipped by the scanner on this constituent because they metadata files.`

	var flagMetadataName string
	if cmdPrefix == "" {
		flagMetadataName = "metadata"
	} else {
		flagMetadataName = fmt.Sprintf("%v.metadata", cmdPrefix)
	}

	var flagMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetadataName, flagMetadataDefault, flagMetadataDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropOnDemandDestination(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOnDemandDestinationDescription := `Number of files skipped by the scanner on this constituent because they are on demand destinations.`

	var flagOnDemandDestinationName string
	if cmdPrefix == "" {
		flagOnDemandDestinationName = "on_demand_destination"
	} else {
		flagOnDemandDestinationName = fmt.Sprintf("%v.on_demand_destination", cmdPrefix)
	}

	var flagOnDemandDestinationDefault int64

	_ = cmd.PersistentFlags().Int64(flagOnDemandDestinationName, flagOnDemandDestinationDefault, flagOnDemandDestinationDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOtherDescription := `Number of files skipped by the scanner on this constituent for all other reasons.`

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var flagOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagOtherName, flagOtherDefault, flagOtherDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropRemoteCache(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagRemoteCacheDescription := `Number of files skipped by the scanner on this constituent because they are remote caches.`

	var flagRemoteCacheName string
	if cmdPrefix == "" {
		flagRemoteCacheName = "remote_cache"
	} else {
		flagRemoteCacheName = fmt.Sprintf("%v.remote_cache", cmdPrefix)
	}

	var flagRemoteCacheDefault int64

	_ = cmd.PersistentFlags().Int64(flagRemoteCacheName, flagRemoteCacheDefault, flagRemoteCacheDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropTooLarge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTooLargeDescription := `Number of files skipped by the scanner on this constituent because they are larger than rebalancing.max_file_size.`

	var flagTooLargeName string
	if cmdPrefix == "" {
		flagTooLargeName = "too_large"
	} else {
		flagTooLargeName = fmt.Sprintf("%v.too_large", cmdPrefix)
	}

	var flagTooLargeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTooLargeName, flagTooLargeDefault, flagTooLargeDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropTooSmall(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTooSmallDescription := `Number of files skipped by the scanner on this constituent because they are smaller than rebalancing.min_file_size.`

	var flagTooSmallName string
	if cmdPrefix == "" {
		flagTooSmallName = "too_small"
	} else {
		flagTooSmallName = fmt.Sprintf("%v.too_small", cmdPrefix)
	}

	var flagTooSmallDefault int64

	_ = cmd.PersistentFlags().Int64(flagTooSmallName, flagTooSmallDefault, flagTooSmallDescription)

	return nil
}

func registerVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropWriteFenced(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWriteFencedDescription := `Number of files skipped by the scanner on this constituent because they are fenced for write operations.`

	var flagWriteFencedName string
	if cmdPrefix == "" {
		flagWriteFencedName = "write_fenced"
	} else {
		flagWriteFencedName = fmt.Sprintf("%v.write_fenced", cmdPrefix)
	}

	var flagWriteFencedDefault int64

	_ = cmd.PersistentFlags().Int64(flagWriteFencedName, flagWriteFencedDefault, flagWriteFencedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EfficiencyBlocksAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropEfficiencyBlocksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EfficiencyBlocksAdded

	err, EfficiencyPercentAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropEfficiencyPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EfficiencyPercentAdded

	err, FastTruncateAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropFastTruncateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FastTruncateAdded

	err, FootprintInvalidAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropFootprintInvalidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FootprintInvalidAdded

	err, InSnapshotAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropInSnapshotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InSnapshotAdded

	err, IncompatibleAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropIncompatibleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IncompatibleAdded

	err, MetadataAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MetadataAdded

	err, OnDemandDestinationAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropOnDemandDestinationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OnDemandDestinationAdded

	err, OtherAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, RemoteCacheAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropRemoteCacheFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RemoteCacheAdded

	err, TooLargeAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropTooLargeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TooLargeAdded

	err, TooSmallAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropTooSmallFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TooSmallAdded

	err, WriteFencedAdded := retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropWriteFencedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteFencedAdded

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropEfficiencyBlocksFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEfficiencyBlocksName := fmt.Sprintf("%v.efficiency_blocks", cmdPrefix)
	if cmd.Flags().Changed(flagEfficiencyBlocksName) {

		var flagEfficiencyBlocksName string
		if cmdPrefix == "" {
			flagEfficiencyBlocksName = "efficiency_blocks"
		} else {
			flagEfficiencyBlocksName = fmt.Sprintf("%v.efficiency_blocks", cmdPrefix)
		}

		flagEfficiencyBlocksValue, err := cmd.Flags().GetInt64(flagEfficiencyBlocksName)
		if err != nil {
			return err, false
		}
		m.EfficiencyBlocks = &flagEfficiencyBlocksValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropEfficiencyPercentFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEfficiencyPercentName := fmt.Sprintf("%v.efficiency_percent", cmdPrefix)
	if cmd.Flags().Changed(flagEfficiencyPercentName) {

		var flagEfficiencyPercentName string
		if cmdPrefix == "" {
			flagEfficiencyPercentName = "efficiency_percent"
		} else {
			flagEfficiencyPercentName = fmt.Sprintf("%v.efficiency_percent", cmdPrefix)
		}

		flagEfficiencyPercentValue, err := cmd.Flags().GetInt64(flagEfficiencyPercentName)
		if err != nil {
			return err, false
		}
		m.EfficiencyPercent = &flagEfficiencyPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropFastTruncateFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFastTruncateName := fmt.Sprintf("%v.fast_truncate", cmdPrefix)
	if cmd.Flags().Changed(flagFastTruncateName) {

		var flagFastTruncateName string
		if cmdPrefix == "" {
			flagFastTruncateName = "fast_truncate"
		} else {
			flagFastTruncateName = fmt.Sprintf("%v.fast_truncate", cmdPrefix)
		}

		flagFastTruncateValue, err := cmd.Flags().GetInt64(flagFastTruncateName)
		if err != nil {
			return err, false
		}
		m.FastTruncate = &flagFastTruncateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropFootprintInvalidFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFootprintInvalidName := fmt.Sprintf("%v.footprint_invalid", cmdPrefix)
	if cmd.Flags().Changed(flagFootprintInvalidName) {

		var flagFootprintInvalidName string
		if cmdPrefix == "" {
			flagFootprintInvalidName = "footprint_invalid"
		} else {
			flagFootprintInvalidName = fmt.Sprintf("%v.footprint_invalid", cmdPrefix)
		}

		flagFootprintInvalidValue, err := cmd.Flags().GetInt64(flagFootprintInvalidName)
		if err != nil {
			return err, false
		}
		m.FootprintInvalid = &flagFootprintInvalidValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropInSnapshotFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagInSnapshotName := fmt.Sprintf("%v.in_snapshot", cmdPrefix)
	if cmd.Flags().Changed(flagInSnapshotName) {

		var flagInSnapshotName string
		if cmdPrefix == "" {
			flagInSnapshotName = "in_snapshot"
		} else {
			flagInSnapshotName = fmt.Sprintf("%v.in_snapshot", cmdPrefix)
		}

		flagInSnapshotValue, err := cmd.Flags().GetInt64(flagInSnapshotName)
		if err != nil {
			return err, false
		}
		m.InSnapshot = &flagInSnapshotValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropIncompatibleFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIncompatibleName := fmt.Sprintf("%v.incompatible", cmdPrefix)
	if cmd.Flags().Changed(flagIncompatibleName) {

		var flagIncompatibleName string
		if cmdPrefix == "" {
			flagIncompatibleName = "incompatible"
		} else {
			flagIncompatibleName = fmt.Sprintf("%v.incompatible", cmdPrefix)
		}

		flagIncompatibleValue, err := cmd.Flags().GetInt64(flagIncompatibleName)
		if err != nil {
			return err, false
		}
		m.Incompatible = &flagIncompatibleValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropMetadataFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMetadataName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(flagMetadataName) {

		var flagMetadataName string
		if cmdPrefix == "" {
			flagMetadataName = "metadata"
		} else {
			flagMetadataName = fmt.Sprintf("%v.metadata", cmdPrefix)
		}

		flagMetadataValue, err := cmd.Flags().GetInt64(flagMetadataName)
		if err != nil {
			return err, false
		}
		m.Metadata = &flagMetadataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropOnDemandDestinationFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOnDemandDestinationName := fmt.Sprintf("%v.on_demand_destination", cmdPrefix)
	if cmd.Flags().Changed(flagOnDemandDestinationName) {

		var flagOnDemandDestinationName string
		if cmdPrefix == "" {
			flagOnDemandDestinationName = "on_demand_destination"
		} else {
			flagOnDemandDestinationName = fmt.Sprintf("%v.on_demand_destination", cmdPrefix)
		}

		flagOnDemandDestinationValue, err := cmd.Flags().GetInt64(flagOnDemandDestinationName)
		if err != nil {
			return err, false
		}
		m.OnDemandDestination = &flagOnDemandDestinationValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropOtherFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {

		var flagOtherName string
		if cmdPrefix == "" {
			flagOtherName = "other"
		} else {
			flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		flagOtherValue, err := cmd.Flags().GetInt64(flagOtherName)
		if err != nil {
			return err, false
		}
		m.Other = &flagOtherValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropRemoteCacheFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRemoteCacheName := fmt.Sprintf("%v.remote_cache", cmdPrefix)
	if cmd.Flags().Changed(flagRemoteCacheName) {

		var flagRemoteCacheName string
		if cmdPrefix == "" {
			flagRemoteCacheName = "remote_cache"
		} else {
			flagRemoteCacheName = fmt.Sprintf("%v.remote_cache", cmdPrefix)
		}

		flagRemoteCacheValue, err := cmd.Flags().GetInt64(flagRemoteCacheName)
		if err != nil {
			return err, false
		}
		m.RemoteCache = &flagRemoteCacheValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropTooLargeFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTooLargeName := fmt.Sprintf("%v.too_large", cmdPrefix)
	if cmd.Flags().Changed(flagTooLargeName) {

		var flagTooLargeName string
		if cmdPrefix == "" {
			flagTooLargeName = "too_large"
		} else {
			flagTooLargeName = fmt.Sprintf("%v.too_large", cmdPrefix)
		}

		flagTooLargeValue, err := cmd.Flags().GetInt64(flagTooLargeName)
		if err != nil {
			return err, false
		}
		m.TooLarge = &flagTooLargeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropTooSmallFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTooSmallName := fmt.Sprintf("%v.too_small", cmdPrefix)
	if cmd.Flags().Changed(flagTooSmallName) {

		var flagTooSmallName string
		if cmdPrefix == "" {
			flagTooSmallName = "too_small"
		} else {
			flagTooSmallName = fmt.Sprintf("%v.too_small", cmdPrefix)
		}

		flagTooSmallValue, err := cmd.Flags().GetInt64(flagTooSmallName)
		if err != nil {
			return err, false
		}
		m.TooSmall = &flagTooSmallValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkippedPropWriteFencedFlags(depth int, m *models.VolumeInlineRebalancingInlineEngineInlineScannerInlineFilesSkipped, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteFencedName := fmt.Sprintf("%v.write_fenced", cmdPrefix)
	if cmd.Flags().Changed(flagWriteFencedName) {

		var flagWriteFencedName string
		if cmdPrefix == "" {
			flagWriteFencedName = "write_fenced"
		} else {
			flagWriteFencedName = fmt.Sprintf("%v.write_fenced", cmdPrefix)
		}

		flagWriteFencedValue, err := cmd.Flags().GetInt64(flagWriteFencedName)
		if err != nil {
			return err, false
		}
		m.WriteFenced = &flagWriteFencedValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineRebalancingInlineLinks

// register flags to command
func registerModelVolumeInlineRebalancingInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineRebalancingInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineRebalancingInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineRebalancingInlineLinksFlags(depth int, m *models.VolumeInlineRebalancingInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineRebalancingInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineRebalancingInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineRebalancingInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineSnaplock

// register flags to command
func registerModelVolumeInlineSnaplockFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineSnaplockPropAppendModeEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnaplockPropAutocommitPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnaplockPropComplianceClockTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnaplockPropExpiryTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnaplockPropIsAuditLog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnaplockPropLitigationCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnaplockPropPrivilegedDelete(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnaplockPropRetention(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnaplockPropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnaplockPropUnspecifiedRetentionFileCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSnaplockPropAppendModeEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAppendModeEnabledDescription := `Specifies if the volume append mode is enabled or disabled. When it is enabled, all the files created with write permissions on the volume are, by default, WORM appendable files. The user can append the data to a WORM appendable file but cannot modify the existing contents of the file nor delete the file until it expires.`

	var flagAppendModeEnabledName string
	if cmdPrefix == "" {
		flagAppendModeEnabledName = "append_mode_enabled"
	} else {
		flagAppendModeEnabledName = fmt.Sprintf("%v.append_mode_enabled", cmdPrefix)
	}

	var flagAppendModeEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagAppendModeEnabledName, flagAppendModeEnabledDefault, flagAppendModeEnabledDescription)

	return nil
}

func registerVolumeInlineSnaplockPropAutocommitPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAutocommitPeriodDescription := `Specifies the autocommit period for SnapLock volume. All files which are not modified for a period greater than the autocommit period of the volume are committed to the WORM state. The autocommit period value represents a duration and must be specified in the ISO-8601 duration format. The autocommit period can be in years, months, days, hours, and minutes. A period specified for years, months, and days is represented in the ISO-8601 format as "P<num>Y", "P<num>M", "P<num>D" respectively, for example "P10Y" represents a duration of 10 years. A duration in hours and minutes is represented by "PT<num>H" and "PT<num>M" respectively. The period string must contain only a single time element that is, either years, months, days, hours, or minutes. A duration which combines different periods is not supported, for example "P1Y10M" is not supported. Apart from the duration specified in the ISO-8601 format, the autocommit field also accepts the string "none".`

	var flagAutocommitPeriodName string
	if cmdPrefix == "" {
		flagAutocommitPeriodName = "autocommit_period"
	} else {
		flagAutocommitPeriodName = fmt.Sprintf("%v.autocommit_period", cmdPrefix)
	}

	var flagAutocommitPeriodDefault string = "none"

	_ = cmd.PersistentFlags().String(flagAutocommitPeriodName, flagAutocommitPeriodDefault, flagAutocommitPeriodDescription)

	return nil
}

func registerVolumeInlineSnaplockPropComplianceClockTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagComplianceClockTimeDescription := `This is the volume compliance clock time which is used to manage the SnapLock objects in the volume.`

	var flagComplianceClockTimeName string
	if cmdPrefix == "" {
		flagComplianceClockTimeName = "compliance_clock_time"
	} else {
		flagComplianceClockTimeName = fmt.Sprintf("%v.compliance_clock_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagComplianceClockTimeName, "", flagComplianceClockTimeDescription)

	return nil
}

func registerVolumeInlineSnaplockPropExpiryTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagExpiryTimeDescription := `Expiry time of the volume. For volumes with an infinite, indefinite or unspecified SnapLock expiry time, "9999-12-31T23:59:59" is used to denote the time.`

	var flagExpiryTimeName string
	if cmdPrefix == "" {
		flagExpiryTimeName = "expiry_time"
	} else {
		flagExpiryTimeName = fmt.Sprintf("%v.expiry_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagExpiryTimeName, "", flagExpiryTimeDescription)

	return nil
}

func registerVolumeInlineSnaplockPropIsAuditLog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsAuditLogDescription := `Indicates if this volume has been configured as SnapLock audit log volume for the SVM .`

	var flagIsAuditLogName string
	if cmdPrefix == "" {
		flagIsAuditLogName = "is_audit_log"
	} else {
		flagIsAuditLogName = fmt.Sprintf("%v.is_audit_log", cmdPrefix)
	}

	var flagIsAuditLogDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsAuditLogName, flagIsAuditLogDefault, flagIsAuditLogDescription)

	return nil
}

func registerVolumeInlineSnaplockPropLitigationCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLitigationCountDescription := `Litigation count indicates the number of active legal-holds on the volume.`

	var flagLitigationCountName string
	if cmdPrefix == "" {
		flagLitigationCountName = "litigation_count"
	} else {
		flagLitigationCountName = fmt.Sprintf("%v.litigation_count", cmdPrefix)
	}

	var flagLitigationCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagLitigationCountName, flagLitigationCountDefault, flagLitigationCountDescription)

	return nil
}

func registerVolumeInlineSnaplockPropPrivilegedDelete(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPrivilegedDeleteDescription := `Enum: ["disabled","enabled","permanently_disabled"]. Specifies the privileged-delete attribute of a SnapLock volume. On a SnapLock Enterprise (SLE) volume, a designated privileged user can selectively delete files irrespective of the retention time of the file. SLE volumes can have privileged delete as disabled, enabled or permanently_disabled and for SnapLock Compliance (SLC) volumes it is always permanently_disabled.`

	var flagPrivilegedDeleteName string
	if cmdPrefix == "" {
		flagPrivilegedDeleteName = "privileged_delete"
	} else {
		flagPrivilegedDeleteName = fmt.Sprintf("%v.privileged_delete", cmdPrefix)
	}

	var flagPrivilegedDeleteDefault string

	_ = cmd.PersistentFlags().String(flagPrivilegedDeleteName, flagPrivilegedDeleteDefault, flagPrivilegedDeleteDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagPrivilegedDeleteName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["disabled","enabled","permanently_disabled"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSnaplockPropRetention(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagRetentionName string
	if cmdPrefix == "" {
		flagRetentionName = "retention"
	} else {
		flagRetentionName = fmt.Sprintf("%v.retention", cmdPrefix)
	}

	if err := registerModelVolumeInlineSnaplockInlineRetentionFlags(depth+1, flagRetentionName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSnaplockPropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTypeDescription := `Enum: ["compliance","enterprise","non_snaplock"]. The SnapLock type of the volume. <br>compliance &dash; A SnapLock Compliance(SLC) volume provides the highest level of WORM protection and an administrator cannot destroy a SLC volume if it contains unexpired WORM files. <br> enterprise &dash; An administrator can delete a SnapLock Enterprise(SLE) volume.<br> non_snaplock &dash; Indicates the volume is non-snaplock.`

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string = "non_snaplock"

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagTypeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["compliance","enterprise","non_snaplock"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSnaplockPropUnspecifiedRetentionFileCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUnspecifiedRetentionFileCountDescription := `Indicates the number of files with an unspecified retention time in the volume.`

	var flagUnspecifiedRetentionFileCountName string
	if cmdPrefix == "" {
		flagUnspecifiedRetentionFileCountName = "unspecified_retention_file_count"
	} else {
		flagUnspecifiedRetentionFileCountName = fmt.Sprintf("%v.unspecified_retention_file_count", cmdPrefix)
	}

	var flagUnspecifiedRetentionFileCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagUnspecifiedRetentionFileCountName, flagUnspecifiedRetentionFileCountDefault, flagUnspecifiedRetentionFileCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineSnaplockFlags(depth int, m *models.VolumeInlineSnaplock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AppendModeEnabledAdded := retrieveVolumeInlineSnaplockPropAppendModeEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AppendModeEnabledAdded

	err, AutocommitPeriodAdded := retrieveVolumeInlineSnaplockPropAutocommitPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AutocommitPeriodAdded

	err, ComplianceClockTimeAdded := retrieveVolumeInlineSnaplockPropComplianceClockTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ComplianceClockTimeAdded

	err, ExpiryTimeAdded := retrieveVolumeInlineSnaplockPropExpiryTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExpiryTimeAdded

	err, IsAuditLogAdded := retrieveVolumeInlineSnaplockPropIsAuditLogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsAuditLogAdded

	err, LitigationCountAdded := retrieveVolumeInlineSnaplockPropLitigationCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LitigationCountAdded

	err, PrivilegedDeleteAdded := retrieveVolumeInlineSnaplockPropPrivilegedDeleteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PrivilegedDeleteAdded

	err, RetentionAdded := retrieveVolumeInlineSnaplockPropRetentionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RetentionAdded

	err, TypeAdded := retrieveVolumeInlineSnaplockPropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	err, UnspecifiedRetentionFileCountAdded := retrieveVolumeInlineSnaplockPropUnspecifiedRetentionFileCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UnspecifiedRetentionFileCountAdded

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockPropAppendModeEnabledFlags(depth int, m *models.VolumeInlineSnaplock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAppendModeEnabledName := fmt.Sprintf("%v.append_mode_enabled", cmdPrefix)
	if cmd.Flags().Changed(flagAppendModeEnabledName) {

		var flagAppendModeEnabledName string
		if cmdPrefix == "" {
			flagAppendModeEnabledName = "append_mode_enabled"
		} else {
			flagAppendModeEnabledName = fmt.Sprintf("%v.append_mode_enabled", cmdPrefix)
		}

		flagAppendModeEnabledValue, err := cmd.Flags().GetBool(flagAppendModeEnabledName)
		if err != nil {
			return err, false
		}
		m.AppendModeEnabled = &flagAppendModeEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockPropAutocommitPeriodFlags(depth int, m *models.VolumeInlineSnaplock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAutocommitPeriodName := fmt.Sprintf("%v.autocommit_period", cmdPrefix)
	if cmd.Flags().Changed(flagAutocommitPeriodName) {

		var flagAutocommitPeriodName string
		if cmdPrefix == "" {
			flagAutocommitPeriodName = "autocommit_period"
		} else {
			flagAutocommitPeriodName = fmt.Sprintf("%v.autocommit_period", cmdPrefix)
		}

		flagAutocommitPeriodValue, err := cmd.Flags().GetString(flagAutocommitPeriodName)
		if err != nil {
			return err, false
		}
		m.AutocommitPeriod = &flagAutocommitPeriodValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockPropComplianceClockTimeFlags(depth int, m *models.VolumeInlineSnaplock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagComplianceClockTimeName := fmt.Sprintf("%v.compliance_clock_time", cmdPrefix)
	if cmd.Flags().Changed(flagComplianceClockTimeName) {

		var flagComplianceClockTimeName string
		if cmdPrefix == "" {
			flagComplianceClockTimeName = "compliance_clock_time"
		} else {
			flagComplianceClockTimeName = fmt.Sprintf("%v.compliance_clock_time", cmdPrefix)
		}

		flagComplianceClockTimeValueStr, err := cmd.Flags().GetString(flagComplianceClockTimeName)
		if err != nil {
			return err, false
		}
		var flagComplianceClockTimeValue strfmt.DateTime
		if err := flagComplianceClockTimeValue.UnmarshalText([]byte(flagComplianceClockTimeValueStr)); err != nil {
			return err, false
		}
		m.ComplianceClockTime = &flagComplianceClockTimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockPropExpiryTimeFlags(depth int, m *models.VolumeInlineSnaplock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExpiryTimeName := fmt.Sprintf("%v.expiry_time", cmdPrefix)
	if cmd.Flags().Changed(flagExpiryTimeName) {

		var flagExpiryTimeName string
		if cmdPrefix == "" {
			flagExpiryTimeName = "expiry_time"
		} else {
			flagExpiryTimeName = fmt.Sprintf("%v.expiry_time", cmdPrefix)
		}

		flagExpiryTimeValueStr, err := cmd.Flags().GetString(flagExpiryTimeName)
		if err != nil {
			return err, false
		}
		var flagExpiryTimeValue strfmt.DateTime
		if err := flagExpiryTimeValue.UnmarshalText([]byte(flagExpiryTimeValueStr)); err != nil {
			return err, false
		}
		m.ExpiryTime = &flagExpiryTimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockPropIsAuditLogFlags(depth int, m *models.VolumeInlineSnaplock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsAuditLogName := fmt.Sprintf("%v.is_audit_log", cmdPrefix)
	if cmd.Flags().Changed(flagIsAuditLogName) {

		var flagIsAuditLogName string
		if cmdPrefix == "" {
			flagIsAuditLogName = "is_audit_log"
		} else {
			flagIsAuditLogName = fmt.Sprintf("%v.is_audit_log", cmdPrefix)
		}

		flagIsAuditLogValue, err := cmd.Flags().GetBool(flagIsAuditLogName)
		if err != nil {
			return err, false
		}
		m.IsAuditLog = &flagIsAuditLogValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockPropLitigationCountFlags(depth int, m *models.VolumeInlineSnaplock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLitigationCountName := fmt.Sprintf("%v.litigation_count", cmdPrefix)
	if cmd.Flags().Changed(flagLitigationCountName) {

		var flagLitigationCountName string
		if cmdPrefix == "" {
			flagLitigationCountName = "litigation_count"
		} else {
			flagLitigationCountName = fmt.Sprintf("%v.litigation_count", cmdPrefix)
		}

		flagLitigationCountValue, err := cmd.Flags().GetInt64(flagLitigationCountName)
		if err != nil {
			return err, false
		}
		m.LitigationCount = &flagLitigationCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockPropPrivilegedDeleteFlags(depth int, m *models.VolumeInlineSnaplock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPrivilegedDeleteName := fmt.Sprintf("%v.privileged_delete", cmdPrefix)
	if cmd.Flags().Changed(flagPrivilegedDeleteName) {

		var flagPrivilegedDeleteName string
		if cmdPrefix == "" {
			flagPrivilegedDeleteName = "privileged_delete"
		} else {
			flagPrivilegedDeleteName = fmt.Sprintf("%v.privileged_delete", cmdPrefix)
		}

		flagPrivilegedDeleteValue, err := cmd.Flags().GetString(flagPrivilegedDeleteName)
		if err != nil {
			return err, false
		}
		m.PrivilegedDelete = &flagPrivilegedDeleteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockPropRetentionFlags(depth int, m *models.VolumeInlineSnaplock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRetentionName := fmt.Sprintf("%v.retention", cmdPrefix)
	if cmd.Flags().Changed(flagRetentionName) {
		// info: complex object retention VolumeInlineSnaplockInlineRetention is retrieved outside this Changed() block
	}
	flagRetentionValue := m.Retention
	if swag.IsZero(flagRetentionValue) {
		flagRetentionValue = &models.VolumeInlineSnaplockInlineRetention{}
	}

	err, RetentionAdded := retrieveModelVolumeInlineSnaplockInlineRetentionFlags(depth+1, flagRetentionValue, flagRetentionName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RetentionAdded
	if RetentionAdded {
		m.Retention = flagRetentionValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockPropTypeFlags(depth int, m *models.VolumeInlineSnaplock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = &flagTypeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockPropUnspecifiedRetentionFileCountFlags(depth int, m *models.VolumeInlineSnaplock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUnspecifiedRetentionFileCountName := fmt.Sprintf("%v.unspecified_retention_file_count", cmdPrefix)
	if cmd.Flags().Changed(flagUnspecifiedRetentionFileCountName) {

		var flagUnspecifiedRetentionFileCountName string
		if cmdPrefix == "" {
			flagUnspecifiedRetentionFileCountName = "unspecified_retention_file_count"
		} else {
			flagUnspecifiedRetentionFileCountName = fmt.Sprintf("%v.unspecified_retention_file_count", cmdPrefix)
		}

		flagUnspecifiedRetentionFileCountValue, err := cmd.Flags().GetInt64(flagUnspecifiedRetentionFileCountName)
		if err != nil {
			return err, false
		}
		m.UnspecifiedRetentionFileCount = &flagUnspecifiedRetentionFileCountValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineSnaplockInlineRetention

// register flags to command
func registerModelVolumeInlineSnaplockInlineRetentionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineSnaplockInlineRetentionPropDefault(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnaplockInlineRetentionPropMaximum(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnaplockInlineRetentionPropMinimum(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSnaplockInlineRetentionPropDefault(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDefaultDescription := `Specifies the default retention period that is applied to files while committing them to the WORM state without an associated retention period. The retention value represents a duration and must be specified in the ISO-8601 duration format. The retention period can be in years, months, days, hours, and minutes. A duration specified for years, months, and days is represented in the ISO-8601 format as "P<num>Y", "P<num>M", "P<num>D" respectively, for example "P10Y" represents a duration of 10 years. A duration in hours and minutes is represented by "PT<num>H" and "PT<num>M" respectively. The retention string must contain only a single time element that is, either years, months, days, hours, or minutes. A duration which combines different periods is not supported, for example "P1Y10M" is not supported. Apart from the duration specified in the ISO-8601 format, the duration field also accepts the string "infinite" to set an infinite retention period and the string "unspecified" to set an unspecified retention period.`

	var flagDefaultName string
	if cmdPrefix == "" {
		flagDefaultName = "default"
	} else {
		flagDefaultName = fmt.Sprintf("%v.default", cmdPrefix)
	}

	var flagDefaultDefault string

	_ = cmd.PersistentFlags().String(flagDefaultName, flagDefaultDefault, flagDefaultDescription)

	return nil
}

func registerVolumeInlineSnaplockInlineRetentionPropMaximum(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMaximumDescription := `Specifies the maximum allowed retention period for files committed to the WORM state on the volume. The retention value represents a duration and must be specified in the ISO-8601 duration format. The retention period can be in years, months, days, hours, and minutes. A duration specified for years, months, and days is represented in the ISO-8601 format as "P<num>Y", "P<num>M", "P<num>D" respectively, for example "P10Y" represents a duration of 10 years. A duration in hours and minutes is represented by "PT<num>H" and "PT<num>M" respectively. The retention string must contain only a single time element that is, either years, months, days, hours, or minutes. A duration which combines different periods is not supported, for example "P1Y10M" is not supported. Apart from the duration specified in the ISO-8601 format, the duration field also accepts the string "infinite" to set an infinite retention period.`

	var flagMaximumName string
	if cmdPrefix == "" {
		flagMaximumName = "maximum"
	} else {
		flagMaximumName = fmt.Sprintf("%v.maximum", cmdPrefix)
	}

	var flagMaximumDefault string = "P30Y"

	_ = cmd.PersistentFlags().String(flagMaximumName, flagMaximumDefault, flagMaximumDescription)

	return nil
}

func registerVolumeInlineSnaplockInlineRetentionPropMinimum(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMinimumDescription := `Specifies the minimum allowed retention period for files committed to the WORM state on the volume. The retention value represents a duration and must be specified in the ISO-8601 duration format. The retention period can be in years, months, days, hours, and minutes. A duration specified for years, month,s and days is represented in the ISO-8601 format as "P<num>Y", "P<num>M", "P<num>D" respectively, for example "P10Y" represents a duration of 10 years. A duration in hours and minutes is represented by "PT<num>H" and "PT<num>M" respectively. The retention string must contain only a single time element that is, either years, months, days, hours, or minutes. A duration which combines different periods is not supported, for example "P1Y10M" is not supported. Apart from the duration specified in the ISO-8601 format, the duration field also accepts the string "infinite" to set an infinite retention period.`

	var flagMinimumName string
	if cmdPrefix == "" {
		flagMinimumName = "minimum"
	} else {
		flagMinimumName = fmt.Sprintf("%v.minimum", cmdPrefix)
	}

	var flagMinimumDefault string = "P0Y"

	_ = cmd.PersistentFlags().String(flagMinimumName, flagMinimumDefault, flagMinimumDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineSnaplockInlineRetentionFlags(depth int, m *models.VolumeInlineSnaplockInlineRetention, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DefaultAdded := retrieveVolumeInlineSnaplockInlineRetentionPropDefaultFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DefaultAdded

	err, MaximumAdded := retrieveVolumeInlineSnaplockInlineRetentionPropMaximumFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaximumAdded

	err, MinimumAdded := retrieveVolumeInlineSnaplockInlineRetentionPropMinimumFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MinimumAdded

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockInlineRetentionPropDefaultFlags(depth int, m *models.VolumeInlineSnaplockInlineRetention, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDefaultName := fmt.Sprintf("%v.default", cmdPrefix)
	if cmd.Flags().Changed(flagDefaultName) {

		var flagDefaultName string
		if cmdPrefix == "" {
			flagDefaultName = "default"
		} else {
			flagDefaultName = fmt.Sprintf("%v.default", cmdPrefix)
		}

		flagDefaultValue, err := cmd.Flags().GetString(flagDefaultName)
		if err != nil {
			return err, false
		}
		m.Default = &flagDefaultValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockInlineRetentionPropMaximumFlags(depth int, m *models.VolumeInlineSnaplockInlineRetention, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMaximumName := fmt.Sprintf("%v.maximum", cmdPrefix)
	if cmd.Flags().Changed(flagMaximumName) {

		var flagMaximumName string
		if cmdPrefix == "" {
			flagMaximumName = "maximum"
		} else {
			flagMaximumName = fmt.Sprintf("%v.maximum", cmdPrefix)
		}

		flagMaximumValue, err := cmd.Flags().GetString(flagMaximumName)
		if err != nil {
			return err, false
		}
		m.Maximum = &flagMaximumValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnaplockInlineRetentionPropMinimumFlags(depth int, m *models.VolumeInlineSnaplockInlineRetention, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMinimumName := fmt.Sprintf("%v.minimum", cmdPrefix)
	if cmd.Flags().Changed(flagMinimumName) {

		var flagMinimumName string
		if cmdPrefix == "" {
			flagMinimumName = "minimum"
		} else {
			flagMinimumName = fmt.Sprintf("%v.minimum", cmdPrefix)
		}

		flagMinimumValue, err := cmd.Flags().GetString(flagMinimumName)
		if err != nil {
			return err, false
		}
		m.Minimum = &flagMinimumValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineSnapmirror

// register flags to command
func registerModelVolumeInlineSnapmirrorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineSnapmirrorPropDestinations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnapmirrorPropIsProtected(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSnapmirrorPropDestinations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagDestinationsName string
	if cmdPrefix == "" {
		flagDestinationsName = "destinations"
	} else {
		flagDestinationsName = fmt.Sprintf("%v.destinations", cmdPrefix)
	}

	if err := registerModelVolumeInlineSnapmirrorInlineDestinationsFlags(depth+1, flagDestinationsName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSnapmirrorPropIsProtected(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsProtectedDescription := `Specifies whether a volume is a SnapMirror source volume, using SnapMirror to protect its data.`

	var flagIsProtectedName string
	if cmdPrefix == "" {
		flagIsProtectedName = "is_protected"
	} else {
		flagIsProtectedName = fmt.Sprintf("%v.is_protected", cmdPrefix)
	}

	var flagIsProtectedDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsProtectedName, flagIsProtectedDefault, flagIsProtectedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineSnapmirrorFlags(depth int, m *models.VolumeInlineSnapmirror, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DestinationsAdded := retrieveVolumeInlineSnapmirrorPropDestinationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DestinationsAdded

	err, IsProtectedAdded := retrieveVolumeInlineSnapmirrorPropIsProtectedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsProtectedAdded

	return nil, retAdded
}

func retrieveVolumeInlineSnapmirrorPropDestinationsFlags(depth int, m *models.VolumeInlineSnapmirror, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDestinationsName := fmt.Sprintf("%v.destinations", cmdPrefix)
	if cmd.Flags().Changed(flagDestinationsName) {
		// info: complex object destinations VolumeInlineSnapmirrorInlineDestinations is retrieved outside this Changed() block
	}
	flagDestinationsValue := m.Destinations
	if swag.IsZero(flagDestinationsValue) {
		flagDestinationsValue = &models.VolumeInlineSnapmirrorInlineDestinations{}
	}

	err, DestinationsAdded := retrieveModelVolumeInlineSnapmirrorInlineDestinationsFlags(depth+1, flagDestinationsValue, flagDestinationsName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DestinationsAdded
	if DestinationsAdded {
		m.Destinations = flagDestinationsValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnapmirrorPropIsProtectedFlags(depth int, m *models.VolumeInlineSnapmirror, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsProtectedName := fmt.Sprintf("%v.is_protected", cmdPrefix)
	if cmd.Flags().Changed(flagIsProtectedName) {

		var flagIsProtectedName string
		if cmdPrefix == "" {
			flagIsProtectedName = "is_protected"
		} else {
			flagIsProtectedName = fmt.Sprintf("%v.is_protected", cmdPrefix)
		}

		flagIsProtectedValue, err := cmd.Flags().GetBool(flagIsProtectedName)
		if err != nil {
			return err, false
		}
		m.IsProtected = &flagIsProtectedValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineSnapmirrorInlineDestinations

// register flags to command
func registerModelVolumeInlineSnapmirrorInlineDestinationsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineSnapmirrorInlineDestinationsPropIsCloud(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnapmirrorInlineDestinationsPropIsOntap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSnapmirrorInlineDestinationsPropIsCloud(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsCloudDescription := `Specifies whether a volume is a SnapMirror source volume, using SnapMirror to protect its data to a cloud destination.`

	var flagIsCloudName string
	if cmdPrefix == "" {
		flagIsCloudName = "is_cloud"
	} else {
		flagIsCloudName = fmt.Sprintf("%v.is_cloud", cmdPrefix)
	}

	var flagIsCloudDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsCloudName, flagIsCloudDefault, flagIsCloudDescription)

	return nil
}

func registerVolumeInlineSnapmirrorInlineDestinationsPropIsOntap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsOntapDescription := `Specifies whether a volume is a SnapMirror source volume, using SnapMirror to protect its data to an ONTAP destination.`

	var flagIsOntapName string
	if cmdPrefix == "" {
		flagIsOntapName = "is_ontap"
	} else {
		flagIsOntapName = fmt.Sprintf("%v.is_ontap", cmdPrefix)
	}

	var flagIsOntapDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsOntapName, flagIsOntapDefault, flagIsOntapDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineSnapmirrorInlineDestinationsFlags(depth int, m *models.VolumeInlineSnapmirrorInlineDestinations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, IsCloudAdded := retrieveVolumeInlineSnapmirrorInlineDestinationsPropIsCloudFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsCloudAdded

	err, IsOntapAdded := retrieveVolumeInlineSnapmirrorInlineDestinationsPropIsOntapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsOntapAdded

	return nil, retAdded
}

func retrieveVolumeInlineSnapmirrorInlineDestinationsPropIsCloudFlags(depth int, m *models.VolumeInlineSnapmirrorInlineDestinations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsCloudName := fmt.Sprintf("%v.is_cloud", cmdPrefix)
	if cmd.Flags().Changed(flagIsCloudName) {

		var flagIsCloudName string
		if cmdPrefix == "" {
			flagIsCloudName = "is_cloud"
		} else {
			flagIsCloudName = fmt.Sprintf("%v.is_cloud", cmdPrefix)
		}

		flagIsCloudValue, err := cmd.Flags().GetBool(flagIsCloudName)
		if err != nil {
			return err, false
		}
		m.IsCloud = &flagIsCloudValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnapmirrorInlineDestinationsPropIsOntapFlags(depth int, m *models.VolumeInlineSnapmirrorInlineDestinations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsOntapName := fmt.Sprintf("%v.is_ontap", cmdPrefix)
	if cmd.Flags().Changed(flagIsOntapName) {

		var flagIsOntapName string
		if cmdPrefix == "" {
			flagIsOntapName = "is_ontap"
		} else {
			flagIsOntapName = fmt.Sprintf("%v.is_ontap", cmdPrefix)
		}

		flagIsOntapValue, err := cmd.Flags().GetBool(flagIsOntapName)
		if err != nil {
			return err, false
		}
		m.IsOntap = &flagIsOntapValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineSnapshotPolicy

// register flags to command
func registerModelVolumeInlineSnapshotPolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineSnapshotPolicyPropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnapshotPolicyPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSnapshotPolicyPropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSnapshotPolicyPropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineSnapshotPolicyInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSnapshotPolicyPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineSnapshotPolicyPropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := ``

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineSnapshotPolicyFlags(depth int, m *models.VolumeInlineSnapshotPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeInlineSnapshotPolicyPropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, NameAdded := retrieveVolumeInlineSnapshotPolicyPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineSnapshotPolicyPropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineSnapshotPolicyPropLinksFlags(depth int, m *models.VolumeInlineSnapshotPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineSnapshotPolicyInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineSnapshotPolicyInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineSnapshotPolicyInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnapshotPolicyPropNameFlags(depth int, m *models.VolumeInlineSnapshotPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSnapshotPolicyPropUUIDFlags(depth int, m *models.VolumeInlineSnapshotPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineSnapshotPolicyInlineLinks

// register flags to command
func registerModelVolumeInlineSnapshotPolicyInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineSnapshotPolicyInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSnapshotPolicyInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineSnapshotPolicyInlineLinksFlags(depth int, m *models.VolumeInlineSnapshotPolicyInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineSnapshotPolicyInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineSnapshotPolicyInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineSnapshotPolicyInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineSpace

// register flags to command
func registerModelVolumeInlineSpaceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineSpacePropAfsTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropAutoAdaptiveCompressionFootprintDataReduction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropAvailablePercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropBlockStorageInactiveUserData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropBlockStorageInactiveUserDataPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropCapacityTierFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropCapacityTierFootprintDataReduction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropCompactionFootprintDataReduction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropCrossVolumeDedupeMetafilesFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropCrossVolumeDedupeMetafilesTemporaryFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropDedupeMetafilesFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropDedupeMetafilesTemporaryFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropDelayedFreeFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropEffectiveTotalFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropExpectedAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropFileOperationMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropFilesystemSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropFilesystemSizeFixed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropFractionalReserve(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropFullThresholdPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropIsUsedStale(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropLargeSizeEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropLocalTierFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropLogicalSpace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropMaxSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropNearlyFullThresholdPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropOverProvisioned(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropOverwriteReserve(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropOverwriteReserveUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropPercentUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropPerformanceTierFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropPhysicalUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropPhysicalUsedPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropSizeAvailableForSnapshots(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropSnapmirrorDestinationFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropSnapshot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropSnapshotReserveUnusable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropSnapshotSpill(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropTotalFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropTotalMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropTotalMetadataFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropUsedByAfs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropUserData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpacePropVolumeGuaranteeFootprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSpacePropAfsTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAfsTotalDescription := `Total size of AFS, excluding snap-reserve, in bytes.`

	var flagAfsTotalName string
	if cmdPrefix == "" {
		flagAfsTotalName = "afs_total"
	} else {
		flagAfsTotalName = fmt.Sprintf("%v.afs_total", cmdPrefix)
	}

	var flagAfsTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagAfsTotalName, flagAfsTotalDefault, flagAfsTotalDescription)

	return nil
}

func registerVolumeInlineSpacePropAutoAdaptiveCompressionFootprintDataReduction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAutoAdaptiveCompressionFootprintDataReductionDescription := `Savings achieved due to Auto Adaptive Compression, in bytes.`

	var flagAutoAdaptiveCompressionFootprintDataReductionName string
	if cmdPrefix == "" {
		flagAutoAdaptiveCompressionFootprintDataReductionName = "auto_adaptive_compression_footprint_data_reduction"
	} else {
		flagAutoAdaptiveCompressionFootprintDataReductionName = fmt.Sprintf("%v.auto_adaptive_compression_footprint_data_reduction", cmdPrefix)
	}

	var flagAutoAdaptiveCompressionFootprintDataReductionDefault int64

	_ = cmd.PersistentFlags().Int64(flagAutoAdaptiveCompressionFootprintDataReductionName, flagAutoAdaptiveCompressionFootprintDataReductionDefault, flagAutoAdaptiveCompressionFootprintDataReductionDescription)

	return nil
}

func registerVolumeInlineSpacePropAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAvailableDescription := `The available space, in bytes.`

	var flagAvailableName string
	if cmdPrefix == "" {
		flagAvailableName = "available"
	} else {
		flagAvailableName = fmt.Sprintf("%v.available", cmdPrefix)
	}

	var flagAvailableDefault int64

	_ = cmd.PersistentFlags().Int64(flagAvailableName, flagAvailableDefault, flagAvailableDescription)

	return nil
}

func registerVolumeInlineSpacePropAvailablePercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAvailablePercentDescription := `The space available, as a percent.`

	var flagAvailablePercentName string
	if cmdPrefix == "" {
		flagAvailablePercentName = "available_percent"
	} else {
		flagAvailablePercentName = fmt.Sprintf("%v.available_percent", cmdPrefix)
	}

	var flagAvailablePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagAvailablePercentName, flagAvailablePercentDefault, flagAvailablePercentDescription)

	return nil
}

func registerVolumeInlineSpacePropBlockStorageInactiveUserData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagBlockStorageInactiveUserDataDescription := `The size that is physically used in the block storage of the volume and has a cold temperature. In bytes. This parameter is only supported if the volume is in an aggregate that is either attached to a cloud store or could be attached to a cloud store.`

	var flagBlockStorageInactiveUserDataName string
	if cmdPrefix == "" {
		flagBlockStorageInactiveUserDataName = "block_storage_inactive_user_data"
	} else {
		flagBlockStorageInactiveUserDataName = fmt.Sprintf("%v.block_storage_inactive_user_data", cmdPrefix)
	}

	var flagBlockStorageInactiveUserDataDefault int64

	_ = cmd.PersistentFlags().Int64(flagBlockStorageInactiveUserDataName, flagBlockStorageInactiveUserDataDefault, flagBlockStorageInactiveUserDataDescription)

	return nil
}

func registerVolumeInlineSpacePropBlockStorageInactiveUserDataPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagBlockStorageInactiveUserDataPercentDescription := `Percentage of size that is physically used in the performance tier of the volume.`

	var flagBlockStorageInactiveUserDataPercentName string
	if cmdPrefix == "" {
		flagBlockStorageInactiveUserDataPercentName = "block_storage_inactive_user_data_percent"
	} else {
		flagBlockStorageInactiveUserDataPercentName = fmt.Sprintf("%v.block_storage_inactive_user_data_percent", cmdPrefix)
	}

	var flagBlockStorageInactiveUserDataPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagBlockStorageInactiveUserDataPercentName, flagBlockStorageInactiveUserDataPercentDefault, flagBlockStorageInactiveUserDataPercentDescription)

	return nil
}

func registerVolumeInlineSpacePropCapacityTierFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCapacityTierFootprintDescription := `Space used by capacity tier for this volume in the FabricPool aggregate, in bytes.`

	var flagCapacityTierFootprintName string
	if cmdPrefix == "" {
		flagCapacityTierFootprintName = "capacity_tier_footprint"
	} else {
		flagCapacityTierFootprintName = fmt.Sprintf("%v.capacity_tier_footprint", cmdPrefix)
	}

	var flagCapacityTierFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagCapacityTierFootprintName, flagCapacityTierFootprintDefault, flagCapacityTierFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropCapacityTierFootprintDataReduction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCapacityTierFootprintDataReductionDescription := `Savings achieved in the space used by the capacity tier for this volume in the FabricPool aggregate, in bytes.`

	var flagCapacityTierFootprintDataReductionName string
	if cmdPrefix == "" {
		flagCapacityTierFootprintDataReductionName = "capacity_tier_footprint_data_reduction"
	} else {
		flagCapacityTierFootprintDataReductionName = fmt.Sprintf("%v.capacity_tier_footprint_data_reduction", cmdPrefix)
	}

	var flagCapacityTierFootprintDataReductionDefault int64

	_ = cmd.PersistentFlags().Int64(flagCapacityTierFootprintDataReductionName, flagCapacityTierFootprintDataReductionDefault, flagCapacityTierFootprintDataReductionDescription)

	return nil
}

func registerVolumeInlineSpacePropCompactionFootprintDataReduction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCompactionFootprintDataReductionDescription := `Savings achieved due to Data Compaction, in bytes.`

	var flagCompactionFootprintDataReductionName string
	if cmdPrefix == "" {
		flagCompactionFootprintDataReductionName = "compaction_footprint_data_reduction"
	} else {
		flagCompactionFootprintDataReductionName = fmt.Sprintf("%v.compaction_footprint_data_reduction", cmdPrefix)
	}

	var flagCompactionFootprintDataReductionDefault int64

	_ = cmd.PersistentFlags().Int64(flagCompactionFootprintDataReductionName, flagCompactionFootprintDataReductionDefault, flagCompactionFootprintDataReductionDescription)

	return nil
}

func registerVolumeInlineSpacePropCrossVolumeDedupeMetafilesFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCrossVolumeDedupeMetafilesFootprintDescription := `Cross volume deduplication metadata footprint, in bytes.`

	var flagCrossVolumeDedupeMetafilesFootprintName string
	if cmdPrefix == "" {
		flagCrossVolumeDedupeMetafilesFootprintName = "cross_volume_dedupe_metafiles_footprint"
	} else {
		flagCrossVolumeDedupeMetafilesFootprintName = fmt.Sprintf("%v.cross_volume_dedupe_metafiles_footprint", cmdPrefix)
	}

	var flagCrossVolumeDedupeMetafilesFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagCrossVolumeDedupeMetafilesFootprintName, flagCrossVolumeDedupeMetafilesFootprintDefault, flagCrossVolumeDedupeMetafilesFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropCrossVolumeDedupeMetafilesTemporaryFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCrossVolumeDedupeMetafilesTemporaryFootprintDescription := `Cross volume temporary deduplication metadata footprint, in bytes.`

	var flagCrossVolumeDedupeMetafilesTemporaryFootprintName string
	if cmdPrefix == "" {
		flagCrossVolumeDedupeMetafilesTemporaryFootprintName = "cross_volume_dedupe_metafiles_temporary_footprint"
	} else {
		flagCrossVolumeDedupeMetafilesTemporaryFootprintName = fmt.Sprintf("%v.cross_volume_dedupe_metafiles_temporary_footprint", cmdPrefix)
	}

	var flagCrossVolumeDedupeMetafilesTemporaryFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagCrossVolumeDedupeMetafilesTemporaryFootprintName, flagCrossVolumeDedupeMetafilesTemporaryFootprintDefault, flagCrossVolumeDedupeMetafilesTemporaryFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropDedupeMetafilesFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDedupeMetafilesFootprintDescription := `Deduplication metadata footprint, in bytes.`

	var flagDedupeMetafilesFootprintName string
	if cmdPrefix == "" {
		flagDedupeMetafilesFootprintName = "dedupe_metafiles_footprint"
	} else {
		flagDedupeMetafilesFootprintName = fmt.Sprintf("%v.dedupe_metafiles_footprint", cmdPrefix)
	}

	var flagDedupeMetafilesFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagDedupeMetafilesFootprintName, flagDedupeMetafilesFootprintDefault, flagDedupeMetafilesFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropDedupeMetafilesTemporaryFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDedupeMetafilesTemporaryFootprintDescription := `Temporary deduplication metadata footprint, in bytes.`

	var flagDedupeMetafilesTemporaryFootprintName string
	if cmdPrefix == "" {
		flagDedupeMetafilesTemporaryFootprintName = "dedupe_metafiles_temporary_footprint"
	} else {
		flagDedupeMetafilesTemporaryFootprintName = fmt.Sprintf("%v.dedupe_metafiles_temporary_footprint", cmdPrefix)
	}

	var flagDedupeMetafilesTemporaryFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagDedupeMetafilesTemporaryFootprintName, flagDedupeMetafilesTemporaryFootprintDefault, flagDedupeMetafilesTemporaryFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropDelayedFreeFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDelayedFreeFootprintDescription := `Delayed free blocks footprint, in bytes.`

	var flagDelayedFreeFootprintName string
	if cmdPrefix == "" {
		flagDelayedFreeFootprintName = "delayed_free_footprint"
	} else {
		flagDelayedFreeFootprintName = fmt.Sprintf("%v.delayed_free_footprint", cmdPrefix)
	}

	var flagDelayedFreeFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagDelayedFreeFootprintName, flagDelayedFreeFootprintDefault, flagDelayedFreeFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropEffectiveTotalFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEffectiveTotalFootprintDescription := `Volume footprint after efficiency savings, in bytes. effective total footprint represents total footprint after deducting auto adaptive compression and compaction savings. effective-footprint includes aggregate metadata used by volume.`

	var flagEffectiveTotalFootprintName string
	if cmdPrefix == "" {
		flagEffectiveTotalFootprintName = "effective_total_footprint"
	} else {
		flagEffectiveTotalFootprintName = fmt.Sprintf("%v.effective_total_footprint", cmdPrefix)
	}

	var flagEffectiveTotalFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagEffectiveTotalFootprintName, flagEffectiveTotalFootprintDefault, flagEffectiveTotalFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropExpectedAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagExpectedAvailableDescription := `Size that should be available for the volume, irrespective of available size in the aggregate, in bytes.`

	var flagExpectedAvailableName string
	if cmdPrefix == "" {
		flagExpectedAvailableName = "expected_available"
	} else {
		flagExpectedAvailableName = fmt.Sprintf("%v.expected_available", cmdPrefix)
	}

	var flagExpectedAvailableDefault int64

	_ = cmd.PersistentFlags().Int64(flagExpectedAvailableName, flagExpectedAvailableDefault, flagExpectedAvailableDescription)

	return nil
}

func registerVolumeInlineSpacePropFileOperationMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileOperationMetadataDescription := `File operation metadata footprint, in bytes.`

	var flagFileOperationMetadataName string
	if cmdPrefix == "" {
		flagFileOperationMetadataName = "file_operation_metadata"
	} else {
		flagFileOperationMetadataName = fmt.Sprintf("%v.file_operation_metadata", cmdPrefix)
	}

	var flagFileOperationMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagFileOperationMetadataName, flagFileOperationMetadataDefault, flagFileOperationMetadataDescription)

	return nil
}

func registerVolumeInlineSpacePropFilesystemSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFilesystemSizeDescription := `Total usable size of the volume, in bytes.`

	var flagFilesystemSizeName string
	if cmdPrefix == "" {
		flagFilesystemSizeName = "filesystem_size"
	} else {
		flagFilesystemSizeName = fmt.Sprintf("%v.filesystem_size", cmdPrefix)
	}

	var flagFilesystemSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagFilesystemSizeName, flagFilesystemSizeDefault, flagFilesystemSizeDescription)

	return nil
}

func registerVolumeInlineSpacePropFilesystemSizeFixed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFilesystemSizeFixedDescription := `Specifies whether the file system is to remain of the same size when set to true or to grow when set to false. This option is automatically set to true when a volume becomes SnapMirrored.`

	var flagFilesystemSizeFixedName string
	if cmdPrefix == "" {
		flagFilesystemSizeFixedName = "filesystem_size_fixed"
	} else {
		flagFilesystemSizeFixedName = fmt.Sprintf("%v.filesystem_size_fixed", cmdPrefix)
	}

	var flagFilesystemSizeFixedDefault bool

	_ = cmd.PersistentFlags().Bool(flagFilesystemSizeFixedName, flagFilesystemSizeFixedDefault, flagFilesystemSizeFixedDescription)

	return nil
}

func registerVolumeInlineSpacePropFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFootprintDescription := `Data used for this volume in the aggregate, in bytes.`

	var flagFootprintName string
	if cmdPrefix == "" {
		flagFootprintName = "footprint"
	} else {
		flagFootprintName = fmt.Sprintf("%v.footprint", cmdPrefix)
	}

	var flagFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagFootprintName, flagFootprintDefault, flagFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropFractionalReserve(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFractionalReserveDescription := `Used to change the amount of space reserved for overwrites of reserved objects in a volume.`

	var flagFractionalReserveName string
	if cmdPrefix == "" {
		flagFractionalReserveName = "fractional_reserve"
	} else {
		flagFractionalReserveName = fmt.Sprintf("%v.fractional_reserve", cmdPrefix)
	}

	var flagFractionalReserveDefault int64

	_ = cmd.PersistentFlags().Int64(flagFractionalReserveName, flagFractionalReserveDefault, flagFractionalReserveDescription)

	return nil
}

func registerVolumeInlineSpacePropFullThresholdPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFullThresholdPercentDescription := `Volume full threshold percentage at which EMS warnings can be sent.`

	var flagFullThresholdPercentName string
	if cmdPrefix == "" {
		flagFullThresholdPercentName = "full_threshold_percent"
	} else {
		flagFullThresholdPercentName = fmt.Sprintf("%v.full_threshold_percent", cmdPrefix)
	}

	var flagFullThresholdPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagFullThresholdPercentName, flagFullThresholdPercentDefault, flagFullThresholdPercentDescription)

	return nil
}

func registerVolumeInlineSpacePropIsUsedStale(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsUsedStaleDescription := `Specifies if the virtual space used is stale.`

	var flagIsUsedStaleName string
	if cmdPrefix == "" {
		flagIsUsedStaleName = "is_used_stale"
	} else {
		flagIsUsedStaleName = fmt.Sprintf("%v.is_used_stale", cmdPrefix)
	}

	var flagIsUsedStaleDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsUsedStaleName, flagIsUsedStaleDefault, flagIsUsedStaleDescription)

	return nil
}

func registerVolumeInlineSpacePropLargeSizeEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLargeSizeEnabledDescription := `Indicates if the support for large FlexVol volumes and large files is enabled on this volume. When configured to true, FlexVol volume size can reach up to 300TB and single file size can reach 128TB.`

	var flagLargeSizeEnabledName string
	if cmdPrefix == "" {
		flagLargeSizeEnabledName = "large_size_enabled"
	} else {
		flagLargeSizeEnabledName = fmt.Sprintf("%v.large_size_enabled", cmdPrefix)
	}

	var flagLargeSizeEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagLargeSizeEnabledName, flagLargeSizeEnabledDefault, flagLargeSizeEnabledDescription)

	return nil
}

func registerVolumeInlineSpacePropLocalTierFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLocalTierFootprintDescription := `Space used by the local tier for this volume in the aggregate, in bytes.`

	var flagLocalTierFootprintName string
	if cmdPrefix == "" {
		flagLocalTierFootprintName = "local_tier_footprint"
	} else {
		flagLocalTierFootprintName = fmt.Sprintf("%v.local_tier_footprint", cmdPrefix)
	}

	var flagLocalTierFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagLocalTierFootprintName, flagLocalTierFootprintDefault, flagLocalTierFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropLogicalSpace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLogicalSpaceName string
	if cmdPrefix == "" {
		flagLogicalSpaceName = "logical_space"
	} else {
		flagLogicalSpaceName = fmt.Sprintf("%v.logical_space", cmdPrefix)
	}

	if err := registerModelVolumeInlineSpaceInlineLogicalSpaceFlags(depth+1, flagLogicalSpaceName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSpacePropMaxSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMaxSizeDescription := `Enum: ["100T","300T","600T"]. Indicates the maximum size supported for the FlexVol volume or for each constituent of the FlexGroup volume.`

	var flagMaxSizeName string
	if cmdPrefix == "" {
		flagMaxSizeName = "max_size"
	} else {
		flagMaxSizeName = fmt.Sprintf("%v.max_size", cmdPrefix)
	}

	var flagMaxSizeDefault string = "100T"

	_ = cmd.PersistentFlags().String(flagMaxSizeName, flagMaxSizeDefault, flagMaxSizeDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagMaxSizeName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["100T","300T","600T"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSpacePropMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMetadataDescription := `Space used by the volume metadata in the aggregate, in bytes.`

	var flagMetadataName string
	if cmdPrefix == "" {
		flagMetadataName = "metadata"
	} else {
		flagMetadataName = fmt.Sprintf("%v.metadata", cmdPrefix)
	}

	var flagMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetadataName, flagMetadataDefault, flagMetadataDescription)

	return nil
}

func registerVolumeInlineSpacePropNearlyFullThresholdPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNearlyFullThresholdPercentDescription := `Volume nearly full threshold percentage at which EMS warnings can be sent.`

	var flagNearlyFullThresholdPercentName string
	if cmdPrefix == "" {
		flagNearlyFullThresholdPercentName = "nearly_full_threshold_percent"
	} else {
		flagNearlyFullThresholdPercentName = fmt.Sprintf("%v.nearly_full_threshold_percent", cmdPrefix)
	}

	var flagNearlyFullThresholdPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagNearlyFullThresholdPercentName, flagNearlyFullThresholdPercentDefault, flagNearlyFullThresholdPercentDescription)

	return nil
}

func registerVolumeInlineSpacePropOverProvisioned(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOverProvisionedDescription := `The amount of space not available for this volume in the aggregate, in bytes.`

	var flagOverProvisionedName string
	if cmdPrefix == "" {
		flagOverProvisionedName = "over_provisioned"
	} else {
		flagOverProvisionedName = fmt.Sprintf("%v.over_provisioned", cmdPrefix)
	}

	var flagOverProvisionedDefault int64

	_ = cmd.PersistentFlags().Int64(flagOverProvisionedName, flagOverProvisionedDefault, flagOverProvisionedDescription)

	return nil
}

func registerVolumeInlineSpacePropOverwriteReserve(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOverwriteReserveDescription := `Reserved space for overwrites, in bytes.`

	var flagOverwriteReserveName string
	if cmdPrefix == "" {
		flagOverwriteReserveName = "overwrite_reserve"
	} else {
		flagOverwriteReserveName = fmt.Sprintf("%v.overwrite_reserve", cmdPrefix)
	}

	var flagOverwriteReserveDefault int64

	_ = cmd.PersistentFlags().Int64(flagOverwriteReserveName, flagOverwriteReserveDefault, flagOverwriteReserveDescription)

	return nil
}

func registerVolumeInlineSpacePropOverwriteReserveUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOverwriteReserveUsedDescription := `Overwrite logical reserve space used, in bytes.`

	var flagOverwriteReserveUsedName string
	if cmdPrefix == "" {
		flagOverwriteReserveUsedName = "overwrite_reserve_used"
	} else {
		flagOverwriteReserveUsedName = fmt.Sprintf("%v.overwrite_reserve_used", cmdPrefix)
	}

	var flagOverwriteReserveUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagOverwriteReserveUsedName, flagOverwriteReserveUsedDefault, flagOverwriteReserveUsedDescription)

	return nil
}

func registerVolumeInlineSpacePropPercentUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPercentUsedDescription := `Percentage of the volume size that is used.`

	var flagPercentUsedName string
	if cmdPrefix == "" {
		flagPercentUsedName = "percent_used"
	} else {
		flagPercentUsedName = fmt.Sprintf("%v.percent_used", cmdPrefix)
	}

	var flagPercentUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagPercentUsedName, flagPercentUsedDefault, flagPercentUsedDescription)

	return nil
}

func registerVolumeInlineSpacePropPerformanceTierFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPerformanceTierFootprintDescription := `Space used by the performance tier for this volume in the FabricPool aggregate, in bytes.`

	var flagPerformanceTierFootprintName string
	if cmdPrefix == "" {
		flagPerformanceTierFootprintName = "performance_tier_footprint"
	} else {
		flagPerformanceTierFootprintName = fmt.Sprintf("%v.performance_tier_footprint", cmdPrefix)
	}

	var flagPerformanceTierFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagPerformanceTierFootprintName, flagPerformanceTierFootprintDefault, flagPerformanceTierFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropPhysicalUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPhysicalUsedDescription := `Size that is physically used in the volume, in bytes. Physical used is effective total footprint which is equivalent to total footprint after deducting auto adaptive compression and compaction savings. Physical-used also includes aggregate metadata used by volume.`

	var flagPhysicalUsedName string
	if cmdPrefix == "" {
		flagPhysicalUsedName = "physical_used"
	} else {
		flagPhysicalUsedName = fmt.Sprintf("%v.physical_used", cmdPrefix)
	}

	var flagPhysicalUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagPhysicalUsedName, flagPhysicalUsedDefault, flagPhysicalUsedDescription)

	return nil
}

func registerVolumeInlineSpacePropPhysicalUsedPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPhysicalUsedPercentDescription := `Size that is physically used in the volume, as a percentage.`

	var flagPhysicalUsedPercentName string
	if cmdPrefix == "" {
		flagPhysicalUsedPercentName = "physical_used_percent"
	} else {
		flagPhysicalUsedPercentName = fmt.Sprintf("%v.physical_used_percent", cmdPrefix)
	}

	var flagPhysicalUsedPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagPhysicalUsedPercentName, flagPhysicalUsedPercentDefault, flagPhysicalUsedPercentDescription)

	return nil
}

func registerVolumeInlineSpacePropSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSizeDescription := `Total provisioned size. The default size is equal to the minimum size of 20MB, in bytes.`

	var flagSizeName string
	if cmdPrefix == "" {
		flagSizeName = "size"
	} else {
		flagSizeName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var flagSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagSizeName, flagSizeDefault, flagSizeDescription)

	return nil
}

func registerVolumeInlineSpacePropSizeAvailableForSnapshots(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSizeAvailableForSnapshotsDescription := `Available space for snapshots from snap-reserve, in bytes.`

	var flagSizeAvailableForSnapshotsName string
	if cmdPrefix == "" {
		flagSizeAvailableForSnapshotsName = "size_available_for_snapshots"
	} else {
		flagSizeAvailableForSnapshotsName = fmt.Sprintf("%v.size_available_for_snapshots", cmdPrefix)
	}

	var flagSizeAvailableForSnapshotsDefault int64

	_ = cmd.PersistentFlags().Int64(flagSizeAvailableForSnapshotsName, flagSizeAvailableForSnapshotsDefault, flagSizeAvailableForSnapshotsDescription)

	return nil
}

func registerVolumeInlineSpacePropSnapmirrorDestinationFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSnapmirrorDestinationFootprintDescription := `SnapMirror destination footprint, in bytes.`

	var flagSnapmirrorDestinationFootprintName string
	if cmdPrefix == "" {
		flagSnapmirrorDestinationFootprintName = "snapmirror_destination_footprint"
	} else {
		flagSnapmirrorDestinationFootprintName = fmt.Sprintf("%v.snapmirror_destination_footprint", cmdPrefix)
	}

	var flagSnapmirrorDestinationFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSnapmirrorDestinationFootprintName, flagSnapmirrorDestinationFootprintDefault, flagSnapmirrorDestinationFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropSnapshot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSnapshotName string
	if cmdPrefix == "" {
		flagSnapshotName = "snapshot"
	} else {
		flagSnapshotName = fmt.Sprintf("%v.snapshot", cmdPrefix)
	}

	if err := registerModelVolumeInlineSpaceInlineSnapshotFlags(depth+1, flagSnapshotName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSpacePropSnapshotReserveUnusable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSnapshotReserveUnusableDescription := `Snapshot reserve that is not available for snapshot creation, in bytes.`

	var flagSnapshotReserveUnusableName string
	if cmdPrefix == "" {
		flagSnapshotReserveUnusableName = "snapshot_reserve_unusable"
	} else {
		flagSnapshotReserveUnusableName = fmt.Sprintf("%v.snapshot_reserve_unusable", cmdPrefix)
	}

	var flagSnapshotReserveUnusableDefault int64

	_ = cmd.PersistentFlags().Int64(flagSnapshotReserveUnusableName, flagSnapshotReserveUnusableDefault, flagSnapshotReserveUnusableDescription)

	return nil
}

func registerVolumeInlineSpacePropSnapshotSpill(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSnapshotSpillDescription := `Space used by the snapshot copies beyond the snap-reserve, in bytes.`

	var flagSnapshotSpillName string
	if cmdPrefix == "" {
		flagSnapshotSpillName = "snapshot_spill"
	} else {
		flagSnapshotSpillName = fmt.Sprintf("%v.snapshot_spill", cmdPrefix)
	}

	var flagSnapshotSpillDefault int64

	_ = cmd.PersistentFlags().Int64(flagSnapshotSpillName, flagSnapshotSpillDefault, flagSnapshotSpillDescription)

	return nil
}

func registerVolumeInlineSpacePropTotalFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalFootprintDescription := `Data and metadata used for this volume in the aggregate, in bytes.`

	var flagTotalFootprintName string
	if cmdPrefix == "" {
		flagTotalFootprintName = "total_footprint"
	} else {
		flagTotalFootprintName = fmt.Sprintf("%v.total_footprint", cmdPrefix)
	}

	var flagTotalFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalFootprintName, flagTotalFootprintDefault, flagTotalFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropTotalMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalMetadataDescription := `Space used by the total metadata in the volume, in bytes.`

	var flagTotalMetadataName string
	if cmdPrefix == "" {
		flagTotalMetadataName = "total_metadata"
	} else {
		flagTotalMetadataName = fmt.Sprintf("%v.total_metadata", cmdPrefix)
	}

	var flagTotalMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalMetadataName, flagTotalMetadataDefault, flagTotalMetadataDescription)

	return nil
}

func registerVolumeInlineSpacePropTotalMetadataFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalMetadataFootprintDescription := `Space used by the volume metadata footprint in the aggregate, in bytes.`

	var flagTotalMetadataFootprintName string
	if cmdPrefix == "" {
		flagTotalMetadataFootprintName = "total_metadata_footprint"
	} else {
		flagTotalMetadataFootprintName = fmt.Sprintf("%v.total_metadata_footprint", cmdPrefix)
	}

	var flagTotalMetadataFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalMetadataFootprintName, flagTotalMetadataFootprintDefault, flagTotalMetadataFootprintDescription)

	return nil
}

func registerVolumeInlineSpacePropUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedDescription := `The virtual space used (includes volume reserves) before storage efficiency, in bytes.`

	var flagUsedName string
	if cmdPrefix == "" {
		flagUsedName = "used"
	} else {
		flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
	}

	var flagUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedName, flagUsedDefault, flagUsedDescription)

	return nil
}

func registerVolumeInlineSpacePropUsedByAfs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedByAfsDescription := `The space used by Active Filesystem, in bytes.`

	var flagUsedByAfsName string
	if cmdPrefix == "" {
		flagUsedByAfsName = "used_by_afs"
	} else {
		flagUsedByAfsName = fmt.Sprintf("%v.used_by_afs", cmdPrefix)
	}

	var flagUsedByAfsDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedByAfsName, flagUsedByAfsDefault, flagUsedByAfsDescription)

	return nil
}

func registerVolumeInlineSpacePropUserData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUserDataDescription := `User data, in bytes.`

	var flagUserDataName string
	if cmdPrefix == "" {
		flagUserDataName = "user_data"
	} else {
		flagUserDataName = fmt.Sprintf("%v.user_data", cmdPrefix)
	}

	var flagUserDataDefault int64

	_ = cmd.PersistentFlags().Int64(flagUserDataName, flagUserDataDefault, flagUserDataDescription)

	return nil
}

func registerVolumeInlineSpacePropVolumeGuaranteeFootprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagVolumeGuaranteeFootprintDescription := `Space reserved for future writes in the volume, in bytes.`

	var flagVolumeGuaranteeFootprintName string
	if cmdPrefix == "" {
		flagVolumeGuaranteeFootprintName = "volume_guarantee_footprint"
	} else {
		flagVolumeGuaranteeFootprintName = fmt.Sprintf("%v.volume_guarantee_footprint", cmdPrefix)
	}

	var flagVolumeGuaranteeFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagVolumeGuaranteeFootprintName, flagVolumeGuaranteeFootprintDefault, flagVolumeGuaranteeFootprintDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineSpaceFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AfsTotalAdded := retrieveVolumeInlineSpacePropAfsTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AfsTotalAdded

	err, AutoAdaptiveCompressionFootprintDataReductionAdded := retrieveVolumeInlineSpacePropAutoAdaptiveCompressionFootprintDataReductionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AutoAdaptiveCompressionFootprintDataReductionAdded

	err, AvailableAdded := retrieveVolumeInlineSpacePropAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AvailableAdded

	err, AvailablePercentAdded := retrieveVolumeInlineSpacePropAvailablePercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AvailablePercentAdded

	err, BlockStorageInactiveUserDataAdded := retrieveVolumeInlineSpacePropBlockStorageInactiveUserDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlockStorageInactiveUserDataAdded

	err, BlockStorageInactiveUserDataPercentAdded := retrieveVolumeInlineSpacePropBlockStorageInactiveUserDataPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlockStorageInactiveUserDataPercentAdded

	err, CapacityTierFootprintAdded := retrieveVolumeInlineSpacePropCapacityTierFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CapacityTierFootprintAdded

	err, CapacityTierFootprintDataReductionAdded := retrieveVolumeInlineSpacePropCapacityTierFootprintDataReductionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CapacityTierFootprintDataReductionAdded

	err, CompactionFootprintDataReductionAdded := retrieveVolumeInlineSpacePropCompactionFootprintDataReductionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CompactionFootprintDataReductionAdded

	err, CrossVolumeDedupeMetafilesFootprintAdded := retrieveVolumeInlineSpacePropCrossVolumeDedupeMetafilesFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CrossVolumeDedupeMetafilesFootprintAdded

	err, CrossVolumeDedupeMetafilesTemporaryFootprintAdded := retrieveVolumeInlineSpacePropCrossVolumeDedupeMetafilesTemporaryFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CrossVolumeDedupeMetafilesTemporaryFootprintAdded

	err, DedupeMetafilesFootprintAdded := retrieveVolumeInlineSpacePropDedupeMetafilesFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DedupeMetafilesFootprintAdded

	err, DedupeMetafilesTemporaryFootprintAdded := retrieveVolumeInlineSpacePropDedupeMetafilesTemporaryFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DedupeMetafilesTemporaryFootprintAdded

	err, DelayedFreeFootprintAdded := retrieveVolumeInlineSpacePropDelayedFreeFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DelayedFreeFootprintAdded

	err, EffectiveTotalFootprintAdded := retrieveVolumeInlineSpacePropEffectiveTotalFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EffectiveTotalFootprintAdded

	err, ExpectedAvailableAdded := retrieveVolumeInlineSpacePropExpectedAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExpectedAvailableAdded

	err, FileOperationMetadataAdded := retrieveVolumeInlineSpacePropFileOperationMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileOperationMetadataAdded

	err, FilesystemSizeAdded := retrieveVolumeInlineSpacePropFilesystemSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FilesystemSizeAdded

	err, FilesystemSizeFixedAdded := retrieveVolumeInlineSpacePropFilesystemSizeFixedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FilesystemSizeFixedAdded

	err, FootprintAdded := retrieveVolumeInlineSpacePropFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FootprintAdded

	err, FractionalReserveAdded := retrieveVolumeInlineSpacePropFractionalReserveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FractionalReserveAdded

	err, FullThresholdPercentAdded := retrieveVolumeInlineSpacePropFullThresholdPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FullThresholdPercentAdded

	err, IsUsedStaleAdded := retrieveVolumeInlineSpacePropIsUsedStaleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsUsedStaleAdded

	err, LargeSizeEnabledAdded := retrieveVolumeInlineSpacePropLargeSizeEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LargeSizeEnabledAdded

	err, LocalTierFootprintAdded := retrieveVolumeInlineSpacePropLocalTierFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LocalTierFootprintAdded

	err, LogicalSpaceAdded := retrieveVolumeInlineSpacePropLogicalSpaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LogicalSpaceAdded

	err, MaxSizeAdded := retrieveVolumeInlineSpacePropMaxSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxSizeAdded

	err, MetadataAdded := retrieveVolumeInlineSpacePropMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MetadataAdded

	err, NearlyFullThresholdPercentAdded := retrieveVolumeInlineSpacePropNearlyFullThresholdPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NearlyFullThresholdPercentAdded

	err, OverProvisionedAdded := retrieveVolumeInlineSpacePropOverProvisionedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OverProvisionedAdded

	err, OverwriteReserveAdded := retrieveVolumeInlineSpacePropOverwriteReserveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OverwriteReserveAdded

	err, OverwriteReserveUsedAdded := retrieveVolumeInlineSpacePropOverwriteReserveUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OverwriteReserveUsedAdded

	err, PercentUsedAdded := retrieveVolumeInlineSpacePropPercentUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PercentUsedAdded

	err, PerformanceTierFootprintAdded := retrieveVolumeInlineSpacePropPerformanceTierFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PerformanceTierFootprintAdded

	err, PhysicalUsedAdded := retrieveVolumeInlineSpacePropPhysicalUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PhysicalUsedAdded

	err, PhysicalUsedPercentAdded := retrieveVolumeInlineSpacePropPhysicalUsedPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PhysicalUsedPercentAdded

	err, SizeAdded := retrieveVolumeInlineSpacePropSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeAdded

	err, SizeAvailableForSnapshotsAdded := retrieveVolumeInlineSpacePropSizeAvailableForSnapshotsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeAvailableForSnapshotsAdded

	err, SnapmirrorDestinationFootprintAdded := retrieveVolumeInlineSpacePropSnapmirrorDestinationFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapmirrorDestinationFootprintAdded

	err, SnapshotAdded := retrieveVolumeInlineSpacePropSnapshotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotAdded

	err, SnapshotReserveUnusableAdded := retrieveVolumeInlineSpacePropSnapshotReserveUnusableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotReserveUnusableAdded

	err, SnapshotSpillAdded := retrieveVolumeInlineSpacePropSnapshotSpillFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotSpillAdded

	err, TotalFootprintAdded := retrieveVolumeInlineSpacePropTotalFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalFootprintAdded

	err, TotalMetadataAdded := retrieveVolumeInlineSpacePropTotalMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalMetadataAdded

	err, TotalMetadataFootprintAdded := retrieveVolumeInlineSpacePropTotalMetadataFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalMetadataFootprintAdded

	err, UsedAdded := retrieveVolumeInlineSpacePropUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedAdded

	err, UsedByAfsAdded := retrieveVolumeInlineSpacePropUsedByAfsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedByAfsAdded

	err, UserDataAdded := retrieveVolumeInlineSpacePropUserDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UserDataAdded

	err, VolumeGuaranteeFootprintAdded := retrieveVolumeInlineSpacePropVolumeGuaranteeFootprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeGuaranteeFootprintAdded

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropAfsTotalFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAfsTotalName := fmt.Sprintf("%v.afs_total", cmdPrefix)
	if cmd.Flags().Changed(flagAfsTotalName) {

		var flagAfsTotalName string
		if cmdPrefix == "" {
			flagAfsTotalName = "afs_total"
		} else {
			flagAfsTotalName = fmt.Sprintf("%v.afs_total", cmdPrefix)
		}

		flagAfsTotalValue, err := cmd.Flags().GetInt64(flagAfsTotalName)
		if err != nil {
			return err, false
		}
		m.AfsTotal = &flagAfsTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropAutoAdaptiveCompressionFootprintDataReductionFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAutoAdaptiveCompressionFootprintDataReductionName := fmt.Sprintf("%v.auto_adaptive_compression_footprint_data_reduction", cmdPrefix)
	if cmd.Flags().Changed(flagAutoAdaptiveCompressionFootprintDataReductionName) {

		var flagAutoAdaptiveCompressionFootprintDataReductionName string
		if cmdPrefix == "" {
			flagAutoAdaptiveCompressionFootprintDataReductionName = "auto_adaptive_compression_footprint_data_reduction"
		} else {
			flagAutoAdaptiveCompressionFootprintDataReductionName = fmt.Sprintf("%v.auto_adaptive_compression_footprint_data_reduction", cmdPrefix)
		}

		flagAutoAdaptiveCompressionFootprintDataReductionValue, err := cmd.Flags().GetInt64(flagAutoAdaptiveCompressionFootprintDataReductionName)
		if err != nil {
			return err, false
		}
		m.AutoAdaptiveCompressionFootprintDataReduction = &flagAutoAdaptiveCompressionFootprintDataReductionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropAvailableFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAvailableName := fmt.Sprintf("%v.available", cmdPrefix)
	if cmd.Flags().Changed(flagAvailableName) {

		var flagAvailableName string
		if cmdPrefix == "" {
			flagAvailableName = "available"
		} else {
			flagAvailableName = fmt.Sprintf("%v.available", cmdPrefix)
		}

		flagAvailableValue, err := cmd.Flags().GetInt64(flagAvailableName)
		if err != nil {
			return err, false
		}
		m.Available = &flagAvailableValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropAvailablePercentFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAvailablePercentName := fmt.Sprintf("%v.available_percent", cmdPrefix)
	if cmd.Flags().Changed(flagAvailablePercentName) {

		var flagAvailablePercentName string
		if cmdPrefix == "" {
			flagAvailablePercentName = "available_percent"
		} else {
			flagAvailablePercentName = fmt.Sprintf("%v.available_percent", cmdPrefix)
		}

		flagAvailablePercentValue, err := cmd.Flags().GetInt64(flagAvailablePercentName)
		if err != nil {
			return err, false
		}
		m.AvailablePercent = &flagAvailablePercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropBlockStorageInactiveUserDataFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBlockStorageInactiveUserDataName := fmt.Sprintf("%v.block_storage_inactive_user_data", cmdPrefix)
	if cmd.Flags().Changed(flagBlockStorageInactiveUserDataName) {

		var flagBlockStorageInactiveUserDataName string
		if cmdPrefix == "" {
			flagBlockStorageInactiveUserDataName = "block_storage_inactive_user_data"
		} else {
			flagBlockStorageInactiveUserDataName = fmt.Sprintf("%v.block_storage_inactive_user_data", cmdPrefix)
		}

		flagBlockStorageInactiveUserDataValue, err := cmd.Flags().GetInt64(flagBlockStorageInactiveUserDataName)
		if err != nil {
			return err, false
		}
		m.BlockStorageInactiveUserData = &flagBlockStorageInactiveUserDataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropBlockStorageInactiveUserDataPercentFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBlockStorageInactiveUserDataPercentName := fmt.Sprintf("%v.block_storage_inactive_user_data_percent", cmdPrefix)
	if cmd.Flags().Changed(flagBlockStorageInactiveUserDataPercentName) {

		var flagBlockStorageInactiveUserDataPercentName string
		if cmdPrefix == "" {
			flagBlockStorageInactiveUserDataPercentName = "block_storage_inactive_user_data_percent"
		} else {
			flagBlockStorageInactiveUserDataPercentName = fmt.Sprintf("%v.block_storage_inactive_user_data_percent", cmdPrefix)
		}

		flagBlockStorageInactiveUserDataPercentValue, err := cmd.Flags().GetInt64(flagBlockStorageInactiveUserDataPercentName)
		if err != nil {
			return err, false
		}
		m.BlockStorageInactiveUserDataPercent = &flagBlockStorageInactiveUserDataPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropCapacityTierFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCapacityTierFootprintName := fmt.Sprintf("%v.capacity_tier_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagCapacityTierFootprintName) {

		var flagCapacityTierFootprintName string
		if cmdPrefix == "" {
			flagCapacityTierFootprintName = "capacity_tier_footprint"
		} else {
			flagCapacityTierFootprintName = fmt.Sprintf("%v.capacity_tier_footprint", cmdPrefix)
		}

		flagCapacityTierFootprintValue, err := cmd.Flags().GetInt64(flagCapacityTierFootprintName)
		if err != nil {
			return err, false
		}
		m.CapacityTierFootprint = &flagCapacityTierFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropCapacityTierFootprintDataReductionFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCapacityTierFootprintDataReductionName := fmt.Sprintf("%v.capacity_tier_footprint_data_reduction", cmdPrefix)
	if cmd.Flags().Changed(flagCapacityTierFootprintDataReductionName) {

		var flagCapacityTierFootprintDataReductionName string
		if cmdPrefix == "" {
			flagCapacityTierFootprintDataReductionName = "capacity_tier_footprint_data_reduction"
		} else {
			flagCapacityTierFootprintDataReductionName = fmt.Sprintf("%v.capacity_tier_footprint_data_reduction", cmdPrefix)
		}

		flagCapacityTierFootprintDataReductionValue, err := cmd.Flags().GetInt64(flagCapacityTierFootprintDataReductionName)
		if err != nil {
			return err, false
		}
		m.CapacityTierFootprintDataReduction = &flagCapacityTierFootprintDataReductionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropCompactionFootprintDataReductionFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCompactionFootprintDataReductionName := fmt.Sprintf("%v.compaction_footprint_data_reduction", cmdPrefix)
	if cmd.Flags().Changed(flagCompactionFootprintDataReductionName) {

		var flagCompactionFootprintDataReductionName string
		if cmdPrefix == "" {
			flagCompactionFootprintDataReductionName = "compaction_footprint_data_reduction"
		} else {
			flagCompactionFootprintDataReductionName = fmt.Sprintf("%v.compaction_footprint_data_reduction", cmdPrefix)
		}

		flagCompactionFootprintDataReductionValue, err := cmd.Flags().GetInt64(flagCompactionFootprintDataReductionName)
		if err != nil {
			return err, false
		}
		m.CompactionFootprintDataReduction = &flagCompactionFootprintDataReductionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropCrossVolumeDedupeMetafilesFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCrossVolumeDedupeMetafilesFootprintName := fmt.Sprintf("%v.cross_volume_dedupe_metafiles_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagCrossVolumeDedupeMetafilesFootprintName) {

		var flagCrossVolumeDedupeMetafilesFootprintName string
		if cmdPrefix == "" {
			flagCrossVolumeDedupeMetafilesFootprintName = "cross_volume_dedupe_metafiles_footprint"
		} else {
			flagCrossVolumeDedupeMetafilesFootprintName = fmt.Sprintf("%v.cross_volume_dedupe_metafiles_footprint", cmdPrefix)
		}

		flagCrossVolumeDedupeMetafilesFootprintValue, err := cmd.Flags().GetInt64(flagCrossVolumeDedupeMetafilesFootprintName)
		if err != nil {
			return err, false
		}
		m.CrossVolumeDedupeMetafilesFootprint = &flagCrossVolumeDedupeMetafilesFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropCrossVolumeDedupeMetafilesTemporaryFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCrossVolumeDedupeMetafilesTemporaryFootprintName := fmt.Sprintf("%v.cross_volume_dedupe_metafiles_temporary_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagCrossVolumeDedupeMetafilesTemporaryFootprintName) {

		var flagCrossVolumeDedupeMetafilesTemporaryFootprintName string
		if cmdPrefix == "" {
			flagCrossVolumeDedupeMetafilesTemporaryFootprintName = "cross_volume_dedupe_metafiles_temporary_footprint"
		} else {
			flagCrossVolumeDedupeMetafilesTemporaryFootprintName = fmt.Sprintf("%v.cross_volume_dedupe_metafiles_temporary_footprint", cmdPrefix)
		}

		flagCrossVolumeDedupeMetafilesTemporaryFootprintValue, err := cmd.Flags().GetInt64(flagCrossVolumeDedupeMetafilesTemporaryFootprintName)
		if err != nil {
			return err, false
		}
		m.CrossVolumeDedupeMetafilesTemporaryFootprint = &flagCrossVolumeDedupeMetafilesTemporaryFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropDedupeMetafilesFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDedupeMetafilesFootprintName := fmt.Sprintf("%v.dedupe_metafiles_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagDedupeMetafilesFootprintName) {

		var flagDedupeMetafilesFootprintName string
		if cmdPrefix == "" {
			flagDedupeMetafilesFootprintName = "dedupe_metafiles_footprint"
		} else {
			flagDedupeMetafilesFootprintName = fmt.Sprintf("%v.dedupe_metafiles_footprint", cmdPrefix)
		}

		flagDedupeMetafilesFootprintValue, err := cmd.Flags().GetInt64(flagDedupeMetafilesFootprintName)
		if err != nil {
			return err, false
		}
		m.DedupeMetafilesFootprint = &flagDedupeMetafilesFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropDedupeMetafilesTemporaryFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDedupeMetafilesTemporaryFootprintName := fmt.Sprintf("%v.dedupe_metafiles_temporary_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagDedupeMetafilesTemporaryFootprintName) {

		var flagDedupeMetafilesTemporaryFootprintName string
		if cmdPrefix == "" {
			flagDedupeMetafilesTemporaryFootprintName = "dedupe_metafiles_temporary_footprint"
		} else {
			flagDedupeMetafilesTemporaryFootprintName = fmt.Sprintf("%v.dedupe_metafiles_temporary_footprint", cmdPrefix)
		}

		flagDedupeMetafilesTemporaryFootprintValue, err := cmd.Flags().GetInt64(flagDedupeMetafilesTemporaryFootprintName)
		if err != nil {
			return err, false
		}
		m.DedupeMetafilesTemporaryFootprint = &flagDedupeMetafilesTemporaryFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropDelayedFreeFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDelayedFreeFootprintName := fmt.Sprintf("%v.delayed_free_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagDelayedFreeFootprintName) {

		var flagDelayedFreeFootprintName string
		if cmdPrefix == "" {
			flagDelayedFreeFootprintName = "delayed_free_footprint"
		} else {
			flagDelayedFreeFootprintName = fmt.Sprintf("%v.delayed_free_footprint", cmdPrefix)
		}

		flagDelayedFreeFootprintValue, err := cmd.Flags().GetInt64(flagDelayedFreeFootprintName)
		if err != nil {
			return err, false
		}
		m.DelayedFreeFootprint = &flagDelayedFreeFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropEffectiveTotalFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEffectiveTotalFootprintName := fmt.Sprintf("%v.effective_total_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagEffectiveTotalFootprintName) {

		var flagEffectiveTotalFootprintName string
		if cmdPrefix == "" {
			flagEffectiveTotalFootprintName = "effective_total_footprint"
		} else {
			flagEffectiveTotalFootprintName = fmt.Sprintf("%v.effective_total_footprint", cmdPrefix)
		}

		flagEffectiveTotalFootprintValue, err := cmd.Flags().GetInt64(flagEffectiveTotalFootprintName)
		if err != nil {
			return err, false
		}
		m.EffectiveTotalFootprint = &flagEffectiveTotalFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropExpectedAvailableFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExpectedAvailableName := fmt.Sprintf("%v.expected_available", cmdPrefix)
	if cmd.Flags().Changed(flagExpectedAvailableName) {

		var flagExpectedAvailableName string
		if cmdPrefix == "" {
			flagExpectedAvailableName = "expected_available"
		} else {
			flagExpectedAvailableName = fmt.Sprintf("%v.expected_available", cmdPrefix)
		}

		flagExpectedAvailableValue, err := cmd.Flags().GetInt64(flagExpectedAvailableName)
		if err != nil {
			return err, false
		}
		m.ExpectedAvailable = &flagExpectedAvailableValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropFileOperationMetadataFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileOperationMetadataName := fmt.Sprintf("%v.file_operation_metadata", cmdPrefix)
	if cmd.Flags().Changed(flagFileOperationMetadataName) {

		var flagFileOperationMetadataName string
		if cmdPrefix == "" {
			flagFileOperationMetadataName = "file_operation_metadata"
		} else {
			flagFileOperationMetadataName = fmt.Sprintf("%v.file_operation_metadata", cmdPrefix)
		}

		flagFileOperationMetadataValue, err := cmd.Flags().GetInt64(flagFileOperationMetadataName)
		if err != nil {
			return err, false
		}
		m.FileOperationMetadata = &flagFileOperationMetadataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropFilesystemSizeFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFilesystemSizeName := fmt.Sprintf("%v.filesystem_size", cmdPrefix)
	if cmd.Flags().Changed(flagFilesystemSizeName) {

		var flagFilesystemSizeName string
		if cmdPrefix == "" {
			flagFilesystemSizeName = "filesystem_size"
		} else {
			flagFilesystemSizeName = fmt.Sprintf("%v.filesystem_size", cmdPrefix)
		}

		flagFilesystemSizeValue, err := cmd.Flags().GetInt64(flagFilesystemSizeName)
		if err != nil {
			return err, false
		}
		m.FilesystemSize = &flagFilesystemSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropFilesystemSizeFixedFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFilesystemSizeFixedName := fmt.Sprintf("%v.filesystem_size_fixed", cmdPrefix)
	if cmd.Flags().Changed(flagFilesystemSizeFixedName) {

		var flagFilesystemSizeFixedName string
		if cmdPrefix == "" {
			flagFilesystemSizeFixedName = "filesystem_size_fixed"
		} else {
			flagFilesystemSizeFixedName = fmt.Sprintf("%v.filesystem_size_fixed", cmdPrefix)
		}

		flagFilesystemSizeFixedValue, err := cmd.Flags().GetBool(flagFilesystemSizeFixedName)
		if err != nil {
			return err, false
		}
		m.FilesystemSizeFixed = &flagFilesystemSizeFixedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFootprintName := fmt.Sprintf("%v.footprint", cmdPrefix)
	if cmd.Flags().Changed(flagFootprintName) {

		var flagFootprintName string
		if cmdPrefix == "" {
			flagFootprintName = "footprint"
		} else {
			flagFootprintName = fmt.Sprintf("%v.footprint", cmdPrefix)
		}

		flagFootprintValue, err := cmd.Flags().GetInt64(flagFootprintName)
		if err != nil {
			return err, false
		}
		m.Footprint = &flagFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropFractionalReserveFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFractionalReserveName := fmt.Sprintf("%v.fractional_reserve", cmdPrefix)
	if cmd.Flags().Changed(flagFractionalReserveName) {

		var flagFractionalReserveName string
		if cmdPrefix == "" {
			flagFractionalReserveName = "fractional_reserve"
		} else {
			flagFractionalReserveName = fmt.Sprintf("%v.fractional_reserve", cmdPrefix)
		}

		flagFractionalReserveValue, err := cmd.Flags().GetInt64(flagFractionalReserveName)
		if err != nil {
			return err, false
		}
		m.FractionalReserve = &flagFractionalReserveValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropFullThresholdPercentFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFullThresholdPercentName := fmt.Sprintf("%v.full_threshold_percent", cmdPrefix)
	if cmd.Flags().Changed(flagFullThresholdPercentName) {

		var flagFullThresholdPercentName string
		if cmdPrefix == "" {
			flagFullThresholdPercentName = "full_threshold_percent"
		} else {
			flagFullThresholdPercentName = fmt.Sprintf("%v.full_threshold_percent", cmdPrefix)
		}

		flagFullThresholdPercentValue, err := cmd.Flags().GetInt64(flagFullThresholdPercentName)
		if err != nil {
			return err, false
		}
		m.FullThresholdPercent = &flagFullThresholdPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropIsUsedStaleFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsUsedStaleName := fmt.Sprintf("%v.is_used_stale", cmdPrefix)
	if cmd.Flags().Changed(flagIsUsedStaleName) {

		var flagIsUsedStaleName string
		if cmdPrefix == "" {
			flagIsUsedStaleName = "is_used_stale"
		} else {
			flagIsUsedStaleName = fmt.Sprintf("%v.is_used_stale", cmdPrefix)
		}

		flagIsUsedStaleValue, err := cmd.Flags().GetBool(flagIsUsedStaleName)
		if err != nil {
			return err, false
		}
		m.IsUsedStale = &flagIsUsedStaleValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropLargeSizeEnabledFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLargeSizeEnabledName := fmt.Sprintf("%v.large_size_enabled", cmdPrefix)
	if cmd.Flags().Changed(flagLargeSizeEnabledName) {

		var flagLargeSizeEnabledName string
		if cmdPrefix == "" {
			flagLargeSizeEnabledName = "large_size_enabled"
		} else {
			flagLargeSizeEnabledName = fmt.Sprintf("%v.large_size_enabled", cmdPrefix)
		}

		flagLargeSizeEnabledValue, err := cmd.Flags().GetBool(flagLargeSizeEnabledName)
		if err != nil {
			return err, false
		}
		m.LargeSizeEnabled = &flagLargeSizeEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropLocalTierFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLocalTierFootprintName := fmt.Sprintf("%v.local_tier_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagLocalTierFootprintName) {

		var flagLocalTierFootprintName string
		if cmdPrefix == "" {
			flagLocalTierFootprintName = "local_tier_footprint"
		} else {
			flagLocalTierFootprintName = fmt.Sprintf("%v.local_tier_footprint", cmdPrefix)
		}

		flagLocalTierFootprintValue, err := cmd.Flags().GetInt64(flagLocalTierFootprintName)
		if err != nil {
			return err, false
		}
		m.LocalTierFootprint = &flagLocalTierFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropLogicalSpaceFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLogicalSpaceName := fmt.Sprintf("%v.logical_space", cmdPrefix)
	if cmd.Flags().Changed(flagLogicalSpaceName) {
		// info: complex object logical_space VolumeInlineSpaceInlineLogicalSpace is retrieved outside this Changed() block
	}
	flagLogicalSpaceValue := m.LogicalSpace
	if swag.IsZero(flagLogicalSpaceValue) {
		flagLogicalSpaceValue = &models.VolumeInlineSpaceInlineLogicalSpace{}
	}

	err, LogicalSpaceAdded := retrieveModelVolumeInlineSpaceInlineLogicalSpaceFlags(depth+1, flagLogicalSpaceValue, flagLogicalSpaceName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LogicalSpaceAdded
	if LogicalSpaceAdded {
		m.LogicalSpace = flagLogicalSpaceValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropMaxSizeFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMaxSizeName := fmt.Sprintf("%v.max_size", cmdPrefix)
	if cmd.Flags().Changed(flagMaxSizeName) {

		var flagMaxSizeName string
		if cmdPrefix == "" {
			flagMaxSizeName = "max_size"
		} else {
			flagMaxSizeName = fmt.Sprintf("%v.max_size", cmdPrefix)
		}

		flagMaxSizeValue, err := cmd.Flags().GetString(flagMaxSizeName)
		if err != nil {
			return err, false
		}
		m.MaxSize = &flagMaxSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropMetadataFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMetadataName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(flagMetadataName) {

		var flagMetadataName string
		if cmdPrefix == "" {
			flagMetadataName = "metadata"
		} else {
			flagMetadataName = fmt.Sprintf("%v.metadata", cmdPrefix)
		}

		flagMetadataValue, err := cmd.Flags().GetInt64(flagMetadataName)
		if err != nil {
			return err, false
		}
		m.Metadata = &flagMetadataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropNearlyFullThresholdPercentFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNearlyFullThresholdPercentName := fmt.Sprintf("%v.nearly_full_threshold_percent", cmdPrefix)
	if cmd.Flags().Changed(flagNearlyFullThresholdPercentName) {

		var flagNearlyFullThresholdPercentName string
		if cmdPrefix == "" {
			flagNearlyFullThresholdPercentName = "nearly_full_threshold_percent"
		} else {
			flagNearlyFullThresholdPercentName = fmt.Sprintf("%v.nearly_full_threshold_percent", cmdPrefix)
		}

		flagNearlyFullThresholdPercentValue, err := cmd.Flags().GetInt64(flagNearlyFullThresholdPercentName)
		if err != nil {
			return err, false
		}
		m.NearlyFullThresholdPercent = &flagNearlyFullThresholdPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropOverProvisionedFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOverProvisionedName := fmt.Sprintf("%v.over_provisioned", cmdPrefix)
	if cmd.Flags().Changed(flagOverProvisionedName) {

		var flagOverProvisionedName string
		if cmdPrefix == "" {
			flagOverProvisionedName = "over_provisioned"
		} else {
			flagOverProvisionedName = fmt.Sprintf("%v.over_provisioned", cmdPrefix)
		}

		flagOverProvisionedValue, err := cmd.Flags().GetInt64(flagOverProvisionedName)
		if err != nil {
			return err, false
		}
		m.OverProvisioned = &flagOverProvisionedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropOverwriteReserveFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOverwriteReserveName := fmt.Sprintf("%v.overwrite_reserve", cmdPrefix)
	if cmd.Flags().Changed(flagOverwriteReserveName) {

		var flagOverwriteReserveName string
		if cmdPrefix == "" {
			flagOverwriteReserveName = "overwrite_reserve"
		} else {
			flagOverwriteReserveName = fmt.Sprintf("%v.overwrite_reserve", cmdPrefix)
		}

		flagOverwriteReserveValue, err := cmd.Flags().GetInt64(flagOverwriteReserveName)
		if err != nil {
			return err, false
		}
		m.OverwriteReserve = &flagOverwriteReserveValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropOverwriteReserveUsedFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOverwriteReserveUsedName := fmt.Sprintf("%v.overwrite_reserve_used", cmdPrefix)
	if cmd.Flags().Changed(flagOverwriteReserveUsedName) {

		var flagOverwriteReserveUsedName string
		if cmdPrefix == "" {
			flagOverwriteReserveUsedName = "overwrite_reserve_used"
		} else {
			flagOverwriteReserveUsedName = fmt.Sprintf("%v.overwrite_reserve_used", cmdPrefix)
		}

		flagOverwriteReserveUsedValue, err := cmd.Flags().GetInt64(flagOverwriteReserveUsedName)
		if err != nil {
			return err, false
		}
		m.OverwriteReserveUsed = &flagOverwriteReserveUsedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropPercentUsedFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPercentUsedName := fmt.Sprintf("%v.percent_used", cmdPrefix)
	if cmd.Flags().Changed(flagPercentUsedName) {

		var flagPercentUsedName string
		if cmdPrefix == "" {
			flagPercentUsedName = "percent_used"
		} else {
			flagPercentUsedName = fmt.Sprintf("%v.percent_used", cmdPrefix)
		}

		flagPercentUsedValue, err := cmd.Flags().GetInt64(flagPercentUsedName)
		if err != nil {
			return err, false
		}
		m.PercentUsed = &flagPercentUsedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropPerformanceTierFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPerformanceTierFootprintName := fmt.Sprintf("%v.performance_tier_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagPerformanceTierFootprintName) {

		var flagPerformanceTierFootprintName string
		if cmdPrefix == "" {
			flagPerformanceTierFootprintName = "performance_tier_footprint"
		} else {
			flagPerformanceTierFootprintName = fmt.Sprintf("%v.performance_tier_footprint", cmdPrefix)
		}

		flagPerformanceTierFootprintValue, err := cmd.Flags().GetInt64(flagPerformanceTierFootprintName)
		if err != nil {
			return err, false
		}
		m.PerformanceTierFootprint = &flagPerformanceTierFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropPhysicalUsedFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPhysicalUsedName := fmt.Sprintf("%v.physical_used", cmdPrefix)
	if cmd.Flags().Changed(flagPhysicalUsedName) {

		var flagPhysicalUsedName string
		if cmdPrefix == "" {
			flagPhysicalUsedName = "physical_used"
		} else {
			flagPhysicalUsedName = fmt.Sprintf("%v.physical_used", cmdPrefix)
		}

		flagPhysicalUsedValue, err := cmd.Flags().GetInt64(flagPhysicalUsedName)
		if err != nil {
			return err, false
		}
		m.PhysicalUsed = &flagPhysicalUsedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropPhysicalUsedPercentFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPhysicalUsedPercentName := fmt.Sprintf("%v.physical_used_percent", cmdPrefix)
	if cmd.Flags().Changed(flagPhysicalUsedPercentName) {

		var flagPhysicalUsedPercentName string
		if cmdPrefix == "" {
			flagPhysicalUsedPercentName = "physical_used_percent"
		} else {
			flagPhysicalUsedPercentName = fmt.Sprintf("%v.physical_used_percent", cmdPrefix)
		}

		flagPhysicalUsedPercentValue, err := cmd.Flags().GetInt64(flagPhysicalUsedPercentName)
		if err != nil {
			return err, false
		}
		m.PhysicalUsedPercent = &flagPhysicalUsedPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropSizeFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSizeName := fmt.Sprintf("%v.size", cmdPrefix)
	if cmd.Flags().Changed(flagSizeName) {

		var flagSizeName string
		if cmdPrefix == "" {
			flagSizeName = "size"
		} else {
			flagSizeName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		flagSizeValue, err := cmd.Flags().GetInt64(flagSizeName)
		if err != nil {
			return err, false
		}
		m.Size = &flagSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropSizeAvailableForSnapshotsFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSizeAvailableForSnapshotsName := fmt.Sprintf("%v.size_available_for_snapshots", cmdPrefix)
	if cmd.Flags().Changed(flagSizeAvailableForSnapshotsName) {

		var flagSizeAvailableForSnapshotsName string
		if cmdPrefix == "" {
			flagSizeAvailableForSnapshotsName = "size_available_for_snapshots"
		} else {
			flagSizeAvailableForSnapshotsName = fmt.Sprintf("%v.size_available_for_snapshots", cmdPrefix)
		}

		flagSizeAvailableForSnapshotsValue, err := cmd.Flags().GetInt64(flagSizeAvailableForSnapshotsName)
		if err != nil {
			return err, false
		}
		m.SizeAvailableForSnapshots = &flagSizeAvailableForSnapshotsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropSnapmirrorDestinationFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnapmirrorDestinationFootprintName := fmt.Sprintf("%v.snapmirror_destination_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagSnapmirrorDestinationFootprintName) {

		var flagSnapmirrorDestinationFootprintName string
		if cmdPrefix == "" {
			flagSnapmirrorDestinationFootprintName = "snapmirror_destination_footprint"
		} else {
			flagSnapmirrorDestinationFootprintName = fmt.Sprintf("%v.snapmirror_destination_footprint", cmdPrefix)
		}

		flagSnapmirrorDestinationFootprintValue, err := cmd.Flags().GetInt64(flagSnapmirrorDestinationFootprintName)
		if err != nil {
			return err, false
		}
		m.SnapmirrorDestinationFootprint = &flagSnapmirrorDestinationFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropSnapshotFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnapshotName := fmt.Sprintf("%v.snapshot", cmdPrefix)
	if cmd.Flags().Changed(flagSnapshotName) {
		// info: complex object snapshot VolumeInlineSpaceInlineSnapshot is retrieved outside this Changed() block
	}
	flagSnapshotValue := m.Snapshot
	if swag.IsZero(flagSnapshotValue) {
		flagSnapshotValue = &models.VolumeInlineSpaceInlineSnapshot{}
	}

	err, SnapshotAdded := retrieveModelVolumeInlineSpaceInlineSnapshotFlags(depth+1, flagSnapshotValue, flagSnapshotName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotAdded
	if SnapshotAdded {
		m.Snapshot = flagSnapshotValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropSnapshotReserveUnusableFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnapshotReserveUnusableName := fmt.Sprintf("%v.snapshot_reserve_unusable", cmdPrefix)
	if cmd.Flags().Changed(flagSnapshotReserveUnusableName) {

		var flagSnapshotReserveUnusableName string
		if cmdPrefix == "" {
			flagSnapshotReserveUnusableName = "snapshot_reserve_unusable"
		} else {
			flagSnapshotReserveUnusableName = fmt.Sprintf("%v.snapshot_reserve_unusable", cmdPrefix)
		}

		flagSnapshotReserveUnusableValue, err := cmd.Flags().GetInt64(flagSnapshotReserveUnusableName)
		if err != nil {
			return err, false
		}
		m.SnapshotReserveUnusable = &flagSnapshotReserveUnusableValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropSnapshotSpillFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnapshotSpillName := fmt.Sprintf("%v.snapshot_spill", cmdPrefix)
	if cmd.Flags().Changed(flagSnapshotSpillName) {

		var flagSnapshotSpillName string
		if cmdPrefix == "" {
			flagSnapshotSpillName = "snapshot_spill"
		} else {
			flagSnapshotSpillName = fmt.Sprintf("%v.snapshot_spill", cmdPrefix)
		}

		flagSnapshotSpillValue, err := cmd.Flags().GetInt64(flagSnapshotSpillName)
		if err != nil {
			return err, false
		}
		m.SnapshotSpill = &flagSnapshotSpillValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropTotalFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalFootprintName := fmt.Sprintf("%v.total_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagTotalFootprintName) {

		var flagTotalFootprintName string
		if cmdPrefix == "" {
			flagTotalFootprintName = "total_footprint"
		} else {
			flagTotalFootprintName = fmt.Sprintf("%v.total_footprint", cmdPrefix)
		}

		flagTotalFootprintValue, err := cmd.Flags().GetInt64(flagTotalFootprintName)
		if err != nil {
			return err, false
		}
		m.TotalFootprint = &flagTotalFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropTotalMetadataFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalMetadataName := fmt.Sprintf("%v.total_metadata", cmdPrefix)
	if cmd.Flags().Changed(flagTotalMetadataName) {

		var flagTotalMetadataName string
		if cmdPrefix == "" {
			flagTotalMetadataName = "total_metadata"
		} else {
			flagTotalMetadataName = fmt.Sprintf("%v.total_metadata", cmdPrefix)
		}

		flagTotalMetadataValue, err := cmd.Flags().GetInt64(flagTotalMetadataName)
		if err != nil {
			return err, false
		}
		m.TotalMetadata = &flagTotalMetadataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropTotalMetadataFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalMetadataFootprintName := fmt.Sprintf("%v.total_metadata_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagTotalMetadataFootprintName) {

		var flagTotalMetadataFootprintName string
		if cmdPrefix == "" {
			flagTotalMetadataFootprintName = "total_metadata_footprint"
		} else {
			flagTotalMetadataFootprintName = fmt.Sprintf("%v.total_metadata_footprint", cmdPrefix)
		}

		flagTotalMetadataFootprintValue, err := cmd.Flags().GetInt64(flagTotalMetadataFootprintName)
		if err != nil {
			return err, false
		}
		m.TotalMetadataFootprint = &flagTotalMetadataFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropUsedFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedName := fmt.Sprintf("%v.used", cmdPrefix)
	if cmd.Flags().Changed(flagUsedName) {

		var flagUsedName string
		if cmdPrefix == "" {
			flagUsedName = "used"
		} else {
			flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
		}

		flagUsedValue, err := cmd.Flags().GetInt64(flagUsedName)
		if err != nil {
			return err, false
		}
		m.Used = &flagUsedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropUsedByAfsFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedByAfsName := fmt.Sprintf("%v.used_by_afs", cmdPrefix)
	if cmd.Flags().Changed(flagUsedByAfsName) {

		var flagUsedByAfsName string
		if cmdPrefix == "" {
			flagUsedByAfsName = "used_by_afs"
		} else {
			flagUsedByAfsName = fmt.Sprintf("%v.used_by_afs", cmdPrefix)
		}

		flagUsedByAfsValue, err := cmd.Flags().GetInt64(flagUsedByAfsName)
		if err != nil {
			return err, false
		}
		m.UsedByAfs = &flagUsedByAfsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropUserDataFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUserDataName := fmt.Sprintf("%v.user_data", cmdPrefix)
	if cmd.Flags().Changed(flagUserDataName) {

		var flagUserDataName string
		if cmdPrefix == "" {
			flagUserDataName = "user_data"
		} else {
			flagUserDataName = fmt.Sprintf("%v.user_data", cmdPrefix)
		}

		flagUserDataValue, err := cmd.Flags().GetInt64(flagUserDataName)
		if err != nil {
			return err, false
		}
		m.UserData = &flagUserDataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpacePropVolumeGuaranteeFootprintFlags(depth int, m *models.VolumeInlineSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeGuaranteeFootprintName := fmt.Sprintf("%v.volume_guarantee_footprint", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeGuaranteeFootprintName) {

		var flagVolumeGuaranteeFootprintName string
		if cmdPrefix == "" {
			flagVolumeGuaranteeFootprintName = "volume_guarantee_footprint"
		} else {
			flagVolumeGuaranteeFootprintName = fmt.Sprintf("%v.volume_guarantee_footprint", cmdPrefix)
		}

		flagVolumeGuaranteeFootprintValue, err := cmd.Flags().GetInt64(flagVolumeGuaranteeFootprintName)
		if err != nil {
			return err, false
		}
		m.VolumeGuaranteeFootprint = &flagVolumeGuaranteeFootprintValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineSpaceInlineLogicalSpace

// register flags to command
func registerModelVolumeInlineSpaceInlineLogicalSpaceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineSpaceInlineLogicalSpacePropAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineLogicalSpacePropEnforcement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineLogicalSpacePropReporting(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineLogicalSpacePropUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineLogicalSpacePropUsedByAfs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineLogicalSpacePropUsedBySnapshots(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineLogicalSpacePropUsedPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSpaceInlineLogicalSpacePropAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAvailableDescription := `The amount of space available in this volume with storage efficiency space considered used, in bytes.`

	var flagAvailableName string
	if cmdPrefix == "" {
		flagAvailableName = "available"
	} else {
		flagAvailableName = fmt.Sprintf("%v.available", cmdPrefix)
	}

	var flagAvailableDefault int64

	_ = cmd.PersistentFlags().Int64(flagAvailableName, flagAvailableDefault, flagAvailableDescription)

	return nil
}

func registerVolumeInlineSpaceInlineLogicalSpacePropEnforcement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEnforcementDescription := `Specifies whether space accounting for operations on the volume is done along with storage efficiency.`

	var flagEnforcementName string
	if cmdPrefix == "" {
		flagEnforcementName = "enforcement"
	} else {
		flagEnforcementName = fmt.Sprintf("%v.enforcement", cmdPrefix)
	}

	var flagEnforcementDefault bool

	_ = cmd.PersistentFlags().Bool(flagEnforcementName, flagEnforcementDefault, flagEnforcementDescription)

	return nil
}

func registerVolumeInlineSpaceInlineLogicalSpacePropReporting(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReportingDescription := `Specifies whether space reporting on the volume is done along with storage efficiency.`

	var flagReportingName string
	if cmdPrefix == "" {
		flagReportingName = "reporting"
	} else {
		flagReportingName = fmt.Sprintf("%v.reporting", cmdPrefix)
	}

	var flagReportingDefault bool

	_ = cmd.PersistentFlags().Bool(flagReportingName, flagReportingDefault, flagReportingDescription)

	return nil
}

func registerVolumeInlineSpaceInlineLogicalSpacePropUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedDescription := `SUM of (physical-used, shared_refs, compression_saved_in_plane0, vbn_zero, future_blk_cnt), in bytes.`

	var flagUsedName string
	if cmdPrefix == "" {
		flagUsedName = "used"
	} else {
		flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
	}

	var flagUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedName, flagUsedDefault, flagUsedDescription)

	return nil
}

func registerVolumeInlineSpaceInlineLogicalSpacePropUsedByAfs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedByAfsDescription := `The virtual space used by AFS alone (includes volume reserves) and along with storage efficiency, in bytes.`

	var flagUsedByAfsName string
	if cmdPrefix == "" {
		flagUsedByAfsName = "used_by_afs"
	} else {
		flagUsedByAfsName = fmt.Sprintf("%v.used_by_afs", cmdPrefix)
	}

	var flagUsedByAfsDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedByAfsName, flagUsedByAfsDefault, flagUsedByAfsDescription)

	return nil
}

func registerVolumeInlineSpaceInlineLogicalSpacePropUsedBySnapshots(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedBySnapshotsDescription := `Size that is logically used across all snapshots in the volume, in bytes.`

	var flagUsedBySnapshotsName string
	if cmdPrefix == "" {
		flagUsedBySnapshotsName = "used_by_snapshots"
	} else {
		flagUsedBySnapshotsName = fmt.Sprintf("%v.used_by_snapshots", cmdPrefix)
	}

	var flagUsedBySnapshotsDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedBySnapshotsName, flagUsedBySnapshotsDefault, flagUsedBySnapshotsDescription)

	return nil
}

func registerVolumeInlineSpaceInlineLogicalSpacePropUsedPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedPercentDescription := `SUM of (physical-used, shared_refs, compression_saved_in_plane0, vbn_zero, future_blk_cnt), as a percentage.`

	var flagUsedPercentName string
	if cmdPrefix == "" {
		flagUsedPercentName = "used_percent"
	} else {
		flagUsedPercentName = fmt.Sprintf("%v.used_percent", cmdPrefix)
	}

	var flagUsedPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedPercentName, flagUsedPercentDefault, flagUsedPercentDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineSpaceInlineLogicalSpaceFlags(depth int, m *models.VolumeInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AvailableAdded := retrieveVolumeInlineSpaceInlineLogicalSpacePropAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AvailableAdded

	err, EnforcementAdded := retrieveVolumeInlineSpaceInlineLogicalSpacePropEnforcementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnforcementAdded

	err, ReportingAdded := retrieveVolumeInlineSpaceInlineLogicalSpacePropReportingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReportingAdded

	err, UsedAdded := retrieveVolumeInlineSpaceInlineLogicalSpacePropUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedAdded

	err, UsedByAfsAdded := retrieveVolumeInlineSpaceInlineLogicalSpacePropUsedByAfsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedByAfsAdded

	err, UsedBySnapshotsAdded := retrieveVolumeInlineSpaceInlineLogicalSpacePropUsedBySnapshotsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedBySnapshotsAdded

	err, UsedPercentAdded := retrieveVolumeInlineSpaceInlineLogicalSpacePropUsedPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedPercentAdded

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineLogicalSpacePropAvailableFlags(depth int, m *models.VolumeInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAvailableName := fmt.Sprintf("%v.available", cmdPrefix)
	if cmd.Flags().Changed(flagAvailableName) {

		var flagAvailableName string
		if cmdPrefix == "" {
			flagAvailableName = "available"
		} else {
			flagAvailableName = fmt.Sprintf("%v.available", cmdPrefix)
		}

		flagAvailableValue, err := cmd.Flags().GetInt64(flagAvailableName)
		if err != nil {
			return err, false
		}
		m.Available = &flagAvailableValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineLogicalSpacePropEnforcementFlags(depth int, m *models.VolumeInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEnforcementName := fmt.Sprintf("%v.enforcement", cmdPrefix)
	if cmd.Flags().Changed(flagEnforcementName) {

		var flagEnforcementName string
		if cmdPrefix == "" {
			flagEnforcementName = "enforcement"
		} else {
			flagEnforcementName = fmt.Sprintf("%v.enforcement", cmdPrefix)
		}

		flagEnforcementValue, err := cmd.Flags().GetBool(flagEnforcementName)
		if err != nil {
			return err, false
		}
		m.Enforcement = &flagEnforcementValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineLogicalSpacePropReportingFlags(depth int, m *models.VolumeInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReportingName := fmt.Sprintf("%v.reporting", cmdPrefix)
	if cmd.Flags().Changed(flagReportingName) {

		var flagReportingName string
		if cmdPrefix == "" {
			flagReportingName = "reporting"
		} else {
			flagReportingName = fmt.Sprintf("%v.reporting", cmdPrefix)
		}

		flagReportingValue, err := cmd.Flags().GetBool(flagReportingName)
		if err != nil {
			return err, false
		}
		m.Reporting = &flagReportingValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineLogicalSpacePropUsedFlags(depth int, m *models.VolumeInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedName := fmt.Sprintf("%v.used", cmdPrefix)
	if cmd.Flags().Changed(flagUsedName) {

		var flagUsedName string
		if cmdPrefix == "" {
			flagUsedName = "used"
		} else {
			flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
		}

		flagUsedValue, err := cmd.Flags().GetInt64(flagUsedName)
		if err != nil {
			return err, false
		}
		m.Used = &flagUsedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineLogicalSpacePropUsedByAfsFlags(depth int, m *models.VolumeInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedByAfsName := fmt.Sprintf("%v.used_by_afs", cmdPrefix)
	if cmd.Flags().Changed(flagUsedByAfsName) {

		var flagUsedByAfsName string
		if cmdPrefix == "" {
			flagUsedByAfsName = "used_by_afs"
		} else {
			flagUsedByAfsName = fmt.Sprintf("%v.used_by_afs", cmdPrefix)
		}

		flagUsedByAfsValue, err := cmd.Flags().GetInt64(flagUsedByAfsName)
		if err != nil {
			return err, false
		}
		m.UsedByAfs = &flagUsedByAfsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineLogicalSpacePropUsedBySnapshotsFlags(depth int, m *models.VolumeInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedBySnapshotsName := fmt.Sprintf("%v.used_by_snapshots", cmdPrefix)
	if cmd.Flags().Changed(flagUsedBySnapshotsName) {

		var flagUsedBySnapshotsName string
		if cmdPrefix == "" {
			flagUsedBySnapshotsName = "used_by_snapshots"
		} else {
			flagUsedBySnapshotsName = fmt.Sprintf("%v.used_by_snapshots", cmdPrefix)
		}

		flagUsedBySnapshotsValue, err := cmd.Flags().GetInt64(flagUsedBySnapshotsName)
		if err != nil {
			return err, false
		}
		m.UsedBySnapshots = &flagUsedBySnapshotsValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineLogicalSpacePropUsedPercentFlags(depth int, m *models.VolumeInlineSpaceInlineLogicalSpace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedPercentName := fmt.Sprintf("%v.used_percent", cmdPrefix)
	if cmd.Flags().Changed(flagUsedPercentName) {

		var flagUsedPercentName string
		if cmdPrefix == "" {
			flagUsedPercentName = "used_percent"
		} else {
			flagUsedPercentName = fmt.Sprintf("%v.used_percent", cmdPrefix)
		}

		flagUsedPercentValue, err := cmd.Flags().GetInt64(flagUsedPercentName)
		if err != nil {
			return err, false
		}
		m.UsedPercent = &flagUsedPercentValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineSpaceInlineSnapshot

// register flags to command
func registerModelVolumeInlineSpaceInlineSnapshotFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineSpaceInlineSnapshotPropAutodelete(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotPropAutodeleteEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotPropAutodeleteTrigger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotPropReserveAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotPropReservePercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotPropReserveSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotPropSpaceUsedPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotPropUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotPropAutodelete(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAutodeleteName string
	if cmdPrefix == "" {
		flagAutodeleteName = "autodelete"
	} else {
		flagAutodeleteName = fmt.Sprintf("%v.autodelete", cmdPrefix)
	}

	if err := registerModelVolumeInlineSpaceInlineSnapshotInlineAutodeleteFlags(depth+1, flagAutodeleteName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotPropAutodeleteEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAutodeleteEnabledDescription := `Specifies whether snapshot autodelete is currently enabled on this volume. This field will no longer be supported in a future release. Use autodelete.enabled instead.`

	var flagAutodeleteEnabledName string
	if cmdPrefix == "" {
		flagAutodeleteEnabledName = "autodelete_enabled"
	} else {
		flagAutodeleteEnabledName = fmt.Sprintf("%v.autodelete_enabled", cmdPrefix)
	}

	var flagAutodeleteEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagAutodeleteEnabledName, flagAutodeleteEnabledDefault, flagAutodeleteEnabledDescription)

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotPropAutodeleteTrigger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAutodeleteTriggerDescription := `Enum: ["volume","snap_reserve"]. Specifies when the system should trigger an autodelete of snapshots. When set to _volume_, autodelete is triggered based on volume fullness. When set to _snap_reserve_, autodelete is triggered based on snapshot reserve fullness. The default value is _volume_. This field will no longer be supported in a future release. Use autodelete.trigger instead.`

	var flagAutodeleteTriggerName string
	if cmdPrefix == "" {
		flagAutodeleteTriggerName = "autodelete_trigger"
	} else {
		flagAutodeleteTriggerName = fmt.Sprintf("%v.autodelete_trigger", cmdPrefix)
	}

	var flagAutodeleteTriggerDefault string = "volume"

	_ = cmd.PersistentFlags().String(flagAutodeleteTriggerName, flagAutodeleteTriggerDefault, flagAutodeleteTriggerDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagAutodeleteTriggerName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["volume","snap_reserve"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotPropReserveAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReserveAvailableDescription := `Size available for snapshots within the snapshot reserve, in bytes.`

	var flagReserveAvailableName string
	if cmdPrefix == "" {
		flagReserveAvailableName = "reserve_available"
	} else {
		flagReserveAvailableName = fmt.Sprintf("%v.reserve_available", cmdPrefix)
	}

	var flagReserveAvailableDefault int64

	_ = cmd.PersistentFlags().Int64(flagReserveAvailableName, flagReserveAvailableDefault, flagReserveAvailableDescription)

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotPropReservePercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReservePercentDescription := `The space that has been set aside as a reserve for snapshot usage, in percent.`

	var flagReservePercentName string
	if cmdPrefix == "" {
		flagReservePercentName = "reserve_percent"
	} else {
		flagReservePercentName = fmt.Sprintf("%v.reserve_percent", cmdPrefix)
	}

	var flagReservePercentDefault int64 = 5

	_ = cmd.PersistentFlags().Int64(flagReservePercentName, flagReservePercentDefault, flagReservePercentDescription)

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotPropReserveSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReserveSizeDescription := `Size in the volume that has been set aside as a reserve for snapshot usage, in bytes.`

	var flagReserveSizeName string
	if cmdPrefix == "" {
		flagReserveSizeName = "reserve_size"
	} else {
		flagReserveSizeName = fmt.Sprintf("%v.reserve_size", cmdPrefix)
	}

	var flagReserveSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagReserveSizeName, flagReserveSizeDefault, flagReserveSizeDescription)

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotPropSpaceUsedPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSpaceUsedPercentDescription := `Percentage of snapshot reserve size that has been used.`

	var flagSpaceUsedPercentName string
	if cmdPrefix == "" {
		flagSpaceUsedPercentName = "space_used_percent"
	} else {
		flagSpaceUsedPercentName = fmt.Sprintf("%v.space_used_percent", cmdPrefix)
	}

	var flagSpaceUsedPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceUsedPercentName, flagSpaceUsedPercentDefault, flagSpaceUsedPercentDescription)

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotPropUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUsedDescription := `The total space used by snapshots in the volume, in bytes.`

	var flagUsedName string
	if cmdPrefix == "" {
		flagUsedName = "used"
	} else {
		flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
	}

	var flagUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagUsedName, flagUsedDefault, flagUsedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineSpaceInlineSnapshotFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AutodeleteAdded := retrieveVolumeInlineSpaceInlineSnapshotPropAutodeleteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AutodeleteAdded

	err, AutodeleteEnabledAdded := retrieveVolumeInlineSpaceInlineSnapshotPropAutodeleteEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AutodeleteEnabledAdded

	err, AutodeleteTriggerAdded := retrieveVolumeInlineSpaceInlineSnapshotPropAutodeleteTriggerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AutodeleteTriggerAdded

	err, ReserveAvailableAdded := retrieveVolumeInlineSpaceInlineSnapshotPropReserveAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReserveAvailableAdded

	err, ReservePercentAdded := retrieveVolumeInlineSpaceInlineSnapshotPropReservePercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReservePercentAdded

	err, ReserveSizeAdded := retrieveVolumeInlineSpaceInlineSnapshotPropReserveSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReserveSizeAdded

	err, SpaceUsedPercentAdded := retrieveVolumeInlineSpaceInlineSnapshotPropSpaceUsedPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceUsedPercentAdded

	err, UsedAdded := retrieveVolumeInlineSpaceInlineSnapshotPropUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsedAdded

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotPropAutodeleteFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAutodeleteName := fmt.Sprintf("%v.autodelete", cmdPrefix)
	if cmd.Flags().Changed(flagAutodeleteName) {
		// info: complex object autodelete VolumeInlineSpaceInlineSnapshotInlineAutodelete is retrieved outside this Changed() block
	}
	flagAutodeleteValue := m.Autodelete
	if swag.IsZero(flagAutodeleteValue) {
		flagAutodeleteValue = &models.VolumeInlineSpaceInlineSnapshotInlineAutodelete{}
	}

	err, AutodeleteAdded := retrieveModelVolumeInlineSpaceInlineSnapshotInlineAutodeleteFlags(depth+1, flagAutodeleteValue, flagAutodeleteName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AutodeleteAdded
	if AutodeleteAdded {
		m.Autodelete = flagAutodeleteValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotPropAutodeleteEnabledFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAutodeleteEnabledName := fmt.Sprintf("%v.autodelete_enabled", cmdPrefix)
	if cmd.Flags().Changed(flagAutodeleteEnabledName) {

		var flagAutodeleteEnabledName string
		if cmdPrefix == "" {
			flagAutodeleteEnabledName = "autodelete_enabled"
		} else {
			flagAutodeleteEnabledName = fmt.Sprintf("%v.autodelete_enabled", cmdPrefix)
		}

		flagAutodeleteEnabledValue, err := cmd.Flags().GetBool(flagAutodeleteEnabledName)
		if err != nil {
			return err, false
		}
		m.AutodeleteEnabled = &flagAutodeleteEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotPropAutodeleteTriggerFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAutodeleteTriggerName := fmt.Sprintf("%v.autodelete_trigger", cmdPrefix)
	if cmd.Flags().Changed(flagAutodeleteTriggerName) {

		var flagAutodeleteTriggerName string
		if cmdPrefix == "" {
			flagAutodeleteTriggerName = "autodelete_trigger"
		} else {
			flagAutodeleteTriggerName = fmt.Sprintf("%v.autodelete_trigger", cmdPrefix)
		}

		flagAutodeleteTriggerValue, err := cmd.Flags().GetString(flagAutodeleteTriggerName)
		if err != nil {
			return err, false
		}
		m.AutodeleteTrigger = &flagAutodeleteTriggerValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotPropReserveAvailableFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReserveAvailableName := fmt.Sprintf("%v.reserve_available", cmdPrefix)
	if cmd.Flags().Changed(flagReserveAvailableName) {

		var flagReserveAvailableName string
		if cmdPrefix == "" {
			flagReserveAvailableName = "reserve_available"
		} else {
			flagReserveAvailableName = fmt.Sprintf("%v.reserve_available", cmdPrefix)
		}

		flagReserveAvailableValue, err := cmd.Flags().GetInt64(flagReserveAvailableName)
		if err != nil {
			return err, false
		}
		m.ReserveAvailable = &flagReserveAvailableValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotPropReservePercentFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReservePercentName := fmt.Sprintf("%v.reserve_percent", cmdPrefix)
	if cmd.Flags().Changed(flagReservePercentName) {

		var flagReservePercentName string
		if cmdPrefix == "" {
			flagReservePercentName = "reserve_percent"
		} else {
			flagReservePercentName = fmt.Sprintf("%v.reserve_percent", cmdPrefix)
		}

		flagReservePercentValue, err := cmd.Flags().GetInt64(flagReservePercentName)
		if err != nil {
			return err, false
		}
		m.ReservePercent = &flagReservePercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotPropReserveSizeFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReserveSizeName := fmt.Sprintf("%v.reserve_size", cmdPrefix)
	if cmd.Flags().Changed(flagReserveSizeName) {

		var flagReserveSizeName string
		if cmdPrefix == "" {
			flagReserveSizeName = "reserve_size"
		} else {
			flagReserveSizeName = fmt.Sprintf("%v.reserve_size", cmdPrefix)
		}

		flagReserveSizeValue, err := cmd.Flags().GetInt64(flagReserveSizeName)
		if err != nil {
			return err, false
		}
		m.ReserveSize = &flagReserveSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotPropSpaceUsedPercentFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSpaceUsedPercentName := fmt.Sprintf("%v.space_used_percent", cmdPrefix)
	if cmd.Flags().Changed(flagSpaceUsedPercentName) {

		var flagSpaceUsedPercentName string
		if cmdPrefix == "" {
			flagSpaceUsedPercentName = "space_used_percent"
		} else {
			flagSpaceUsedPercentName = fmt.Sprintf("%v.space_used_percent", cmdPrefix)
		}

		flagSpaceUsedPercentValue, err := cmd.Flags().GetInt64(flagSpaceUsedPercentName)
		if err != nil {
			return err, false
		}
		m.SpaceUsedPercent = &flagSpaceUsedPercentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotPropUsedFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshot, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUsedName := fmt.Sprintf("%v.used", cmdPrefix)
	if cmd.Flags().Changed(flagUsedName) {

		var flagUsedName string
		if cmdPrefix == "" {
			flagUsedName = "used"
		} else {
			flagUsedName = fmt.Sprintf("%v.used", cmdPrefix)
		}

		flagUsedValue, err := cmd.Flags().GetInt64(flagUsedName)
		if err != nil {
			return err, false
		}
		m.Used = &flagUsedValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineSpaceInlineSnapshotInlineAutodelete

// register flags to command
func registerModelVolumeInlineSpaceInlineSnapshotInlineAutodeleteFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropCommitment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropDeferDelete(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropDeleteOrder(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropPrefix(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropTargetFreeSpace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropTrigger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropCommitment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCommitmentDescription := `Enum: ["try","disrupt","destroy"]. By default, snapshot autodelete does not delete snapshots locked by Snapmirror, clones of a volume, a LUN, an NVMe namespace, or a file.  Deletion of snapshots locked by these applications is specified using this option. The default value is try.`

	var flagCommitmentName string
	if cmdPrefix == "" {
		flagCommitmentName = "commitment"
	} else {
		flagCommitmentName = fmt.Sprintf("%v.commitment", cmdPrefix)
	}

	var flagCommitmentDefault string = "try"

	_ = cmd.PersistentFlags().String(flagCommitmentName, flagCommitmentDefault, flagCommitmentDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagCommitmentName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["try","disrupt","destroy"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropDeferDelete(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDeferDeleteDescription := `Enum: ["scheduled","user_created","prefix","none"]. Allows the user to inform snapshot autodelete to defer the deletion of a specified snapshot until the end. The default value is user_created.`

	var flagDeferDeleteName string
	if cmdPrefix == "" {
		flagDeferDeleteName = "defer_delete"
	} else {
		flagDeferDeleteName = fmt.Sprintf("%v.defer_delete", cmdPrefix)
	}

	var flagDeferDeleteDefault string = "user_created"

	_ = cmd.PersistentFlags().String(flagDeferDeleteName, flagDeferDeleteDefault, flagDeferDeleteDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagDeferDeleteName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["scheduled","user_created","prefix","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropDeleteOrder(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDeleteOrderDescription := `Enum: ["newest_first","oldest_first"]. Specifies the order in which snapshot autodelete occurs. Ordering is done using the date and time the snapshot is created. The default value is oldest_first.`

	var flagDeleteOrderName string
	if cmdPrefix == "" {
		flagDeleteOrderName = "delete_order"
	} else {
		flagDeleteOrderName = fmt.Sprintf("%v.delete_order", cmdPrefix)
	}

	var flagDeleteOrderDefault string = "oldest_first"

	_ = cmd.PersistentFlags().String(flagDeleteOrderName, flagDeleteOrderDefault, flagDeleteOrderDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagDeleteOrderName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["newest_first","oldest_first"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEnabledDescription := `Specifies whether snapshot autodelete is currently enabled on this volume.`

	var flagEnabledName string
	if cmdPrefix == "" {
		flagEnabledName = "enabled"
	} else {
		flagEnabledName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var flagEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagEnabledName, flagEnabledDefault, flagEnabledDescription)

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropPrefix(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPrefixDescription := `Specifies the prefix of the snapshot which if matched, is deleted last. Used with autodelete_defer_delete when used with a prefix value.`

	var flagPrefixName string
	if cmdPrefix == "" {
		flagPrefixName = "prefix"
	} else {
		flagPrefixName = fmt.Sprintf("%v.prefix", cmdPrefix)
	}

	var flagPrefixDefault string

	_ = cmd.PersistentFlags().String(flagPrefixName, flagPrefixDefault, flagPrefixDescription)

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropTargetFreeSpace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTargetFreeSpaceDescription := `Snapshots are deleted, one at a time, until the used volume space reaches the value specified. The default is 20% free space or 80% utilized.`

	var flagTargetFreeSpaceName string
	if cmdPrefix == "" {
		flagTargetFreeSpaceName = "target_free_space"
	} else {
		flagTargetFreeSpaceName = fmt.Sprintf("%v.target_free_space", cmdPrefix)
	}

	var flagTargetFreeSpaceDefault int64 = 20

	_ = cmd.PersistentFlags().Int64(flagTargetFreeSpaceName, flagTargetFreeSpaceDefault, flagTargetFreeSpaceDescription)

	return nil
}

func registerVolumeInlineSpaceInlineSnapshotInlineAutodeletePropTrigger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTriggerDescription := `Enum: ["volume","snap_reserve"]. Specifies when the system should trigger an autodelete of snapshots. When set to _volume_, autodelete is triggered based on volume fullness. When set to _snap_reserve_, autodelete is triggered based on snapshot reserve fullness. The default value is _volume_.`

	var flagTriggerName string
	if cmdPrefix == "" {
		flagTriggerName = "trigger"
	} else {
		flagTriggerName = fmt.Sprintf("%v.trigger", cmdPrefix)
	}

	var flagTriggerDefault string = "volume"

	_ = cmd.PersistentFlags().String(flagTriggerName, flagTriggerDefault, flagTriggerDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagTriggerName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["volume","snap_reserve"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineSpaceInlineSnapshotInlineAutodeleteFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshotInlineAutodelete, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CommitmentAdded := retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropCommitmentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CommitmentAdded

	err, DeferDeleteAdded := retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropDeferDeleteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DeferDeleteAdded

	err, DeleteOrderAdded := retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropDeleteOrderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DeleteOrderAdded

	err, EnabledAdded := retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnabledAdded

	err, PrefixAdded := retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropPrefixFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PrefixAdded

	err, TargetFreeSpaceAdded := retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropTargetFreeSpaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TargetFreeSpaceAdded

	err, TriggerAdded := retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropTriggerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TriggerAdded

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropCommitmentFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshotInlineAutodelete, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCommitmentName := fmt.Sprintf("%v.commitment", cmdPrefix)
	if cmd.Flags().Changed(flagCommitmentName) {

		var flagCommitmentName string
		if cmdPrefix == "" {
			flagCommitmentName = "commitment"
		} else {
			flagCommitmentName = fmt.Sprintf("%v.commitment", cmdPrefix)
		}

		flagCommitmentValue, err := cmd.Flags().GetString(flagCommitmentName)
		if err != nil {
			return err, false
		}
		m.Commitment = &flagCommitmentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropDeferDeleteFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshotInlineAutodelete, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDeferDeleteName := fmt.Sprintf("%v.defer_delete", cmdPrefix)
	if cmd.Flags().Changed(flagDeferDeleteName) {

		var flagDeferDeleteName string
		if cmdPrefix == "" {
			flagDeferDeleteName = "defer_delete"
		} else {
			flagDeferDeleteName = fmt.Sprintf("%v.defer_delete", cmdPrefix)
		}

		flagDeferDeleteValue, err := cmd.Flags().GetString(flagDeferDeleteName)
		if err != nil {
			return err, false
		}
		m.DeferDelete = &flagDeferDeleteValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropDeleteOrderFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshotInlineAutodelete, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDeleteOrderName := fmt.Sprintf("%v.delete_order", cmdPrefix)
	if cmd.Flags().Changed(flagDeleteOrderName) {

		var flagDeleteOrderName string
		if cmdPrefix == "" {
			flagDeleteOrderName = "delete_order"
		} else {
			flagDeleteOrderName = fmt.Sprintf("%v.delete_order", cmdPrefix)
		}

		flagDeleteOrderValue, err := cmd.Flags().GetString(flagDeleteOrderName)
		if err != nil {
			return err, false
		}
		m.DeleteOrder = &flagDeleteOrderValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropEnabledFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshotInlineAutodelete, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEnabledName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(flagEnabledName) {

		var flagEnabledName string
		if cmdPrefix == "" {
			flagEnabledName = "enabled"
		} else {
			flagEnabledName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		flagEnabledValue, err := cmd.Flags().GetBool(flagEnabledName)
		if err != nil {
			return err, false
		}
		m.Enabled = &flagEnabledValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropPrefixFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshotInlineAutodelete, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPrefixName := fmt.Sprintf("%v.prefix", cmdPrefix)
	if cmd.Flags().Changed(flagPrefixName) {

		var flagPrefixName string
		if cmdPrefix == "" {
			flagPrefixName = "prefix"
		} else {
			flagPrefixName = fmt.Sprintf("%v.prefix", cmdPrefix)
		}

		flagPrefixValue, err := cmd.Flags().GetString(flagPrefixName)
		if err != nil {
			return err, false
		}
		m.Prefix = &flagPrefixValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropTargetFreeSpaceFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshotInlineAutodelete, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTargetFreeSpaceName := fmt.Sprintf("%v.target_free_space", cmdPrefix)
	if cmd.Flags().Changed(flagTargetFreeSpaceName) {

		var flagTargetFreeSpaceName string
		if cmdPrefix == "" {
			flagTargetFreeSpaceName = "target_free_space"
		} else {
			flagTargetFreeSpaceName = fmt.Sprintf("%v.target_free_space", cmdPrefix)
		}

		flagTargetFreeSpaceValue, err := cmd.Flags().GetInt64(flagTargetFreeSpaceName)
		if err != nil {
			return err, false
		}
		m.TargetFreeSpace = &flagTargetFreeSpaceValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSpaceInlineSnapshotInlineAutodeletePropTriggerFlags(depth int, m *models.VolumeInlineSpaceInlineSnapshotInlineAutodelete, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTriggerName := fmt.Sprintf("%v.trigger", cmdPrefix)
	if cmd.Flags().Changed(flagTriggerName) {

		var flagTriggerName string
		if cmdPrefix == "" {
			flagTriggerName = "trigger"
		} else {
			flagTriggerName = fmt.Sprintf("%v.trigger", cmdPrefix)
		}

		flagTriggerValue, err := cmd.Flags().GetString(flagTriggerName)
		if err != nil {
			return err, false
		}
		m.Trigger = &flagTriggerValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatistics

// register flags to command
func registerModelVolumeInlineStatisticsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsPropCifsOpsRaw(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsPropCloud(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsPropFlexcacheRaw(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsPropIopsRaw(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsPropLatencyRaw(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsPropNfsOpsRaw(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsPropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsPropThroughputRaw(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsPropTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsPropCifsOpsRaw(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagCifsOpsRawName string
	if cmdPrefix == "" {
		flagCifsOpsRawName = "cifs_ops_raw"
	} else {
		flagCifsOpsRawName = fmt.Sprintf("%v.cifs_ops_raw", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawFlags(depth+1, flagCifsOpsRawName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsPropCloud(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagCloudName string
	if cmdPrefix == "" {
		flagCloudName = "cloud"
	} else {
		flagCloudName = fmt.Sprintf("%v.cloud", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCloudFlags(depth+1, flagCloudName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsPropFlexcacheRaw(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagFlexcacheRawName string
	if cmdPrefix == "" {
		flagFlexcacheRawName = "flexcache_raw"
	} else {
		flagFlexcacheRawName = fmt.Sprintf("%v.flexcache_raw", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineFlexcacheRawFlags(depth+1, flagFlexcacheRawName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsPropIopsRaw(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagIopsRawName string
	if cmdPrefix == "" {
		flagIopsRawName = "iops_raw"
	} else {
		flagIopsRawName = fmt.Sprintf("%v.iops_raw", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineIopsRawFlags(depth+1, flagIopsRawName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsPropLatencyRaw(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLatencyRawName string
	if cmdPrefix == "" {
		flagLatencyRawName = "latency_raw"
	} else {
		flagLatencyRawName = fmt.Sprintf("%v.latency_raw", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineLatencyRawFlags(depth+1, flagLatencyRawName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsPropNfsOpsRaw(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagNfsOpsRawName string
	if cmdPrefix == "" {
		flagNfsOpsRawName = "nfs_ops_raw"
	} else {
		flagNfsOpsRawName = fmt.Sprintf("%v.nfs_ops_raw", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawFlags(depth+1, flagNfsOpsRawName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsPropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStatusDescription := `Enum: ["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]. Errors associated with the sample. For example, if the aggregation of data over multiple nodes fails, then any partial errors might return "ok" on success or "error" on an internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.`

	var flagStatusName string
	if cmdPrefix == "" {
		flagStatusName = "status"
	} else {
		flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var flagStatusDefault string

	_ = cmd.PersistentFlags().String(flagStatusName, flagStatusDefault, flagStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStatusName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsPropThroughputRaw(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagThroughputRawName string
	if cmdPrefix == "" {
		flagThroughputRawName = "throughput_raw"
	} else {
		flagThroughputRawName = fmt.Sprintf("%v.throughput_raw", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineThroughputRawFlags(depth+1, flagThroughputRawName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsPropTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTimestampDescription := `The timestamp of the performance data.`

	var flagTimestampName string
	if cmdPrefix == "" {
		flagTimestampName = "timestamp"
	} else {
		flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagTimestampName, "", flagTimestampDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsFlags(depth int, m *models.VolumeInlineStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CifsOpsRawAdded := retrieveVolumeInlineStatisticsPropCifsOpsRawFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CifsOpsRawAdded

	err, CloudAdded := retrieveVolumeInlineStatisticsPropCloudFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CloudAdded

	err, FlexcacheRawAdded := retrieveVolumeInlineStatisticsPropFlexcacheRawFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FlexcacheRawAdded

	err, IopsRawAdded := retrieveVolumeInlineStatisticsPropIopsRawFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IopsRawAdded

	err, LatencyRawAdded := retrieveVolumeInlineStatisticsPropLatencyRawFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LatencyRawAdded

	err, NfsOpsRawAdded := retrieveVolumeInlineStatisticsPropNfsOpsRawFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NfsOpsRawAdded

	err, StatusAdded := retrieveVolumeInlineStatisticsPropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	err, ThroughputRawAdded := retrieveVolumeInlineStatisticsPropThroughputRawFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ThroughputRawAdded

	err, TimestampAdded := retrieveVolumeInlineStatisticsPropTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimestampAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsPropCifsOpsRawFlags(depth int, m *models.VolumeInlineStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCifsOpsRawName := fmt.Sprintf("%v.cifs_ops_raw", cmdPrefix)
	if cmd.Flags().Changed(flagCifsOpsRawName) {
		// info: complex object cifs_ops_raw VolumeInlineStatisticsInlineCifsOpsRaw is retrieved outside this Changed() block
	}
	flagCifsOpsRawValue := m.CifsOpsRaw
	if swag.IsZero(flagCifsOpsRawValue) {
		flagCifsOpsRawValue = &models.VolumeInlineStatisticsInlineCifsOpsRaw{}
	}

	err, CifsOpsRawAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawFlags(depth+1, flagCifsOpsRawValue, flagCifsOpsRawName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CifsOpsRawAdded
	if CifsOpsRawAdded {
		m.CifsOpsRaw = flagCifsOpsRawValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsPropCloudFlags(depth int, m *models.VolumeInlineStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCloudName := fmt.Sprintf("%v.cloud", cmdPrefix)
	if cmd.Flags().Changed(flagCloudName) {
		// info: complex object cloud VolumeInlineStatisticsInlineCloud is retrieved outside this Changed() block
	}
	flagCloudValue := m.Cloud
	if swag.IsZero(flagCloudValue) {
		flagCloudValue = &models.VolumeInlineStatisticsInlineCloud{}
	}

	err, CloudAdded := retrieveModelVolumeInlineStatisticsInlineCloudFlags(depth+1, flagCloudValue, flagCloudName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CloudAdded
	if CloudAdded {
		m.Cloud = flagCloudValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsPropFlexcacheRawFlags(depth int, m *models.VolumeInlineStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFlexcacheRawName := fmt.Sprintf("%v.flexcache_raw", cmdPrefix)
	if cmd.Flags().Changed(flagFlexcacheRawName) {
		// info: complex object flexcache_raw VolumeInlineStatisticsInlineFlexcacheRaw is retrieved outside this Changed() block
	}
	flagFlexcacheRawValue := m.FlexcacheRaw
	if swag.IsZero(flagFlexcacheRawValue) {
		flagFlexcacheRawValue = &models.VolumeInlineStatisticsInlineFlexcacheRaw{}
	}

	err, FlexcacheRawAdded := retrieveModelVolumeInlineStatisticsInlineFlexcacheRawFlags(depth+1, flagFlexcacheRawValue, flagFlexcacheRawName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FlexcacheRawAdded
	if FlexcacheRawAdded {
		m.FlexcacheRaw = flagFlexcacheRawValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsPropIopsRawFlags(depth int, m *models.VolumeInlineStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIopsRawName := fmt.Sprintf("%v.iops_raw", cmdPrefix)
	if cmd.Flags().Changed(flagIopsRawName) {
		// info: complex object iops_raw VolumeInlineStatisticsInlineIopsRaw is retrieved outside this Changed() block
	}
	flagIopsRawValue := m.IopsRaw
	if swag.IsZero(flagIopsRawValue) {
		flagIopsRawValue = &models.VolumeInlineStatisticsInlineIopsRaw{}
	}

	err, IopsRawAdded := retrieveModelVolumeInlineStatisticsInlineIopsRawFlags(depth+1, flagIopsRawValue, flagIopsRawName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IopsRawAdded
	if IopsRawAdded {
		m.IopsRaw = flagIopsRawValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsPropLatencyRawFlags(depth int, m *models.VolumeInlineStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLatencyRawName := fmt.Sprintf("%v.latency_raw", cmdPrefix)
	if cmd.Flags().Changed(flagLatencyRawName) {
		// info: complex object latency_raw VolumeInlineStatisticsInlineLatencyRaw is retrieved outside this Changed() block
	}
	flagLatencyRawValue := m.LatencyRaw
	if swag.IsZero(flagLatencyRawValue) {
		flagLatencyRawValue = &models.VolumeInlineStatisticsInlineLatencyRaw{}
	}

	err, LatencyRawAdded := retrieveModelVolumeInlineStatisticsInlineLatencyRawFlags(depth+1, flagLatencyRawValue, flagLatencyRawName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LatencyRawAdded
	if LatencyRawAdded {
		m.LatencyRaw = flagLatencyRawValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsPropNfsOpsRawFlags(depth int, m *models.VolumeInlineStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNfsOpsRawName := fmt.Sprintf("%v.nfs_ops_raw", cmdPrefix)
	if cmd.Flags().Changed(flagNfsOpsRawName) {
		// info: complex object nfs_ops_raw VolumeInlineStatisticsInlineNfsOpsRaw is retrieved outside this Changed() block
	}
	flagNfsOpsRawValue := m.NfsOpsRaw
	if swag.IsZero(flagNfsOpsRawValue) {
		flagNfsOpsRawValue = &models.VolumeInlineStatisticsInlineNfsOpsRaw{}
	}

	err, NfsOpsRawAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawFlags(depth+1, flagNfsOpsRawValue, flagNfsOpsRawName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NfsOpsRawAdded
	if NfsOpsRawAdded {
		m.NfsOpsRaw = flagNfsOpsRawValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsPropStatusFlags(depth int, m *models.VolumeInlineStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStatusName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(flagStatusName) {

		var flagStatusName string
		if cmdPrefix == "" {
			flagStatusName = "status"
		} else {
			flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		flagStatusValue, err := cmd.Flags().GetString(flagStatusName)
		if err != nil {
			return err, false
		}
		m.Status = &flagStatusValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsPropThroughputRawFlags(depth int, m *models.VolumeInlineStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagThroughputRawName := fmt.Sprintf("%v.throughput_raw", cmdPrefix)
	if cmd.Flags().Changed(flagThroughputRawName) {
		// info: complex object throughput_raw VolumeInlineStatisticsInlineThroughputRaw is retrieved outside this Changed() block
	}
	flagThroughputRawValue := m.ThroughputRaw
	if swag.IsZero(flagThroughputRawValue) {
		flagThroughputRawValue = &models.VolumeInlineStatisticsInlineThroughputRaw{}
	}

	err, ThroughputRawAdded := retrieveModelVolumeInlineStatisticsInlineThroughputRawFlags(depth+1, flagThroughputRawValue, flagThroughputRawName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ThroughputRawAdded
	if ThroughputRawAdded {
		m.ThroughputRaw = flagThroughputRawValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsPropTimestampFlags(depth int, m *models.VolumeInlineStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTimestampName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(flagTimestampName) {

		var flagTimestampName string
		if cmdPrefix == "" {
			flagTimestampName = "timestamp"
		} else {
			flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
		}

		flagTimestampValueStr, err := cmd.Flags().GetString(flagTimestampName)
		if err != nil {
			return err, false
		}
		var flagTimestampValue strfmt.DateTime
		if err := flagTimestampValue.UnmarshalText([]byte(flagTimestampValueStr)); err != nil {
			return err, false
		}
		m.Timestamp = &flagTimestampValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRaw

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropAccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropAudit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropCreate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropGetattr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropLink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropLock(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropLookup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropOpen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropReaddir(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropReadlink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropRename(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropSetattr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropUnlink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropWatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawPropWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropAccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAccessName string
	if cmdPrefix == "" {
		flagAccessName = "access"
	} else {
		flagAccessName = fmt.Sprintf("%v.access", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineAccessFlags(depth+1, flagAccessName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropAudit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAuditName string
	if cmdPrefix == "" {
		flagAuditName = "audit"
	} else {
		flagAuditName = fmt.Sprintf("%v.audit", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineAuditFlags(depth+1, flagAuditName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropCreate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagCreateName string
	if cmdPrefix == "" {
		flagCreateName = "create"
	} else {
		flagCreateName = fmt.Sprintf("%v.create", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateFlags(depth+1, flagCreateName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropGetattr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagGetattrName string
	if cmdPrefix == "" {
		flagGetattrName = "getattr"
	} else {
		flagGetattrName = fmt.Sprintf("%v.getattr", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineGetattrFlags(depth+1, flagGetattrName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropLink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinkName string
	if cmdPrefix == "" {
		flagLinkName = "link"
	} else {
		flagLinkName = fmt.Sprintf("%v.link", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineLinkFlags(depth+1, flagLinkName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropLock(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLockName string
	if cmdPrefix == "" {
		flagLockName = "lock"
	} else {
		flagLockName = fmt.Sprintf("%v.lock", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineLockFlags(depth+1, flagLockName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropLookup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLookupName string
	if cmdPrefix == "" {
		flagLookupName = "lookup"
	} else {
		flagLookupName = fmt.Sprintf("%v.lookup", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineLookupFlags(depth+1, flagLookupName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropOpen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagOpenName string
	if cmdPrefix == "" {
		flagOpenName = "open"
	} else {
		flagOpenName = fmt.Sprintf("%v.open", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineOpenFlags(depth+1, flagOpenName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagReadName string
	if cmdPrefix == "" {
		flagReadName = "read"
	} else {
		flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineReadFlags(depth+1, flagReadName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropReaddir(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagReaddirName string
	if cmdPrefix == "" {
		flagReaddirName = "readdir"
	} else {
		flagReaddirName = fmt.Sprintf("%v.readdir", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineReaddirFlags(depth+1, flagReaddirName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropReadlink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagReadlinkName string
	if cmdPrefix == "" {
		flagReadlinkName = "readlink"
	} else {
		flagReadlinkName = fmt.Sprintf("%v.readlink", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineReadlinkFlags(depth+1, flagReadlinkName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropRename(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagRenameName string
	if cmdPrefix == "" {
		flagRenameName = "rename"
	} else {
		flagRenameName = fmt.Sprintf("%v.rename", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineRenameFlags(depth+1, flagRenameName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropSetattr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSetattrName string
	if cmdPrefix == "" {
		flagSetattrName = "setattr"
	} else {
		flagSetattrName = fmt.Sprintf("%v.setattr", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineSetattrFlags(depth+1, flagSetattrName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropUnlink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagUnlinkName string
	if cmdPrefix == "" {
		flagUnlinkName = "unlink"
	} else {
		flagUnlinkName = fmt.Sprintf("%v.unlink", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineUnlinkFlags(depth+1, flagUnlinkName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropWatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagWatchName string
	if cmdPrefix == "" {
		flagWatchName = "watch"
	} else {
		flagWatchName = fmt.Sprintf("%v.watch", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineWatchFlags(depth+1, flagWatchName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawPropWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagWriteName string
	if cmdPrefix == "" {
		flagWriteName = "write"
	} else {
		flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineWriteFlags(depth+1, flagWriteName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AccessAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropAccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AccessAdded

	err, AuditAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropAuditFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AuditAdded

	err, CreateAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropCreateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreateAdded

	err, GetattrAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropGetattrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GetattrAdded

	err, LinkAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropLinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinkAdded

	err, LockAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropLockFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LockAdded

	err, LookupAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropLookupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LookupAdded

	err, OpenAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropOpenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OpenAdded

	err, ReadAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded

	err, ReaddirAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropReaddirFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReaddirAdded

	err, ReadlinkAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropReadlinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadlinkAdded

	err, RenameAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropRenameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RenameAdded

	err, SetattrAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropSetattrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SetattrAdded

	err, UnlinkAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropUnlinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UnlinkAdded

	err, WatchAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropWatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WatchAdded

	err, WriteAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawPropWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropAccessFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAccessName := fmt.Sprintf("%v.access", cmdPrefix)
	if cmd.Flags().Changed(flagAccessName) {
		// info: complex object access VolumeInlineStatisticsInlineCifsOpsRawInlineAccess is retrieved outside this Changed() block
	}
	flagAccessValue := m.Access
	if swag.IsZero(flagAccessValue) {
		flagAccessValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineAccess{}
	}

	err, AccessAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineAccessFlags(depth+1, flagAccessValue, flagAccessName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AccessAdded
	if AccessAdded {
		m.Access = flagAccessValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropAuditFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAuditName := fmt.Sprintf("%v.audit", cmdPrefix)
	if cmd.Flags().Changed(flagAuditName) {
		// info: complex object audit VolumeInlineStatisticsInlineCifsOpsRawInlineAudit is retrieved outside this Changed() block
	}
	flagAuditValue := m.Audit
	if swag.IsZero(flagAuditValue) {
		flagAuditValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineAudit{}
	}

	err, AuditAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineAuditFlags(depth+1, flagAuditValue, flagAuditName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AuditAdded
	if AuditAdded {
		m.Audit = flagAuditValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropCreateFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCreateName := fmt.Sprintf("%v.create", cmdPrefix)
	if cmd.Flags().Changed(flagCreateName) {
		// info: complex object create VolumeInlineStatisticsInlineCifsOpsRawInlineCreate is retrieved outside this Changed() block
	}
	flagCreateValue := m.Create
	if swag.IsZero(flagCreateValue) {
		flagCreateValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreate{}
	}

	err, CreateAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateFlags(depth+1, flagCreateValue, flagCreateName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreateAdded
	if CreateAdded {
		m.Create = flagCreateValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropGetattrFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagGetattrName := fmt.Sprintf("%v.getattr", cmdPrefix)
	if cmd.Flags().Changed(flagGetattrName) {
		// info: complex object getattr VolumeInlineStatisticsInlineCifsOpsRawInlineGetattr is retrieved outside this Changed() block
	}
	flagGetattrValue := m.Getattr
	if swag.IsZero(flagGetattrValue) {
		flagGetattrValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineGetattr{}
	}

	err, GetattrAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineGetattrFlags(depth+1, flagGetattrValue, flagGetattrName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GetattrAdded
	if GetattrAdded {
		m.Getattr = flagGetattrValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropLinkFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinkName := fmt.Sprintf("%v.link", cmdPrefix)
	if cmd.Flags().Changed(flagLinkName) {
		// info: complex object link VolumeInlineStatisticsInlineCifsOpsRawInlineLink is retrieved outside this Changed() block
	}
	flagLinkValue := m.Link
	if swag.IsZero(flagLinkValue) {
		flagLinkValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineLink{}
	}

	err, LinkAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineLinkFlags(depth+1, flagLinkValue, flagLinkName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinkAdded
	if LinkAdded {
		m.Link = flagLinkValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropLockFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLockName := fmt.Sprintf("%v.lock", cmdPrefix)
	if cmd.Flags().Changed(flagLockName) {
		// info: complex object lock VolumeInlineStatisticsInlineCifsOpsRawInlineLock is retrieved outside this Changed() block
	}
	flagLockValue := m.Lock
	if swag.IsZero(flagLockValue) {
		flagLockValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineLock{}
	}

	err, LockAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineLockFlags(depth+1, flagLockValue, flagLockName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LockAdded
	if LockAdded {
		m.Lock = flagLockValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropLookupFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLookupName := fmt.Sprintf("%v.lookup", cmdPrefix)
	if cmd.Flags().Changed(flagLookupName) {
		// info: complex object lookup VolumeInlineStatisticsInlineCifsOpsRawInlineLookup is retrieved outside this Changed() block
	}
	flagLookupValue := m.Lookup
	if swag.IsZero(flagLookupValue) {
		flagLookupValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineLookup{}
	}

	err, LookupAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineLookupFlags(depth+1, flagLookupValue, flagLookupName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LookupAdded
	if LookupAdded {
		m.Lookup = flagLookupValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropOpenFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOpenName := fmt.Sprintf("%v.open", cmdPrefix)
	if cmd.Flags().Changed(flagOpenName) {
		// info: complex object open VolumeInlineStatisticsInlineCifsOpsRawInlineOpen is retrieved outside this Changed() block
	}
	flagOpenValue := m.Open
	if swag.IsZero(flagOpenValue) {
		flagOpenValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineOpen{}
	}

	err, OpenAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineOpenFlags(depth+1, flagOpenValue, flagOpenName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OpenAdded
	if OpenAdded {
		m.Open = flagOpenValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropReadFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(flagReadName) {
		// info: complex object read VolumeInlineStatisticsInlineCifsOpsRawInlineRead is retrieved outside this Changed() block
	}
	flagReadValue := m.Read
	if swag.IsZero(flagReadValue) {
		flagReadValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineRead{}
	}

	err, ReadAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineReadFlags(depth+1, flagReadValue, flagReadName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded
	if ReadAdded {
		m.Read = flagReadValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropReaddirFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReaddirName := fmt.Sprintf("%v.readdir", cmdPrefix)
	if cmd.Flags().Changed(flagReaddirName) {
		// info: complex object readdir VolumeInlineStatisticsInlineCifsOpsRawInlineReaddir is retrieved outside this Changed() block
	}
	flagReaddirValue := m.Readdir
	if swag.IsZero(flagReaddirValue) {
		flagReaddirValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineReaddir{}
	}

	err, ReaddirAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineReaddirFlags(depth+1, flagReaddirValue, flagReaddirName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReaddirAdded
	if ReaddirAdded {
		m.Readdir = flagReaddirValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropReadlinkFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadlinkName := fmt.Sprintf("%v.readlink", cmdPrefix)
	if cmd.Flags().Changed(flagReadlinkName) {
		// info: complex object readlink VolumeInlineStatisticsInlineCifsOpsRawInlineReadlink is retrieved outside this Changed() block
	}
	flagReadlinkValue := m.Readlink
	if swag.IsZero(flagReadlinkValue) {
		flagReadlinkValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineReadlink{}
	}

	err, ReadlinkAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineReadlinkFlags(depth+1, flagReadlinkValue, flagReadlinkName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadlinkAdded
	if ReadlinkAdded {
		m.Readlink = flagReadlinkValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropRenameFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRenameName := fmt.Sprintf("%v.rename", cmdPrefix)
	if cmd.Flags().Changed(flagRenameName) {
		// info: complex object rename VolumeInlineStatisticsInlineCifsOpsRawInlineRename is retrieved outside this Changed() block
	}
	flagRenameValue := m.Rename
	if swag.IsZero(flagRenameValue) {
		flagRenameValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineRename{}
	}

	err, RenameAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineRenameFlags(depth+1, flagRenameValue, flagRenameName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RenameAdded
	if RenameAdded {
		m.Rename = flagRenameValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropSetattrFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSetattrName := fmt.Sprintf("%v.setattr", cmdPrefix)
	if cmd.Flags().Changed(flagSetattrName) {
		// info: complex object setattr VolumeInlineStatisticsInlineCifsOpsRawInlineSetattr is retrieved outside this Changed() block
	}
	flagSetattrValue := m.Setattr
	if swag.IsZero(flagSetattrValue) {
		flagSetattrValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineSetattr{}
	}

	err, SetattrAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineSetattrFlags(depth+1, flagSetattrValue, flagSetattrName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SetattrAdded
	if SetattrAdded {
		m.Setattr = flagSetattrValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropUnlinkFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUnlinkName := fmt.Sprintf("%v.unlink", cmdPrefix)
	if cmd.Flags().Changed(flagUnlinkName) {
		// info: complex object unlink VolumeInlineStatisticsInlineCifsOpsRawInlineUnlink is retrieved outside this Changed() block
	}
	flagUnlinkValue := m.Unlink
	if swag.IsZero(flagUnlinkValue) {
		flagUnlinkValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineUnlink{}
	}

	err, UnlinkAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineUnlinkFlags(depth+1, flagUnlinkValue, flagUnlinkName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UnlinkAdded
	if UnlinkAdded {
		m.Unlink = flagUnlinkValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropWatchFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWatchName := fmt.Sprintf("%v.watch", cmdPrefix)
	if cmd.Flags().Changed(flagWatchName) {
		// info: complex object watch VolumeInlineStatisticsInlineCifsOpsRawInlineWatch is retrieved outside this Changed() block
	}
	flagWatchValue := m.Watch
	if swag.IsZero(flagWatchValue) {
		flagWatchValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineWatch{}
	}

	err, WatchAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineWatchFlags(depth+1, flagWatchValue, flagWatchName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WatchAdded
	if WatchAdded {
		m.Watch = flagWatchValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawPropWriteFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteName := fmt.Sprintf("%v.write", cmdPrefix)
	if cmd.Flags().Changed(flagWriteName) {
		// info: complex object write VolumeInlineStatisticsInlineCifsOpsRawInlineWrite is retrieved outside this Changed() block
	}
	flagWriteValue := m.Write
	if swag.IsZero(flagWriteValue) {
		flagWriteValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineWrite{}
	}

	err, WriteAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineWriteFlags(depth+1, flagWriteValue, flagWriteName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded
	if WriteAdded {
		m.Write = flagWriteValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineAccess

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineAccessFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineAccessPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineAccessPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineAccessPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineAccessPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineAccessFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineAccess, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineAccessPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineAccessPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineAccessPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineAccess, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineAccessPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineAccess, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineAudit

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineAuditFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineAuditPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineAuditPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineAuditPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineAuditPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineAuditFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineAudit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineAuditPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineAuditPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineAuditPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineAudit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineAuditPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineAudit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineCreate

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropDir(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropSymlink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropDir(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagDirName string
	if cmdPrefix == "" {
		flagDirName = "dir"
	} else {
		flagDirName = fmt.Sprintf("%v.dir", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDirFlags(depth+1, flagDirName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagFileName string
	if cmdPrefix == "" {
		flagFileName = "file"
	} else {
		flagFileName = fmt.Sprintf("%v.file", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFileFlags(depth+1, flagFileName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOtherFlags(depth+1, flagOtherName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropSymlink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSymlinkName string
	if cmdPrefix == "" {
		flagSymlinkName = "symlink"
	} else {
		flagSymlinkName = fmt.Sprintf("%v.symlink", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlinkFlags(depth+1, flagSymlinkName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DirAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropDirFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DirAdded

	err, FileAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded

	err, OtherAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, SymlinkAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropSymlinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SymlinkAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropDirFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDirName := fmt.Sprintf("%v.dir", cmdPrefix)
	if cmd.Flags().Changed(flagDirName) {
		// info: complex object dir VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDir is retrieved outside this Changed() block
	}
	flagDirValue := m.Dir
	if swag.IsZero(flagDirValue) {
		flagDirValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDir{}
	}

	err, DirAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDirFlags(depth+1, flagDirValue, flagDirName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DirAdded
	if DirAdded {
		m.Dir = flagDirValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropFileFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileName := fmt.Sprintf("%v.file", cmdPrefix)
	if cmd.Flags().Changed(flagFileName) {
		// info: complex object file VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFile is retrieved outside this Changed() block
	}
	flagFileValue := m.File
	if swag.IsZero(flagFileValue) {
		flagFileValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFile{}
	}

	err, FileAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFileFlags(depth+1, flagFileValue, flagFileName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded
	if FileAdded {
		m.File = flagFileValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropOtherFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {
		// info: complex object other VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOther is retrieved outside this Changed() block
	}
	flagOtherValue := m.Other
	if swag.IsZero(flagOtherValue) {
		flagOtherValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOther{}
	}

	err, OtherAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOtherFlags(depth+1, flagOtherValue, flagOtherName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded
	if OtherAdded {
		m.Other = flagOtherValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreatePropSymlinkFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSymlinkName := fmt.Sprintf("%v.symlink", cmdPrefix)
	if cmd.Flags().Changed(flagSymlinkName) {
		// info: complex object symlink VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlink is retrieved outside this Changed() block
	}
	flagSymlinkValue := m.Symlink
	if swag.IsZero(flagSymlinkValue) {
		flagSymlinkValue = &models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlink{}
	}

	err, SymlinkAdded := retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlinkFlags(depth+1, flagSymlinkValue, flagSymlinkName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SymlinkAdded
	if SymlinkAdded {
		m.Symlink = flagSymlinkValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDir

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDirFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDirPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDirPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDirPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDirPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDirFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDir, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDirPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDirPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDirPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDir, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDirPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineDir, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFile

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFileFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFilePropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFilePropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFilePropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFilePropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFileFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFilePropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFilePropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFilePropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFilePropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOther

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOtherFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOtherPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOtherPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOtherPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOtherPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOtherFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOther, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOtherPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOtherPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOtherPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOther, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOtherPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineOther, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlink

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlinkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlinkPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlinkPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlinkPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlinkPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlinkFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlinkPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlinkPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlinkPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlinkPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineCreateInlineSymlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineGetattr

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineGetattrFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineGetattrPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineGetattrPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineGetattrPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineGetattrPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineGetattrFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineGetattr, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineGetattrPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineGetattrPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineGetattrPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineGetattr, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineGetattrPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineGetattr, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineLink

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineLinkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineLinkPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineLinkPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineLinkPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineLinkPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineLinkFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineLinkPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineLinkPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineLinkPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineLinkPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineLock

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineLockFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineLockPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineLockPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineLockPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineLockPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineLockFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineLock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineLockPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineLockPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineLockPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineLock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineLockPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineLock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineLookup

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineLookupFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineLookupPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineLookupPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineLookupPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineLookupPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineLookupFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineLookup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineLookupPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineLookupPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineLookupPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineLookup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineLookupPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineLookup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineOpen

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineOpenFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineOpenPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineOpenPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineOpenPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineOpenPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineOpenFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineOpen, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineOpenPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineOpenPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineOpenPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineOpen, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineOpenPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineOpen, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineRead

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineReadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolLatencyHistogramCounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolLatencyHistogramLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolSizeHistogramCounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolSizeHistogramLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolLatencyHistogramCounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_latency_histogram_counts []*int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolLatencyHistogramLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_latency_histogram_labels []*string array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolSizeHistogramCounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_size_histogram_counts []*int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolSizeHistogramLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_size_histogram_labels []*string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineReadFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	err, VolumeProtocolLatencyHistogramCountsAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolLatencyHistogramCountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolLatencyHistogramCountsAdded

	err, VolumeProtocolLatencyHistogramLabelsAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolLatencyHistogramLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolLatencyHistogramLabelsAdded

	err, VolumeProtocolSizeHistogramCountsAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolSizeHistogramCountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolSizeHistogramCountsAdded

	err, VolumeProtocolSizeHistogramLabelsAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolSizeHistogramLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolSizeHistogramLabelsAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolLatencyHistogramCountsFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolLatencyHistogramCountsName := fmt.Sprintf("%v.volume_protocol_latency_histogram_counts", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolLatencyHistogramCountsName) {
		// warning: volume_protocol_latency_histogram_counts array type []*int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolLatencyHistogramLabelsFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolLatencyHistogramLabelsName := fmt.Sprintf("%v.volume_protocol_latency_histogram_labels", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolLatencyHistogramLabelsName) {
		// warning: volume_protocol_latency_histogram_labels array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolSizeHistogramCountsFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolSizeHistogramCountsName := fmt.Sprintf("%v.volume_protocol_size_histogram_counts", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolSizeHistogramCountsName) {
		// warning: volume_protocol_size_histogram_counts array type []*int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadPropVolumeProtocolSizeHistogramLabelsFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolSizeHistogramLabelsName := fmt.Sprintf("%v.volume_protocol_size_histogram_labels", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolSizeHistogramLabelsName) {
		// warning: volume_protocol_size_histogram_labels array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineReaddir

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineReaddirFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineReaddirPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineReaddirPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineReaddirPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineReaddirPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineReaddirFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineReaddir, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReaddirPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReaddirPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReaddirPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineReaddir, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReaddirPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineReaddir, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineReadlink

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineReadlinkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadlinkPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadlinkPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadlinkPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineReadlinkPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineReadlinkFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineReadlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadlinkPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadlinkPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadlinkPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineReadlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineReadlinkPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineReadlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineRename

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineRenameFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineRenamePropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineRenamePropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineRenamePropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineRenamePropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineRenameFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineRename, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineRenamePropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineRenamePropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineRenamePropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineRename, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineRenamePropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineRename, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineSetattr

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineSetattrFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineSetattrPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineSetattrPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineSetattrPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineSetattrPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineSetattrFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineSetattr, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineSetattrPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineSetattrPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineSetattrPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineSetattr, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineSetattrPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineSetattr, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineUnlink

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineUnlinkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineUnlinkPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineUnlinkPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineUnlinkPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineUnlinkPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineUnlinkFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineUnlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineUnlinkPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineUnlinkPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineUnlinkPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineUnlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineUnlinkPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineUnlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineWatch

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineWatchFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineWatchPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineWatchPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineWatchPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineWatchPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineWatchFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineWatch, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWatchPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWatchPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWatchPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineWatch, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWatchPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineWatch, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCifsOpsRawInlineWrite

// register flags to command
func registerModelVolumeInlineStatisticsInlineCifsOpsRawInlineWriteFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolLatencyHistogramCounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolLatencyHistogramLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolSizeHistogramCounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolSizeHistogramLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolLatencyHistogramCounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_latency_histogram_counts []*int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolLatencyHistogramLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_latency_histogram_labels []*string array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolSizeHistogramCounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_size_histogram_counts []*int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolSizeHistogramLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_size_histogram_labels []*string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCifsOpsRawInlineWriteFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	err, VolumeProtocolLatencyHistogramCountsAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolLatencyHistogramCountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolLatencyHistogramCountsAdded

	err, VolumeProtocolLatencyHistogramLabelsAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolLatencyHistogramLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolLatencyHistogramLabelsAdded

	err, VolumeProtocolSizeHistogramCountsAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolSizeHistogramCountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolSizeHistogramCountsAdded

	err, VolumeProtocolSizeHistogramLabelsAdded := retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolSizeHistogramLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolSizeHistogramLabelsAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolLatencyHistogramCountsFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolLatencyHistogramCountsName := fmt.Sprintf("%v.volume_protocol_latency_histogram_counts", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolLatencyHistogramCountsName) {
		// warning: volume_protocol_latency_histogram_counts array type []*int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolLatencyHistogramLabelsFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolLatencyHistogramLabelsName := fmt.Sprintf("%v.volume_protocol_latency_histogram_labels", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolLatencyHistogramLabelsName) {
		// warning: volume_protocol_latency_histogram_labels array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolSizeHistogramCountsFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolSizeHistogramCountsName := fmt.Sprintf("%v.volume_protocol_size_histogram_counts", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolSizeHistogramCountsName) {
		// warning: volume_protocol_size_histogram_counts array type []*int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCifsOpsRawInlineWritePropVolumeProtocolSizeHistogramLabelsFlags(depth int, m *models.VolumeInlineStatisticsInlineCifsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolSizeHistogramLabelsName := fmt.Sprintf("%v.volume_protocol_size_histogram_labels", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolSizeHistogramLabelsName) {
		// warning: volume_protocol_size_histogram_labels array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCloud

// register flags to command
func registerModelVolumeInlineStatisticsInlineCloudFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCloudPropIopsRaw(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCloudPropLatencyRaw(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCloudPropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCloudPropTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCloudPropIopsRaw(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagIopsRawName string
	if cmdPrefix == "" {
		flagIopsRawName = "iops_raw"
	} else {
		flagIopsRawName = fmt.Sprintf("%v.iops_raw", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCloudInlineIopsRawFlags(depth+1, flagIopsRawName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCloudPropLatencyRaw(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLatencyRawName string
	if cmdPrefix == "" {
		flagLatencyRawName = "latency_raw"
	} else {
		flagLatencyRawName = fmt.Sprintf("%v.latency_raw", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineCloudInlineLatencyRawFlags(depth+1, flagLatencyRawName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCloudPropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStatusDescription := `Enum: ["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]. Errors associated with the sample. For example, if the aggregation of data over multiple nodes fails, then any partial errors might return "ok" on success or "error" on an internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.`

	var flagStatusName string
	if cmdPrefix == "" {
		flagStatusName = "status"
	} else {
		flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var flagStatusDefault string

	_ = cmd.PersistentFlags().String(flagStatusName, flagStatusDefault, flagStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStatusName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCloudPropTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTimestampDescription := `The timestamp of the performance data.`

	var flagTimestampName string
	if cmdPrefix == "" {
		flagTimestampName = "timestamp"
	} else {
		flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagTimestampName, "", flagTimestampDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCloudFlags(depth int, m *models.VolumeInlineStatisticsInlineCloud, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, IopsRawAdded := retrieveVolumeInlineStatisticsInlineCloudPropIopsRawFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IopsRawAdded

	err, LatencyRawAdded := retrieveVolumeInlineStatisticsInlineCloudPropLatencyRawFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LatencyRawAdded

	err, StatusAdded := retrieveVolumeInlineStatisticsInlineCloudPropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	err, TimestampAdded := retrieveVolumeInlineStatisticsInlineCloudPropTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimestampAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCloudPropIopsRawFlags(depth int, m *models.VolumeInlineStatisticsInlineCloud, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIopsRawName := fmt.Sprintf("%v.iops_raw", cmdPrefix)
	if cmd.Flags().Changed(flagIopsRawName) {
		// info: complex object iops_raw VolumeInlineStatisticsInlineCloudInlineIopsRaw is retrieved outside this Changed() block
	}
	flagIopsRawValue := m.IopsRaw
	if swag.IsZero(flagIopsRawValue) {
		flagIopsRawValue = &models.VolumeInlineStatisticsInlineCloudInlineIopsRaw{}
	}

	err, IopsRawAdded := retrieveModelVolumeInlineStatisticsInlineCloudInlineIopsRawFlags(depth+1, flagIopsRawValue, flagIopsRawName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IopsRawAdded
	if IopsRawAdded {
		m.IopsRaw = flagIopsRawValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCloudPropLatencyRawFlags(depth int, m *models.VolumeInlineStatisticsInlineCloud, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLatencyRawName := fmt.Sprintf("%v.latency_raw", cmdPrefix)
	if cmd.Flags().Changed(flagLatencyRawName) {
		// info: complex object latency_raw VolumeInlineStatisticsInlineCloudInlineLatencyRaw is retrieved outside this Changed() block
	}
	flagLatencyRawValue := m.LatencyRaw
	if swag.IsZero(flagLatencyRawValue) {
		flagLatencyRawValue = &models.VolumeInlineStatisticsInlineCloudInlineLatencyRaw{}
	}

	err, LatencyRawAdded := retrieveModelVolumeInlineStatisticsInlineCloudInlineLatencyRawFlags(depth+1, flagLatencyRawValue, flagLatencyRawName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LatencyRawAdded
	if LatencyRawAdded {
		m.LatencyRaw = flagLatencyRawValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCloudPropStatusFlags(depth int, m *models.VolumeInlineStatisticsInlineCloud, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStatusName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(flagStatusName) {

		var flagStatusName string
		if cmdPrefix == "" {
			flagStatusName = "status"
		} else {
			flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		flagStatusValue, err := cmd.Flags().GetString(flagStatusName)
		if err != nil {
			return err, false
		}
		m.Status = &flagStatusValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCloudPropTimestampFlags(depth int, m *models.VolumeInlineStatisticsInlineCloud, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTimestampName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(flagTimestampName) {

		var flagTimestampName string
		if cmdPrefix == "" {
			flagTimestampName = "timestamp"
		} else {
			flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
		}

		flagTimestampValueStr, err := cmd.Flags().GetString(flagTimestampName)
		if err != nil {
			return err, false
		}
		var flagTimestampValue strfmt.DateTime
		if err := flagTimestampValue.UnmarshalText([]byte(flagTimestampValueStr)); err != nil {
			return err, false
		}
		m.Timestamp = &flagTimestampValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCloudInlineIopsRaw

// register flags to command
func registerModelVolumeInlineStatisticsInlineCloudInlineIopsRawFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCloudInlineIopsRawPropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCloudInlineIopsRawPropRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCloudInlineIopsRawPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCloudInlineIopsRawPropWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCloudInlineIopsRawPropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOtherDescription := `Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.`

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var flagOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagOtherName, flagOtherDefault, flagOtherDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCloudInlineIopsRawPropRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReadDescription := `Performance metric for read I/O operations.`

	var flagReadName string
	if cmdPrefix == "" {
		flagReadName = "read"
	} else {
		flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	var flagReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagReadName, flagReadDefault, flagReadDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCloudInlineIopsRawPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := `Performance metric aggregated over all types of I/O operations.`

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCloudInlineIopsRawPropWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWriteDescription := `Performance metric for write I/O operations.`

	var flagWriteName string
	if cmdPrefix == "" {
		flagWriteName = "write"
	} else {
		flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
	}

	var flagWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagWriteName, flagWriteDefault, flagWriteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCloudInlineIopsRawFlags(depth int, m *models.VolumeInlineStatisticsInlineCloudInlineIopsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, OtherAdded := retrieveVolumeInlineStatisticsInlineCloudInlineIopsRawPropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, ReadAdded := retrieveVolumeInlineStatisticsInlineCloudInlineIopsRawPropReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded

	err, TotalAdded := retrieveVolumeInlineStatisticsInlineCloudInlineIopsRawPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	err, WriteAdded := retrieveVolumeInlineStatisticsInlineCloudInlineIopsRawPropWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCloudInlineIopsRawPropOtherFlags(depth int, m *models.VolumeInlineStatisticsInlineCloudInlineIopsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {

		var flagOtherName string
		if cmdPrefix == "" {
			flagOtherName = "other"
		} else {
			flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		flagOtherValue, err := cmd.Flags().GetInt64(flagOtherName)
		if err != nil {
			return err, false
		}
		m.Other = &flagOtherValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCloudInlineIopsRawPropReadFlags(depth int, m *models.VolumeInlineStatisticsInlineCloudInlineIopsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(flagReadName) {

		var flagReadName string
		if cmdPrefix == "" {
			flagReadName = "read"
		} else {
			flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
		}

		flagReadValue, err := cmd.Flags().GetInt64(flagReadName)
		if err != nil {
			return err, false
		}
		m.Read = &flagReadValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCloudInlineIopsRawPropTotalFlags(depth int, m *models.VolumeInlineStatisticsInlineCloudInlineIopsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = &flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCloudInlineIopsRawPropWriteFlags(depth int, m *models.VolumeInlineStatisticsInlineCloudInlineIopsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteName := fmt.Sprintf("%v.write", cmdPrefix)
	if cmd.Flags().Changed(flagWriteName) {

		var flagWriteName string
		if cmdPrefix == "" {
			flagWriteName = "write"
		} else {
			flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
		}

		flagWriteValue, err := cmd.Flags().GetInt64(flagWriteName)
		if err != nil {
			return err, false
		}
		m.Write = &flagWriteValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineCloudInlineLatencyRaw

// register flags to command
func registerModelVolumeInlineStatisticsInlineCloudInlineLatencyRawFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineCloudInlineLatencyRawPropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCloudInlineLatencyRawPropRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCloudInlineLatencyRawPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineCloudInlineLatencyRawPropWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineCloudInlineLatencyRawPropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOtherDescription := `Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.`

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var flagOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagOtherName, flagOtherDefault, flagOtherDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCloudInlineLatencyRawPropRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReadDescription := `Performance metric for read I/O operations.`

	var flagReadName string
	if cmdPrefix == "" {
		flagReadName = "read"
	} else {
		flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	var flagReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagReadName, flagReadDefault, flagReadDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCloudInlineLatencyRawPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := `Performance metric aggregated over all types of I/O operations.`

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineCloudInlineLatencyRawPropWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWriteDescription := `Performance metric for write I/O operations.`

	var flagWriteName string
	if cmdPrefix == "" {
		flagWriteName = "write"
	} else {
		flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
	}

	var flagWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagWriteName, flagWriteDefault, flagWriteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineCloudInlineLatencyRawFlags(depth int, m *models.VolumeInlineStatisticsInlineCloudInlineLatencyRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, OtherAdded := retrieveVolumeInlineStatisticsInlineCloudInlineLatencyRawPropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, ReadAdded := retrieveVolumeInlineStatisticsInlineCloudInlineLatencyRawPropReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded

	err, TotalAdded := retrieveVolumeInlineStatisticsInlineCloudInlineLatencyRawPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	err, WriteAdded := retrieveVolumeInlineStatisticsInlineCloudInlineLatencyRawPropWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCloudInlineLatencyRawPropOtherFlags(depth int, m *models.VolumeInlineStatisticsInlineCloudInlineLatencyRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {

		var flagOtherName string
		if cmdPrefix == "" {
			flagOtherName = "other"
		} else {
			flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		flagOtherValue, err := cmd.Flags().GetInt64(flagOtherName)
		if err != nil {
			return err, false
		}
		m.Other = &flagOtherValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCloudInlineLatencyRawPropReadFlags(depth int, m *models.VolumeInlineStatisticsInlineCloudInlineLatencyRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(flagReadName) {

		var flagReadName string
		if cmdPrefix == "" {
			flagReadName = "read"
		} else {
			flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
		}

		flagReadValue, err := cmd.Flags().GetInt64(flagReadName)
		if err != nil {
			return err, false
		}
		m.Read = &flagReadValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCloudInlineLatencyRawPropTotalFlags(depth int, m *models.VolumeInlineStatisticsInlineCloudInlineLatencyRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = &flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineCloudInlineLatencyRawPropWriteFlags(depth int, m *models.VolumeInlineStatisticsInlineCloudInlineLatencyRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteName := fmt.Sprintf("%v.write", cmdPrefix)
	if cmd.Flags().Changed(flagWriteName) {

		var flagWriteName string
		if cmdPrefix == "" {
			flagWriteName = "write"
		} else {
			flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
		}

		flagWriteValue, err := cmd.Flags().GetInt64(flagWriteName)
		if err != nil {
			return err, false
		}
		m.Write = &flagWriteValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineFlexcacheRaw

// register flags to command
func registerModelVolumeInlineStatisticsInlineFlexcacheRawFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineFlexcacheRawPropCacheMissBlocks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineFlexcacheRawPropClientRequestedBlocks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineFlexcacheRawPropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineFlexcacheRawPropTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineFlexcacheRawPropCacheMissBlocks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCacheMissBlocksDescription := `Blocks retrieved from origin in case of a cache miss. This can be divided by the raw client_requested_blocks and multiplied by 100 to calculate the cache miss percentage.`

	var flagCacheMissBlocksName string
	if cmdPrefix == "" {
		flagCacheMissBlocksName = "cache_miss_blocks"
	} else {
		flagCacheMissBlocksName = fmt.Sprintf("%v.cache_miss_blocks", cmdPrefix)
	}

	var flagCacheMissBlocksDefault int64

	_ = cmd.PersistentFlags().Int64(flagCacheMissBlocksName, flagCacheMissBlocksDefault, flagCacheMissBlocksDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineFlexcacheRawPropClientRequestedBlocks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagClientRequestedBlocksDescription := `Total blocks requested by the client.`

	var flagClientRequestedBlocksName string
	if cmdPrefix == "" {
		flagClientRequestedBlocksName = "client_requested_blocks"
	} else {
		flagClientRequestedBlocksName = fmt.Sprintf("%v.client_requested_blocks", cmdPrefix)
	}

	var flagClientRequestedBlocksDefault int64

	_ = cmd.PersistentFlags().Int64(flagClientRequestedBlocksName, flagClientRequestedBlocksDefault, flagClientRequestedBlocksDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineFlexcacheRawPropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStatusDescription := `Enum: ["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]. Errors associated with the sample. For example, if the aggregation of data over multiple nodes fails, then any partial errors might return "ok" on success or "error" on an internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.`

	var flagStatusName string
	if cmdPrefix == "" {
		flagStatusName = "status"
	} else {
		flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var flagStatusDefault string

	_ = cmd.PersistentFlags().String(flagStatusName, flagStatusDefault, flagStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStatusName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineFlexcacheRawPropTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTimestampDescription := `The timestamp of the performance data.`

	var flagTimestampName string
	if cmdPrefix == "" {
		flagTimestampName = "timestamp"
	} else {
		flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagTimestampName, "", flagTimestampDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineFlexcacheRawFlags(depth int, m *models.VolumeInlineStatisticsInlineFlexcacheRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CacheMissBlocksAdded := retrieveVolumeInlineStatisticsInlineFlexcacheRawPropCacheMissBlocksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CacheMissBlocksAdded

	err, ClientRequestedBlocksAdded := retrieveVolumeInlineStatisticsInlineFlexcacheRawPropClientRequestedBlocksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ClientRequestedBlocksAdded

	err, StatusAdded := retrieveVolumeInlineStatisticsInlineFlexcacheRawPropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	err, TimestampAdded := retrieveVolumeInlineStatisticsInlineFlexcacheRawPropTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimestampAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineFlexcacheRawPropCacheMissBlocksFlags(depth int, m *models.VolumeInlineStatisticsInlineFlexcacheRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCacheMissBlocksName := fmt.Sprintf("%v.cache_miss_blocks", cmdPrefix)
	if cmd.Flags().Changed(flagCacheMissBlocksName) {

		var flagCacheMissBlocksName string
		if cmdPrefix == "" {
			flagCacheMissBlocksName = "cache_miss_blocks"
		} else {
			flagCacheMissBlocksName = fmt.Sprintf("%v.cache_miss_blocks", cmdPrefix)
		}

		flagCacheMissBlocksValue, err := cmd.Flags().GetInt64(flagCacheMissBlocksName)
		if err != nil {
			return err, false
		}
		m.CacheMissBlocks = &flagCacheMissBlocksValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineFlexcacheRawPropClientRequestedBlocksFlags(depth int, m *models.VolumeInlineStatisticsInlineFlexcacheRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagClientRequestedBlocksName := fmt.Sprintf("%v.client_requested_blocks", cmdPrefix)
	if cmd.Flags().Changed(flagClientRequestedBlocksName) {

		var flagClientRequestedBlocksName string
		if cmdPrefix == "" {
			flagClientRequestedBlocksName = "client_requested_blocks"
		} else {
			flagClientRequestedBlocksName = fmt.Sprintf("%v.client_requested_blocks", cmdPrefix)
		}

		flagClientRequestedBlocksValue, err := cmd.Flags().GetInt64(flagClientRequestedBlocksName)
		if err != nil {
			return err, false
		}
		m.ClientRequestedBlocks = &flagClientRequestedBlocksValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineFlexcacheRawPropStatusFlags(depth int, m *models.VolumeInlineStatisticsInlineFlexcacheRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStatusName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(flagStatusName) {

		var flagStatusName string
		if cmdPrefix == "" {
			flagStatusName = "status"
		} else {
			flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		flagStatusValue, err := cmd.Flags().GetString(flagStatusName)
		if err != nil {
			return err, false
		}
		m.Status = &flagStatusValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineFlexcacheRawPropTimestampFlags(depth int, m *models.VolumeInlineStatisticsInlineFlexcacheRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTimestampName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(flagTimestampName) {

		var flagTimestampName string
		if cmdPrefix == "" {
			flagTimestampName = "timestamp"
		} else {
			flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
		}

		flagTimestampValueStr, err := cmd.Flags().GetString(flagTimestampName)
		if err != nil {
			return err, false
		}
		var flagTimestampValue strfmt.DateTime
		if err := flagTimestampValue.UnmarshalText([]byte(flagTimestampValueStr)); err != nil {
			return err, false
		}
		m.Timestamp = &flagTimestampValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineIopsRaw

// register flags to command
func registerModelVolumeInlineStatisticsInlineIopsRawFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineIopsRawPropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineIopsRawPropRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineIopsRawPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineIopsRawPropWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineIopsRawPropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOtherDescription := `Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.`

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var flagOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagOtherName, flagOtherDefault, flagOtherDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineIopsRawPropRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReadDescription := `Performance metric for read I/O operations.`

	var flagReadName string
	if cmdPrefix == "" {
		flagReadName = "read"
	} else {
		flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	var flagReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagReadName, flagReadDefault, flagReadDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineIopsRawPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := `Performance metric aggregated over all types of I/O operations.`

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineIopsRawPropWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWriteDescription := `Performance metric for write I/O operations.`

	var flagWriteName string
	if cmdPrefix == "" {
		flagWriteName = "write"
	} else {
		flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
	}

	var flagWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagWriteName, flagWriteDefault, flagWriteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineIopsRawFlags(depth int, m *models.VolumeInlineStatisticsInlineIopsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, OtherAdded := retrieveVolumeInlineStatisticsInlineIopsRawPropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, ReadAdded := retrieveVolumeInlineStatisticsInlineIopsRawPropReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded

	err, TotalAdded := retrieveVolumeInlineStatisticsInlineIopsRawPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	err, WriteAdded := retrieveVolumeInlineStatisticsInlineIopsRawPropWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineIopsRawPropOtherFlags(depth int, m *models.VolumeInlineStatisticsInlineIopsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {

		var flagOtherName string
		if cmdPrefix == "" {
			flagOtherName = "other"
		} else {
			flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		flagOtherValue, err := cmd.Flags().GetInt64(flagOtherName)
		if err != nil {
			return err, false
		}
		m.Other = &flagOtherValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineIopsRawPropReadFlags(depth int, m *models.VolumeInlineStatisticsInlineIopsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(flagReadName) {

		var flagReadName string
		if cmdPrefix == "" {
			flagReadName = "read"
		} else {
			flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
		}

		flagReadValue, err := cmd.Flags().GetInt64(flagReadName)
		if err != nil {
			return err, false
		}
		m.Read = &flagReadValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineIopsRawPropTotalFlags(depth int, m *models.VolumeInlineStatisticsInlineIopsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = &flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineIopsRawPropWriteFlags(depth int, m *models.VolumeInlineStatisticsInlineIopsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteName := fmt.Sprintf("%v.write", cmdPrefix)
	if cmd.Flags().Changed(flagWriteName) {

		var flagWriteName string
		if cmdPrefix == "" {
			flagWriteName = "write"
		} else {
			flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
		}

		flagWriteValue, err := cmd.Flags().GetInt64(flagWriteName)
		if err != nil {
			return err, false
		}
		m.Write = &flagWriteValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineLatencyRaw

// register flags to command
func registerModelVolumeInlineStatisticsInlineLatencyRawFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineLatencyRawPropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineLatencyRawPropRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineLatencyRawPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineLatencyRawPropWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineLatencyRawPropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOtherDescription := `Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.`

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var flagOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagOtherName, flagOtherDefault, flagOtherDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineLatencyRawPropRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReadDescription := `Performance metric for read I/O operations.`

	var flagReadName string
	if cmdPrefix == "" {
		flagReadName = "read"
	} else {
		flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	var flagReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagReadName, flagReadDefault, flagReadDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineLatencyRawPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := `Performance metric aggregated over all types of I/O operations.`

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineLatencyRawPropWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWriteDescription := `Performance metric for write I/O operations.`

	var flagWriteName string
	if cmdPrefix == "" {
		flagWriteName = "write"
	} else {
		flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
	}

	var flagWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagWriteName, flagWriteDefault, flagWriteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineLatencyRawFlags(depth int, m *models.VolumeInlineStatisticsInlineLatencyRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, OtherAdded := retrieveVolumeInlineStatisticsInlineLatencyRawPropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, ReadAdded := retrieveVolumeInlineStatisticsInlineLatencyRawPropReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded

	err, TotalAdded := retrieveVolumeInlineStatisticsInlineLatencyRawPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	err, WriteAdded := retrieveVolumeInlineStatisticsInlineLatencyRawPropWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineLatencyRawPropOtherFlags(depth int, m *models.VolumeInlineStatisticsInlineLatencyRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {

		var flagOtherName string
		if cmdPrefix == "" {
			flagOtherName = "other"
		} else {
			flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		flagOtherValue, err := cmd.Flags().GetInt64(flagOtherName)
		if err != nil {
			return err, false
		}
		m.Other = &flagOtherValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineLatencyRawPropReadFlags(depth int, m *models.VolumeInlineStatisticsInlineLatencyRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(flagReadName) {

		var flagReadName string
		if cmdPrefix == "" {
			flagReadName = "read"
		} else {
			flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
		}

		flagReadValue, err := cmd.Flags().GetInt64(flagReadName)
		if err != nil {
			return err, false
		}
		m.Read = &flagReadValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineLatencyRawPropTotalFlags(depth int, m *models.VolumeInlineStatisticsInlineLatencyRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = &flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineLatencyRawPropWriteFlags(depth int, m *models.VolumeInlineStatisticsInlineLatencyRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteName := fmt.Sprintf("%v.write", cmdPrefix)
	if cmd.Flags().Changed(flagWriteName) {

		var flagWriteName string
		if cmdPrefix == "" {
			flagWriteName = "write"
		} else {
			flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
		}

		flagWriteValue, err := cmd.Flags().GetInt64(flagWriteName)
		if err != nil {
			return err, false
		}
		m.Write = &flagWriteValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRaw

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropAccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropAudit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropCreate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropGetattr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropLink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropLock(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropLookup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropOpen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropReaddir(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropReadlink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropRename(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropSetattr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropUnlink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropWatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawPropWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropAccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAccessName string
	if cmdPrefix == "" {
		flagAccessName = "access"
	} else {
		flagAccessName = fmt.Sprintf("%v.access", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineAccessFlags(depth+1, flagAccessName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropAudit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAuditName string
	if cmdPrefix == "" {
		flagAuditName = "audit"
	} else {
		flagAuditName = fmt.Sprintf("%v.audit", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineAuditFlags(depth+1, flagAuditName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropCreate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagCreateName string
	if cmdPrefix == "" {
		flagCreateName = "create"
	} else {
		flagCreateName = fmt.Sprintf("%v.create", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateFlags(depth+1, flagCreateName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropGetattr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagGetattrName string
	if cmdPrefix == "" {
		flagGetattrName = "getattr"
	} else {
		flagGetattrName = fmt.Sprintf("%v.getattr", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineGetattrFlags(depth+1, flagGetattrName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropLink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinkName string
	if cmdPrefix == "" {
		flagLinkName = "link"
	} else {
		flagLinkName = fmt.Sprintf("%v.link", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineLinkFlags(depth+1, flagLinkName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropLock(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLockName string
	if cmdPrefix == "" {
		flagLockName = "lock"
	} else {
		flagLockName = fmt.Sprintf("%v.lock", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineLockFlags(depth+1, flagLockName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropLookup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLookupName string
	if cmdPrefix == "" {
		flagLookupName = "lookup"
	} else {
		flagLookupName = fmt.Sprintf("%v.lookup", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineLookupFlags(depth+1, flagLookupName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropOpen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagOpenName string
	if cmdPrefix == "" {
		flagOpenName = "open"
	} else {
		flagOpenName = fmt.Sprintf("%v.open", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineOpenFlags(depth+1, flagOpenName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagReadName string
	if cmdPrefix == "" {
		flagReadName = "read"
	} else {
		flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineReadFlags(depth+1, flagReadName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropReaddir(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagReaddirName string
	if cmdPrefix == "" {
		flagReaddirName = "readdir"
	} else {
		flagReaddirName = fmt.Sprintf("%v.readdir", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineReaddirFlags(depth+1, flagReaddirName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropReadlink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagReadlinkName string
	if cmdPrefix == "" {
		flagReadlinkName = "readlink"
	} else {
		flagReadlinkName = fmt.Sprintf("%v.readlink", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineReadlinkFlags(depth+1, flagReadlinkName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropRename(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagRenameName string
	if cmdPrefix == "" {
		flagRenameName = "rename"
	} else {
		flagRenameName = fmt.Sprintf("%v.rename", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineRenameFlags(depth+1, flagRenameName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropSetattr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSetattrName string
	if cmdPrefix == "" {
		flagSetattrName = "setattr"
	} else {
		flagSetattrName = fmt.Sprintf("%v.setattr", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineSetattrFlags(depth+1, flagSetattrName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropUnlink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagUnlinkName string
	if cmdPrefix == "" {
		flagUnlinkName = "unlink"
	} else {
		flagUnlinkName = fmt.Sprintf("%v.unlink", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineUnlinkFlags(depth+1, flagUnlinkName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropWatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagWatchName string
	if cmdPrefix == "" {
		flagWatchName = "watch"
	} else {
		flagWatchName = fmt.Sprintf("%v.watch", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineWatchFlags(depth+1, flagWatchName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawPropWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagWriteName string
	if cmdPrefix == "" {
		flagWriteName = "write"
	} else {
		flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineWriteFlags(depth+1, flagWriteName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AccessAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropAccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AccessAdded

	err, AuditAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropAuditFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AuditAdded

	err, CreateAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropCreateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreateAdded

	err, GetattrAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropGetattrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GetattrAdded

	err, LinkAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropLinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinkAdded

	err, LockAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropLockFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LockAdded

	err, LookupAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropLookupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LookupAdded

	err, OpenAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropOpenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OpenAdded

	err, ReadAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded

	err, ReaddirAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropReaddirFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReaddirAdded

	err, ReadlinkAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropReadlinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadlinkAdded

	err, RenameAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropRenameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RenameAdded

	err, SetattrAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropSetattrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SetattrAdded

	err, UnlinkAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropUnlinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UnlinkAdded

	err, WatchAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropWatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WatchAdded

	err, WriteAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawPropWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropAccessFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAccessName := fmt.Sprintf("%v.access", cmdPrefix)
	if cmd.Flags().Changed(flagAccessName) {
		// info: complex object access VolumeInlineStatisticsInlineNfsOpsRawInlineAccess is retrieved outside this Changed() block
	}
	flagAccessValue := m.Access
	if swag.IsZero(flagAccessValue) {
		flagAccessValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineAccess{}
	}

	err, AccessAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineAccessFlags(depth+1, flagAccessValue, flagAccessName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AccessAdded
	if AccessAdded {
		m.Access = flagAccessValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropAuditFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAuditName := fmt.Sprintf("%v.audit", cmdPrefix)
	if cmd.Flags().Changed(flagAuditName) {
		// info: complex object audit VolumeInlineStatisticsInlineNfsOpsRawInlineAudit is retrieved outside this Changed() block
	}
	flagAuditValue := m.Audit
	if swag.IsZero(flagAuditValue) {
		flagAuditValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineAudit{}
	}

	err, AuditAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineAuditFlags(depth+1, flagAuditValue, flagAuditName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AuditAdded
	if AuditAdded {
		m.Audit = flagAuditValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropCreateFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCreateName := fmt.Sprintf("%v.create", cmdPrefix)
	if cmd.Flags().Changed(flagCreateName) {
		// info: complex object create VolumeInlineStatisticsInlineNfsOpsRawInlineCreate is retrieved outside this Changed() block
	}
	flagCreateValue := m.Create
	if swag.IsZero(flagCreateValue) {
		flagCreateValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreate{}
	}

	err, CreateAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateFlags(depth+1, flagCreateValue, flagCreateName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreateAdded
	if CreateAdded {
		m.Create = flagCreateValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropGetattrFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagGetattrName := fmt.Sprintf("%v.getattr", cmdPrefix)
	if cmd.Flags().Changed(flagGetattrName) {
		// info: complex object getattr VolumeInlineStatisticsInlineNfsOpsRawInlineGetattr is retrieved outside this Changed() block
	}
	flagGetattrValue := m.Getattr
	if swag.IsZero(flagGetattrValue) {
		flagGetattrValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineGetattr{}
	}

	err, GetattrAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineGetattrFlags(depth+1, flagGetattrValue, flagGetattrName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GetattrAdded
	if GetattrAdded {
		m.Getattr = flagGetattrValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropLinkFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinkName := fmt.Sprintf("%v.link", cmdPrefix)
	if cmd.Flags().Changed(flagLinkName) {
		// info: complex object link VolumeInlineStatisticsInlineNfsOpsRawInlineLink is retrieved outside this Changed() block
	}
	flagLinkValue := m.Link
	if swag.IsZero(flagLinkValue) {
		flagLinkValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineLink{}
	}

	err, LinkAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineLinkFlags(depth+1, flagLinkValue, flagLinkName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinkAdded
	if LinkAdded {
		m.Link = flagLinkValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropLockFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLockName := fmt.Sprintf("%v.lock", cmdPrefix)
	if cmd.Flags().Changed(flagLockName) {
		// info: complex object lock VolumeInlineStatisticsInlineNfsOpsRawInlineLock is retrieved outside this Changed() block
	}
	flagLockValue := m.Lock
	if swag.IsZero(flagLockValue) {
		flagLockValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineLock{}
	}

	err, LockAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineLockFlags(depth+1, flagLockValue, flagLockName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LockAdded
	if LockAdded {
		m.Lock = flagLockValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropLookupFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLookupName := fmt.Sprintf("%v.lookup", cmdPrefix)
	if cmd.Flags().Changed(flagLookupName) {
		// info: complex object lookup VolumeInlineStatisticsInlineNfsOpsRawInlineLookup is retrieved outside this Changed() block
	}
	flagLookupValue := m.Lookup
	if swag.IsZero(flagLookupValue) {
		flagLookupValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineLookup{}
	}

	err, LookupAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineLookupFlags(depth+1, flagLookupValue, flagLookupName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LookupAdded
	if LookupAdded {
		m.Lookup = flagLookupValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropOpenFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOpenName := fmt.Sprintf("%v.open", cmdPrefix)
	if cmd.Flags().Changed(flagOpenName) {
		// info: complex object open VolumeInlineStatisticsInlineNfsOpsRawInlineOpen is retrieved outside this Changed() block
	}
	flagOpenValue := m.Open
	if swag.IsZero(flagOpenValue) {
		flagOpenValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineOpen{}
	}

	err, OpenAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineOpenFlags(depth+1, flagOpenValue, flagOpenName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OpenAdded
	if OpenAdded {
		m.Open = flagOpenValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropReadFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(flagReadName) {
		// info: complex object read VolumeInlineStatisticsInlineNfsOpsRawInlineRead is retrieved outside this Changed() block
	}
	flagReadValue := m.Read
	if swag.IsZero(flagReadValue) {
		flagReadValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineRead{}
	}

	err, ReadAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineReadFlags(depth+1, flagReadValue, flagReadName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded
	if ReadAdded {
		m.Read = flagReadValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropReaddirFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReaddirName := fmt.Sprintf("%v.readdir", cmdPrefix)
	if cmd.Flags().Changed(flagReaddirName) {
		// info: complex object readdir VolumeInlineStatisticsInlineNfsOpsRawInlineReaddir is retrieved outside this Changed() block
	}
	flagReaddirValue := m.Readdir
	if swag.IsZero(flagReaddirValue) {
		flagReaddirValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineReaddir{}
	}

	err, ReaddirAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineReaddirFlags(depth+1, flagReaddirValue, flagReaddirName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReaddirAdded
	if ReaddirAdded {
		m.Readdir = flagReaddirValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropReadlinkFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadlinkName := fmt.Sprintf("%v.readlink", cmdPrefix)
	if cmd.Flags().Changed(flagReadlinkName) {
		// info: complex object readlink VolumeInlineStatisticsInlineNfsOpsRawInlineReadlink is retrieved outside this Changed() block
	}
	flagReadlinkValue := m.Readlink
	if swag.IsZero(flagReadlinkValue) {
		flagReadlinkValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineReadlink{}
	}

	err, ReadlinkAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineReadlinkFlags(depth+1, flagReadlinkValue, flagReadlinkName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadlinkAdded
	if ReadlinkAdded {
		m.Readlink = flagReadlinkValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropRenameFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRenameName := fmt.Sprintf("%v.rename", cmdPrefix)
	if cmd.Flags().Changed(flagRenameName) {
		// info: complex object rename VolumeInlineStatisticsInlineNfsOpsRawInlineRename is retrieved outside this Changed() block
	}
	flagRenameValue := m.Rename
	if swag.IsZero(flagRenameValue) {
		flagRenameValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineRename{}
	}

	err, RenameAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineRenameFlags(depth+1, flagRenameValue, flagRenameName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RenameAdded
	if RenameAdded {
		m.Rename = flagRenameValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropSetattrFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSetattrName := fmt.Sprintf("%v.setattr", cmdPrefix)
	if cmd.Flags().Changed(flagSetattrName) {
		// info: complex object setattr VolumeInlineStatisticsInlineNfsOpsRawInlineSetattr is retrieved outside this Changed() block
	}
	flagSetattrValue := m.Setattr
	if swag.IsZero(flagSetattrValue) {
		flagSetattrValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineSetattr{}
	}

	err, SetattrAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineSetattrFlags(depth+1, flagSetattrValue, flagSetattrName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SetattrAdded
	if SetattrAdded {
		m.Setattr = flagSetattrValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropUnlinkFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUnlinkName := fmt.Sprintf("%v.unlink", cmdPrefix)
	if cmd.Flags().Changed(flagUnlinkName) {
		// info: complex object unlink VolumeInlineStatisticsInlineNfsOpsRawInlineUnlink is retrieved outside this Changed() block
	}
	flagUnlinkValue := m.Unlink
	if swag.IsZero(flagUnlinkValue) {
		flagUnlinkValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineUnlink{}
	}

	err, UnlinkAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineUnlinkFlags(depth+1, flagUnlinkValue, flagUnlinkName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UnlinkAdded
	if UnlinkAdded {
		m.Unlink = flagUnlinkValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropWatchFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWatchName := fmt.Sprintf("%v.watch", cmdPrefix)
	if cmd.Flags().Changed(flagWatchName) {
		// info: complex object watch VolumeInlineStatisticsInlineNfsOpsRawInlineWatch is retrieved outside this Changed() block
	}
	flagWatchValue := m.Watch
	if swag.IsZero(flagWatchValue) {
		flagWatchValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineWatch{}
	}

	err, WatchAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineWatchFlags(depth+1, flagWatchValue, flagWatchName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WatchAdded
	if WatchAdded {
		m.Watch = flagWatchValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawPropWriteFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteName := fmt.Sprintf("%v.write", cmdPrefix)
	if cmd.Flags().Changed(flagWriteName) {
		// info: complex object write VolumeInlineStatisticsInlineNfsOpsRawInlineWrite is retrieved outside this Changed() block
	}
	flagWriteValue := m.Write
	if swag.IsZero(flagWriteValue) {
		flagWriteValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineWrite{}
	}

	err, WriteAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineWriteFlags(depth+1, flagWriteValue, flagWriteName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded
	if WriteAdded {
		m.Write = flagWriteValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineAccess

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineAccessFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineAccessPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineAccessPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineAccessPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineAccessPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineAccessFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineAccess, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineAccessPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineAccessPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineAccessPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineAccess, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineAccessPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineAccess, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineAudit

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineAuditFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineAuditPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineAuditPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineAuditPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineAuditPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineAuditFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineAudit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineAuditPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineAuditPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineAuditPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineAudit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineAuditPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineAudit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineCreate

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropDir(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropSymlink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropDir(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagDirName string
	if cmdPrefix == "" {
		flagDirName = "dir"
	} else {
		flagDirName = fmt.Sprintf("%v.dir", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDirFlags(depth+1, flagDirName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagFileName string
	if cmdPrefix == "" {
		flagFileName = "file"
	} else {
		flagFileName = fmt.Sprintf("%v.file", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFileFlags(depth+1, flagFileName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOtherFlags(depth+1, flagOtherName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropSymlink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSymlinkName string
	if cmdPrefix == "" {
		flagSymlinkName = "symlink"
	} else {
		flagSymlinkName = fmt.Sprintf("%v.symlink", cmdPrefix)
	}

	if err := registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlinkFlags(depth+1, flagSymlinkName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DirAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropDirFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DirAdded

	err, FileAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded

	err, OtherAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, SymlinkAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropSymlinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SymlinkAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropDirFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDirName := fmt.Sprintf("%v.dir", cmdPrefix)
	if cmd.Flags().Changed(flagDirName) {
		// info: complex object dir VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDir is retrieved outside this Changed() block
	}
	flagDirValue := m.Dir
	if swag.IsZero(flagDirValue) {
		flagDirValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDir{}
	}

	err, DirAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDirFlags(depth+1, flagDirValue, flagDirName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DirAdded
	if DirAdded {
		m.Dir = flagDirValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropFileFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileName := fmt.Sprintf("%v.file", cmdPrefix)
	if cmd.Flags().Changed(flagFileName) {
		// info: complex object file VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFile is retrieved outside this Changed() block
	}
	flagFileValue := m.File
	if swag.IsZero(flagFileValue) {
		flagFileValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFile{}
	}

	err, FileAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFileFlags(depth+1, flagFileValue, flagFileName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded
	if FileAdded {
		m.File = flagFileValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropOtherFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {
		// info: complex object other VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOther is retrieved outside this Changed() block
	}
	flagOtherValue := m.Other
	if swag.IsZero(flagOtherValue) {
		flagOtherValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOther{}
	}

	err, OtherAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOtherFlags(depth+1, flagOtherValue, flagOtherName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded
	if OtherAdded {
		m.Other = flagOtherValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreatePropSymlinkFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSymlinkName := fmt.Sprintf("%v.symlink", cmdPrefix)
	if cmd.Flags().Changed(flagSymlinkName) {
		// info: complex object symlink VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlink is retrieved outside this Changed() block
	}
	flagSymlinkValue := m.Symlink
	if swag.IsZero(flagSymlinkValue) {
		flagSymlinkValue = &models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlink{}
	}

	err, SymlinkAdded := retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlinkFlags(depth+1, flagSymlinkValue, flagSymlinkName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SymlinkAdded
	if SymlinkAdded {
		m.Symlink = flagSymlinkValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDir

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDirFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDirPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDirPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDirPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDirPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDirFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDir, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDirPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDirPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDirPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDir, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDirPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineDir, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFile

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFileFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFilePropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFilePropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFilePropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFilePropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFileFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFilePropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFilePropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFilePropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFilePropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOther

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOtherFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOtherPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOtherPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOtherPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOtherPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOtherFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOther, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOtherPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOtherPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOtherPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOther, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOtherPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineOther, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlink

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlinkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlinkPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlinkPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlinkPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlinkPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlinkFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlinkPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlinkPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlinkPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlinkPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineCreateInlineSymlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineGetattr

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineGetattrFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineGetattrPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineGetattrPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineGetattrPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineGetattrPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineGetattrFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineGetattr, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineGetattrPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineGetattrPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineGetattrPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineGetattr, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineGetattrPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineGetattr, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineLink

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineLinkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineLinkPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineLinkPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineLinkPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineLinkPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineLinkFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineLinkPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineLinkPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineLinkPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineLinkPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineLock

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineLockFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineLockPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineLockPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineLockPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineLockPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineLockFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineLock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineLockPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineLockPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineLockPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineLock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineLockPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineLock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineLookup

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineLookupFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineLookupPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineLookupPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineLookupPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineLookupPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineLookupFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineLookup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineLookupPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineLookupPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineLookupPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineLookup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineLookupPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineLookup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineOpen

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineOpenFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineOpenPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineOpenPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineOpenPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineOpenPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineOpenFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineOpen, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineOpenPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineOpenPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineOpenPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineOpen, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineOpenPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineOpen, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineRead

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineReadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolLatencyHistogramCounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolLatencyHistogramLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolSizeHistogramCounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolSizeHistogramLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolLatencyHistogramCounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_latency_histogram_counts []*int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolLatencyHistogramLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_latency_histogram_labels []*string array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolSizeHistogramCounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_size_histogram_counts []*int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolSizeHistogramLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_size_histogram_labels []*string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineReadFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	err, VolumeProtocolLatencyHistogramCountsAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolLatencyHistogramCountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolLatencyHistogramCountsAdded

	err, VolumeProtocolLatencyHistogramLabelsAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolLatencyHistogramLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolLatencyHistogramLabelsAdded

	err, VolumeProtocolSizeHistogramCountsAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolSizeHistogramCountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolSizeHistogramCountsAdded

	err, VolumeProtocolSizeHistogramLabelsAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolSizeHistogramLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolSizeHistogramLabelsAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolLatencyHistogramCountsFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolLatencyHistogramCountsName := fmt.Sprintf("%v.volume_protocol_latency_histogram_counts", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolLatencyHistogramCountsName) {
		// warning: volume_protocol_latency_histogram_counts array type []*int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolLatencyHistogramLabelsFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolLatencyHistogramLabelsName := fmt.Sprintf("%v.volume_protocol_latency_histogram_labels", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolLatencyHistogramLabelsName) {
		// warning: volume_protocol_latency_histogram_labels array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolSizeHistogramCountsFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolSizeHistogramCountsName := fmt.Sprintf("%v.volume_protocol_size_histogram_counts", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolSizeHistogramCountsName) {
		// warning: volume_protocol_size_histogram_counts array type []*int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadPropVolumeProtocolSizeHistogramLabelsFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineRead, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolSizeHistogramLabelsName := fmt.Sprintf("%v.volume_protocol_size_histogram_labels", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolSizeHistogramLabelsName) {
		// warning: volume_protocol_size_histogram_labels array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineReaddir

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineReaddirFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineReaddirPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineReaddirPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineReaddirPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineReaddirPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineReaddirFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineReaddir, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReaddirPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReaddirPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReaddirPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineReaddir, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReaddirPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineReaddir, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineReadlink

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineReadlinkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadlinkPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadlinkPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadlinkPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineReadlinkPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineReadlinkFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineReadlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadlinkPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadlinkPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadlinkPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineReadlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineReadlinkPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineReadlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineRename

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineRenameFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineRenamePropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineRenamePropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineRenamePropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineRenamePropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineRenameFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineRename, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineRenamePropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineRenamePropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineRenamePropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineRename, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineRenamePropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineRename, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineSetattr

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineSetattrFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineSetattrPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineSetattrPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineSetattrPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineSetattrPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineSetattrFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineSetattr, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineSetattrPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineSetattrPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineSetattrPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineSetattr, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineSetattrPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineSetattr, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineUnlink

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineUnlinkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineUnlinkPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineUnlinkPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineUnlinkPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineUnlinkPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineUnlinkFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineUnlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineUnlinkPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineUnlinkPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineUnlinkPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineUnlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineUnlinkPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineUnlink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineWatch

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineWatchFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineWatchPropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineWatchPropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineWatchPropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineWatchPropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineWatchFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineWatch, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWatchPropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWatchPropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWatchPropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineWatch, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWatchPropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineWatch, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineNfsOpsRawInlineWrite

// register flags to command
func registerModelVolumeInlineStatisticsInlineNfsOpsRawInlineWriteFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropTotalTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolLatencyHistogramCounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolLatencyHistogramLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolSizeHistogramCounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolSizeHistogramLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountDescription := `Number of operations of the given type performed on this volume.`

	var flagCountName string
	if cmdPrefix == "" {
		flagCountName = "count"
	} else {
		flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var flagCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCountName, flagCountDefault, flagCountDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropTotalTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalTimeDescription := `The raw data component latency in microseconds measured within ONTAP for all operations of the given type.`

	var flagTotalTimeName string
	if cmdPrefix == "" {
		flagTotalTimeName = "total_time"
	} else {
		flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
	}

	var flagTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalTimeName, flagTotalTimeDefault, flagTotalTimeDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolLatencyHistogramCounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_latency_histogram_counts []*int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolLatencyHistogramLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_latency_histogram_labels []*string array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolSizeHistogramCounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_size_histogram_counts []*int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolSizeHistogramLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volume_protocol_size_histogram_labels []*string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineNfsOpsRawInlineWriteFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, TotalTimeAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropTotalTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalTimeAdded

	err, VolumeProtocolLatencyHistogramCountsAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolLatencyHistogramCountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolLatencyHistogramCountsAdded

	err, VolumeProtocolLatencyHistogramLabelsAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolLatencyHistogramLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolLatencyHistogramLabelsAdded

	err, VolumeProtocolSizeHistogramCountsAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolSizeHistogramCountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolSizeHistogramCountsAdded

	err, VolumeProtocolSizeHistogramLabelsAdded := retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolSizeHistogramLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeProtocolSizeHistogramLabelsAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropCountFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(flagCountName) {

		var flagCountName string
		if cmdPrefix == "" {
			flagCountName = "count"
		} else {
			flagCountName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		flagCountValue, err := cmd.Flags().GetInt64(flagCountName)
		if err != nil {
			return err, false
		}
		m.Count = &flagCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropTotalTimeFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalTimeName := fmt.Sprintf("%v.total_time", cmdPrefix)
	if cmd.Flags().Changed(flagTotalTimeName) {

		var flagTotalTimeName string
		if cmdPrefix == "" {
			flagTotalTimeName = "total_time"
		} else {
			flagTotalTimeName = fmt.Sprintf("%v.total_time", cmdPrefix)
		}

		flagTotalTimeValue, err := cmd.Flags().GetInt64(flagTotalTimeName)
		if err != nil {
			return err, false
		}
		m.TotalTime = &flagTotalTimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolLatencyHistogramCountsFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolLatencyHistogramCountsName := fmt.Sprintf("%v.volume_protocol_latency_histogram_counts", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolLatencyHistogramCountsName) {
		// warning: volume_protocol_latency_histogram_counts array type []*int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolLatencyHistogramLabelsFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolLatencyHistogramLabelsName := fmt.Sprintf("%v.volume_protocol_latency_histogram_labels", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolLatencyHistogramLabelsName) {
		// warning: volume_protocol_latency_histogram_labels array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolSizeHistogramCountsFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolSizeHistogramCountsName := fmt.Sprintf("%v.volume_protocol_size_histogram_counts", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolSizeHistogramCountsName) {
		// warning: volume_protocol_size_histogram_counts array type []*int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineNfsOpsRawInlineWritePropVolumeProtocolSizeHistogramLabelsFlags(depth int, m *models.VolumeInlineStatisticsInlineNfsOpsRawInlineWrite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVolumeProtocolSizeHistogramLabelsName := fmt.Sprintf("%v.volume_protocol_size_histogram_labels", cmdPrefix)
	if cmd.Flags().Changed(flagVolumeProtocolSizeHistogramLabelsName) {
		// warning: volume_protocol_size_histogram_labels array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineStatisticsInlineThroughputRaw

// register flags to command
func registerModelVolumeInlineStatisticsInlineThroughputRawFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineStatisticsInlineThroughputRawPropOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineThroughputRawPropRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineThroughputRawPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineStatisticsInlineThroughputRawPropWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineStatisticsInlineThroughputRawPropOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOtherDescription := `Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.`

	var flagOtherName string
	if cmdPrefix == "" {
		flagOtherName = "other"
	} else {
		flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var flagOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagOtherName, flagOtherDefault, flagOtherDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineThroughputRawPropRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagReadDescription := `Performance metric for read I/O operations.`

	var flagReadName string
	if cmdPrefix == "" {
		flagReadName = "read"
	} else {
		flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	var flagReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagReadName, flagReadDefault, flagReadDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineThroughputRawPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := `Performance metric aggregated over all types of I/O operations.`

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

func registerVolumeInlineStatisticsInlineThroughputRawPropWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWriteDescription := `Performance metric for write I/O operations.`

	var flagWriteName string
	if cmdPrefix == "" {
		flagWriteName = "write"
	} else {
		flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
	}

	var flagWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagWriteName, flagWriteDefault, flagWriteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineStatisticsInlineThroughputRawFlags(depth int, m *models.VolumeInlineStatisticsInlineThroughputRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, OtherAdded := retrieveVolumeInlineStatisticsInlineThroughputRawPropOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OtherAdded

	err, ReadAdded := retrieveVolumeInlineStatisticsInlineThroughputRawPropReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadAdded

	err, TotalAdded := retrieveVolumeInlineStatisticsInlineThroughputRawPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	err, WriteAdded := retrieveVolumeInlineStatisticsInlineThroughputRawPropWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WriteAdded

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineThroughputRawPropOtherFlags(depth int, m *models.VolumeInlineStatisticsInlineThroughputRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOtherName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(flagOtherName) {

		var flagOtherName string
		if cmdPrefix == "" {
			flagOtherName = "other"
		} else {
			flagOtherName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		flagOtherValue, err := cmd.Flags().GetInt64(flagOtherName)
		if err != nil {
			return err, false
		}
		m.Other = &flagOtherValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineThroughputRawPropReadFlags(depth int, m *models.VolumeInlineStatisticsInlineThroughputRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReadName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(flagReadName) {

		var flagReadName string
		if cmdPrefix == "" {
			flagReadName = "read"
		} else {
			flagReadName = fmt.Sprintf("%v.read", cmdPrefix)
		}

		flagReadValue, err := cmd.Flags().GetInt64(flagReadName)
		if err != nil {
			return err, false
		}
		m.Read = &flagReadValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineThroughputRawPropTotalFlags(depth int, m *models.VolumeInlineStatisticsInlineThroughputRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = &flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineStatisticsInlineThroughputRawPropWriteFlags(depth int, m *models.VolumeInlineStatisticsInlineThroughputRaw, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWriteName := fmt.Sprintf("%v.write", cmdPrefix)
	if cmd.Flags().Changed(flagWriteName) {

		var flagWriteName string
		if cmdPrefix == "" {
			flagWriteName = "write"
		} else {
			flagWriteName = fmt.Sprintf("%v.write", cmdPrefix)
		}

		flagWriteValue, err := cmd.Flags().GetInt64(flagWriteName)
		if err != nil {
			return err, false
		}
		m.Write = &flagWriteValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineSvm

// register flags to command
func registerModelVolumeInlineSvmFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineSvmPropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSvmPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineSvmPropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSvmPropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelVolumeInlineSvmInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSvmPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := `The name of the SVM. This field cannot be specified in a PATCH method.
`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerVolumeInlineSvmPropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := `The unique identifier of the SVM. This field cannot be specified in a PATCH method.
`

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineSvmFlags(depth int, m *models.VolumeInlineSvm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveVolumeInlineSvmPropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, NameAdded := retrieveVolumeInlineSvmPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveVolumeInlineSvmPropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveVolumeInlineSvmPropLinksFlags(depth int, m *models.VolumeInlineSvm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links VolumeInlineSvmInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.VolumeInlineSvmInlineLinks{}
	}

	err, LinksAdded := retrieveModelVolumeInlineSvmInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveVolumeInlineSvmPropNameFlags(depth int, m *models.VolumeInlineSvm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineSvmPropUUIDFlags(depth int, m *models.VolumeInlineSvm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineSvmInlineLinks

// register flags to command
func registerModelVolumeInlineSvmInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineSvmInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineSvmInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineSvmInlineLinksFlags(depth int, m *models.VolumeInlineSvmInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveVolumeInlineSvmInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveVolumeInlineSvmInlineLinksPropSelfFlags(depth int, m *models.VolumeInlineSvmInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeInlineTiering

// register flags to command
func registerModelVolumeInlineTieringFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeInlineTieringPropMinCoolingDays(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineTieringPropObjectTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineTieringPropPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeInlineTieringPropSupported(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineTieringPropMinCoolingDays(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMinCoolingDaysDescription := `This parameter specifies the minimum number of days that user data blocks of the volume must be cooled before they can be considered cold and tiered out to the cloud tier. Note that this parameter is only used for tiering purposes and does not affect the reporting of inactive data. The value specified should be greater than the frequency with which applications in the volume shift between different sets of data. This parameter cannot be set when volume tiering policy is either "none" or "all". The default value of this parameter depends on the volume's tiering policy. See the tiering policy section of this documentation for corresponding default values. If the tiering policy on the volume gets changed, then this parameter will be reset to the default value corresponding to the new tiering policy.`

	var flagMinCoolingDaysName string
	if cmdPrefix == "" {
		flagMinCoolingDaysName = "min_cooling_days"
	} else {
		flagMinCoolingDaysName = fmt.Sprintf("%v.min_cooling_days", cmdPrefix)
	}

	var flagMinCoolingDaysDefault int64

	_ = cmd.PersistentFlags().Int64(flagMinCoolingDaysName, flagMinCoolingDaysDefault, flagMinCoolingDaysDescription)

	return nil
}

func registerVolumeInlineTieringPropObjectTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: object_tags []*string array type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeInlineTieringPropPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPolicyDescription := `Enum: ["all","auto","none","snapshot_only"]. Policy that determines whether the user data blocks of a volume in a FabricPool will be tiered to the cloud store when they become cold. FabricPool combines flash (performance tier) with a cloud store into a single aggregate. Temperature of a volume block increases if it is accessed frequently and decreases when it is not. Valid in POST or PATCH.<br>all &dash; This policy allows tiering of both snapshots and active file system user data to the cloud store as soon as possible by ignoring the temperature on the volume blocks.<br>auto &dash; This policy allows tiering of both snapshot and active file system user data to the cloud store<br>none &dash; Volume blocks will not be tiered to the cloud store.<br>snapshot_only &dash; This policy allows tiering of only the volume snapshots not associated with the active file system. The default tiering policy is "snapshot-only" for a FlexVol volume and "none" for a FlexGroup volume. The default minimum cooling period for the "snapshot-only" tiering policy is 2 days and for the "auto" tiering policy is 31 days.`

	var flagPolicyName string
	if cmdPrefix == "" {
		flagPolicyName = "policy"
	} else {
		flagPolicyName = fmt.Sprintf("%v.policy", cmdPrefix)
	}

	var flagPolicyDefault string

	_ = cmd.PersistentFlags().String(flagPolicyName, flagPolicyDefault, flagPolicyDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagPolicyName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["all","auto","none","snapshot_only"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeInlineTieringPropSupported(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSupportedDescription := `This parameter specifies whether or not FabricPools are selected when provisioning a FlexGroup volume without specifying "aggregates.name" or "aggregates.uuid". Only FabricPool aggregates are used if this parameter is set to true and only non FabricPool aggregates are used if this parameter is set to false. Tiering support for a FlexGroup volume can be changed by moving all of the constituents to the required aggregates. Note that in order to tier data, not only does the volume need to support tiering by using FabricPools, the tiering "policy" must not be 'none'. A volume that uses FabricPools but has a tiering "policy" of 'none' supports tiering, but will not tier any data.`

	var flagSupportedName string
	if cmdPrefix == "" {
		flagSupportedName = "supported"
	} else {
		flagSupportedName = fmt.Sprintf("%v.supported", cmdPrefix)
	}

	var flagSupportedDefault bool

	_ = cmd.PersistentFlags().Bool(flagSupportedName, flagSupportedDefault, flagSupportedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeInlineTieringFlags(depth int, m *models.VolumeInlineTiering, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, MinCoolingDaysAdded := retrieveVolumeInlineTieringPropMinCoolingDaysFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MinCoolingDaysAdded

	err, ObjectTagsAdded := retrieveVolumeInlineTieringPropObjectTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ObjectTagsAdded

	err, PolicyAdded := retrieveVolumeInlineTieringPropPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PolicyAdded

	err, SupportedAdded := retrieveVolumeInlineTieringPropSupportedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SupportedAdded

	return nil, retAdded
}

func retrieveVolumeInlineTieringPropMinCoolingDaysFlags(depth int, m *models.VolumeInlineTiering, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMinCoolingDaysName := fmt.Sprintf("%v.min_cooling_days", cmdPrefix)
	if cmd.Flags().Changed(flagMinCoolingDaysName) {

		var flagMinCoolingDaysName string
		if cmdPrefix == "" {
			flagMinCoolingDaysName = "min_cooling_days"
		} else {
			flagMinCoolingDaysName = fmt.Sprintf("%v.min_cooling_days", cmdPrefix)
		}

		flagMinCoolingDaysValue, err := cmd.Flags().GetInt64(flagMinCoolingDaysName)
		if err != nil {
			return err, false
		}
		m.MinCoolingDays = &flagMinCoolingDaysValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineTieringPropObjectTagsFlags(depth int, m *models.VolumeInlineTiering, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagObjectTagsName := fmt.Sprintf("%v.object_tags", cmdPrefix)
	if cmd.Flags().Changed(flagObjectTagsName) {
		// warning: object_tags array type []*string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeInlineTieringPropPolicyFlags(depth int, m *models.VolumeInlineTiering, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPolicyName := fmt.Sprintf("%v.policy", cmdPrefix)
	if cmd.Flags().Changed(flagPolicyName) {

		var flagPolicyName string
		if cmdPrefix == "" {
			flagPolicyName = "policy"
		} else {
			flagPolicyName = fmt.Sprintf("%v.policy", cmdPrefix)
		}

		flagPolicyValue, err := cmd.Flags().GetString(flagPolicyName)
		if err != nil {
			return err, false
		}
		m.Policy = &flagPolicyValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeInlineTieringPropSupportedFlags(depth int, m *models.VolumeInlineTiering, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSupportedName := fmt.Sprintf("%v.supported", cmdPrefix)
	if cmd.Flags().Changed(flagSupportedName) {

		var flagSupportedName string
		if cmdPrefix == "" {
			flagSupportedName = "supported"
		} else {
			flagSupportedName = fmt.Sprintf("%v.supported", cmdPrefix)
		}

		flagSupportedValue, err := cmd.Flags().GetBool(flagSupportedName)
		if err != nil {
			return err, false
		}
		m.Supported = &flagSupportedValue

		retAdded = true
	}

	return nil, retAdded
}
