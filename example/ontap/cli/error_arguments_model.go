// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sapcc/ontap-restapi/example/ontap/models"
	"github.com/spf13/cobra"
)

// Schema cli for ErrorArguments

// register flags to command
func registerModelErrorArgumentsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerErrorArgumentsPropCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerErrorArgumentsPropMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerErrorArgumentsPropCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCodeDescription := `Argument code`

	var flagCodeName string
	if cmdPrefix == "" {
		flagCodeName = "code"
	} else {
		flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var flagCodeDefault string

	_ = cmd.PersistentFlags().String(flagCodeName, flagCodeDefault, flagCodeDescription)

	return nil
}

func registerErrorArgumentsPropMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMessageDescription := `Message argument`

	var flagMessageName string
	if cmdPrefix == "" {
		flagMessageName = "message"
	} else {
		flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var flagMessageDefault string

	_ = cmd.PersistentFlags().String(flagMessageName, flagMessageDefault, flagMessageDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelErrorArgumentsFlags(depth int, m *models.ErrorArguments, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CodeAdded := retrieveErrorArgumentsPropCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CodeAdded

	err, MessageAdded := retrieveErrorArgumentsPropMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MessageAdded

	return nil, retAdded
}

func retrieveErrorArgumentsPropCodeFlags(depth int, m *models.ErrorArguments, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCodeName := fmt.Sprintf("%v.code", cmdPrefix)
	if cmd.Flags().Changed(flagCodeName) {

		var flagCodeName string
		if cmdPrefix == "" {
			flagCodeName = "code"
		} else {
			flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		flagCodeValue, err := cmd.Flags().GetString(flagCodeName)
		if err != nil {
			return err, false
		}
		m.Code = &flagCodeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveErrorArgumentsPropMessageFlags(depth int, m *models.ErrorArguments, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMessageName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(flagMessageName) {

		var flagMessageName string
		if cmdPrefix == "" {
			flagMessageName = "message"
		} else {
			flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		flagMessageValue, err := cmd.Flags().GetString(flagMessageName)
		if err != nil {
			return err, false
		}
		m.Message = &flagMessageValue

		retAdded = true
	}

	return nil, retAdded
}
