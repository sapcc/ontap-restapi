// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/sapcc/ontap-restapi/example/ontap/models"
	"github.com/spf13/cobra"
)

// Schema cli for JobLink

// register flags to command
func registerModelJobLinkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerJobLinkPropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobLinkPropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerJobLinkPropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelJobLinkInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerJobLinkPropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := `The UUID of the asynchronous job that is triggered by a POST, PATCH, or DELETE operation.`

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagUUIDName, "", flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelJobLinkFlags(depth int, m *models.JobLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveJobLinkPropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, UUIDAdded := retrieveJobLinkPropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveJobLinkPropLinksFlags(depth int, m *models.JobLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links JobLinkInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.JobLinkInlineLinks{}
	}

	err, LinksAdded := retrieveModelJobLinkInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveJobLinkPropUUIDFlags(depth int, m *models.JobLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValueStr, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		var flagUUIDValue strfmt.UUID
		if err := flagUUIDValue.UnmarshalText([]byte(flagUUIDValueStr)); err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for JobLinkInlineLinks

// register flags to command
func registerModelJobLinkInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerJobLinkInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerJobLinkInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelJobLinkInlineLinksFlags(depth int, m *models.JobLinkInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveJobLinkInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveJobLinkInlineLinksPropSelfFlags(depth int, m *models.JobLinkInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}
