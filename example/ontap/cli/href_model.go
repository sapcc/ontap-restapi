// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sapcc/ontap-restapi/example/ontap/models"
	"github.com/spf13/cobra"
)

// Schema cli for Href

// register flags to command
func registerModelHrefFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHrefPropHref(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHrefPropHref(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHrefDescription := ``

	var flagHrefName string
	if cmdPrefix == "" {
		flagHrefName = "href"
	} else {
		flagHrefName = fmt.Sprintf("%v.href", cmdPrefix)
	}

	var flagHrefDefault string

	_ = cmd.PersistentFlags().String(flagHrefName, flagHrefDefault, flagHrefDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHrefFlags(depth int, m *models.Href, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, HrefAdded := retrieveHrefPropHrefFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HrefAdded

	return nil, retAdded
}

func retrieveHrefPropHrefFlags(depth int, m *models.Href, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHrefName := fmt.Sprintf("%v.href", cmdPrefix)
	if cmd.Flags().Changed(flagHrefName) {

		var flagHrefName string
		if cmdPrefix == "" {
			flagHrefName = "href"
		} else {
			flagHrefName = fmt.Sprintf("%v.href", cmdPrefix)
		}

		flagHrefValue, err := cmd.Flags().GetString(flagHrefName)
		if err != nil {
			return err, false
		}
		m.Href = &flagHrefValue

		retAdded = true
	}

	return nil, retAdded
}
