// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/sapcc/ontap-restapi/example/ontap/client/storage"
	"github.com/sapcc/ontap-restapi/example/ontap/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationStorageVolumeCreateCmd returns a command to handle operation volumeCreate
func makeOperationStorageVolumeCreateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "volume_create",
		Short: `Creates a volume on a specified SVM and storage aggregates.
### Platform Specifics
* **Unified ONTAP**: POST must be used to create a volume.

### Required properties
* ` + "`" + `svm.uuid` + "`" + ` or ` + "`" + `svm.name` + "`" + ` - Existing SVM in which to create the volume.
* ` + "`" + `name` + "`" + ` - Name of the volume.
* ` + "`" + `aggregates.name` + "`" + ` or ` + "`" + `aggregates.uuid` + "`" + ` - Existing aggregates in which to create the volume.
### Default property values
* ` + "`" + `state` + "`" + ` -  _online_
* ` + "`" + `size` + "`" + ` - _20MB_
* ` + "`" + `style` + "`" + ` - _flexvol_
* ` + "`" + `type` + "`" + ` - _rw_
* ` + "`" + `encryption.enabled` + "`" + ` - _false_
* ` + "`" + `snapshot_policy.name` + "`" + ` - _default_
* ` + "`" + `guarantee.type` + "`" + ` - _volume_
* ` + "`" + `anti_ransomware.state` + "`" + ` - _default_
### Related ONTAP commands
* ` + "`" + `volume create` + "`" + `
* ` + "`" + `volume clone create` + "`" + `
`,
		RunE: runOperationStorageVolumeCreate,
	}

	if err := registerOperationStorageVolumeCreateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationStorageVolumeCreate uses cmd flags to call endpoint api
func runOperationStorageVolumeCreate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := storage.NewVolumeCreateParams()
	if err, _ = retrieveOperationStorageVolumeCreateInfoFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCreateReturnRecordsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCreateReturnTimeoutFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationStorageVolumeCreateResult(appCli.Storage.VolumeCreate(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationStorageVolumeCreateParamFlags registers all flags needed to fill params
func registerOperationStorageVolumeCreateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationStorageVolumeCreateInfoParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCreateReturnRecordsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCreateReturnTimeoutParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationStorageVolumeCreateInfoParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var flagInfoName string
	if cmdPrefix == "" {
		flagInfoName = "info"
	} else {
		flagInfoName = fmt.Sprintf("%v.info", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagInfoName, "", `Optional json string for [info]. Info specification`)

	// add flags for body
	if err := registerModelVolumeFlags(0, "volume", cmd); err != nil {
		return err
	}

	return nil
}

func registerOperationStorageVolumeCreateReturnRecordsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagReturnRecordsDescription := `The default is false.  If set to true, the records are returned.`

	var flagReturnRecordsName string
	if cmdPrefix == "" {
		flagReturnRecordsName = "return_records"
	} else {
		flagReturnRecordsName = fmt.Sprintf("%v.return_records", cmdPrefix)
	}

	var flagReturnRecordsDefault bool

	_ = cmd.PersistentFlags().Bool(flagReturnRecordsName, flagReturnRecordsDefault, flagReturnRecordsDescription)

	return nil
}

func registerOperationStorageVolumeCreateReturnTimeoutParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagReturnTimeoutDescription := `The number of seconds to allow the call to execute before returning. When doing a POST, PATCH, or DELETE operation on a single record, the default is 0 seconds.  This means that if an asynchronous operation is started, the server immediately returns HTTP code 202 (Accepted) along with a link to the job.  If a non-zero value is specified for POST, PATCH, or DELETE operations, ONTAP waits that length of time to see if the job completes so it can return something other than 202.`

	var flagReturnTimeoutName string
	if cmdPrefix == "" {
		flagReturnTimeoutName = "return_timeout"
	} else {
		flagReturnTimeoutName = fmt.Sprintf("%v.return_timeout", cmdPrefix)
	}

	var flagReturnTimeoutDefault int64

	_ = cmd.PersistentFlags().Int64(flagReturnTimeoutName, flagReturnTimeoutDefault, flagReturnTimeoutDescription)

	return nil
}

func retrieveOperationStorageVolumeCreateInfoFlag(m *storage.VolumeCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("info") {
		// Read info string from cmd and unmarshal
		flagInfoValueStr, err := cmd.Flags().GetString("info")
		if err != nil {
			return err, false
		}

		flagInfoValue := models.Volume{}
		if err := json.Unmarshal([]byte(flagInfoValueStr), &flagInfoValue); err != nil {
			return fmt.Errorf("cannot unmarshal info string in models.Volume: %v", err), false
		}
		m.Info = &flagInfoValue
	}
	flagInfoModel := m.Info
	if swag.IsZero(flagInfoModel) {
		flagInfoModel = &models.Volume{}
	}
	err, added := retrieveModelVolumeFlags(0, flagInfoModel, "volume", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Info = flagInfoModel
	}

	if dryRun && debug {
		flagInfoValueDebugBytes, err := json.Marshal(m.Info)
		if err != nil {
			return err, false
		}
		logDebugf("Info dry-run payload: %v", string(flagInfoValueDebugBytes))
	}

	retAdded = retAdded || added

	return nil, retAdded
}

func retrieveOperationStorageVolumeCreateReturnRecordsFlag(m *storage.VolumeCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("return_records") {

		var flagReturnRecordsName string
		if cmdPrefix == "" {
			flagReturnRecordsName = "return_records"
		} else {
			flagReturnRecordsName = fmt.Sprintf("%v.return_records", cmdPrefix)
		}

		flagReturnRecordsValue, err := cmd.Flags().GetBool(flagReturnRecordsName)
		if err != nil {
			return err, false
		}
		m.ReturnRecords = &flagReturnRecordsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCreateReturnTimeoutFlag(m *storage.VolumeCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("return_timeout") {

		var flagReturnTimeoutName string
		if cmdPrefix == "" {
			flagReturnTimeoutName = "return_timeout"
		} else {
			flagReturnTimeoutName = fmt.Sprintf("%v.return_timeout", cmdPrefix)
		}

		flagReturnTimeoutValue, err := cmd.Flags().GetInt64(flagReturnTimeoutName)
		if err != nil {
			return err, false
		}
		m.ReturnTimeout = &flagReturnTimeoutValue

	}

	return nil, retAdded
}

// parseOperationStorageVolumeCreateResult parses request result and return the string content
func parseOperationStorageVolumeCreateResult(resp0 *storage.VolumeCreateCreated, resp1 *storage.VolumeCreateAccepted, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*storage.VolumeCreateDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*storage.VolumeCreateCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*storage.VolumeCreateAccepted)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
		msgStr, err := json.Marshal(resp1.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
