// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/sapcc/ontap-restapi/example/ontap/client/storage"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationStorageVolumeCollectionGetCmd returns a command to handle operation volumeCollectionGet
func makeOperationStorageVolumeCollectionGetCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "volume_collection_get",
		Short: `Retrieves volumes.
### Expensive properties
There is an added computational cost to retrieving values for these properties. They are not included by default in GET results and must be explicitly requested using the ` + "`" + `fields` + "`" + ` query parameter. See [` + "`" + `Requesting specific fields` + "`" + `](#Requesting_specific_fields) to learn more.
* ` + "`" + `is_svm_root` + "`" + `
* ` + "`" + `aggressive_readahead_mode` + "`" + `
* ` + "`" + `analytics.*` + "`" + `
* ` + "`" + `anti_ransomware.*` + "`" + `
* ` + "`" + `application.*` + "`" + `
* ` + "`" + `encryption.*` + "`" + `
* ` + "`" + `queue_for_encryption` + "`" + `
* ` + "`" + `convert_unicode` + "`" + `
* ` + "`" + `clone.parent_snapshot.name` + "`" + `
* ` + "`" + `clone.parent_snapshot.uuid` + "`" + `
* ` + "`" + `clone.parent_svm.name` + "`" + `
* ` + "`" + `clone.parent_svm.uuid` + "`" + `
* ` + "`" + `clone.parent_volume.name` + "`" + `
* ` + "`" + `clone.parent_volume.uuid` + "`" + `
* ` + "`" + `clone.split_complete_percent` + "`" + `
* ` + "`" + `clone.split_estimate` + "`" + `
* ` + "`" + `clone.split_initiated` + "`" + `
* ` + "`" + `efficiency.*` + "`" + `
* ` + "`" + `error_state.*` + "`" + `
* ` + "`" + `files.*` + "`" + `
* ` + "`" + `max_dir_size` + "`" + `
* ` + "`" + `nas.export_policy.id` + "`" + `
* ` + "`" + `nas.gid` + "`" + `
* ` + "`" + `nas.path` + "`" + `
* ` + "`" + `nas.security_style` + "`" + `
* ` + "`" + `nas.uid` + "`" + `
* ` + "`" + `nas.unix_permissions` + "`" + `
* ` + "`" + `nas.junction_parent.name` + "`" + `
* ` + "`" + `nas.junction_parent.uuid` + "`" + `
* ` + "`" + `snaplock.*` + "`" + `
* ` + "`" + `restore_to.*` + "`" + `
* ` + "`" + `snapshot_policy.uuid` + "`" + `
* ` + "`" + `quota.*` + "`" + `
* ` + "`" + `qos.*` + "`" + `
* ` + "`" + `flexcache_endpoint_type` + "`" + `
* ` + "`" + `space.block_storage_inactive_user_data` + "`" + `
* ` + "`" + `space.capacity_tier_footprint` + "`" + `
* ` + "`" + `space.performance_tier_footprint` + "`" + `
* ` + "`" + `space.local_tier_footprint` + "`" + `
* ` + "`" + `space.footprint` + "`" + `
* ` + "`" + `space.over_provisioned` + "`" + `
* ` + "`" + `space.metadata` + "`" + `
* ` + "`" + `space.total_footprint` + "`" + `
* ` + "`" + `space.dedupe_metafiles_footprint` + "`" + `
* ` + "`" + `space.dedupe_metafiles_temporary_footprint` + "`" + `
* ` + "`" + `space.delayed_free_footprint` + "`" + `
* ` + "`" + `space.file_operation_metadata` + "`" + `
* ` + "`" + `space.snapmirror_destination_footprint` + "`" + `
* ` + "`" + `space.volume_guarantee_footprint` + "`" + `
* ` + "`" + `space.cross_volume_dedupe_metafiles_footprint` + "`" + `
* ` + "`" + `space.cross_volume_dedupe_metafiles_temporary_footprint` + "`" + `
* ` + "`" + `space.snapshot_reserve_unusable` + "`" + `
* ` + "`" + `space.snapshot_spill` + "`" + `
* ` + "`" + `space.user_data` + "`" + `
* ` + "`" + `space.logical_space.*` + "`" + `
* ` + "`" + `space.snapshot.*` + "`" + `
* ` + "`" + `space.used_by_afs` + "`" + `
* ` + "`" + `space.afs_total` + "`" + `
* ` + "`" + `space.available_percent` + "`" + `
* ` + "`" + `space.full_threshold_percent` + "`" + `
* ` + "`" + `space.nearly_full_threshold_percent` + "`" + `
* ` + "`" + `space.overwrite_reserve` + "`" + `
* ` + "`" + `space.overwrite_reserve_used` + "`" + `
* ` + "`" + `space.size_available_for_snapshots` + "`" + `
* ` + "`" + `space.percent_used` + "`" + `
* ` + "`" + `space.fractional_reserve` + "`" + `
* ` + "`" + `space.block_storage_inactive_user_data_percent` + "`" + `
* ` + "`" + `space.physical_used` + "`" + `
* ` + "`" + `space.physical_used_percent` + "`" + `
* ` + "`" + `space.expected_available` + "`" + `
* ` + "`" + `space.filesystem_size` + "`" + `
* ` + "`" + `space.filesystem_size_fixed` + "`" + `
* ` + "`" + `guarantee.*` + "`" + `
* ` + "`" + `autosize.*` + "`" + `
* ` + "`" + `movement.*` + "`" + `
* ` + "`" + `statistics.*` + "`" + `
* ` + "`" + `constituents.name` + "`" + `
* ` + "`" + `constituents.space.size` + "`" + `
* ` + "`" + `constituents.space.available` + "`" + `
* ` + "`" + `constituents.space.used` + "`" + `
* ` + "`" + `constituents.space.available_percent` + "`" + `
* ` + "`" + `constituents.space.used_percent` + "`" + `
* ` + "`" + `constituents.space.block_storage_inactive_user_data` + "`" + `
* ` + "`" + `constituents.space.capacity_tier_footprint` + "`" + `
* ` + "`" + `constituents.space.performance_tier_footprint` + "`" + `
* ` + "`" + `constituents.space.local_tier_footprint` + "`" + `
* ` + "`" + `constituents.space.footprint` + "`" + `
* ` + "`" + `constituents.space.over_provisioned` + "`" + `
* ` + "`" + `constituents.space.metadata` + "`" + `
* ` + "`" + `constituents.space.total_footprint` + "`" + `
* ` + "`" + `constituents.space.logical_space.reporting` + "`" + `
* ` + "`" + `constituents.space.logical_space.enforcement` + "`" + `
* ` + "`" + `constituents.space.logical_space.used_by_afs` + "`" + `
* ` + "`" + `constituents.space.logical_space.available` + "`" + `
* ` + "`" + `constituents.space.snapshot.used` + "`" + `
* ` + "`" + `constituents.space.snapshot.reserve_percent` + "`" + `
* ` + "`" + `constituents.space.snapshot.autodelete_enabled` + "`" + `
* ` + "`" + `constituents.space.large_size_enabled` + "`" + `
* ` + "`" + `constituents.space.max_size` + "`" + `
* ` + "`" + `constituents.space.total_metadata` + "`" + `
* ` + "`" + `constituents.space.total_metadata_footprint` + "`" + `
* ` + "`" + `constituents.aggregates.name` + "`" + `
* ` + "`" + `constituents.aggregates.uuid` + "`" + `
* ` + "`" + `constituents.movement.destination_aggregate.name` + "`" + `
* ` + "`" + `constituents.movement.destination_aggregate.uuid` + "`" + `
* ` + "`" + `constituents.movement.state` + "`" + `
* ` + "`" + `constituents.movement.percent_complete` + "`" + `
* ` + "`" + `constituents.movement.cutover_window` + "`" + `
* ` + "`" + `constituents.movement.tiering_policy` + "`" + `
* ` + "`" + `asynchronous_directory_delete.*` + "`" + `
* ` + "`" + `rebalancing.*` + "`" + `
* ` + "`" + `metric.*` + "`" + `
* ` + "`" + `cloud_write_enabled` + "`" + `
### Related ONTAP commands
* ` + "`" + `volume show` + "`" + `
* ` + "`" + `volume clone show` + "`" + `
* ` + "`" + `volume efficiency show` + "`" + `
* ` + "`" + `volume encryption show` + "`" + `
* ` + "`" + `volume flexcache show` + "`" + `
* ` + "`" + `volume flexgroup show` + "`" + `
* ` + "`" + `volume move show` + "`" + `
* ` + "`" + `volume quota show` + "`" + `
* ` + "`" + `volume show-space` + "`" + `
* ` + "`" + `volume snaplock show` + "`" + `
* ` + "`" + `volume rebalance show` + "`" + `
* ` + "`" + `security anti-ransomware volume show` + "`" + `
* ` + "`" + `security anti-ransomware volume space show` + "`" + `
* ` + "`" + `volume file async-delete client show` + "`" + `
`,
		RunE: runOperationStorageVolumeCollectionGet,
	}

	if err := registerOperationStorageVolumeCollectionGetParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationStorageVolumeCollectionGet uses cmd flags to call endpoint api
func runOperationStorageVolumeCollectionGet(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := storage.NewVolumeCollectionGetParams()
	if err, _ = retrieveOperationStorageVolumeCollectionGetTagsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAccessTimeEnabledFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetActivityTrackingStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetActivityTrackingSupportedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetActivityTrackingUnsupportedReasonCodeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetActivityTrackingUnsupportedReasonMessageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAggregatesNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAggregatesUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAggressiveReadaheadModeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAnalyticsFilesScannedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAnalyticsInitializationStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAnalyticsScanProgressFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAnalyticsScanThrottleReasonArgumentsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAnalyticsScanThrottleReasonCodeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAnalyticsScanThrottleReasonMessageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAnalyticsStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAnalyticsSupportedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAnalyticsTotalFilesFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAnalyticsUnsupportedReasonCodeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAnalyticsUnsupportedReasonMessageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackProbabilityFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackReportsTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareDryRunStartTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSpaceSnapshotCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSpaceUsedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSpaceUsedByLogsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSpaceUsedBySnapshotsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeAsNormalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSuspectFilesCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSuspectFilesEntropyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareSuspectFilesFormatFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareUpdateBaselineFromSurgeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadFileExtensionTypesCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadFileExtensionsObservedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadNewlyObservedFileExtensionsCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadNewlyObservedFileExtensionsNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetApplicationNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetApplicationUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAsynchronousDirectoryDeleteEnabledFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAsynchronousDirectoryDeleteTrashBinFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAutosizeGrowThresholdFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAutosizeMaximumFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAutosizeMinimumFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAutosizeModeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetAutosizeShrinkThresholdFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneHasFlexcloneFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneInheritedPhysicalUsedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneInheritedSavingsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneIsFlexcloneFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneParentSnapshotNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneParentSnapshotUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneParentSvmNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneParentSvmUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneParentVolumeNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneParentVolumeUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneSplitCompletePercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneSplitEstimateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloneSplitInitiatedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloudRetrievalPolicyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCloudWriteEnabledFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCommentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConsistencyGroupNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConsistencyGroupUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsAggregatesNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsAggregatesUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsMovementCutoverWindowFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsMovementDestinationAggregateNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsMovementDestinationAggregateUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsMovementPercentCompleteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsMovementStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceAfsTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceAvailableFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceAvailablePercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceBlockStorageInactiveUserDataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceCapacityTierFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceLargeSizeEnabledFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceLocalTierFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceAvailableFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceEnforcementFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceReportingFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceUsedByAfsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceMaxSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceMetadataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceOverProvisionedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpacePerformanceTierFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceSnapshotReservePercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceSnapshotUsedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceTotalFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceTotalMetadataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceTotalMetadataFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceUsedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceUsedByAfsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConstituentsSpaceUsedPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetConvertUnicodeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetCreateTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyApplicationIoSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyAutoStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyCompactionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyCompressionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyCompressionTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyCrossVolumeDedupeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyDedupeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyHasSavingsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyIdcsScannerEnabledFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyIdcsScannerModeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyIdcsScannerOperationStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyIdcsScannerStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyIdcsScannerThresholdInactiveTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyLastOpBeginFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyLastOpEndFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyLastOpErrFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyLastOpSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyLastOpStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyLoggingEnabledFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyOpStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyPolicyNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyProgressFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyScannerCompressionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyScannerDedupeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyScannerScanOldDataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyScannerStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyScheduleFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsCompressionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsCompressionPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsDedupeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsDedupePercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsDedupeSharingFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsTotalPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyStorageEfficiencyModeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEfficiencyVolumePathFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEncryptionActionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEncryptionEnabledFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEncryptionKeyCreateTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEncryptionKeyIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEncryptionRekeyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEncryptionStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEncryptionStatusCodeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEncryptionStatusMessageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetEncryptionTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetErrorStateHasBadBlocksFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetErrorStateIsInconsistentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetFieldsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetFilesMaximumFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetFilesUsedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetFlashPoolCacheEligibilityFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetFlashPoolCacheRetentionPriorityFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetFlashPoolCachingPolicyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetFlexcacheEndpointTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetFlexgroupNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetFlexgroupUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetGranularDataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetGranularDataModeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetGuaranteeHonoredFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetGuaranteeTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetIsConstituentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetIsObjectStoreFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetIsSvmRootFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetLanguageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMaxDirSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMaxRecordsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricCloudDurationFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricCloudIopsOtherFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricCloudIopsReadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricCloudIopsTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricCloudIopsWriteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricCloudLatencyOtherFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricCloudLatencyReadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricCloudLatencyTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricCloudLatencyWriteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricCloudStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricCloudTimestampFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricDurationFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricFlexcacheBandwidthSavingsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricFlexcacheCacheMissPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricFlexcacheDurationFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricFlexcacheStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricFlexcacheTimestampFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricIopsOtherFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricIopsReadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricIopsTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricIopsWriteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricLatencyOtherFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricLatencyReadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricLatencyTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricLatencyWriteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricThroughputOtherFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricThroughputReadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricThroughputTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricThroughputWriteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMetricTimestampFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMovementCutoverWindowFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMovementDestinationAggregateNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMovementDestinationAggregateUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMovementPercentCompleteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMovementStartTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMovementStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetMsidFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetNasExportPolicyIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetNasExportPolicyNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetNasGidFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetNasJunctionParentNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetNasJunctionParentUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetNasPathFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetNasSecurityStyleFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetNasUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetNasUnixPermissionsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetOrderByFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetQosPolicyMaxThroughputIopsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetQosPolicyMaxThroughputMbpsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetQosPolicyMinThroughputIopsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetQosPolicyMinThroughputMbpsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetQosPolicyNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetQosPolicyUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetQueueForEncryptionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetQuotaStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingDataMovedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineMovementFileMovesStartedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorCodeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorDestinationFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorFileIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineMovementMostRecentStartTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksScannedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedEfficiencyBlocksFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedEfficiencyPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedFastTruncateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedFootprintInvalidFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedInSnapshotFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedIncompatibleFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedMetadataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedOnDemandDestinationFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedOtherFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedRemoteCacheFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedTooLargeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedTooSmallFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedWriteFencedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesScannedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedEfficiencyBlocksFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedEfficiencyPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedFastTruncateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedFootprintInvalidFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedInSnapshotFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedIncompatibleFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedMetadataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedOnDemandDestinationFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedOtherFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedRemoteCacheFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedTooLargeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedTooSmallFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedWriteFencedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingExcludeSnapshotsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingImbalancePercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingImbalanceSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingMaxConstituentImbalancePercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingMaxFileMovesFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingMaxRuntimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingMaxThresholdFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingMinFileSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingMinThresholdFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingNoticesArgumentsCodeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingNoticesArgumentsMessageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingNoticesCodeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingNoticesMessageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingRuntimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingStartTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingStopTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingTargetUsedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetRebalancingUsedForImbalanceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetReturnRecordsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetReturnTimeoutFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetScheduledSnapshotNamingSchemeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnaplockAppendModeEnabledFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnaplockAutocommitPeriodFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnaplockComplianceClockTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnaplockExpiryTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnaplockIsAuditLogFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnaplockLitigationCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnaplockPrivilegedDeleteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnaplockRetentionDefaultFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnaplockRetentionMaximumFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnaplockRetentionMinimumFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnaplockTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnaplockUnspecifiedRetentionFileCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnapmirrorDestinationsIsCloudFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnapmirrorDestinationsIsOntapFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnapmirrorIsProtectedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnapshotCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnapshotDirectoryAccessEnabledFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnapshotLockingEnabledFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnapshotPolicyNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSnapshotPolicyUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceAfsTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceAutoAdaptiveCompressionFootprintDataReductionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceAvailableFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceAvailablePercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceBlockStorageInactiveUserDataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceBlockStorageInactiveUserDataPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceCapacityTierFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceCapacityTierFootprintDataReductionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceCompactionFootprintDataReductionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceCrossVolumeDedupeMetafilesFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceCrossVolumeDedupeMetafilesTemporaryFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceDedupeMetafilesFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceDedupeMetafilesTemporaryFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceDelayedFreeFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceEffectiveTotalFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceExpectedAvailableFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceFileOperationMetadataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceFilesystemSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceFilesystemSizeFixedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceFractionalReserveFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceFullThresholdPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceIsUsedStaleFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceLargeSizeEnabledFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceLocalTierFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceAvailableFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceEnforcementFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceReportingFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedByAfsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedBySnapshotsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceMaxSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceMetadataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceNearlyFullThresholdPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceOverProvisionedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceOverwriteReserveFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceOverwriteReserveUsedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpacePercentUsedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpacePerformanceTierFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpacePhysicalUsedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpacePhysicalUsedPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSizeAvailableForSnapshotsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapmirrorDestinationFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteCommitmentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteDeferDeleteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteDeleteOrderFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotAutodeletePrefixFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteTargetFreeSpaceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteTriggerFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotReserveAvailableFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotReservePercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotReserveSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotSpaceUsedPercentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotUsedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotReserveUnusableFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceSnapshotSpillFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceTotalFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceTotalMetadataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceTotalMetadataFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceUsedFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceUsedByAfsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceUserDataFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSpaceVolumeGuaranteeFootprintFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStateFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAccessCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAccessTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAuditCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAuditTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateDirCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateDirTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateFileCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateFileTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateOtherCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateOtherTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateSymlinkCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateSymlinkTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawGetattrCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawGetattrTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLinkCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLinkTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLockCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLockTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLookupCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLookupTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawOpenCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawOpenTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReaddirCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReaddirTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadlinkCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadlinkTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawRenameCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawRenameTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawSetattrCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawSetattrTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawUnlinkCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawUnlinkTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWatchCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWatchTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCloudIopsRawOtherFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCloudIopsRawReadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCloudIopsRawTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCloudIopsRawWriteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawOtherFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawReadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawWriteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCloudStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsCloudTimestampFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsFlexcacheRawCacheMissBlocksFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsFlexcacheRawClientRequestedBlocksFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsFlexcacheRawStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsFlexcacheRawTimestampFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsIopsRawOtherFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsIopsRawReadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsIopsRawTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsIopsRawWriteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsLatencyRawOtherFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsLatencyRawReadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsLatencyRawTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsLatencyRawWriteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAccessCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAccessTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAuditCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAuditTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateDirCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateDirTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateFileCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateFileTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateOtherCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateOtherTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateSymlinkCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateSymlinkTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawGetattrCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawGetattrTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLinkCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLinkTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLockCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLockTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLookupCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLookupTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawOpenCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawOpenTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReaddirCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReaddirTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadlinkCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadlinkTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawRenameCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawRenameTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawSetattrCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawSetattrTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawUnlinkCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawUnlinkTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWatchCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWatchTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteTotalTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsThroughputRawOtherFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsThroughputRawReadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsThroughputRawTotalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsThroughputRawWriteFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatisticsTimestampFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetStyleFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSvmNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetSvmUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetTieringMinCoolingDaysFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetTieringObjectTagsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetTieringPolicyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetUUIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationStorageVolumeCollectionGetValidateOnlyFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationStorageVolumeCollectionGetResult(appCli.Storage.VolumeCollectionGet(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationStorageVolumeCollectionGetParamFlags registers all flags needed to fill params
func registerOperationStorageVolumeCollectionGetParamFlags(cmd *cobra.Command) error {
	if err := registerOperationStorageVolumeCollectionGetTagsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAccessTimeEnabledParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetActivityTrackingStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetActivityTrackingSupportedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetActivityTrackingUnsupportedReasonCodeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetActivityTrackingUnsupportedReasonMessageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAggregatesNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAggregatesUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAggressiveReadaheadModeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAnalyticsFilesScannedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAnalyticsInitializationStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAnalyticsScanProgressParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAnalyticsScanThrottleReasonArgumentsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAnalyticsScanThrottleReasonCodeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAnalyticsScanThrottleReasonMessageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAnalyticsStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAnalyticsSupportedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAnalyticsTotalFilesParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAnalyticsUnsupportedReasonCodeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAnalyticsUnsupportedReasonMessageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackProbabilityParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareAttackReportsTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareDryRunStartTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSpaceSnapshotCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSpaceUsedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSpaceUsedByLogsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSpaceUsedBySnapshotsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeAsNormalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSuspectFilesCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSuspectFilesEntropyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareSuspectFilesFormatParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareUpdateBaselineFromSurgeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadFileExtensionTypesCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadFileExtensionsObservedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadNewlyObservedFileExtensionsCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadNewlyObservedFileExtensionsNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetApplicationNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetApplicationUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAsynchronousDirectoryDeleteEnabledParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAsynchronousDirectoryDeleteTrashBinParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAutosizeGrowThresholdParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAutosizeMaximumParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAutosizeMinimumParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAutosizeModeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetAutosizeShrinkThresholdParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneHasFlexcloneParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneInheritedPhysicalUsedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneInheritedSavingsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneIsFlexcloneParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneParentSnapshotNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneParentSnapshotUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneParentSvmNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneParentSvmUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneParentVolumeNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneParentVolumeUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneSplitCompletePercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneSplitEstimateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloneSplitInitiatedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloudRetrievalPolicyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCloudWriteEnabledParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCommentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConsistencyGroupNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConsistencyGroupUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsAggregatesNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsAggregatesUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsMovementCutoverWindowParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsMovementDestinationAggregateNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsMovementDestinationAggregateUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsMovementPercentCompleteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsMovementStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceAfsTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceAvailableParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceAvailablePercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceBlockStorageInactiveUserDataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceCapacityTierFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceLargeSizeEnabledParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceLocalTierFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceAvailableParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceEnforcementParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceReportingParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceUsedByAfsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceMaxSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceMetadataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceOverProvisionedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpacePerformanceTierFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceSnapshotReservePercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceSnapshotUsedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceTotalFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceTotalMetadataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceTotalMetadataFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceUsedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceUsedByAfsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConstituentsSpaceUsedPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetConvertUnicodeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetCreateTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyApplicationIoSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyAutoStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyCompactionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyCompressionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyCompressionTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyCrossVolumeDedupeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyDedupeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyHasSavingsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyIdcsScannerEnabledParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyIdcsScannerModeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyIdcsScannerOperationStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyIdcsScannerStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyIdcsScannerThresholdInactiveTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyLastOpBeginParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyLastOpEndParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyLastOpErrParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyLastOpSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyLastOpStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyLoggingEnabledParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyOpStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyPolicyNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyProgressParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyScannerCompressionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyScannerDedupeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyScannerScanOldDataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyScannerStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyScheduleParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsCompressionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsCompressionPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsDedupeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsDedupePercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsDedupeSharingParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsTotalPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyStorageEfficiencyModeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEfficiencyVolumePathParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEncryptionActionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEncryptionEnabledParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEncryptionKeyCreateTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEncryptionKeyIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEncryptionRekeyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEncryptionStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEncryptionStatusCodeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEncryptionStatusMessageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetEncryptionTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetErrorStateHasBadBlocksParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetErrorStateIsInconsistentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetFieldsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetFilesMaximumParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetFilesUsedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetFlashPoolCacheEligibilityParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetFlashPoolCacheRetentionPriorityParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetFlashPoolCachingPolicyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetFlexcacheEndpointTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetFlexgroupNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetFlexgroupUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetGranularDataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetGranularDataModeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetGuaranteeHonoredParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetGuaranteeTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetIsConstituentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetIsObjectStoreParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetIsSvmRootParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetLanguageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMaxDirSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMaxRecordsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricCloudDurationParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricCloudIopsOtherParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricCloudIopsReadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricCloudIopsTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricCloudIopsWriteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricCloudLatencyOtherParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricCloudLatencyReadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricCloudLatencyTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricCloudLatencyWriteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricCloudStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricCloudTimestampParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricDurationParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricFlexcacheBandwidthSavingsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricFlexcacheCacheMissPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricFlexcacheDurationParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricFlexcacheStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricFlexcacheTimestampParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricIopsOtherParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricIopsReadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricIopsTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricIopsWriteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricLatencyOtherParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricLatencyReadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricLatencyTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricLatencyWriteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricThroughputOtherParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricThroughputReadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricThroughputTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricThroughputWriteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMetricTimestampParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMovementCutoverWindowParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMovementDestinationAggregateNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMovementDestinationAggregateUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMovementPercentCompleteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMovementStartTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMovementStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetMsidParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetNasExportPolicyIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetNasExportPolicyNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetNasGidParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetNasJunctionParentNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetNasJunctionParentUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetNasPathParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetNasSecurityStyleParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetNasUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetNasUnixPermissionsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetOrderByParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetQosPolicyMaxThroughputIopsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetQosPolicyMaxThroughputMbpsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetQosPolicyMinThroughputIopsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetQosPolicyMinThroughputMbpsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetQosPolicyNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetQosPolicyUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetQueueForEncryptionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetQuotaStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingDataMovedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineMovementFileMovesStartedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorCodeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorDestinationParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorFileIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineMovementMostRecentStartTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksScannedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedEfficiencyBlocksParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedEfficiencyPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedFastTruncateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedFootprintInvalidParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedInSnapshotParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedIncompatibleParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedMetadataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedOnDemandDestinationParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedOtherParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedRemoteCacheParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedTooLargeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedTooSmallParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedWriteFencedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesScannedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedEfficiencyBlocksParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedEfficiencyPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedFastTruncateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedFootprintInvalidParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedInSnapshotParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedIncompatibleParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedMetadataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedOnDemandDestinationParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedOtherParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedRemoteCacheParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedTooLargeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedTooSmallParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedWriteFencedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingExcludeSnapshotsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingImbalancePercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingImbalanceSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingMaxConstituentImbalancePercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingMaxFileMovesParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingMaxRuntimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingMaxThresholdParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingMinFileSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingMinThresholdParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingNoticesArgumentsCodeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingNoticesArgumentsMessageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingNoticesCodeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingNoticesMessageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingRuntimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingStartTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingStopTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingTargetUsedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetRebalancingUsedForImbalanceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetReturnRecordsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetReturnTimeoutParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetScheduledSnapshotNamingSchemeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnaplockAppendModeEnabledParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnaplockAutocommitPeriodParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnaplockComplianceClockTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnaplockExpiryTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnaplockIsAuditLogParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnaplockLitigationCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnaplockPrivilegedDeleteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnaplockRetentionDefaultParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnaplockRetentionMaximumParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnaplockRetentionMinimumParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnaplockTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnaplockUnspecifiedRetentionFileCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnapmirrorDestinationsIsCloudParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnapmirrorDestinationsIsOntapParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnapmirrorIsProtectedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnapshotCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnapshotDirectoryAccessEnabledParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnapshotLockingEnabledParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnapshotPolicyNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSnapshotPolicyUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceAfsTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceAutoAdaptiveCompressionFootprintDataReductionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceAvailableParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceAvailablePercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceBlockStorageInactiveUserDataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceBlockStorageInactiveUserDataPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceCapacityTierFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceCapacityTierFootprintDataReductionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceCompactionFootprintDataReductionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceCrossVolumeDedupeMetafilesFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceCrossVolumeDedupeMetafilesTemporaryFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceDedupeMetafilesFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceDedupeMetafilesTemporaryFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceDelayedFreeFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceEffectiveTotalFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceExpectedAvailableParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceFileOperationMetadataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceFilesystemSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceFilesystemSizeFixedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceFractionalReserveParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceFullThresholdPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceIsUsedStaleParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceLargeSizeEnabledParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceLocalTierFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceAvailableParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceEnforcementParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceReportingParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedByAfsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedBySnapshotsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceMaxSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceMetadataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceNearlyFullThresholdPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceOverProvisionedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceOverwriteReserveParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceOverwriteReserveUsedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpacePercentUsedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpacePerformanceTierFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpacePhysicalUsedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpacePhysicalUsedPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSizeAvailableForSnapshotsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapmirrorDestinationFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteCommitmentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteDeferDeleteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteDeleteOrderParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotAutodeletePrefixParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteTargetFreeSpaceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteTriggerParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotReserveAvailableParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotReservePercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotReserveSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotSpaceUsedPercentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotUsedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotReserveUnusableParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceSnapshotSpillParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceTotalFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceTotalMetadataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceTotalMetadataFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceUsedParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceUsedByAfsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceUserDataParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSpaceVolumeGuaranteeFootprintParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStateParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAccessCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAccessTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAuditCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAuditTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateDirCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateDirTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateFileCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateFileTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateOtherCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateOtherTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateSymlinkCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateSymlinkTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawGetattrCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawGetattrTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLinkCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLinkTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLockCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLockTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLookupCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLookupTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawOpenCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawOpenTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReaddirCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReaddirTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadlinkCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadlinkTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawRenameCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawRenameTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawSetattrCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawSetattrTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawUnlinkCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawUnlinkTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWatchCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWatchTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCloudIopsRawOtherParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCloudIopsRawReadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCloudIopsRawTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCloudIopsRawWriteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawOtherParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawReadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawWriteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCloudStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsCloudTimestampParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsFlexcacheRawCacheMissBlocksParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsFlexcacheRawClientRequestedBlocksParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsFlexcacheRawStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsFlexcacheRawTimestampParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsIopsRawOtherParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsIopsRawReadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsIopsRawTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsIopsRawWriteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsLatencyRawOtherParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsLatencyRawReadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsLatencyRawTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsLatencyRawWriteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAccessCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAccessTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAuditCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAuditTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateDirCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateDirTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateFileCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateFileTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateOtherCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateOtherTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateSymlinkCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateSymlinkTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawGetattrCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawGetattrTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLinkCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLinkTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLockCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLockTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLookupCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLookupTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawOpenCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawOpenTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReaddirCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReaddirTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadlinkCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadlinkTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawRenameCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawRenameTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawSetattrCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawSetattrTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawUnlinkCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawUnlinkTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWatchCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWatchTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteTotalTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsThroughputRawOtherParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsThroughputRawReadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsThroughputRawTotalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsThroughputRawWriteParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatisticsTimestampParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetStyleParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSvmNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetSvmUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetTieringMinCoolingDaysParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetTieringObjectTagsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetTieringPolicyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetUUIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationStorageVolumeCollectionGetValidateOnlyParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationStorageVolumeCollectionGetTagsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagTagsDescription := `Filter by _tags`

	var flagTagsName string
	if cmdPrefix == "" {
		flagTagsName = "_tags"
	} else {
		flagTagsName = fmt.Sprintf("%v._tags", cmdPrefix)
	}

	var flagTagsDefault string

	_ = cmd.PersistentFlags().String(flagTagsName, flagTagsDefault, flagTagsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAccessTimeEnabledParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAccessTimeEnabledDescription := `Filter by access_time_enabled`

	var flagAccessTimeEnabledName string
	if cmdPrefix == "" {
		flagAccessTimeEnabledName = "access_time_enabled"
	} else {
		flagAccessTimeEnabledName = fmt.Sprintf("%v.access_time_enabled", cmdPrefix)
	}

	var flagAccessTimeEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagAccessTimeEnabledName, flagAccessTimeEnabledDefault, flagAccessTimeEnabledDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetActivityTrackingStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagActivityTrackingStateDescription := `Filter by activity_tracking.state`

	var flagActivityTrackingStateName string
	if cmdPrefix == "" {
		flagActivityTrackingStateName = "activity_tracking.state"
	} else {
		flagActivityTrackingStateName = fmt.Sprintf("%v.activity_tracking.state", cmdPrefix)
	}

	var flagActivityTrackingStateDefault string

	_ = cmd.PersistentFlags().String(flagActivityTrackingStateName, flagActivityTrackingStateDefault, flagActivityTrackingStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetActivityTrackingSupportedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagActivityTrackingSupportedDescription := `Filter by activity_tracking.supported`

	var flagActivityTrackingSupportedName string
	if cmdPrefix == "" {
		flagActivityTrackingSupportedName = "activity_tracking.supported"
	} else {
		flagActivityTrackingSupportedName = fmt.Sprintf("%v.activity_tracking.supported", cmdPrefix)
	}

	var flagActivityTrackingSupportedDefault bool

	_ = cmd.PersistentFlags().Bool(flagActivityTrackingSupportedName, flagActivityTrackingSupportedDefault, flagActivityTrackingSupportedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetActivityTrackingUnsupportedReasonCodeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagActivityTrackingUnsupportedReasonCodeDescription := `Filter by activity_tracking.unsupported_reason.code`

	var flagActivityTrackingUnsupportedReasonCodeName string
	if cmdPrefix == "" {
		flagActivityTrackingUnsupportedReasonCodeName = "activity_tracking.unsupported_reason.code"
	} else {
		flagActivityTrackingUnsupportedReasonCodeName = fmt.Sprintf("%v.activity_tracking.unsupported_reason.code", cmdPrefix)
	}

	var flagActivityTrackingUnsupportedReasonCodeDefault string

	_ = cmd.PersistentFlags().String(flagActivityTrackingUnsupportedReasonCodeName, flagActivityTrackingUnsupportedReasonCodeDefault, flagActivityTrackingUnsupportedReasonCodeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetActivityTrackingUnsupportedReasonMessageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagActivityTrackingUnsupportedReasonMessageDescription := `Filter by activity_tracking.unsupported_reason.message`

	var flagActivityTrackingUnsupportedReasonMessageName string
	if cmdPrefix == "" {
		flagActivityTrackingUnsupportedReasonMessageName = "activity_tracking.unsupported_reason.message"
	} else {
		flagActivityTrackingUnsupportedReasonMessageName = fmt.Sprintf("%v.activity_tracking.unsupported_reason.message", cmdPrefix)
	}

	var flagActivityTrackingUnsupportedReasonMessageDefault string

	_ = cmd.PersistentFlags().String(flagActivityTrackingUnsupportedReasonMessageName, flagActivityTrackingUnsupportedReasonMessageDefault, flagActivityTrackingUnsupportedReasonMessageDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAggregatesNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAggregatesNameDescription := `Filter by aggregates.name`

	var flagAggregatesNameName string
	if cmdPrefix == "" {
		flagAggregatesNameName = "aggregates.name"
	} else {
		flagAggregatesNameName = fmt.Sprintf("%v.aggregates.name", cmdPrefix)
	}

	var flagAggregatesNameDefault string

	_ = cmd.PersistentFlags().String(flagAggregatesNameName, flagAggregatesNameDefault, flagAggregatesNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAggregatesUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAggregatesUUIDDescription := `Filter by aggregates.uuid`

	var flagAggregatesUUIDName string
	if cmdPrefix == "" {
		flagAggregatesUUIDName = "aggregates.uuid"
	} else {
		flagAggregatesUUIDName = fmt.Sprintf("%v.aggregates.uuid", cmdPrefix)
	}

	var flagAggregatesUUIDDefault string

	_ = cmd.PersistentFlags().String(flagAggregatesUUIDName, flagAggregatesUUIDDefault, flagAggregatesUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAggressiveReadaheadModeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAggressiveReadaheadModeDescription := `Filter by aggressive_readahead_mode`

	var flagAggressiveReadaheadModeName string
	if cmdPrefix == "" {
		flagAggressiveReadaheadModeName = "aggressive_readahead_mode"
	} else {
		flagAggressiveReadaheadModeName = fmt.Sprintf("%v.aggressive_readahead_mode", cmdPrefix)
	}

	var flagAggressiveReadaheadModeDefault string

	_ = cmd.PersistentFlags().String(flagAggressiveReadaheadModeName, flagAggressiveReadaheadModeDefault, flagAggressiveReadaheadModeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAnalyticsFilesScannedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAnalyticsFilesScannedDescription := `Filter by analytics.files_scanned`

	var flagAnalyticsFilesScannedName string
	if cmdPrefix == "" {
		flagAnalyticsFilesScannedName = "analytics.files_scanned"
	} else {
		flagAnalyticsFilesScannedName = fmt.Sprintf("%v.analytics.files_scanned", cmdPrefix)
	}

	var flagAnalyticsFilesScannedDefault int64

	_ = cmd.PersistentFlags().Int64(flagAnalyticsFilesScannedName, flagAnalyticsFilesScannedDefault, flagAnalyticsFilesScannedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAnalyticsInitializationStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAnalyticsInitializationStateDescription := `Filter by analytics.initialization.state`

	var flagAnalyticsInitializationStateName string
	if cmdPrefix == "" {
		flagAnalyticsInitializationStateName = "analytics.initialization.state"
	} else {
		flagAnalyticsInitializationStateName = fmt.Sprintf("%v.analytics.initialization.state", cmdPrefix)
	}

	var flagAnalyticsInitializationStateDefault string

	_ = cmd.PersistentFlags().String(flagAnalyticsInitializationStateName, flagAnalyticsInitializationStateDefault, flagAnalyticsInitializationStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAnalyticsScanProgressParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAnalyticsScanProgressDescription := `Filter by analytics.scan_progress`

	var flagAnalyticsScanProgressName string
	if cmdPrefix == "" {
		flagAnalyticsScanProgressName = "analytics.scan_progress"
	} else {
		flagAnalyticsScanProgressName = fmt.Sprintf("%v.analytics.scan_progress", cmdPrefix)
	}

	var flagAnalyticsScanProgressDefault int64

	_ = cmd.PersistentFlags().Int64(flagAnalyticsScanProgressName, flagAnalyticsScanProgressDefault, flagAnalyticsScanProgressDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAnalyticsScanThrottleReasonArgumentsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAnalyticsScanThrottleReasonArgumentsDescription := `Filter by analytics.scan_throttle_reason.arguments`

	var flagAnalyticsScanThrottleReasonArgumentsName string
	if cmdPrefix == "" {
		flagAnalyticsScanThrottleReasonArgumentsName = "analytics.scan_throttle_reason.arguments"
	} else {
		flagAnalyticsScanThrottleReasonArgumentsName = fmt.Sprintf("%v.analytics.scan_throttle_reason.arguments", cmdPrefix)
	}

	var flagAnalyticsScanThrottleReasonArgumentsDefault string

	_ = cmd.PersistentFlags().String(flagAnalyticsScanThrottleReasonArgumentsName, flagAnalyticsScanThrottleReasonArgumentsDefault, flagAnalyticsScanThrottleReasonArgumentsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAnalyticsScanThrottleReasonCodeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAnalyticsScanThrottleReasonCodeDescription := `Filter by analytics.scan_throttle_reason.code`

	var flagAnalyticsScanThrottleReasonCodeName string
	if cmdPrefix == "" {
		flagAnalyticsScanThrottleReasonCodeName = "analytics.scan_throttle_reason.code"
	} else {
		flagAnalyticsScanThrottleReasonCodeName = fmt.Sprintf("%v.analytics.scan_throttle_reason.code", cmdPrefix)
	}

	var flagAnalyticsScanThrottleReasonCodeDefault string

	_ = cmd.PersistentFlags().String(flagAnalyticsScanThrottleReasonCodeName, flagAnalyticsScanThrottleReasonCodeDefault, flagAnalyticsScanThrottleReasonCodeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAnalyticsScanThrottleReasonMessageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAnalyticsScanThrottleReasonMessageDescription := `Filter by analytics.scan_throttle_reason.message`

	var flagAnalyticsScanThrottleReasonMessageName string
	if cmdPrefix == "" {
		flagAnalyticsScanThrottleReasonMessageName = "analytics.scan_throttle_reason.message"
	} else {
		flagAnalyticsScanThrottleReasonMessageName = fmt.Sprintf("%v.analytics.scan_throttle_reason.message", cmdPrefix)
	}

	var flagAnalyticsScanThrottleReasonMessageDefault string

	_ = cmd.PersistentFlags().String(flagAnalyticsScanThrottleReasonMessageName, flagAnalyticsScanThrottleReasonMessageDefault, flagAnalyticsScanThrottleReasonMessageDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAnalyticsStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAnalyticsStateDescription := `Filter by analytics.state`

	var flagAnalyticsStateName string
	if cmdPrefix == "" {
		flagAnalyticsStateName = "analytics.state"
	} else {
		flagAnalyticsStateName = fmt.Sprintf("%v.analytics.state", cmdPrefix)
	}

	var flagAnalyticsStateDefault string

	_ = cmd.PersistentFlags().String(flagAnalyticsStateName, flagAnalyticsStateDefault, flagAnalyticsStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAnalyticsSupportedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAnalyticsSupportedDescription := `Filter by analytics.supported`

	var flagAnalyticsSupportedName string
	if cmdPrefix == "" {
		flagAnalyticsSupportedName = "analytics.supported"
	} else {
		flagAnalyticsSupportedName = fmt.Sprintf("%v.analytics.supported", cmdPrefix)
	}

	var flagAnalyticsSupportedDefault bool

	_ = cmd.PersistentFlags().Bool(flagAnalyticsSupportedName, flagAnalyticsSupportedDefault, flagAnalyticsSupportedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAnalyticsTotalFilesParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAnalyticsTotalFilesDescription := `Filter by analytics.total_files`

	var flagAnalyticsTotalFilesName string
	if cmdPrefix == "" {
		flagAnalyticsTotalFilesName = "analytics.total_files"
	} else {
		flagAnalyticsTotalFilesName = fmt.Sprintf("%v.analytics.total_files", cmdPrefix)
	}

	var flagAnalyticsTotalFilesDefault int64

	_ = cmd.PersistentFlags().Int64(flagAnalyticsTotalFilesName, flagAnalyticsTotalFilesDefault, flagAnalyticsTotalFilesDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAnalyticsUnsupportedReasonCodeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAnalyticsUnsupportedReasonCodeDescription := `Filter by analytics.unsupported_reason.code`

	var flagAnalyticsUnsupportedReasonCodeName string
	if cmdPrefix == "" {
		flagAnalyticsUnsupportedReasonCodeName = "analytics.unsupported_reason.code"
	} else {
		flagAnalyticsUnsupportedReasonCodeName = fmt.Sprintf("%v.analytics.unsupported_reason.code", cmdPrefix)
	}

	var flagAnalyticsUnsupportedReasonCodeDefault string

	_ = cmd.PersistentFlags().String(flagAnalyticsUnsupportedReasonCodeName, flagAnalyticsUnsupportedReasonCodeDefault, flagAnalyticsUnsupportedReasonCodeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAnalyticsUnsupportedReasonMessageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAnalyticsUnsupportedReasonMessageDescription := `Filter by analytics.unsupported_reason.message`

	var flagAnalyticsUnsupportedReasonMessageName string
	if cmdPrefix == "" {
		flagAnalyticsUnsupportedReasonMessageName = "analytics.unsupported_reason.message"
	} else {
		flagAnalyticsUnsupportedReasonMessageName = fmt.Sprintf("%v.analytics.unsupported_reason.message", cmdPrefix)
	}

	var flagAnalyticsUnsupportedReasonMessageDefault string

	_ = cmd.PersistentFlags().String(flagAnalyticsUnsupportedReasonMessageName, flagAnalyticsUnsupportedReasonMessageDefault, flagAnalyticsUnsupportedReasonMessageDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateDescription := `Filter by anti_ransomware.attack_detection_parameters.based_on_file_create_op_rate`

	var flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateName = "anti_ransomware.attack_detection_parameters.based_on_file_create_op_rate"
	} else {
		flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.based_on_file_create_op_rate", cmdPrefix)
	}

	var flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateDefault bool

	_ = cmd.PersistentFlags().Bool(flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateName, flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateDefault, flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateDescription := `Filter by anti_ransomware.attack_detection_parameters.based_on_file_delete_op_rate`

	var flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateName = "anti_ransomware.attack_detection_parameters.based_on_file_delete_op_rate"
	} else {
		flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.based_on_file_delete_op_rate", cmdPrefix)
	}

	var flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateDefault bool

	_ = cmd.PersistentFlags().Bool(flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateName, flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateDefault, flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateDescription := `Filter by anti_ransomware.attack_detection_parameters.based_on_file_rename_op_rate`

	var flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateName = "anti_ransomware.attack_detection_parameters.based_on_file_rename_op_rate"
	} else {
		flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.based_on_file_rename_op_rate", cmdPrefix)
	}

	var flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateDefault bool

	_ = cmd.PersistentFlags().Bool(flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateName, flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateDefault, flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateDescription := `Filter by anti_ransomware.attack_detection_parameters.based_on_high_entropy_data_rate`

	var flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateName = "anti_ransomware.attack_detection_parameters.based_on_high_entropy_data_rate"
	} else {
		flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.based_on_high_entropy_data_rate", cmdPrefix)
	}

	var flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateDefault bool

	_ = cmd.PersistentFlags().Bool(flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateName, flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateDefault, flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionDescription := `Filter by anti_ransomware.attack_detection_parameters.based_on_never_seen_before_file_extension`

	var flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionName = "anti_ransomware.attack_detection_parameters.based_on_never_seen_before_file_extension"
	} else {
		flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.based_on_never_seen_before_file_extension", cmdPrefix)
	}

	var flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionDefault bool

	_ = cmd.PersistentFlags().Bool(flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionName, flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionDefault, flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentDescription := `Filter by anti_ransomware.attack_detection_parameters.file_create_op_rate_surge_notify_percent`

	var flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentName = "anti_ransomware.attack_detection_parameters.file_create_op_rate_surge_notify_percent"
	} else {
		flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.file_create_op_rate_surge_notify_percent", cmdPrefix)
	}

	var flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentName, flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentDefault, flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentDescription := `Filter by anti_ransomware.attack_detection_parameters.file_delete_op_rate_surge_notify_percent`

	var flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentName = "anti_ransomware.attack_detection_parameters.file_delete_op_rate_surge_notify_percent"
	} else {
		flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.file_delete_op_rate_surge_notify_percent", cmdPrefix)
	}

	var flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentName, flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentDefault, flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentDescription := `Filter by anti_ransomware.attack_detection_parameters.file_rename_op_rate_surge_notify_percent`

	var flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentName = "anti_ransomware.attack_detection_parameters.file_rename_op_rate_surge_notify_percent"
	} else {
		flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.file_rename_op_rate_surge_notify_percent", cmdPrefix)
	}

	var flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentName, flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentDefault, flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentDescription := `Filter by anti_ransomware.attack_detection_parameters.high_entropy_data_surge_notify_percent`

	var flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentName = "anti_ransomware.attack_detection_parameters.high_entropy_data_surge_notify_percent"
	} else {
		flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.high_entropy_data_surge_notify_percent", cmdPrefix)
	}

	var flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentName, flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentDefault, flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdDescription := `Filter by anti_ransomware.attack_detection_parameters.never_seen_before_file_extension_count_notify_threshold`

	var flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdName = "anti_ransomware.attack_detection_parameters.never_seen_before_file_extension_count_notify_threshold"
	} else {
		flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.never_seen_before_file_extension_count_notify_threshold", cmdPrefix)
	}

	var flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdName, flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdDefault, flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursDescription := `Filter by anti_ransomware.attack_detection_parameters.never_seen_before_file_extension_duration_in_hours`

	var flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursName = "anti_ransomware.attack_detection_parameters.never_seen_before_file_extension_duration_in_hours"
	} else {
		flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.never_seen_before_file_extension_duration_in_hours", cmdPrefix)
	}

	var flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursName, flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursDefault, flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsDescription := `Filter by anti_ransomware.attack_detection_parameters.relaxing_popular_file_extensions`

	var flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsName = "anti_ransomware.attack_detection_parameters.relaxing_popular_file_extensions"
	} else {
		flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.relaxing_popular_file_extensions", cmdPrefix)
	}

	var flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsDefault bool

	_ = cmd.PersistentFlags().Bool(flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsName, flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsDefault, flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackProbabilityParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackProbabilityDescription := `Filter by anti_ransomware.attack_probability`

	var flagAntiRansomwareAttackProbabilityName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackProbabilityName = "anti_ransomware.attack_probability"
	} else {
		flagAntiRansomwareAttackProbabilityName = fmt.Sprintf("%v.anti_ransomware.attack_probability", cmdPrefix)
	}

	var flagAntiRansomwareAttackProbabilityDefault string

	_ = cmd.PersistentFlags().String(flagAntiRansomwareAttackProbabilityName, flagAntiRansomwareAttackProbabilityDefault, flagAntiRansomwareAttackProbabilityDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareAttackReportsTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareAttackReportsTimeDescription := `Filter by anti_ransomware.attack_reports.time`

	var flagAntiRansomwareAttackReportsTimeName string
	if cmdPrefix == "" {
		flagAntiRansomwareAttackReportsTimeName = "anti_ransomware.attack_reports.time"
	} else {
		flagAntiRansomwareAttackReportsTimeName = fmt.Sprintf("%v.anti_ransomware.attack_reports.time", cmdPrefix)
	}

	var flagAntiRansomwareAttackReportsTimeDefault string

	_ = cmd.PersistentFlags().String(flagAntiRansomwareAttackReportsTimeName, flagAntiRansomwareAttackReportsTimeDefault, flagAntiRansomwareAttackReportsTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareDryRunStartTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareDryRunStartTimeDescription := `Filter by anti_ransomware.dry_run_start_time`

	var flagAntiRansomwareDryRunStartTimeName string
	if cmdPrefix == "" {
		flagAntiRansomwareDryRunStartTimeName = "anti_ransomware.dry_run_start_time"
	} else {
		flagAntiRansomwareDryRunStartTimeName = fmt.Sprintf("%v.anti_ransomware.dry_run_start_time", cmdPrefix)
	}

	var flagAntiRansomwareDryRunStartTimeDefault string

	_ = cmd.PersistentFlags().String(flagAntiRansomwareDryRunStartTimeName, flagAntiRansomwareDryRunStartTimeDefault, flagAntiRansomwareDryRunStartTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenDescription := `Filter by anti_ransomware.event_log.is_enabled_on_new_file_extension_seen`

	var flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenName string
	if cmdPrefix == "" {
		flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenName = "anti_ransomware.event_log.is_enabled_on_new_file_extension_seen"
	} else {
		flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenName = fmt.Sprintf("%v.anti_ransomware.event_log.is_enabled_on_new_file_extension_seen", cmdPrefix)
	}

	var flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenDefault bool

	_ = cmd.PersistentFlags().Bool(flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenName, flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenDefault, flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationDescription := `Filter by anti_ransomware.event_log.is_enabled_on_snapshot_copy_creation`

	var flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationName string
	if cmdPrefix == "" {
		flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationName = "anti_ransomware.event_log.is_enabled_on_snapshot_copy_creation"
	} else {
		flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationName = fmt.Sprintf("%v.anti_ransomware.event_log.is_enabled_on_snapshot_copy_creation", cmdPrefix)
	}

	var flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationDefault bool

	_ = cmd.PersistentFlags().Bool(flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationName, flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationDefault, flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSpaceSnapshotCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSpaceSnapshotCountDescription := `Filter by anti_ransomware.space.snapshot_count`

	var flagAntiRansomwareSpaceSnapshotCountName string
	if cmdPrefix == "" {
		flagAntiRansomwareSpaceSnapshotCountName = "anti_ransomware.space.snapshot_count"
	} else {
		flagAntiRansomwareSpaceSnapshotCountName = fmt.Sprintf("%v.anti_ransomware.space.snapshot_count", cmdPrefix)
	}

	var flagAntiRansomwareSpaceSnapshotCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareSpaceSnapshotCountName, flagAntiRansomwareSpaceSnapshotCountDefault, flagAntiRansomwareSpaceSnapshotCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSpaceUsedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSpaceUsedDescription := `Filter by anti_ransomware.space.used`

	var flagAntiRansomwareSpaceUsedName string
	if cmdPrefix == "" {
		flagAntiRansomwareSpaceUsedName = "anti_ransomware.space.used"
	} else {
		flagAntiRansomwareSpaceUsedName = fmt.Sprintf("%v.anti_ransomware.space.used", cmdPrefix)
	}

	var flagAntiRansomwareSpaceUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareSpaceUsedName, flagAntiRansomwareSpaceUsedDefault, flagAntiRansomwareSpaceUsedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSpaceUsedByLogsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSpaceUsedByLogsDescription := `Filter by anti_ransomware.space.used_by_logs`

	var flagAntiRansomwareSpaceUsedByLogsName string
	if cmdPrefix == "" {
		flagAntiRansomwareSpaceUsedByLogsName = "anti_ransomware.space.used_by_logs"
	} else {
		flagAntiRansomwareSpaceUsedByLogsName = fmt.Sprintf("%v.anti_ransomware.space.used_by_logs", cmdPrefix)
	}

	var flagAntiRansomwareSpaceUsedByLogsDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareSpaceUsedByLogsName, flagAntiRansomwareSpaceUsedByLogsDefault, flagAntiRansomwareSpaceUsedByLogsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSpaceUsedBySnapshotsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSpaceUsedBySnapshotsDescription := `Filter by anti_ransomware.space.used_by_snapshots`

	var flagAntiRansomwareSpaceUsedBySnapshotsName string
	if cmdPrefix == "" {
		flagAntiRansomwareSpaceUsedBySnapshotsName = "anti_ransomware.space.used_by_snapshots"
	} else {
		flagAntiRansomwareSpaceUsedBySnapshotsName = fmt.Sprintf("%v.anti_ransomware.space.used_by_snapshots", cmdPrefix)
	}

	var flagAntiRansomwareSpaceUsedBySnapshotsDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareSpaceUsedBySnapshotsName, flagAntiRansomwareSpaceUsedBySnapshotsDefault, flagAntiRansomwareSpaceUsedBySnapshotsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareStateDescription := `Filter by anti_ransomware.state`

	var flagAntiRansomwareStateName string
	if cmdPrefix == "" {
		flagAntiRansomwareStateName = "anti_ransomware.state"
	} else {
		flagAntiRansomwareStateName = fmt.Sprintf("%v.anti_ransomware.state", cmdPrefix)
	}

	var flagAntiRansomwareStateDefault string

	_ = cmd.PersistentFlags().String(flagAntiRansomwareStateName, flagAntiRansomwareStateDefault, flagAntiRansomwareStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeAsNormalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSurgeAsNormalDescription := `Filter by anti_ransomware.surge_as_normal`

	var flagAntiRansomwareSurgeAsNormalName string
	if cmdPrefix == "" {
		flagAntiRansomwareSurgeAsNormalName = "anti_ransomware.surge_as_normal"
	} else {
		flagAntiRansomwareSurgeAsNormalName = fmt.Sprintf("%v.anti_ransomware.surge_as_normal", cmdPrefix)
	}

	var flagAntiRansomwareSurgeAsNormalDefault bool

	_ = cmd.PersistentFlags().Bool(flagAntiRansomwareSurgeAsNormalName, flagAntiRansomwareSurgeAsNormalDefault, flagAntiRansomwareSurgeAsNormalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteDescription := `Filter by anti_ransomware.surge_usage.file_create_peak_rate_per_minute`

	var flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteName = "anti_ransomware.surge_usage.file_create_peak_rate_per_minute"
	} else {
		flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.surge_usage.file_create_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteName, flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteDefault, flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteDescription := `Filter by anti_ransomware.surge_usage.file_delete_peak_rate_per_minute`

	var flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteName = "anti_ransomware.surge_usage.file_delete_peak_rate_per_minute"
	} else {
		flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.surge_usage.file_delete_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteName, flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteDefault, flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteDescription := `Filter by anti_ransomware.surge_usage.file_rename_peak_rate_per_minute`

	var flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteName = "anti_ransomware.surge_usage.file_rename_peak_rate_per_minute"
	} else {
		flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.surge_usage.file_rename_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteName, flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteDefault, flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentDescription := `Filter by anti_ransomware.surge_usage.high_entropy_data_write_peak_percent`

	var flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentName string
	if cmdPrefix == "" {
		flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentName = "anti_ransomware.surge_usage.high_entropy_data_write_peak_percent"
	} else {
		flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.anti_ransomware.surge_usage.high_entropy_data_write_peak_percent", cmdPrefix)
	}

	var flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentName, flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentDefault, flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteDescription := `Filter by anti_ransomware.surge_usage.high_entropy_data_write_peak_rate_kb_per_minute`

	var flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName = "anti_ransomware.surge_usage.high_entropy_data_write_peak_rate_kb_per_minute"
	} else {
		flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.anti_ransomware.surge_usage.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName, flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteDefault, flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSurgeUsageTimeDescription := `Filter by anti_ransomware.surge_usage.time`

	var flagAntiRansomwareSurgeUsageTimeName string
	if cmdPrefix == "" {
		flagAntiRansomwareSurgeUsageTimeName = "anti_ransomware.surge_usage.time"
	} else {
		flagAntiRansomwareSurgeUsageTimeName = fmt.Sprintf("%v.anti_ransomware.surge_usage.time", cmdPrefix)
	}

	var flagAntiRansomwareSurgeUsageTimeDefault string

	_ = cmd.PersistentFlags().String(flagAntiRansomwareSurgeUsageTimeName, flagAntiRansomwareSurgeUsageTimeDefault, flagAntiRansomwareSurgeUsageTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSuspectFilesCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSuspectFilesCountDescription := `Filter by anti_ransomware.suspect_files.count`

	var flagAntiRansomwareSuspectFilesCountName string
	if cmdPrefix == "" {
		flagAntiRansomwareSuspectFilesCountName = "anti_ransomware.suspect_files.count"
	} else {
		flagAntiRansomwareSuspectFilesCountName = fmt.Sprintf("%v.anti_ransomware.suspect_files.count", cmdPrefix)
	}

	var flagAntiRansomwareSuspectFilesCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareSuspectFilesCountName, flagAntiRansomwareSuspectFilesCountDefault, flagAntiRansomwareSuspectFilesCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSuspectFilesEntropyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSuspectFilesEntropyDescription := `Filter by anti_ransomware.suspect_files.entropy`

	var flagAntiRansomwareSuspectFilesEntropyName string
	if cmdPrefix == "" {
		flagAntiRansomwareSuspectFilesEntropyName = "anti_ransomware.suspect_files.entropy"
	} else {
		flagAntiRansomwareSuspectFilesEntropyName = fmt.Sprintf("%v.anti_ransomware.suspect_files.entropy", cmdPrefix)
	}

	var flagAntiRansomwareSuspectFilesEntropyDefault string

	_ = cmd.PersistentFlags().String(flagAntiRansomwareSuspectFilesEntropyName, flagAntiRansomwareSuspectFilesEntropyDefault, flagAntiRansomwareSuspectFilesEntropyDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareSuspectFilesFormatParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareSuspectFilesFormatDescription := `Filter by anti_ransomware.suspect_files.format`

	var flagAntiRansomwareSuspectFilesFormatName string
	if cmdPrefix == "" {
		flagAntiRansomwareSuspectFilesFormatName = "anti_ransomware.suspect_files.format"
	} else {
		flagAntiRansomwareSuspectFilesFormatName = fmt.Sprintf("%v.anti_ransomware.suspect_files.format", cmdPrefix)
	}

	var flagAntiRansomwareSuspectFilesFormatDefault string

	_ = cmd.PersistentFlags().String(flagAntiRansomwareSuspectFilesFormatName, flagAntiRansomwareSuspectFilesFormatDefault, flagAntiRansomwareSuspectFilesFormatDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteDescription := `Filter by anti_ransomware.typical_usage.file_create_peak_rate_per_minute`

	var flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteName = "anti_ransomware.typical_usage.file_create_peak_rate_per_minute"
	} else {
		flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.typical_usage.file_create_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteName, flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteDefault, flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteDescription := `Filter by anti_ransomware.typical_usage.file_delete_peak_rate_per_minute`

	var flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteName = "anti_ransomware.typical_usage.file_delete_peak_rate_per_minute"
	} else {
		flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.typical_usage.file_delete_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteName, flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteDefault, flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteDescription := `Filter by anti_ransomware.typical_usage.file_rename_peak_rate_per_minute`

	var flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteName = "anti_ransomware.typical_usage.file_rename_peak_rate_per_minute"
	} else {
		flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.typical_usage.file_rename_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteName, flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteDefault, flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentDescription := `Filter by anti_ransomware.typical_usage.high_entropy_data_write_peak_percent`

	var flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentName string
	if cmdPrefix == "" {
		flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentName = "anti_ransomware.typical_usage.high_entropy_data_write_peak_percent"
	} else {
		flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.anti_ransomware.typical_usage.high_entropy_data_write_peak_percent", cmdPrefix)
	}

	var flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentName, flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentDefault, flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteDescription := `Filter by anti_ransomware.typical_usage.high_entropy_data_write_peak_rate_kb_per_minute`

	var flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName = "anti_ransomware.typical_usage.high_entropy_data_write_peak_rate_kb_per_minute"
	} else {
		flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.anti_ransomware.typical_usage.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName, flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteDefault, flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareUpdateBaselineFromSurgeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareUpdateBaselineFromSurgeDescription := `Filter by anti_ransomware.update_baseline_from_surge`

	var flagAntiRansomwareUpdateBaselineFromSurgeName string
	if cmdPrefix == "" {
		flagAntiRansomwareUpdateBaselineFromSurgeName = "anti_ransomware.update_baseline_from_surge"
	} else {
		flagAntiRansomwareUpdateBaselineFromSurgeName = fmt.Sprintf("%v.anti_ransomware.update_baseline_from_surge", cmdPrefix)
	}

	var flagAntiRansomwareUpdateBaselineFromSurgeDefault bool

	_ = cmd.PersistentFlags().Bool(flagAntiRansomwareUpdateBaselineFromSurgeName, flagAntiRansomwareUpdateBaselineFromSurgeDefault, flagAntiRansomwareUpdateBaselineFromSurgeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadFileExtensionTypesCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadFileExtensionTypesCountDescription := `Filter by anti_ransomware.workload.file_extension_types_count`

	var flagAntiRansomwareWorkloadFileExtensionTypesCountName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadFileExtensionTypesCountName = "anti_ransomware.workload.file_extension_types_count"
	} else {
		flagAntiRansomwareWorkloadFileExtensionTypesCountName = fmt.Sprintf("%v.anti_ransomware.workload.file_extension_types_count", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadFileExtensionTypesCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadFileExtensionTypesCountName, flagAntiRansomwareWorkloadFileExtensionTypesCountDefault, flagAntiRansomwareWorkloadFileExtensionTypesCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadFileExtensionsObservedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadFileExtensionsObservedDescription := `Filter by anti_ransomware.workload.file_extensions_observed`

	var flagAntiRansomwareWorkloadFileExtensionsObservedName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadFileExtensionsObservedName = "anti_ransomware.workload.file_extensions_observed"
	} else {
		flagAntiRansomwareWorkloadFileExtensionsObservedName = fmt.Sprintf("%v.anti_ransomware.workload.file_extensions_observed", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadFileExtensionsObservedDefault string

	_ = cmd.PersistentFlags().String(flagAntiRansomwareWorkloadFileExtensionsObservedName, flagAntiRansomwareWorkloadFileExtensionsObservedDefault, flagAntiRansomwareWorkloadFileExtensionsObservedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteDescription := `Filter by anti_ransomware.workload.historical_statistics.file_create_peak_rate_per_minute`

	var flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteName = "anti_ransomware.workload.historical_statistics.file_create_peak_rate_per_minute"
	} else {
		flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.historical_statistics.file_create_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteName, flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteDefault, flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteDescription := `Filter by anti_ransomware.workload.historical_statistics.file_delete_peak_rate_per_minute`

	var flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteName = "anti_ransomware.workload.historical_statistics.file_delete_peak_rate_per_minute"
	} else {
		flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.historical_statistics.file_delete_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteName, flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteDefault, flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteDescription := `Filter by anti_ransomware.workload.historical_statistics.file_rename_peak_rate_per_minute`

	var flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteName = "anti_ransomware.workload.historical_statistics.file_rename_peak_rate_per_minute"
	} else {
		flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.historical_statistics.file_rename_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteName, flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteDefault, flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentDescription := `Filter by anti_ransomware.workload.historical_statistics.high_entropy_data_write_peak_percent`

	var flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentName = "anti_ransomware.workload.historical_statistics.high_entropy_data_write_peak_percent"
	} else {
		flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.anti_ransomware.workload.historical_statistics.high_entropy_data_write_peak_percent", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentName, flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentDefault, flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteDescription := `Filter by anti_ransomware.workload.historical_statistics.high_entropy_data_write_peak_rate_kb_per_minute`

	var flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteName = "anti_ransomware.workload.historical_statistics.high_entropy_data_write_peak_rate_kb_per_minute"
	} else {
		flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.historical_statistics.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteName, flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteDefault, flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadNewlyObservedFileExtensionsCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountDescription := `Filter by anti_ransomware.workload.newly_observed_file_extensions.count`

	var flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountName = "anti_ransomware.workload.newly_observed_file_extensions.count"
	} else {
		flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountName = fmt.Sprintf("%v.anti_ransomware.workload.newly_observed_file_extensions.count", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountName, flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountDefault, flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadNewlyObservedFileExtensionsNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameDescription := `Filter by anti_ransomware.workload.newly_observed_file_extensions.name`

	var flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameName = "anti_ransomware.workload.newly_observed_file_extensions.name"
	} else {
		flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameName = fmt.Sprintf("%v.anti_ransomware.workload.newly_observed_file_extensions.name", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameDefault string

	_ = cmd.PersistentFlags().String(flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameName, flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameDefault, flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteDescription := `Filter by anti_ransomware.workload.surge_statistics.file_create_peak_rate_per_minute`

	var flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteName = "anti_ransomware.workload.surge_statistics.file_create_peak_rate_per_minute"
	} else {
		flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_statistics.file_create_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteName, flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteDefault, flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteDescription := `Filter by anti_ransomware.workload.surge_statistics.file_delete_peak_rate_per_minute`

	var flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteName = "anti_ransomware.workload.surge_statistics.file_delete_peak_rate_per_minute"
	} else {
		flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_statistics.file_delete_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteName, flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteDefault, flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteDescription := `Filter by anti_ransomware.workload.surge_statistics.file_rename_peak_rate_per_minute`

	var flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteName = "anti_ransomware.workload.surge_statistics.file_rename_peak_rate_per_minute"
	} else {
		flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_statistics.file_rename_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteName, flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteDefault, flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentDescription := `Filter by anti_ransomware.workload.surge_statistics.high_entropy_data_write_peak_percent`

	var flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentName = "anti_ransomware.workload.surge_statistics.high_entropy_data_write_peak_percent"
	} else {
		flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.anti_ransomware.workload.surge_statistics.high_entropy_data_write_peak_percent", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentName, flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentDefault, flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteDescription := `Filter by anti_ransomware.workload.surge_statistics.high_entropy_data_write_peak_rate_kb_per_minute`

	var flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteName = "anti_ransomware.workload.surge_statistics.high_entropy_data_write_peak_rate_kb_per_minute"
	} else {
		flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_statistics.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteName, flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteDefault, flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeStatisticsTimeDescription := `Filter by anti_ransomware.workload.surge_statistics.time`

	var flagAntiRansomwareWorkloadSurgeStatisticsTimeName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeStatisticsTimeName = "anti_ransomware.workload.surge_statistics.time"
	} else {
		flagAntiRansomwareWorkloadSurgeStatisticsTimeName = fmt.Sprintf("%v.anti_ransomware.workload.surge_statistics.time", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeStatisticsTimeDefault string

	_ = cmd.PersistentFlags().String(flagAntiRansomwareWorkloadSurgeStatisticsTimeName, flagAntiRansomwareWorkloadSurgeStatisticsTimeDefault, flagAntiRansomwareWorkloadSurgeStatisticsTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteDescription := `Filter by anti_ransomware.workload.surge_usage.file_create_peak_rate_per_minute`

	var flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteName = "anti_ransomware.workload.surge_usage.file_create_peak_rate_per_minute"
	} else {
		flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.file_create_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteName, flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteDefault, flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteDescription := `Filter by anti_ransomware.workload.surge_usage.file_delete_peak_rate_per_minute`

	var flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteName = "anti_ransomware.workload.surge_usage.file_delete_peak_rate_per_minute"
	} else {
		flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.file_delete_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteName, flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteDefault, flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteDescription := `Filter by anti_ransomware.workload.surge_usage.file_rename_peak_rate_per_minute`

	var flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteName = "anti_ransomware.workload.surge_usage.file_rename_peak_rate_per_minute"
	} else {
		flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.file_rename_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteName, flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteDefault, flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentDescription := `Filter by anti_ransomware.workload.surge_usage.high_entropy_data_write_peak_percent`

	var flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentName = "anti_ransomware.workload.surge_usage.high_entropy_data_write_peak_percent"
	} else {
		flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.high_entropy_data_write_peak_percent", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentName, flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentDefault, flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteDescription := `Filter by anti_ransomware.workload.surge_usage.high_entropy_data_write_peak_rate_kb_per_minute`

	var flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName = "anti_ransomware.workload.surge_usage.high_entropy_data_write_peak_rate_kb_per_minute"
	} else {
		flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName, flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteDefault, flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountDescription := `Filter by anti_ransomware.workload.surge_usage.newly_observed_file_extensions.count`

	var flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountName = "anti_ransomware.workload.surge_usage.newly_observed_file_extensions.count"
	} else {
		flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.newly_observed_file_extensions.count", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountName, flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountDefault, flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameDescription := `Filter by anti_ransomware.workload.surge_usage.newly_observed_file_extensions.name`

	var flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameName = "anti_ransomware.workload.surge_usage.newly_observed_file_extensions.name"
	} else {
		flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.newly_observed_file_extensions.name", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameDefault string

	_ = cmd.PersistentFlags().String(flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameName, flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameDefault, flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadSurgeUsageTimeDescription := `Filter by anti_ransomware.workload.surge_usage.time`

	var flagAntiRansomwareWorkloadSurgeUsageTimeName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadSurgeUsageTimeName = "anti_ransomware.workload.surge_usage.time"
	} else {
		flagAntiRansomwareWorkloadSurgeUsageTimeName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.time", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadSurgeUsageTimeDefault string

	_ = cmd.PersistentFlags().String(flagAntiRansomwareWorkloadSurgeUsageTimeName, flagAntiRansomwareWorkloadSurgeUsageTimeDefault, flagAntiRansomwareWorkloadSurgeUsageTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteDescription := `Filter by anti_ransomware.workload.typical_usage.file_create_peak_rate_per_minute`

	var flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteName = "anti_ransomware.workload.typical_usage.file_create_peak_rate_per_minute"
	} else {
		flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.typical_usage.file_create_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteName, flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteDefault, flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteDescription := `Filter by anti_ransomware.workload.typical_usage.file_delete_peak_rate_per_minute`

	var flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteName = "anti_ransomware.workload.typical_usage.file_delete_peak_rate_per_minute"
	} else {
		flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.typical_usage.file_delete_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteName, flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteDefault, flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteDescription := `Filter by anti_ransomware.workload.typical_usage.file_rename_peak_rate_per_minute`

	var flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteName = "anti_ransomware.workload.typical_usage.file_rename_peak_rate_per_minute"
	} else {
		flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.typical_usage.file_rename_peak_rate_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteName, flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteDefault, flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentDescription := `Filter by anti_ransomware.workload.typical_usage.high_entropy_data_write_peak_percent`

	var flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentName = "anti_ransomware.workload.typical_usage.high_entropy_data_write_peak_percent"
	} else {
		flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.anti_ransomware.workload.typical_usage.high_entropy_data_write_peak_percent", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentName, flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentDefault, flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteDescription := `Filter by anti_ransomware.workload.typical_usage.high_entropy_data_write_peak_rate_kb_per_minute`

	var flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName string
	if cmdPrefix == "" {
		flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName = "anti_ransomware.workload.typical_usage.high_entropy_data_write_peak_rate_kb_per_minute"
	} else {
		flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.typical_usage.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
	}

	var flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteDefault int64

	_ = cmd.PersistentFlags().Int64(flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName, flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteDefault, flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetApplicationNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagApplicationNameDescription := `Filter by application.name`

	var flagApplicationNameName string
	if cmdPrefix == "" {
		flagApplicationNameName = "application.name"
	} else {
		flagApplicationNameName = fmt.Sprintf("%v.application.name", cmdPrefix)
	}

	var flagApplicationNameDefault string

	_ = cmd.PersistentFlags().String(flagApplicationNameName, flagApplicationNameDefault, flagApplicationNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetApplicationUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagApplicationUUIDDescription := `Filter by application.uuid`

	var flagApplicationUUIDName string
	if cmdPrefix == "" {
		flagApplicationUUIDName = "application.uuid"
	} else {
		flagApplicationUUIDName = fmt.Sprintf("%v.application.uuid", cmdPrefix)
	}

	var flagApplicationUUIDDefault string

	_ = cmd.PersistentFlags().String(flagApplicationUUIDName, flagApplicationUUIDDefault, flagApplicationUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAsynchronousDirectoryDeleteEnabledParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAsynchronousDirectoryDeleteEnabledDescription := `Filter by asynchronous_directory_delete.enabled`

	var flagAsynchronousDirectoryDeleteEnabledName string
	if cmdPrefix == "" {
		flagAsynchronousDirectoryDeleteEnabledName = "asynchronous_directory_delete.enabled"
	} else {
		flagAsynchronousDirectoryDeleteEnabledName = fmt.Sprintf("%v.asynchronous_directory_delete.enabled", cmdPrefix)
	}

	var flagAsynchronousDirectoryDeleteEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagAsynchronousDirectoryDeleteEnabledName, flagAsynchronousDirectoryDeleteEnabledDefault, flagAsynchronousDirectoryDeleteEnabledDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAsynchronousDirectoryDeleteTrashBinParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAsynchronousDirectoryDeleteTrashBinDescription := `Filter by asynchronous_directory_delete.trash_bin`

	var flagAsynchronousDirectoryDeleteTrashBinName string
	if cmdPrefix == "" {
		flagAsynchronousDirectoryDeleteTrashBinName = "asynchronous_directory_delete.trash_bin"
	} else {
		flagAsynchronousDirectoryDeleteTrashBinName = fmt.Sprintf("%v.asynchronous_directory_delete.trash_bin", cmdPrefix)
	}

	var flagAsynchronousDirectoryDeleteTrashBinDefault string

	_ = cmd.PersistentFlags().String(flagAsynchronousDirectoryDeleteTrashBinName, flagAsynchronousDirectoryDeleteTrashBinDefault, flagAsynchronousDirectoryDeleteTrashBinDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAutosizeGrowThresholdParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAutosizeGrowThresholdDescription := `Filter by autosize.grow_threshold`

	var flagAutosizeGrowThresholdName string
	if cmdPrefix == "" {
		flagAutosizeGrowThresholdName = "autosize.grow_threshold"
	} else {
		flagAutosizeGrowThresholdName = fmt.Sprintf("%v.autosize.grow_threshold", cmdPrefix)
	}

	var flagAutosizeGrowThresholdDefault int64

	_ = cmd.PersistentFlags().Int64(flagAutosizeGrowThresholdName, flagAutosizeGrowThresholdDefault, flagAutosizeGrowThresholdDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAutosizeMaximumParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAutosizeMaximumDescription := `Filter by autosize.maximum`

	var flagAutosizeMaximumName string
	if cmdPrefix == "" {
		flagAutosizeMaximumName = "autosize.maximum"
	} else {
		flagAutosizeMaximumName = fmt.Sprintf("%v.autosize.maximum", cmdPrefix)
	}

	var flagAutosizeMaximumDefault int64

	_ = cmd.PersistentFlags().Int64(flagAutosizeMaximumName, flagAutosizeMaximumDefault, flagAutosizeMaximumDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAutosizeMinimumParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAutosizeMinimumDescription := `Filter by autosize.minimum`

	var flagAutosizeMinimumName string
	if cmdPrefix == "" {
		flagAutosizeMinimumName = "autosize.minimum"
	} else {
		flagAutosizeMinimumName = fmt.Sprintf("%v.autosize.minimum", cmdPrefix)
	}

	var flagAutosizeMinimumDefault int64

	_ = cmd.PersistentFlags().Int64(flagAutosizeMinimumName, flagAutosizeMinimumDefault, flagAutosizeMinimumDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAutosizeModeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAutosizeModeDescription := `Filter by autosize.mode`

	var flagAutosizeModeName string
	if cmdPrefix == "" {
		flagAutosizeModeName = "autosize.mode"
	} else {
		flagAutosizeModeName = fmt.Sprintf("%v.autosize.mode", cmdPrefix)
	}

	var flagAutosizeModeDefault string

	_ = cmd.PersistentFlags().String(flagAutosizeModeName, flagAutosizeModeDefault, flagAutosizeModeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetAutosizeShrinkThresholdParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAutosizeShrinkThresholdDescription := `Filter by autosize.shrink_threshold`

	var flagAutosizeShrinkThresholdName string
	if cmdPrefix == "" {
		flagAutosizeShrinkThresholdName = "autosize.shrink_threshold"
	} else {
		flagAutosizeShrinkThresholdName = fmt.Sprintf("%v.autosize.shrink_threshold", cmdPrefix)
	}

	var flagAutosizeShrinkThresholdDefault int64

	_ = cmd.PersistentFlags().Int64(flagAutosizeShrinkThresholdName, flagAutosizeShrinkThresholdDefault, flagAutosizeShrinkThresholdDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneHasFlexcloneParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneHasFlexcloneDescription := `Filter by clone.has_flexclone`

	var flagCloneHasFlexcloneName string
	if cmdPrefix == "" {
		flagCloneHasFlexcloneName = "clone.has_flexclone"
	} else {
		flagCloneHasFlexcloneName = fmt.Sprintf("%v.clone.has_flexclone", cmdPrefix)
	}

	var flagCloneHasFlexcloneDefault bool

	_ = cmd.PersistentFlags().Bool(flagCloneHasFlexcloneName, flagCloneHasFlexcloneDefault, flagCloneHasFlexcloneDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneInheritedPhysicalUsedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneInheritedPhysicalUsedDescription := `Filter by clone.inherited_physical_used`

	var flagCloneInheritedPhysicalUsedName string
	if cmdPrefix == "" {
		flagCloneInheritedPhysicalUsedName = "clone.inherited_physical_used"
	} else {
		flagCloneInheritedPhysicalUsedName = fmt.Sprintf("%v.clone.inherited_physical_used", cmdPrefix)
	}

	var flagCloneInheritedPhysicalUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagCloneInheritedPhysicalUsedName, flagCloneInheritedPhysicalUsedDefault, flagCloneInheritedPhysicalUsedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneInheritedSavingsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneInheritedSavingsDescription := `Filter by clone.inherited_savings`

	var flagCloneInheritedSavingsName string
	if cmdPrefix == "" {
		flagCloneInheritedSavingsName = "clone.inherited_savings"
	} else {
		flagCloneInheritedSavingsName = fmt.Sprintf("%v.clone.inherited_savings", cmdPrefix)
	}

	var flagCloneInheritedSavingsDefault int64

	_ = cmd.PersistentFlags().Int64(flagCloneInheritedSavingsName, flagCloneInheritedSavingsDefault, flagCloneInheritedSavingsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneIsFlexcloneParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneIsFlexcloneDescription := `Filter by clone.is_flexclone`

	var flagCloneIsFlexcloneName string
	if cmdPrefix == "" {
		flagCloneIsFlexcloneName = "clone.is_flexclone"
	} else {
		flagCloneIsFlexcloneName = fmt.Sprintf("%v.clone.is_flexclone", cmdPrefix)
	}

	var flagCloneIsFlexcloneDefault bool

	_ = cmd.PersistentFlags().Bool(flagCloneIsFlexcloneName, flagCloneIsFlexcloneDefault, flagCloneIsFlexcloneDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneParentSnapshotNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneParentSnapshotNameDescription := `Filter by clone.parent_snapshot.name`

	var flagCloneParentSnapshotNameName string
	if cmdPrefix == "" {
		flagCloneParentSnapshotNameName = "clone.parent_snapshot.name"
	} else {
		flagCloneParentSnapshotNameName = fmt.Sprintf("%v.clone.parent_snapshot.name", cmdPrefix)
	}

	var flagCloneParentSnapshotNameDefault string

	_ = cmd.PersistentFlags().String(flagCloneParentSnapshotNameName, flagCloneParentSnapshotNameDefault, flagCloneParentSnapshotNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneParentSnapshotUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneParentSnapshotUUIDDescription := `Filter by clone.parent_snapshot.uuid`

	var flagCloneParentSnapshotUUIDName string
	if cmdPrefix == "" {
		flagCloneParentSnapshotUUIDName = "clone.parent_snapshot.uuid"
	} else {
		flagCloneParentSnapshotUUIDName = fmt.Sprintf("%v.clone.parent_snapshot.uuid", cmdPrefix)
	}

	var flagCloneParentSnapshotUUIDDefault string

	_ = cmd.PersistentFlags().String(flagCloneParentSnapshotUUIDName, flagCloneParentSnapshotUUIDDefault, flagCloneParentSnapshotUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneParentSvmNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneParentSvmNameDescription := `Filter by clone.parent_svm.name`

	var flagCloneParentSvmNameName string
	if cmdPrefix == "" {
		flagCloneParentSvmNameName = "clone.parent_svm.name"
	} else {
		flagCloneParentSvmNameName = fmt.Sprintf("%v.clone.parent_svm.name", cmdPrefix)
	}

	var flagCloneParentSvmNameDefault string

	_ = cmd.PersistentFlags().String(flagCloneParentSvmNameName, flagCloneParentSvmNameDefault, flagCloneParentSvmNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneParentSvmUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneParentSvmUUIDDescription := `Filter by clone.parent_svm.uuid`

	var flagCloneParentSvmUUIDName string
	if cmdPrefix == "" {
		flagCloneParentSvmUUIDName = "clone.parent_svm.uuid"
	} else {
		flagCloneParentSvmUUIDName = fmt.Sprintf("%v.clone.parent_svm.uuid", cmdPrefix)
	}

	var flagCloneParentSvmUUIDDefault string

	_ = cmd.PersistentFlags().String(flagCloneParentSvmUUIDName, flagCloneParentSvmUUIDDefault, flagCloneParentSvmUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneParentVolumeNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneParentVolumeNameDescription := `Filter by clone.parent_volume.name`

	var flagCloneParentVolumeNameName string
	if cmdPrefix == "" {
		flagCloneParentVolumeNameName = "clone.parent_volume.name"
	} else {
		flagCloneParentVolumeNameName = fmt.Sprintf("%v.clone.parent_volume.name", cmdPrefix)
	}

	var flagCloneParentVolumeNameDefault string

	_ = cmd.PersistentFlags().String(flagCloneParentVolumeNameName, flagCloneParentVolumeNameDefault, flagCloneParentVolumeNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneParentVolumeUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneParentVolumeUUIDDescription := `Filter by clone.parent_volume.uuid`

	var flagCloneParentVolumeUUIDName string
	if cmdPrefix == "" {
		flagCloneParentVolumeUUIDName = "clone.parent_volume.uuid"
	} else {
		flagCloneParentVolumeUUIDName = fmt.Sprintf("%v.clone.parent_volume.uuid", cmdPrefix)
	}

	var flagCloneParentVolumeUUIDDefault string

	_ = cmd.PersistentFlags().String(flagCloneParentVolumeUUIDName, flagCloneParentVolumeUUIDDefault, flagCloneParentVolumeUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneSplitCompletePercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneSplitCompletePercentDescription := `Filter by clone.split_complete_percent`

	var flagCloneSplitCompletePercentName string
	if cmdPrefix == "" {
		flagCloneSplitCompletePercentName = "clone.split_complete_percent"
	} else {
		flagCloneSplitCompletePercentName = fmt.Sprintf("%v.clone.split_complete_percent", cmdPrefix)
	}

	var flagCloneSplitCompletePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagCloneSplitCompletePercentName, flagCloneSplitCompletePercentDefault, flagCloneSplitCompletePercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneSplitEstimateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneSplitEstimateDescription := `Filter by clone.split_estimate`

	var flagCloneSplitEstimateName string
	if cmdPrefix == "" {
		flagCloneSplitEstimateName = "clone.split_estimate"
	} else {
		flagCloneSplitEstimateName = fmt.Sprintf("%v.clone.split_estimate", cmdPrefix)
	}

	var flagCloneSplitEstimateDefault int64

	_ = cmd.PersistentFlags().Int64(flagCloneSplitEstimateName, flagCloneSplitEstimateDefault, flagCloneSplitEstimateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloneSplitInitiatedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloneSplitInitiatedDescription := `Filter by clone.split_initiated`

	var flagCloneSplitInitiatedName string
	if cmdPrefix == "" {
		flagCloneSplitInitiatedName = "clone.split_initiated"
	} else {
		flagCloneSplitInitiatedName = fmt.Sprintf("%v.clone.split_initiated", cmdPrefix)
	}

	var flagCloneSplitInitiatedDefault bool

	_ = cmd.PersistentFlags().Bool(flagCloneSplitInitiatedName, flagCloneSplitInitiatedDefault, flagCloneSplitInitiatedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloudRetrievalPolicyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloudRetrievalPolicyDescription := `Filter by cloud_retrieval_policy`

	var flagCloudRetrievalPolicyName string
	if cmdPrefix == "" {
		flagCloudRetrievalPolicyName = "cloud_retrieval_policy"
	} else {
		flagCloudRetrievalPolicyName = fmt.Sprintf("%v.cloud_retrieval_policy", cmdPrefix)
	}

	var flagCloudRetrievalPolicyDefault string

	_ = cmd.PersistentFlags().String(flagCloudRetrievalPolicyName, flagCloudRetrievalPolicyDefault, flagCloudRetrievalPolicyDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCloudWriteEnabledParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCloudWriteEnabledDescription := `Filter by cloud_write_enabled`

	var flagCloudWriteEnabledName string
	if cmdPrefix == "" {
		flagCloudWriteEnabledName = "cloud_write_enabled"
	} else {
		flagCloudWriteEnabledName = fmt.Sprintf("%v.cloud_write_enabled", cmdPrefix)
	}

	var flagCloudWriteEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagCloudWriteEnabledName, flagCloudWriteEnabledDefault, flagCloudWriteEnabledDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCommentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCommentDescription := `Filter by comment`

	var flagCommentName string
	if cmdPrefix == "" {
		flagCommentName = "comment"
	} else {
		flagCommentName = fmt.Sprintf("%v.comment", cmdPrefix)
	}

	var flagCommentDefault string

	_ = cmd.PersistentFlags().String(flagCommentName, flagCommentDefault, flagCommentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConsistencyGroupNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConsistencyGroupNameDescription := `Filter by consistency_group.name`

	var flagConsistencyGroupNameName string
	if cmdPrefix == "" {
		flagConsistencyGroupNameName = "consistency_group.name"
	} else {
		flagConsistencyGroupNameName = fmt.Sprintf("%v.consistency_group.name", cmdPrefix)
	}

	var flagConsistencyGroupNameDefault string

	_ = cmd.PersistentFlags().String(flagConsistencyGroupNameName, flagConsistencyGroupNameDefault, flagConsistencyGroupNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConsistencyGroupUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConsistencyGroupUUIDDescription := `Filter by consistency_group.uuid`

	var flagConsistencyGroupUUIDName string
	if cmdPrefix == "" {
		flagConsistencyGroupUUIDName = "consistency_group.uuid"
	} else {
		flagConsistencyGroupUUIDName = fmt.Sprintf("%v.consistency_group.uuid", cmdPrefix)
	}

	var flagConsistencyGroupUUIDDefault string

	_ = cmd.PersistentFlags().String(flagConsistencyGroupUUIDName, flagConsistencyGroupUUIDDefault, flagConsistencyGroupUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsAggregatesNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsAggregatesNameDescription := `Filter by constituents.aggregates.name`

	var flagConstituentsAggregatesNameName string
	if cmdPrefix == "" {
		flagConstituentsAggregatesNameName = "constituents.aggregates.name"
	} else {
		flagConstituentsAggregatesNameName = fmt.Sprintf("%v.constituents.aggregates.name", cmdPrefix)
	}

	var flagConstituentsAggregatesNameDefault string

	_ = cmd.PersistentFlags().String(flagConstituentsAggregatesNameName, flagConstituentsAggregatesNameDefault, flagConstituentsAggregatesNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsAggregatesUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsAggregatesUUIDDescription := `Filter by constituents.aggregates.uuid`

	var flagConstituentsAggregatesUUIDName string
	if cmdPrefix == "" {
		flagConstituentsAggregatesUUIDName = "constituents.aggregates.uuid"
	} else {
		flagConstituentsAggregatesUUIDName = fmt.Sprintf("%v.constituents.aggregates.uuid", cmdPrefix)
	}

	var flagConstituentsAggregatesUUIDDefault string

	_ = cmd.PersistentFlags().String(flagConstituentsAggregatesUUIDName, flagConstituentsAggregatesUUIDDefault, flagConstituentsAggregatesUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsMovementCutoverWindowParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsMovementCutoverWindowDescription := `Filter by constituents.movement.cutover_window`

	var flagConstituentsMovementCutoverWindowName string
	if cmdPrefix == "" {
		flagConstituentsMovementCutoverWindowName = "constituents.movement.cutover_window"
	} else {
		flagConstituentsMovementCutoverWindowName = fmt.Sprintf("%v.constituents.movement.cutover_window", cmdPrefix)
	}

	var flagConstituentsMovementCutoverWindowDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsMovementCutoverWindowName, flagConstituentsMovementCutoverWindowDefault, flagConstituentsMovementCutoverWindowDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsMovementDestinationAggregateNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsMovementDestinationAggregateNameDescription := `Filter by constituents.movement.destination_aggregate.name`

	var flagConstituentsMovementDestinationAggregateNameName string
	if cmdPrefix == "" {
		flagConstituentsMovementDestinationAggregateNameName = "constituents.movement.destination_aggregate.name"
	} else {
		flagConstituentsMovementDestinationAggregateNameName = fmt.Sprintf("%v.constituents.movement.destination_aggregate.name", cmdPrefix)
	}

	var flagConstituentsMovementDestinationAggregateNameDefault string

	_ = cmd.PersistentFlags().String(flagConstituentsMovementDestinationAggregateNameName, flagConstituentsMovementDestinationAggregateNameDefault, flagConstituentsMovementDestinationAggregateNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsMovementDestinationAggregateUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsMovementDestinationAggregateUUIDDescription := `Filter by constituents.movement.destination_aggregate.uuid`

	var flagConstituentsMovementDestinationAggregateUUIDName string
	if cmdPrefix == "" {
		flagConstituentsMovementDestinationAggregateUUIDName = "constituents.movement.destination_aggregate.uuid"
	} else {
		flagConstituentsMovementDestinationAggregateUUIDName = fmt.Sprintf("%v.constituents.movement.destination_aggregate.uuid", cmdPrefix)
	}

	var flagConstituentsMovementDestinationAggregateUUIDDefault string

	_ = cmd.PersistentFlags().String(flagConstituentsMovementDestinationAggregateUUIDName, flagConstituentsMovementDestinationAggregateUUIDDefault, flagConstituentsMovementDestinationAggregateUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsMovementPercentCompleteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsMovementPercentCompleteDescription := `Filter by constituents.movement.percent_complete`

	var flagConstituentsMovementPercentCompleteName string
	if cmdPrefix == "" {
		flagConstituentsMovementPercentCompleteName = "constituents.movement.percent_complete"
	} else {
		flagConstituentsMovementPercentCompleteName = fmt.Sprintf("%v.constituents.movement.percent_complete", cmdPrefix)
	}

	var flagConstituentsMovementPercentCompleteDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsMovementPercentCompleteName, flagConstituentsMovementPercentCompleteDefault, flagConstituentsMovementPercentCompleteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsMovementStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsMovementStateDescription := `Filter by constituents.movement.state`

	var flagConstituentsMovementStateName string
	if cmdPrefix == "" {
		flagConstituentsMovementStateName = "constituents.movement.state"
	} else {
		flagConstituentsMovementStateName = fmt.Sprintf("%v.constituents.movement.state", cmdPrefix)
	}

	var flagConstituentsMovementStateDefault string

	_ = cmd.PersistentFlags().String(flagConstituentsMovementStateName, flagConstituentsMovementStateDefault, flagConstituentsMovementStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsNameDescription := `Filter by constituents.name`

	var flagConstituentsNameName string
	if cmdPrefix == "" {
		flagConstituentsNameName = "constituents.name"
	} else {
		flagConstituentsNameName = fmt.Sprintf("%v.constituents.name", cmdPrefix)
	}

	var flagConstituentsNameDefault string

	_ = cmd.PersistentFlags().String(flagConstituentsNameName, flagConstituentsNameDefault, flagConstituentsNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceAfsTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceAfsTotalDescription := `Filter by constituents.space.afs_total`

	var flagConstituentsSpaceAfsTotalName string
	if cmdPrefix == "" {
		flagConstituentsSpaceAfsTotalName = "constituents.space.afs_total"
	} else {
		flagConstituentsSpaceAfsTotalName = fmt.Sprintf("%v.constituents.space.afs_total", cmdPrefix)
	}

	var flagConstituentsSpaceAfsTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceAfsTotalName, flagConstituentsSpaceAfsTotalDefault, flagConstituentsSpaceAfsTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceAvailableParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceAvailableDescription := `Filter by constituents.space.available`

	var flagConstituentsSpaceAvailableName string
	if cmdPrefix == "" {
		flagConstituentsSpaceAvailableName = "constituents.space.available"
	} else {
		flagConstituentsSpaceAvailableName = fmt.Sprintf("%v.constituents.space.available", cmdPrefix)
	}

	var flagConstituentsSpaceAvailableDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceAvailableName, flagConstituentsSpaceAvailableDefault, flagConstituentsSpaceAvailableDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceAvailablePercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceAvailablePercentDescription := `Filter by constituents.space.available_percent`

	var flagConstituentsSpaceAvailablePercentName string
	if cmdPrefix == "" {
		flagConstituentsSpaceAvailablePercentName = "constituents.space.available_percent"
	} else {
		flagConstituentsSpaceAvailablePercentName = fmt.Sprintf("%v.constituents.space.available_percent", cmdPrefix)
	}

	var flagConstituentsSpaceAvailablePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceAvailablePercentName, flagConstituentsSpaceAvailablePercentDefault, flagConstituentsSpaceAvailablePercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceBlockStorageInactiveUserDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceBlockStorageInactiveUserDataDescription := `Filter by constituents.space.block_storage_inactive_user_data`

	var flagConstituentsSpaceBlockStorageInactiveUserDataName string
	if cmdPrefix == "" {
		flagConstituentsSpaceBlockStorageInactiveUserDataName = "constituents.space.block_storage_inactive_user_data"
	} else {
		flagConstituentsSpaceBlockStorageInactiveUserDataName = fmt.Sprintf("%v.constituents.space.block_storage_inactive_user_data", cmdPrefix)
	}

	var flagConstituentsSpaceBlockStorageInactiveUserDataDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceBlockStorageInactiveUserDataName, flagConstituentsSpaceBlockStorageInactiveUserDataDefault, flagConstituentsSpaceBlockStorageInactiveUserDataDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceCapacityTierFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceCapacityTierFootprintDescription := `Filter by constituents.space.capacity_tier_footprint`

	var flagConstituentsSpaceCapacityTierFootprintName string
	if cmdPrefix == "" {
		flagConstituentsSpaceCapacityTierFootprintName = "constituents.space.capacity_tier_footprint"
	} else {
		flagConstituentsSpaceCapacityTierFootprintName = fmt.Sprintf("%v.constituents.space.capacity_tier_footprint", cmdPrefix)
	}

	var flagConstituentsSpaceCapacityTierFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceCapacityTierFootprintName, flagConstituentsSpaceCapacityTierFootprintDefault, flagConstituentsSpaceCapacityTierFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceFootprintDescription := `Filter by constituents.space.footprint`

	var flagConstituentsSpaceFootprintName string
	if cmdPrefix == "" {
		flagConstituentsSpaceFootprintName = "constituents.space.footprint"
	} else {
		flagConstituentsSpaceFootprintName = fmt.Sprintf("%v.constituents.space.footprint", cmdPrefix)
	}

	var flagConstituentsSpaceFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceFootprintName, flagConstituentsSpaceFootprintDefault, flagConstituentsSpaceFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceLargeSizeEnabledParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceLargeSizeEnabledDescription := `Filter by constituents.space.large_size_enabled`

	var flagConstituentsSpaceLargeSizeEnabledName string
	if cmdPrefix == "" {
		flagConstituentsSpaceLargeSizeEnabledName = "constituents.space.large_size_enabled"
	} else {
		flagConstituentsSpaceLargeSizeEnabledName = fmt.Sprintf("%v.constituents.space.large_size_enabled", cmdPrefix)
	}

	var flagConstituentsSpaceLargeSizeEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagConstituentsSpaceLargeSizeEnabledName, flagConstituentsSpaceLargeSizeEnabledDefault, flagConstituentsSpaceLargeSizeEnabledDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceLocalTierFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceLocalTierFootprintDescription := `Filter by constituents.space.local_tier_footprint`

	var flagConstituentsSpaceLocalTierFootprintName string
	if cmdPrefix == "" {
		flagConstituentsSpaceLocalTierFootprintName = "constituents.space.local_tier_footprint"
	} else {
		flagConstituentsSpaceLocalTierFootprintName = fmt.Sprintf("%v.constituents.space.local_tier_footprint", cmdPrefix)
	}

	var flagConstituentsSpaceLocalTierFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceLocalTierFootprintName, flagConstituentsSpaceLocalTierFootprintDefault, flagConstituentsSpaceLocalTierFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceAvailableParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceLogicalSpaceAvailableDescription := `Filter by constituents.space.logical_space.available`

	var flagConstituentsSpaceLogicalSpaceAvailableName string
	if cmdPrefix == "" {
		flagConstituentsSpaceLogicalSpaceAvailableName = "constituents.space.logical_space.available"
	} else {
		flagConstituentsSpaceLogicalSpaceAvailableName = fmt.Sprintf("%v.constituents.space.logical_space.available", cmdPrefix)
	}

	var flagConstituentsSpaceLogicalSpaceAvailableDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceLogicalSpaceAvailableName, flagConstituentsSpaceLogicalSpaceAvailableDefault, flagConstituentsSpaceLogicalSpaceAvailableDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceEnforcementParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceLogicalSpaceEnforcementDescription := `Filter by constituents.space.logical_space.enforcement`

	var flagConstituentsSpaceLogicalSpaceEnforcementName string
	if cmdPrefix == "" {
		flagConstituentsSpaceLogicalSpaceEnforcementName = "constituents.space.logical_space.enforcement"
	} else {
		flagConstituentsSpaceLogicalSpaceEnforcementName = fmt.Sprintf("%v.constituents.space.logical_space.enforcement", cmdPrefix)
	}

	var flagConstituentsSpaceLogicalSpaceEnforcementDefault bool

	_ = cmd.PersistentFlags().Bool(flagConstituentsSpaceLogicalSpaceEnforcementName, flagConstituentsSpaceLogicalSpaceEnforcementDefault, flagConstituentsSpaceLogicalSpaceEnforcementDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceReportingParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceLogicalSpaceReportingDescription := `Filter by constituents.space.logical_space.reporting`

	var flagConstituentsSpaceLogicalSpaceReportingName string
	if cmdPrefix == "" {
		flagConstituentsSpaceLogicalSpaceReportingName = "constituents.space.logical_space.reporting"
	} else {
		flagConstituentsSpaceLogicalSpaceReportingName = fmt.Sprintf("%v.constituents.space.logical_space.reporting", cmdPrefix)
	}

	var flagConstituentsSpaceLogicalSpaceReportingDefault bool

	_ = cmd.PersistentFlags().Bool(flagConstituentsSpaceLogicalSpaceReportingName, flagConstituentsSpaceLogicalSpaceReportingDefault, flagConstituentsSpaceLogicalSpaceReportingDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceUsedByAfsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceLogicalSpaceUsedByAfsDescription := `Filter by constituents.space.logical_space.used_by_afs`

	var flagConstituentsSpaceLogicalSpaceUsedByAfsName string
	if cmdPrefix == "" {
		flagConstituentsSpaceLogicalSpaceUsedByAfsName = "constituents.space.logical_space.used_by_afs"
	} else {
		flagConstituentsSpaceLogicalSpaceUsedByAfsName = fmt.Sprintf("%v.constituents.space.logical_space.used_by_afs", cmdPrefix)
	}

	var flagConstituentsSpaceLogicalSpaceUsedByAfsDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceLogicalSpaceUsedByAfsName, flagConstituentsSpaceLogicalSpaceUsedByAfsDefault, flagConstituentsSpaceLogicalSpaceUsedByAfsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceMaxSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceMaxSizeDescription := `Filter by constituents.space.max_size`

	var flagConstituentsSpaceMaxSizeName string
	if cmdPrefix == "" {
		flagConstituentsSpaceMaxSizeName = "constituents.space.max_size"
	} else {
		flagConstituentsSpaceMaxSizeName = fmt.Sprintf("%v.constituents.space.max_size", cmdPrefix)
	}

	var flagConstituentsSpaceMaxSizeDefault string

	_ = cmd.PersistentFlags().String(flagConstituentsSpaceMaxSizeName, flagConstituentsSpaceMaxSizeDefault, flagConstituentsSpaceMaxSizeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceMetadataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceMetadataDescription := `Filter by constituents.space.metadata`

	var flagConstituentsSpaceMetadataName string
	if cmdPrefix == "" {
		flagConstituentsSpaceMetadataName = "constituents.space.metadata"
	} else {
		flagConstituentsSpaceMetadataName = fmt.Sprintf("%v.constituents.space.metadata", cmdPrefix)
	}

	var flagConstituentsSpaceMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceMetadataName, flagConstituentsSpaceMetadataDefault, flagConstituentsSpaceMetadataDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceOverProvisionedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceOverProvisionedDescription := `Filter by constituents.space.over_provisioned`

	var flagConstituentsSpaceOverProvisionedName string
	if cmdPrefix == "" {
		flagConstituentsSpaceOverProvisionedName = "constituents.space.over_provisioned"
	} else {
		flagConstituentsSpaceOverProvisionedName = fmt.Sprintf("%v.constituents.space.over_provisioned", cmdPrefix)
	}

	var flagConstituentsSpaceOverProvisionedDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceOverProvisionedName, flagConstituentsSpaceOverProvisionedDefault, flagConstituentsSpaceOverProvisionedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpacePerformanceTierFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpacePerformanceTierFootprintDescription := `Filter by constituents.space.performance_tier_footprint`

	var flagConstituentsSpacePerformanceTierFootprintName string
	if cmdPrefix == "" {
		flagConstituentsSpacePerformanceTierFootprintName = "constituents.space.performance_tier_footprint"
	} else {
		flagConstituentsSpacePerformanceTierFootprintName = fmt.Sprintf("%v.constituents.space.performance_tier_footprint", cmdPrefix)
	}

	var flagConstituentsSpacePerformanceTierFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpacePerformanceTierFootprintName, flagConstituentsSpacePerformanceTierFootprintDefault, flagConstituentsSpacePerformanceTierFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceSizeDescription := `Filter by constituents.space.size`

	var flagConstituentsSpaceSizeName string
	if cmdPrefix == "" {
		flagConstituentsSpaceSizeName = "constituents.space.size"
	} else {
		flagConstituentsSpaceSizeName = fmt.Sprintf("%v.constituents.space.size", cmdPrefix)
	}

	var flagConstituentsSpaceSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceSizeName, flagConstituentsSpaceSizeDefault, flagConstituentsSpaceSizeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceSnapshotReservePercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceSnapshotReservePercentDescription := `Filter by constituents.space.snapshot.reserve_percent`

	var flagConstituentsSpaceSnapshotReservePercentName string
	if cmdPrefix == "" {
		flagConstituentsSpaceSnapshotReservePercentName = "constituents.space.snapshot.reserve_percent"
	} else {
		flagConstituentsSpaceSnapshotReservePercentName = fmt.Sprintf("%v.constituents.space.snapshot.reserve_percent", cmdPrefix)
	}

	var flagConstituentsSpaceSnapshotReservePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceSnapshotReservePercentName, flagConstituentsSpaceSnapshotReservePercentDefault, flagConstituentsSpaceSnapshotReservePercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceSnapshotUsedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceSnapshotUsedDescription := `Filter by constituents.space.snapshot.used`

	var flagConstituentsSpaceSnapshotUsedName string
	if cmdPrefix == "" {
		flagConstituentsSpaceSnapshotUsedName = "constituents.space.snapshot.used"
	} else {
		flagConstituentsSpaceSnapshotUsedName = fmt.Sprintf("%v.constituents.space.snapshot.used", cmdPrefix)
	}

	var flagConstituentsSpaceSnapshotUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceSnapshotUsedName, flagConstituentsSpaceSnapshotUsedDefault, flagConstituentsSpaceSnapshotUsedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceTotalFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceTotalFootprintDescription := `Filter by constituents.space.total_footprint`

	var flagConstituentsSpaceTotalFootprintName string
	if cmdPrefix == "" {
		flagConstituentsSpaceTotalFootprintName = "constituents.space.total_footprint"
	} else {
		flagConstituentsSpaceTotalFootprintName = fmt.Sprintf("%v.constituents.space.total_footprint", cmdPrefix)
	}

	var flagConstituentsSpaceTotalFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceTotalFootprintName, flagConstituentsSpaceTotalFootprintDefault, flagConstituentsSpaceTotalFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceTotalMetadataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceTotalMetadataDescription := `Filter by constituents.space.total_metadata`

	var flagConstituentsSpaceTotalMetadataName string
	if cmdPrefix == "" {
		flagConstituentsSpaceTotalMetadataName = "constituents.space.total_metadata"
	} else {
		flagConstituentsSpaceTotalMetadataName = fmt.Sprintf("%v.constituents.space.total_metadata", cmdPrefix)
	}

	var flagConstituentsSpaceTotalMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceTotalMetadataName, flagConstituentsSpaceTotalMetadataDefault, flagConstituentsSpaceTotalMetadataDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceTotalMetadataFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceTotalMetadataFootprintDescription := `Filter by constituents.space.total_metadata_footprint`

	var flagConstituentsSpaceTotalMetadataFootprintName string
	if cmdPrefix == "" {
		flagConstituentsSpaceTotalMetadataFootprintName = "constituents.space.total_metadata_footprint"
	} else {
		flagConstituentsSpaceTotalMetadataFootprintName = fmt.Sprintf("%v.constituents.space.total_metadata_footprint", cmdPrefix)
	}

	var flagConstituentsSpaceTotalMetadataFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceTotalMetadataFootprintName, flagConstituentsSpaceTotalMetadataFootprintDefault, flagConstituentsSpaceTotalMetadataFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceUsedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceUsedDescription := `Filter by constituents.space.used`

	var flagConstituentsSpaceUsedName string
	if cmdPrefix == "" {
		flagConstituentsSpaceUsedName = "constituents.space.used"
	} else {
		flagConstituentsSpaceUsedName = fmt.Sprintf("%v.constituents.space.used", cmdPrefix)
	}

	var flagConstituentsSpaceUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceUsedName, flagConstituentsSpaceUsedDefault, flagConstituentsSpaceUsedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceUsedByAfsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceUsedByAfsDescription := `Filter by constituents.space.used_by_afs`

	var flagConstituentsSpaceUsedByAfsName string
	if cmdPrefix == "" {
		flagConstituentsSpaceUsedByAfsName = "constituents.space.used_by_afs"
	} else {
		flagConstituentsSpaceUsedByAfsName = fmt.Sprintf("%v.constituents.space.used_by_afs", cmdPrefix)
	}

	var flagConstituentsSpaceUsedByAfsDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceUsedByAfsName, flagConstituentsSpaceUsedByAfsDefault, flagConstituentsSpaceUsedByAfsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConstituentsSpaceUsedPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConstituentsSpaceUsedPercentDescription := `Filter by constituents.space.used_percent`

	var flagConstituentsSpaceUsedPercentName string
	if cmdPrefix == "" {
		flagConstituentsSpaceUsedPercentName = "constituents.space.used_percent"
	} else {
		flagConstituentsSpaceUsedPercentName = fmt.Sprintf("%v.constituents.space.used_percent", cmdPrefix)
	}

	var flagConstituentsSpaceUsedPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagConstituentsSpaceUsedPercentName, flagConstituentsSpaceUsedPercentDefault, flagConstituentsSpaceUsedPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetConvertUnicodeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagConvertUnicodeDescription := `Filter by convert_unicode`

	var flagConvertUnicodeName string
	if cmdPrefix == "" {
		flagConvertUnicodeName = "convert_unicode"
	} else {
		flagConvertUnicodeName = fmt.Sprintf("%v.convert_unicode", cmdPrefix)
	}

	var flagConvertUnicodeDefault bool

	_ = cmd.PersistentFlags().Bool(flagConvertUnicodeName, flagConvertUnicodeDefault, flagConvertUnicodeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetCreateTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCreateTimeDescription := `Filter by create_time`

	var flagCreateTimeName string
	if cmdPrefix == "" {
		flagCreateTimeName = "create_time"
	} else {
		flagCreateTimeName = fmt.Sprintf("%v.create_time", cmdPrefix)
	}

	var flagCreateTimeDefault string

	_ = cmd.PersistentFlags().String(flagCreateTimeName, flagCreateTimeDefault, flagCreateTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyApplicationIoSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyApplicationIoSizeDescription := `Filter by efficiency.application_io_size`

	var flagEfficiencyApplicationIoSizeName string
	if cmdPrefix == "" {
		flagEfficiencyApplicationIoSizeName = "efficiency.application_io_size"
	} else {
		flagEfficiencyApplicationIoSizeName = fmt.Sprintf("%v.efficiency.application_io_size", cmdPrefix)
	}

	var flagEfficiencyApplicationIoSizeDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyApplicationIoSizeName, flagEfficiencyApplicationIoSizeDefault, flagEfficiencyApplicationIoSizeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyAutoStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyAutoStateDescription := `Filter by efficiency.auto_state`

	var flagEfficiencyAutoStateName string
	if cmdPrefix == "" {
		flagEfficiencyAutoStateName = "efficiency.auto_state"
	} else {
		flagEfficiencyAutoStateName = fmt.Sprintf("%v.efficiency.auto_state", cmdPrefix)
	}

	var flagEfficiencyAutoStateDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyAutoStateName, flagEfficiencyAutoStateDefault, flagEfficiencyAutoStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyCompactionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyCompactionDescription := `Filter by efficiency.compaction`

	var flagEfficiencyCompactionName string
	if cmdPrefix == "" {
		flagEfficiencyCompactionName = "efficiency.compaction"
	} else {
		flagEfficiencyCompactionName = fmt.Sprintf("%v.efficiency.compaction", cmdPrefix)
	}

	var flagEfficiencyCompactionDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyCompactionName, flagEfficiencyCompactionDefault, flagEfficiencyCompactionDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyCompressionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyCompressionDescription := `Filter by efficiency.compression`

	var flagEfficiencyCompressionName string
	if cmdPrefix == "" {
		flagEfficiencyCompressionName = "efficiency.compression"
	} else {
		flagEfficiencyCompressionName = fmt.Sprintf("%v.efficiency.compression", cmdPrefix)
	}

	var flagEfficiencyCompressionDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyCompressionName, flagEfficiencyCompressionDefault, flagEfficiencyCompressionDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyCompressionTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyCompressionTypeDescription := `Filter by efficiency.compression_type`

	var flagEfficiencyCompressionTypeName string
	if cmdPrefix == "" {
		flagEfficiencyCompressionTypeName = "efficiency.compression_type"
	} else {
		flagEfficiencyCompressionTypeName = fmt.Sprintf("%v.efficiency.compression_type", cmdPrefix)
	}

	var flagEfficiencyCompressionTypeDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyCompressionTypeName, flagEfficiencyCompressionTypeDefault, flagEfficiencyCompressionTypeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyCrossVolumeDedupeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyCrossVolumeDedupeDescription := `Filter by efficiency.cross_volume_dedupe`

	var flagEfficiencyCrossVolumeDedupeName string
	if cmdPrefix == "" {
		flagEfficiencyCrossVolumeDedupeName = "efficiency.cross_volume_dedupe"
	} else {
		flagEfficiencyCrossVolumeDedupeName = fmt.Sprintf("%v.efficiency.cross_volume_dedupe", cmdPrefix)
	}

	var flagEfficiencyCrossVolumeDedupeDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyCrossVolumeDedupeName, flagEfficiencyCrossVolumeDedupeDefault, flagEfficiencyCrossVolumeDedupeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyDedupeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyDedupeDescription := `Filter by efficiency.dedupe`

	var flagEfficiencyDedupeName string
	if cmdPrefix == "" {
		flagEfficiencyDedupeName = "efficiency.dedupe"
	} else {
		flagEfficiencyDedupeName = fmt.Sprintf("%v.efficiency.dedupe", cmdPrefix)
	}

	var flagEfficiencyDedupeDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyDedupeName, flagEfficiencyDedupeDefault, flagEfficiencyDedupeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyHasSavingsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyHasSavingsDescription := `Filter by efficiency.has_savings`

	var flagEfficiencyHasSavingsName string
	if cmdPrefix == "" {
		flagEfficiencyHasSavingsName = "efficiency.has_savings"
	} else {
		flagEfficiencyHasSavingsName = fmt.Sprintf("%v.efficiency.has_savings", cmdPrefix)
	}

	var flagEfficiencyHasSavingsDefault bool

	_ = cmd.PersistentFlags().Bool(flagEfficiencyHasSavingsName, flagEfficiencyHasSavingsDefault, flagEfficiencyHasSavingsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyIdcsScannerEnabledParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyIdcsScannerEnabledDescription := `Filter by efficiency.idcs_scanner.enabled`

	var flagEfficiencyIdcsScannerEnabledName string
	if cmdPrefix == "" {
		flagEfficiencyIdcsScannerEnabledName = "efficiency.idcs_scanner.enabled"
	} else {
		flagEfficiencyIdcsScannerEnabledName = fmt.Sprintf("%v.efficiency.idcs_scanner.enabled", cmdPrefix)
	}

	var flagEfficiencyIdcsScannerEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagEfficiencyIdcsScannerEnabledName, flagEfficiencyIdcsScannerEnabledDefault, flagEfficiencyIdcsScannerEnabledDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyIdcsScannerModeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyIdcsScannerModeDescription := `Filter by efficiency.idcs_scanner.mode`

	var flagEfficiencyIdcsScannerModeName string
	if cmdPrefix == "" {
		flagEfficiencyIdcsScannerModeName = "efficiency.idcs_scanner.mode"
	} else {
		flagEfficiencyIdcsScannerModeName = fmt.Sprintf("%v.efficiency.idcs_scanner.mode", cmdPrefix)
	}

	var flagEfficiencyIdcsScannerModeDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyIdcsScannerModeName, flagEfficiencyIdcsScannerModeDefault, flagEfficiencyIdcsScannerModeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyIdcsScannerOperationStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyIdcsScannerOperationStateDescription := `Filter by efficiency.idcs_scanner.operation_state`

	var flagEfficiencyIdcsScannerOperationStateName string
	if cmdPrefix == "" {
		flagEfficiencyIdcsScannerOperationStateName = "efficiency.idcs_scanner.operation_state"
	} else {
		flagEfficiencyIdcsScannerOperationStateName = fmt.Sprintf("%v.efficiency.idcs_scanner.operation_state", cmdPrefix)
	}

	var flagEfficiencyIdcsScannerOperationStateDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyIdcsScannerOperationStateName, flagEfficiencyIdcsScannerOperationStateDefault, flagEfficiencyIdcsScannerOperationStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyIdcsScannerStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyIdcsScannerStatusDescription := `Filter by efficiency.idcs_scanner.status`

	var flagEfficiencyIdcsScannerStatusName string
	if cmdPrefix == "" {
		flagEfficiencyIdcsScannerStatusName = "efficiency.idcs_scanner.status"
	} else {
		flagEfficiencyIdcsScannerStatusName = fmt.Sprintf("%v.efficiency.idcs_scanner.status", cmdPrefix)
	}

	var flagEfficiencyIdcsScannerStatusDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyIdcsScannerStatusName, flagEfficiencyIdcsScannerStatusDefault, flagEfficiencyIdcsScannerStatusDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyIdcsScannerThresholdInactiveTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyIdcsScannerThresholdInactiveTimeDescription := `Filter by efficiency.idcs_scanner.threshold_inactive_time`

	var flagEfficiencyIdcsScannerThresholdInactiveTimeName string
	if cmdPrefix == "" {
		flagEfficiencyIdcsScannerThresholdInactiveTimeName = "efficiency.idcs_scanner.threshold_inactive_time"
	} else {
		flagEfficiencyIdcsScannerThresholdInactiveTimeName = fmt.Sprintf("%v.efficiency.idcs_scanner.threshold_inactive_time", cmdPrefix)
	}

	var flagEfficiencyIdcsScannerThresholdInactiveTimeDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyIdcsScannerThresholdInactiveTimeName, flagEfficiencyIdcsScannerThresholdInactiveTimeDefault, flagEfficiencyIdcsScannerThresholdInactiveTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyLastOpBeginParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyLastOpBeginDescription := `Filter by efficiency.last_op_begin`

	var flagEfficiencyLastOpBeginName string
	if cmdPrefix == "" {
		flagEfficiencyLastOpBeginName = "efficiency.last_op_begin"
	} else {
		flagEfficiencyLastOpBeginName = fmt.Sprintf("%v.efficiency.last_op_begin", cmdPrefix)
	}

	var flagEfficiencyLastOpBeginDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyLastOpBeginName, flagEfficiencyLastOpBeginDefault, flagEfficiencyLastOpBeginDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyLastOpEndParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyLastOpEndDescription := `Filter by efficiency.last_op_end`

	var flagEfficiencyLastOpEndName string
	if cmdPrefix == "" {
		flagEfficiencyLastOpEndName = "efficiency.last_op_end"
	} else {
		flagEfficiencyLastOpEndName = fmt.Sprintf("%v.efficiency.last_op_end", cmdPrefix)
	}

	var flagEfficiencyLastOpEndDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyLastOpEndName, flagEfficiencyLastOpEndDefault, flagEfficiencyLastOpEndDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyLastOpErrParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyLastOpErrDescription := `Filter by efficiency.last_op_err`

	var flagEfficiencyLastOpErrName string
	if cmdPrefix == "" {
		flagEfficiencyLastOpErrName = "efficiency.last_op_err"
	} else {
		flagEfficiencyLastOpErrName = fmt.Sprintf("%v.efficiency.last_op_err", cmdPrefix)
	}

	var flagEfficiencyLastOpErrDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyLastOpErrName, flagEfficiencyLastOpErrDefault, flagEfficiencyLastOpErrDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyLastOpSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyLastOpSizeDescription := `Filter by efficiency.last_op_size`

	var flagEfficiencyLastOpSizeName string
	if cmdPrefix == "" {
		flagEfficiencyLastOpSizeName = "efficiency.last_op_size"
	} else {
		flagEfficiencyLastOpSizeName = fmt.Sprintf("%v.efficiency.last_op_size", cmdPrefix)
	}

	var flagEfficiencyLastOpSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagEfficiencyLastOpSizeName, flagEfficiencyLastOpSizeDefault, flagEfficiencyLastOpSizeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyLastOpStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyLastOpStateDescription := `Filter by efficiency.last_op_state`

	var flagEfficiencyLastOpStateName string
	if cmdPrefix == "" {
		flagEfficiencyLastOpStateName = "efficiency.last_op_state"
	} else {
		flagEfficiencyLastOpStateName = fmt.Sprintf("%v.efficiency.last_op_state", cmdPrefix)
	}

	var flagEfficiencyLastOpStateDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyLastOpStateName, flagEfficiencyLastOpStateDefault, flagEfficiencyLastOpStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyLoggingEnabledParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyLoggingEnabledDescription := `Filter by efficiency.logging_enabled`

	var flagEfficiencyLoggingEnabledName string
	if cmdPrefix == "" {
		flagEfficiencyLoggingEnabledName = "efficiency.logging_enabled"
	} else {
		flagEfficiencyLoggingEnabledName = fmt.Sprintf("%v.efficiency.logging_enabled", cmdPrefix)
	}

	var flagEfficiencyLoggingEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagEfficiencyLoggingEnabledName, flagEfficiencyLoggingEnabledDefault, flagEfficiencyLoggingEnabledDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyOpStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyOpStateDescription := `Filter by efficiency.op_state`

	var flagEfficiencyOpStateName string
	if cmdPrefix == "" {
		flagEfficiencyOpStateName = "efficiency.op_state"
	} else {
		flagEfficiencyOpStateName = fmt.Sprintf("%v.efficiency.op_state", cmdPrefix)
	}

	var flagEfficiencyOpStateDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyOpStateName, flagEfficiencyOpStateDefault, flagEfficiencyOpStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyPolicyNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyPolicyNameDescription := `Filter by efficiency.policy.name`

	var flagEfficiencyPolicyNameName string
	if cmdPrefix == "" {
		flagEfficiencyPolicyNameName = "efficiency.policy.name"
	} else {
		flagEfficiencyPolicyNameName = fmt.Sprintf("%v.efficiency.policy.name", cmdPrefix)
	}

	var flagEfficiencyPolicyNameDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyPolicyNameName, flagEfficiencyPolicyNameDefault, flagEfficiencyPolicyNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyProgressParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyProgressDescription := `Filter by efficiency.progress`

	var flagEfficiencyProgressName string
	if cmdPrefix == "" {
		flagEfficiencyProgressName = "efficiency.progress"
	} else {
		flagEfficiencyProgressName = fmt.Sprintf("%v.efficiency.progress", cmdPrefix)
	}

	var flagEfficiencyProgressDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyProgressName, flagEfficiencyProgressDefault, flagEfficiencyProgressDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyScannerCompressionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyScannerCompressionDescription := `Filter by efficiency.scanner.compression`

	var flagEfficiencyScannerCompressionName string
	if cmdPrefix == "" {
		flagEfficiencyScannerCompressionName = "efficiency.scanner.compression"
	} else {
		flagEfficiencyScannerCompressionName = fmt.Sprintf("%v.efficiency.scanner.compression", cmdPrefix)
	}

	var flagEfficiencyScannerCompressionDefault bool

	_ = cmd.PersistentFlags().Bool(flagEfficiencyScannerCompressionName, flagEfficiencyScannerCompressionDefault, flagEfficiencyScannerCompressionDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyScannerDedupeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyScannerDedupeDescription := `Filter by efficiency.scanner.dedupe`

	var flagEfficiencyScannerDedupeName string
	if cmdPrefix == "" {
		flagEfficiencyScannerDedupeName = "efficiency.scanner.dedupe"
	} else {
		flagEfficiencyScannerDedupeName = fmt.Sprintf("%v.efficiency.scanner.dedupe", cmdPrefix)
	}

	var flagEfficiencyScannerDedupeDefault bool

	_ = cmd.PersistentFlags().Bool(flagEfficiencyScannerDedupeName, flagEfficiencyScannerDedupeDefault, flagEfficiencyScannerDedupeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyScannerScanOldDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyScannerScanOldDataDescription := `Filter by efficiency.scanner.scan_old_data`

	var flagEfficiencyScannerScanOldDataName string
	if cmdPrefix == "" {
		flagEfficiencyScannerScanOldDataName = "efficiency.scanner.scan_old_data"
	} else {
		flagEfficiencyScannerScanOldDataName = fmt.Sprintf("%v.efficiency.scanner.scan_old_data", cmdPrefix)
	}

	var flagEfficiencyScannerScanOldDataDefault bool

	_ = cmd.PersistentFlags().Bool(flagEfficiencyScannerScanOldDataName, flagEfficiencyScannerScanOldDataDefault, flagEfficiencyScannerScanOldDataDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyScannerStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyScannerStateDescription := `Filter by efficiency.scanner.state`

	var flagEfficiencyScannerStateName string
	if cmdPrefix == "" {
		flagEfficiencyScannerStateName = "efficiency.scanner.state"
	} else {
		flagEfficiencyScannerStateName = fmt.Sprintf("%v.efficiency.scanner.state", cmdPrefix)
	}

	var flagEfficiencyScannerStateDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyScannerStateName, flagEfficiencyScannerStateDefault, flagEfficiencyScannerStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyScheduleParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyScheduleDescription := `Filter by efficiency.schedule`

	var flagEfficiencyScheduleName string
	if cmdPrefix == "" {
		flagEfficiencyScheduleName = "efficiency.schedule"
	} else {
		flagEfficiencyScheduleName = fmt.Sprintf("%v.efficiency.schedule", cmdPrefix)
	}

	var flagEfficiencyScheduleDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyScheduleName, flagEfficiencyScheduleDefault, flagEfficiencyScheduleDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsCompressionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencySpaceSavingsCompressionDescription := `Filter by efficiency.space_savings.compression`

	var flagEfficiencySpaceSavingsCompressionName string
	if cmdPrefix == "" {
		flagEfficiencySpaceSavingsCompressionName = "efficiency.space_savings.compression"
	} else {
		flagEfficiencySpaceSavingsCompressionName = fmt.Sprintf("%v.efficiency.space_savings.compression", cmdPrefix)
	}

	var flagEfficiencySpaceSavingsCompressionDefault int64

	_ = cmd.PersistentFlags().Int64(flagEfficiencySpaceSavingsCompressionName, flagEfficiencySpaceSavingsCompressionDefault, flagEfficiencySpaceSavingsCompressionDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsCompressionPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencySpaceSavingsCompressionPercentDescription := `Filter by efficiency.space_savings.compression_percent`

	var flagEfficiencySpaceSavingsCompressionPercentName string
	if cmdPrefix == "" {
		flagEfficiencySpaceSavingsCompressionPercentName = "efficiency.space_savings.compression_percent"
	} else {
		flagEfficiencySpaceSavingsCompressionPercentName = fmt.Sprintf("%v.efficiency.space_savings.compression_percent", cmdPrefix)
	}

	var flagEfficiencySpaceSavingsCompressionPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagEfficiencySpaceSavingsCompressionPercentName, flagEfficiencySpaceSavingsCompressionPercentDefault, flagEfficiencySpaceSavingsCompressionPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsDedupeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencySpaceSavingsDedupeDescription := `Filter by efficiency.space_savings.dedupe`

	var flagEfficiencySpaceSavingsDedupeName string
	if cmdPrefix == "" {
		flagEfficiencySpaceSavingsDedupeName = "efficiency.space_savings.dedupe"
	} else {
		flagEfficiencySpaceSavingsDedupeName = fmt.Sprintf("%v.efficiency.space_savings.dedupe", cmdPrefix)
	}

	var flagEfficiencySpaceSavingsDedupeDefault int64

	_ = cmd.PersistentFlags().Int64(flagEfficiencySpaceSavingsDedupeName, flagEfficiencySpaceSavingsDedupeDefault, flagEfficiencySpaceSavingsDedupeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsDedupePercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencySpaceSavingsDedupePercentDescription := `Filter by efficiency.space_savings.dedupe_percent`

	var flagEfficiencySpaceSavingsDedupePercentName string
	if cmdPrefix == "" {
		flagEfficiencySpaceSavingsDedupePercentName = "efficiency.space_savings.dedupe_percent"
	} else {
		flagEfficiencySpaceSavingsDedupePercentName = fmt.Sprintf("%v.efficiency.space_savings.dedupe_percent", cmdPrefix)
	}

	var flagEfficiencySpaceSavingsDedupePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagEfficiencySpaceSavingsDedupePercentName, flagEfficiencySpaceSavingsDedupePercentDefault, flagEfficiencySpaceSavingsDedupePercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsDedupeSharingParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencySpaceSavingsDedupeSharingDescription := `Filter by efficiency.space_savings.dedupe_sharing`

	var flagEfficiencySpaceSavingsDedupeSharingName string
	if cmdPrefix == "" {
		flagEfficiencySpaceSavingsDedupeSharingName = "efficiency.space_savings.dedupe_sharing"
	} else {
		flagEfficiencySpaceSavingsDedupeSharingName = fmt.Sprintf("%v.efficiency.space_savings.dedupe_sharing", cmdPrefix)
	}

	var flagEfficiencySpaceSavingsDedupeSharingDefault int64

	_ = cmd.PersistentFlags().Int64(flagEfficiencySpaceSavingsDedupeSharingName, flagEfficiencySpaceSavingsDedupeSharingDefault, flagEfficiencySpaceSavingsDedupeSharingDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencySpaceSavingsTotalDescription := `Filter by efficiency.space_savings.total`

	var flagEfficiencySpaceSavingsTotalName string
	if cmdPrefix == "" {
		flagEfficiencySpaceSavingsTotalName = "efficiency.space_savings.total"
	} else {
		flagEfficiencySpaceSavingsTotalName = fmt.Sprintf("%v.efficiency.space_savings.total", cmdPrefix)
	}

	var flagEfficiencySpaceSavingsTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagEfficiencySpaceSavingsTotalName, flagEfficiencySpaceSavingsTotalDefault, flagEfficiencySpaceSavingsTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencySpaceSavingsTotalPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencySpaceSavingsTotalPercentDescription := `Filter by efficiency.space_savings.total_percent`

	var flagEfficiencySpaceSavingsTotalPercentName string
	if cmdPrefix == "" {
		flagEfficiencySpaceSavingsTotalPercentName = "efficiency.space_savings.total_percent"
	} else {
		flagEfficiencySpaceSavingsTotalPercentName = fmt.Sprintf("%v.efficiency.space_savings.total_percent", cmdPrefix)
	}

	var flagEfficiencySpaceSavingsTotalPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagEfficiencySpaceSavingsTotalPercentName, flagEfficiencySpaceSavingsTotalPercentDefault, flagEfficiencySpaceSavingsTotalPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyStateDescription := `Filter by efficiency.state`

	var flagEfficiencyStateName string
	if cmdPrefix == "" {
		flagEfficiencyStateName = "efficiency.state"
	} else {
		flagEfficiencyStateName = fmt.Sprintf("%v.efficiency.state", cmdPrefix)
	}

	var flagEfficiencyStateDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyStateName, flagEfficiencyStateDefault, flagEfficiencyStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyStorageEfficiencyModeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyStorageEfficiencyModeDescription := `Filter by efficiency.storage_efficiency_mode`

	var flagEfficiencyStorageEfficiencyModeName string
	if cmdPrefix == "" {
		flagEfficiencyStorageEfficiencyModeName = "efficiency.storage_efficiency_mode"
	} else {
		flagEfficiencyStorageEfficiencyModeName = fmt.Sprintf("%v.efficiency.storage_efficiency_mode", cmdPrefix)
	}

	var flagEfficiencyStorageEfficiencyModeDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyStorageEfficiencyModeName, flagEfficiencyStorageEfficiencyModeDefault, flagEfficiencyStorageEfficiencyModeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyTypeDescription := `Filter by efficiency.type`

	var flagEfficiencyTypeName string
	if cmdPrefix == "" {
		flagEfficiencyTypeName = "efficiency.type"
	} else {
		flagEfficiencyTypeName = fmt.Sprintf("%v.efficiency.type", cmdPrefix)
	}

	var flagEfficiencyTypeDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyTypeName, flagEfficiencyTypeDefault, flagEfficiencyTypeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEfficiencyVolumePathParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEfficiencyVolumePathDescription := `Filter by efficiency.volume_path`

	var flagEfficiencyVolumePathName string
	if cmdPrefix == "" {
		flagEfficiencyVolumePathName = "efficiency.volume_path"
	} else {
		flagEfficiencyVolumePathName = fmt.Sprintf("%v.efficiency.volume_path", cmdPrefix)
	}

	var flagEfficiencyVolumePathDefault string

	_ = cmd.PersistentFlags().String(flagEfficiencyVolumePathName, flagEfficiencyVolumePathDefault, flagEfficiencyVolumePathDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEncryptionActionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEncryptionActionDescription := `Filter by encryption.action`

	var flagEncryptionActionName string
	if cmdPrefix == "" {
		flagEncryptionActionName = "encryption.action"
	} else {
		flagEncryptionActionName = fmt.Sprintf("%v.encryption.action", cmdPrefix)
	}

	var flagEncryptionActionDefault string

	_ = cmd.PersistentFlags().String(flagEncryptionActionName, flagEncryptionActionDefault, flagEncryptionActionDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEncryptionEnabledParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEncryptionEnabledDescription := `Filter by encryption.enabled`

	var flagEncryptionEnabledName string
	if cmdPrefix == "" {
		flagEncryptionEnabledName = "encryption.enabled"
	} else {
		flagEncryptionEnabledName = fmt.Sprintf("%v.encryption.enabled", cmdPrefix)
	}

	var flagEncryptionEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagEncryptionEnabledName, flagEncryptionEnabledDefault, flagEncryptionEnabledDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEncryptionKeyCreateTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEncryptionKeyCreateTimeDescription := `Filter by encryption.key_create_time`

	var flagEncryptionKeyCreateTimeName string
	if cmdPrefix == "" {
		flagEncryptionKeyCreateTimeName = "encryption.key_create_time"
	} else {
		flagEncryptionKeyCreateTimeName = fmt.Sprintf("%v.encryption.key_create_time", cmdPrefix)
	}

	var flagEncryptionKeyCreateTimeDefault string

	_ = cmd.PersistentFlags().String(flagEncryptionKeyCreateTimeName, flagEncryptionKeyCreateTimeDefault, flagEncryptionKeyCreateTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEncryptionKeyIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEncryptionKeyIDDescription := `Filter by encryption.key_id`

	var flagEncryptionKeyIDName string
	if cmdPrefix == "" {
		flagEncryptionKeyIDName = "encryption.key_id"
	} else {
		flagEncryptionKeyIDName = fmt.Sprintf("%v.encryption.key_id", cmdPrefix)
	}

	var flagEncryptionKeyIDDefault string

	_ = cmd.PersistentFlags().String(flagEncryptionKeyIDName, flagEncryptionKeyIDDefault, flagEncryptionKeyIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEncryptionRekeyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEncryptionRekeyDescription := `Filter by encryption.rekey`

	var flagEncryptionRekeyName string
	if cmdPrefix == "" {
		flagEncryptionRekeyName = "encryption.rekey"
	} else {
		flagEncryptionRekeyName = fmt.Sprintf("%v.encryption.rekey", cmdPrefix)
	}

	var flagEncryptionRekeyDefault bool

	_ = cmd.PersistentFlags().Bool(flagEncryptionRekeyName, flagEncryptionRekeyDefault, flagEncryptionRekeyDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEncryptionStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEncryptionStateDescription := `Filter by encryption.state`

	var flagEncryptionStateName string
	if cmdPrefix == "" {
		flagEncryptionStateName = "encryption.state"
	} else {
		flagEncryptionStateName = fmt.Sprintf("%v.encryption.state", cmdPrefix)
	}

	var flagEncryptionStateDefault string

	_ = cmd.PersistentFlags().String(flagEncryptionStateName, flagEncryptionStateDefault, flagEncryptionStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEncryptionStatusCodeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEncryptionStatusCodeDescription := `Filter by encryption.status.code`

	var flagEncryptionStatusCodeName string
	if cmdPrefix == "" {
		flagEncryptionStatusCodeName = "encryption.status.code"
	} else {
		flagEncryptionStatusCodeName = fmt.Sprintf("%v.encryption.status.code", cmdPrefix)
	}

	var flagEncryptionStatusCodeDefault string

	_ = cmd.PersistentFlags().String(flagEncryptionStatusCodeName, flagEncryptionStatusCodeDefault, flagEncryptionStatusCodeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEncryptionStatusMessageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEncryptionStatusMessageDescription := `Filter by encryption.status.message`

	var flagEncryptionStatusMessageName string
	if cmdPrefix == "" {
		flagEncryptionStatusMessageName = "encryption.status.message"
	} else {
		flagEncryptionStatusMessageName = fmt.Sprintf("%v.encryption.status.message", cmdPrefix)
	}

	var flagEncryptionStatusMessageDefault string

	_ = cmd.PersistentFlags().String(flagEncryptionStatusMessageName, flagEncryptionStatusMessageDefault, flagEncryptionStatusMessageDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetEncryptionTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagEncryptionTypeDescription := `Filter by encryption.type`

	var flagEncryptionTypeName string
	if cmdPrefix == "" {
		flagEncryptionTypeName = "encryption.type"
	} else {
		flagEncryptionTypeName = fmt.Sprintf("%v.encryption.type", cmdPrefix)
	}

	var flagEncryptionTypeDefault string

	_ = cmd.PersistentFlags().String(flagEncryptionTypeName, flagEncryptionTypeDefault, flagEncryptionTypeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetErrorStateHasBadBlocksParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagErrorStateHasBadBlocksDescription := `Filter by error_state.has_bad_blocks`

	var flagErrorStateHasBadBlocksName string
	if cmdPrefix == "" {
		flagErrorStateHasBadBlocksName = "error_state.has_bad_blocks"
	} else {
		flagErrorStateHasBadBlocksName = fmt.Sprintf("%v.error_state.has_bad_blocks", cmdPrefix)
	}

	var flagErrorStateHasBadBlocksDefault bool

	_ = cmd.PersistentFlags().Bool(flagErrorStateHasBadBlocksName, flagErrorStateHasBadBlocksDefault, flagErrorStateHasBadBlocksDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetErrorStateIsInconsistentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagErrorStateIsInconsistentDescription := `Filter by error_state.is_inconsistent`

	var flagErrorStateIsInconsistentName string
	if cmdPrefix == "" {
		flagErrorStateIsInconsistentName = "error_state.is_inconsistent"
	} else {
		flagErrorStateIsInconsistentName = fmt.Sprintf("%v.error_state.is_inconsistent", cmdPrefix)
	}

	var flagErrorStateIsInconsistentDefault bool

	_ = cmd.PersistentFlags().Bool(flagErrorStateIsInconsistentName, flagErrorStateIsInconsistentDefault, flagErrorStateIsInconsistentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetFieldsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagFieldsDescription := `Specify the fields to return.`

	var flagFieldsName string
	if cmdPrefix == "" {
		flagFieldsName = "fields"
	} else {
		flagFieldsName = fmt.Sprintf("%v.fields", cmdPrefix)
	}

	var flagFieldsDefault []string

	_ = cmd.PersistentFlags().StringSlice(flagFieldsName, flagFieldsDefault, flagFieldsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetFilesMaximumParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagFilesMaximumDescription := `Filter by files.maximum`

	var flagFilesMaximumName string
	if cmdPrefix == "" {
		flagFilesMaximumName = "files.maximum"
	} else {
		flagFilesMaximumName = fmt.Sprintf("%v.files.maximum", cmdPrefix)
	}

	var flagFilesMaximumDefault int64

	_ = cmd.PersistentFlags().Int64(flagFilesMaximumName, flagFilesMaximumDefault, flagFilesMaximumDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetFilesUsedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagFilesUsedDescription := `Filter by files.used`

	var flagFilesUsedName string
	if cmdPrefix == "" {
		flagFilesUsedName = "files.used"
	} else {
		flagFilesUsedName = fmt.Sprintf("%v.files.used", cmdPrefix)
	}

	var flagFilesUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagFilesUsedName, flagFilesUsedDefault, flagFilesUsedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetFlashPoolCacheEligibilityParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagFlashPoolCacheEligibilityDescription := `Filter by flash_pool.cache_eligibility`

	var flagFlashPoolCacheEligibilityName string
	if cmdPrefix == "" {
		flagFlashPoolCacheEligibilityName = "flash_pool.cache_eligibility"
	} else {
		flagFlashPoolCacheEligibilityName = fmt.Sprintf("%v.flash_pool.cache_eligibility", cmdPrefix)
	}

	var flagFlashPoolCacheEligibilityDefault string

	_ = cmd.PersistentFlags().String(flagFlashPoolCacheEligibilityName, flagFlashPoolCacheEligibilityDefault, flagFlashPoolCacheEligibilityDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetFlashPoolCacheRetentionPriorityParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagFlashPoolCacheRetentionPriorityDescription := `Filter by flash_pool.cache_retention_priority`

	var flagFlashPoolCacheRetentionPriorityName string
	if cmdPrefix == "" {
		flagFlashPoolCacheRetentionPriorityName = "flash_pool.cache_retention_priority"
	} else {
		flagFlashPoolCacheRetentionPriorityName = fmt.Sprintf("%v.flash_pool.cache_retention_priority", cmdPrefix)
	}

	var flagFlashPoolCacheRetentionPriorityDefault string

	_ = cmd.PersistentFlags().String(flagFlashPoolCacheRetentionPriorityName, flagFlashPoolCacheRetentionPriorityDefault, flagFlashPoolCacheRetentionPriorityDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetFlashPoolCachingPolicyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagFlashPoolCachingPolicyDescription := `Filter by flash_pool.caching_policy`

	var flagFlashPoolCachingPolicyName string
	if cmdPrefix == "" {
		flagFlashPoolCachingPolicyName = "flash_pool.caching_policy"
	} else {
		flagFlashPoolCachingPolicyName = fmt.Sprintf("%v.flash_pool.caching_policy", cmdPrefix)
	}

	var flagFlashPoolCachingPolicyDefault string

	_ = cmd.PersistentFlags().String(flagFlashPoolCachingPolicyName, flagFlashPoolCachingPolicyDefault, flagFlashPoolCachingPolicyDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetFlexcacheEndpointTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagFlexcacheEndpointTypeDescription := `Filter by flexcache_endpoint_type`

	var flagFlexcacheEndpointTypeName string
	if cmdPrefix == "" {
		flagFlexcacheEndpointTypeName = "flexcache_endpoint_type"
	} else {
		flagFlexcacheEndpointTypeName = fmt.Sprintf("%v.flexcache_endpoint_type", cmdPrefix)
	}

	var flagFlexcacheEndpointTypeDefault string

	_ = cmd.PersistentFlags().String(flagFlexcacheEndpointTypeName, flagFlexcacheEndpointTypeDefault, flagFlexcacheEndpointTypeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetFlexgroupNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagFlexgroupNameDescription := `Filter by flexgroup.name`

	var flagFlexgroupNameName string
	if cmdPrefix == "" {
		flagFlexgroupNameName = "flexgroup.name"
	} else {
		flagFlexgroupNameName = fmt.Sprintf("%v.flexgroup.name", cmdPrefix)
	}

	var flagFlexgroupNameDefault string

	_ = cmd.PersistentFlags().String(flagFlexgroupNameName, flagFlexgroupNameDefault, flagFlexgroupNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetFlexgroupUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagFlexgroupUUIDDescription := `Filter by flexgroup.uuid`

	var flagFlexgroupUUIDName string
	if cmdPrefix == "" {
		flagFlexgroupUUIDName = "flexgroup.uuid"
	} else {
		flagFlexgroupUUIDName = fmt.Sprintf("%v.flexgroup.uuid", cmdPrefix)
	}

	var flagFlexgroupUUIDDefault string

	_ = cmd.PersistentFlags().String(flagFlexgroupUUIDName, flagFlexgroupUUIDDefault, flagFlexgroupUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetGranularDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagGranularDataDescription := `Filter by granular_data`

	var flagGranularDataName string
	if cmdPrefix == "" {
		flagGranularDataName = "granular_data"
	} else {
		flagGranularDataName = fmt.Sprintf("%v.granular_data", cmdPrefix)
	}

	var flagGranularDataDefault bool

	_ = cmd.PersistentFlags().Bool(flagGranularDataName, flagGranularDataDefault, flagGranularDataDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetGranularDataModeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagGranularDataModeDescription := `Filter by granular_data_mode`

	var flagGranularDataModeName string
	if cmdPrefix == "" {
		flagGranularDataModeName = "granular_data_mode"
	} else {
		flagGranularDataModeName = fmt.Sprintf("%v.granular_data_mode", cmdPrefix)
	}

	var flagGranularDataModeDefault string

	_ = cmd.PersistentFlags().String(flagGranularDataModeName, flagGranularDataModeDefault, flagGranularDataModeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetGuaranteeHonoredParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagGuaranteeHonoredDescription := `Filter by guarantee.honored`

	var flagGuaranteeHonoredName string
	if cmdPrefix == "" {
		flagGuaranteeHonoredName = "guarantee.honored"
	} else {
		flagGuaranteeHonoredName = fmt.Sprintf("%v.guarantee.honored", cmdPrefix)
	}

	var flagGuaranteeHonoredDefault bool

	_ = cmd.PersistentFlags().Bool(flagGuaranteeHonoredName, flagGuaranteeHonoredDefault, flagGuaranteeHonoredDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetGuaranteeTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagGuaranteeTypeDescription := `Filter by guarantee.type`

	var flagGuaranteeTypeName string
	if cmdPrefix == "" {
		flagGuaranteeTypeName = "guarantee.type"
	} else {
		flagGuaranteeTypeName = fmt.Sprintf("%v.guarantee.type", cmdPrefix)
	}

	var flagGuaranteeTypeDefault string

	_ = cmd.PersistentFlags().String(flagGuaranteeTypeName, flagGuaranteeTypeDefault, flagGuaranteeTypeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetIsConstituentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagIsConstituentDescription := `When set to false, only FlexVol and FlexGroup volumes are returned.  When set to true, only FlexGroup constituent volumes are returned. Default for GET calls is false.`

	var flagIsConstituentName string
	if cmdPrefix == "" {
		flagIsConstituentName = "is_constituent"
	} else {
		flagIsConstituentName = fmt.Sprintf("%v.is_constituent", cmdPrefix)
	}

	var flagIsConstituentDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsConstituentName, flagIsConstituentDefault, flagIsConstituentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetIsObjectStoreParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagIsObjectStoreDescription := `Filter by is_object_store`

	var flagIsObjectStoreName string
	if cmdPrefix == "" {
		flagIsObjectStoreName = "is_object_store"
	} else {
		flagIsObjectStoreName = fmt.Sprintf("%v.is_object_store", cmdPrefix)
	}

	var flagIsObjectStoreDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsObjectStoreName, flagIsObjectStoreDefault, flagIsObjectStoreDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetIsSvmRootParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagIsSvmRootDescription := `Filter by is_svm_root`

	var flagIsSvmRootName string
	if cmdPrefix == "" {
		flagIsSvmRootName = "is_svm_root"
	} else {
		flagIsSvmRootName = fmt.Sprintf("%v.is_svm_root", cmdPrefix)
	}

	var flagIsSvmRootDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsSvmRootName, flagIsSvmRootDefault, flagIsSvmRootDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetLanguageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagLanguageDescription := `Filter by language`

	var flagLanguageName string
	if cmdPrefix == "" {
		flagLanguageName = "language"
	} else {
		flagLanguageName = fmt.Sprintf("%v.language", cmdPrefix)
	}

	var flagLanguageDefault string

	_ = cmd.PersistentFlags().String(flagLanguageName, flagLanguageDefault, flagLanguageDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMaxDirSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMaxDirSizeDescription := `Filter by max_dir_size`

	var flagMaxDirSizeName string
	if cmdPrefix == "" {
		flagMaxDirSizeName = "max_dir_size"
	} else {
		flagMaxDirSizeName = fmt.Sprintf("%v.max_dir_size", cmdPrefix)
	}

	var flagMaxDirSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagMaxDirSizeName, flagMaxDirSizeDefault, flagMaxDirSizeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMaxRecordsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMaxRecordsDescription := `Limit the number of records returned.`

	var flagMaxRecordsName string
	if cmdPrefix == "" {
		flagMaxRecordsName = "max_records"
	} else {
		flagMaxRecordsName = fmt.Sprintf("%v.max_records", cmdPrefix)
	}

	var flagMaxRecordsDefault int64

	_ = cmd.PersistentFlags().Int64(flagMaxRecordsName, flagMaxRecordsDefault, flagMaxRecordsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricCloudDurationParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricCloudDurationDescription := `Filter by metric.cloud.duration`

	var flagMetricCloudDurationName string
	if cmdPrefix == "" {
		flagMetricCloudDurationName = "metric.cloud.duration"
	} else {
		flagMetricCloudDurationName = fmt.Sprintf("%v.metric.cloud.duration", cmdPrefix)
	}

	var flagMetricCloudDurationDefault string

	_ = cmd.PersistentFlags().String(flagMetricCloudDurationName, flagMetricCloudDurationDefault, flagMetricCloudDurationDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricCloudIopsOtherParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricCloudIopsOtherDescription := `Filter by metric.cloud.iops.other`

	var flagMetricCloudIopsOtherName string
	if cmdPrefix == "" {
		flagMetricCloudIopsOtherName = "metric.cloud.iops.other"
	} else {
		flagMetricCloudIopsOtherName = fmt.Sprintf("%v.metric.cloud.iops.other", cmdPrefix)
	}

	var flagMetricCloudIopsOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricCloudIopsOtherName, flagMetricCloudIopsOtherDefault, flagMetricCloudIopsOtherDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricCloudIopsReadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricCloudIopsReadDescription := `Filter by metric.cloud.iops.read`

	var flagMetricCloudIopsReadName string
	if cmdPrefix == "" {
		flagMetricCloudIopsReadName = "metric.cloud.iops.read"
	} else {
		flagMetricCloudIopsReadName = fmt.Sprintf("%v.metric.cloud.iops.read", cmdPrefix)
	}

	var flagMetricCloudIopsReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricCloudIopsReadName, flagMetricCloudIopsReadDefault, flagMetricCloudIopsReadDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricCloudIopsTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricCloudIopsTotalDescription := `Filter by metric.cloud.iops.total`

	var flagMetricCloudIopsTotalName string
	if cmdPrefix == "" {
		flagMetricCloudIopsTotalName = "metric.cloud.iops.total"
	} else {
		flagMetricCloudIopsTotalName = fmt.Sprintf("%v.metric.cloud.iops.total", cmdPrefix)
	}

	var flagMetricCloudIopsTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricCloudIopsTotalName, flagMetricCloudIopsTotalDefault, flagMetricCloudIopsTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricCloudIopsWriteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricCloudIopsWriteDescription := `Filter by metric.cloud.iops.write`

	var flagMetricCloudIopsWriteName string
	if cmdPrefix == "" {
		flagMetricCloudIopsWriteName = "metric.cloud.iops.write"
	} else {
		flagMetricCloudIopsWriteName = fmt.Sprintf("%v.metric.cloud.iops.write", cmdPrefix)
	}

	var flagMetricCloudIopsWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricCloudIopsWriteName, flagMetricCloudIopsWriteDefault, flagMetricCloudIopsWriteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricCloudLatencyOtherParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricCloudLatencyOtherDescription := `Filter by metric.cloud.latency.other`

	var flagMetricCloudLatencyOtherName string
	if cmdPrefix == "" {
		flagMetricCloudLatencyOtherName = "metric.cloud.latency.other"
	} else {
		flagMetricCloudLatencyOtherName = fmt.Sprintf("%v.metric.cloud.latency.other", cmdPrefix)
	}

	var flagMetricCloudLatencyOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricCloudLatencyOtherName, flagMetricCloudLatencyOtherDefault, flagMetricCloudLatencyOtherDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricCloudLatencyReadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricCloudLatencyReadDescription := `Filter by metric.cloud.latency.read`

	var flagMetricCloudLatencyReadName string
	if cmdPrefix == "" {
		flagMetricCloudLatencyReadName = "metric.cloud.latency.read"
	} else {
		flagMetricCloudLatencyReadName = fmt.Sprintf("%v.metric.cloud.latency.read", cmdPrefix)
	}

	var flagMetricCloudLatencyReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricCloudLatencyReadName, flagMetricCloudLatencyReadDefault, flagMetricCloudLatencyReadDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricCloudLatencyTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricCloudLatencyTotalDescription := `Filter by metric.cloud.latency.total`

	var flagMetricCloudLatencyTotalName string
	if cmdPrefix == "" {
		flagMetricCloudLatencyTotalName = "metric.cloud.latency.total"
	} else {
		flagMetricCloudLatencyTotalName = fmt.Sprintf("%v.metric.cloud.latency.total", cmdPrefix)
	}

	var flagMetricCloudLatencyTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricCloudLatencyTotalName, flagMetricCloudLatencyTotalDefault, flagMetricCloudLatencyTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricCloudLatencyWriteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricCloudLatencyWriteDescription := `Filter by metric.cloud.latency.write`

	var flagMetricCloudLatencyWriteName string
	if cmdPrefix == "" {
		flagMetricCloudLatencyWriteName = "metric.cloud.latency.write"
	} else {
		flagMetricCloudLatencyWriteName = fmt.Sprintf("%v.metric.cloud.latency.write", cmdPrefix)
	}

	var flagMetricCloudLatencyWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricCloudLatencyWriteName, flagMetricCloudLatencyWriteDefault, flagMetricCloudLatencyWriteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricCloudStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricCloudStatusDescription := `Filter by metric.cloud.status`

	var flagMetricCloudStatusName string
	if cmdPrefix == "" {
		flagMetricCloudStatusName = "metric.cloud.status"
	} else {
		flagMetricCloudStatusName = fmt.Sprintf("%v.metric.cloud.status", cmdPrefix)
	}

	var flagMetricCloudStatusDefault string

	_ = cmd.PersistentFlags().String(flagMetricCloudStatusName, flagMetricCloudStatusDefault, flagMetricCloudStatusDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricCloudTimestampParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricCloudTimestampDescription := `Filter by metric.cloud.timestamp`

	var flagMetricCloudTimestampName string
	if cmdPrefix == "" {
		flagMetricCloudTimestampName = "metric.cloud.timestamp"
	} else {
		flagMetricCloudTimestampName = fmt.Sprintf("%v.metric.cloud.timestamp", cmdPrefix)
	}

	var flagMetricCloudTimestampDefault string

	_ = cmd.PersistentFlags().String(flagMetricCloudTimestampName, flagMetricCloudTimestampDefault, flagMetricCloudTimestampDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricDurationParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricDurationDescription := `Filter by metric.duration`

	var flagMetricDurationName string
	if cmdPrefix == "" {
		flagMetricDurationName = "metric.duration"
	} else {
		flagMetricDurationName = fmt.Sprintf("%v.metric.duration", cmdPrefix)
	}

	var flagMetricDurationDefault string

	_ = cmd.PersistentFlags().String(flagMetricDurationName, flagMetricDurationDefault, flagMetricDurationDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricFlexcacheBandwidthSavingsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricFlexcacheBandwidthSavingsDescription := `Filter by metric.flexcache.bandwidth_savings`

	var flagMetricFlexcacheBandwidthSavingsName string
	if cmdPrefix == "" {
		flagMetricFlexcacheBandwidthSavingsName = "metric.flexcache.bandwidth_savings"
	} else {
		flagMetricFlexcacheBandwidthSavingsName = fmt.Sprintf("%v.metric.flexcache.bandwidth_savings", cmdPrefix)
	}

	var flagMetricFlexcacheBandwidthSavingsDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricFlexcacheBandwidthSavingsName, flagMetricFlexcacheBandwidthSavingsDefault, flagMetricFlexcacheBandwidthSavingsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricFlexcacheCacheMissPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricFlexcacheCacheMissPercentDescription := `Filter by metric.flexcache.cache_miss_percent`

	var flagMetricFlexcacheCacheMissPercentName string
	if cmdPrefix == "" {
		flagMetricFlexcacheCacheMissPercentName = "metric.flexcache.cache_miss_percent"
	} else {
		flagMetricFlexcacheCacheMissPercentName = fmt.Sprintf("%v.metric.flexcache.cache_miss_percent", cmdPrefix)
	}

	var flagMetricFlexcacheCacheMissPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricFlexcacheCacheMissPercentName, flagMetricFlexcacheCacheMissPercentDefault, flagMetricFlexcacheCacheMissPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricFlexcacheDurationParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricFlexcacheDurationDescription := `Filter by metric.flexcache.duration`

	var flagMetricFlexcacheDurationName string
	if cmdPrefix == "" {
		flagMetricFlexcacheDurationName = "metric.flexcache.duration"
	} else {
		flagMetricFlexcacheDurationName = fmt.Sprintf("%v.metric.flexcache.duration", cmdPrefix)
	}

	var flagMetricFlexcacheDurationDefault string

	_ = cmd.PersistentFlags().String(flagMetricFlexcacheDurationName, flagMetricFlexcacheDurationDefault, flagMetricFlexcacheDurationDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricFlexcacheStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricFlexcacheStatusDescription := `Filter by metric.flexcache.status`

	var flagMetricFlexcacheStatusName string
	if cmdPrefix == "" {
		flagMetricFlexcacheStatusName = "metric.flexcache.status"
	} else {
		flagMetricFlexcacheStatusName = fmt.Sprintf("%v.metric.flexcache.status", cmdPrefix)
	}

	var flagMetricFlexcacheStatusDefault string

	_ = cmd.PersistentFlags().String(flagMetricFlexcacheStatusName, flagMetricFlexcacheStatusDefault, flagMetricFlexcacheStatusDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricFlexcacheTimestampParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricFlexcacheTimestampDescription := `Filter by metric.flexcache.timestamp`

	var flagMetricFlexcacheTimestampName string
	if cmdPrefix == "" {
		flagMetricFlexcacheTimestampName = "metric.flexcache.timestamp"
	} else {
		flagMetricFlexcacheTimestampName = fmt.Sprintf("%v.metric.flexcache.timestamp", cmdPrefix)
	}

	var flagMetricFlexcacheTimestampDefault string

	_ = cmd.PersistentFlags().String(flagMetricFlexcacheTimestampName, flagMetricFlexcacheTimestampDefault, flagMetricFlexcacheTimestampDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricIopsOtherParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricIopsOtherDescription := `Filter by metric.iops.other`

	var flagMetricIopsOtherName string
	if cmdPrefix == "" {
		flagMetricIopsOtherName = "metric.iops.other"
	} else {
		flagMetricIopsOtherName = fmt.Sprintf("%v.metric.iops.other", cmdPrefix)
	}

	var flagMetricIopsOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricIopsOtherName, flagMetricIopsOtherDefault, flagMetricIopsOtherDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricIopsReadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricIopsReadDescription := `Filter by metric.iops.read`

	var flagMetricIopsReadName string
	if cmdPrefix == "" {
		flagMetricIopsReadName = "metric.iops.read"
	} else {
		flagMetricIopsReadName = fmt.Sprintf("%v.metric.iops.read", cmdPrefix)
	}

	var flagMetricIopsReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricIopsReadName, flagMetricIopsReadDefault, flagMetricIopsReadDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricIopsTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricIopsTotalDescription := `Filter by metric.iops.total`

	var flagMetricIopsTotalName string
	if cmdPrefix == "" {
		flagMetricIopsTotalName = "metric.iops.total"
	} else {
		flagMetricIopsTotalName = fmt.Sprintf("%v.metric.iops.total", cmdPrefix)
	}

	var flagMetricIopsTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricIopsTotalName, flagMetricIopsTotalDefault, flagMetricIopsTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricIopsWriteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricIopsWriteDescription := `Filter by metric.iops.write`

	var flagMetricIopsWriteName string
	if cmdPrefix == "" {
		flagMetricIopsWriteName = "metric.iops.write"
	} else {
		flagMetricIopsWriteName = fmt.Sprintf("%v.metric.iops.write", cmdPrefix)
	}

	var flagMetricIopsWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricIopsWriteName, flagMetricIopsWriteDefault, flagMetricIopsWriteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricLatencyOtherParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricLatencyOtherDescription := `Filter by metric.latency.other`

	var flagMetricLatencyOtherName string
	if cmdPrefix == "" {
		flagMetricLatencyOtherName = "metric.latency.other"
	} else {
		flagMetricLatencyOtherName = fmt.Sprintf("%v.metric.latency.other", cmdPrefix)
	}

	var flagMetricLatencyOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricLatencyOtherName, flagMetricLatencyOtherDefault, flagMetricLatencyOtherDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricLatencyReadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricLatencyReadDescription := `Filter by metric.latency.read`

	var flagMetricLatencyReadName string
	if cmdPrefix == "" {
		flagMetricLatencyReadName = "metric.latency.read"
	} else {
		flagMetricLatencyReadName = fmt.Sprintf("%v.metric.latency.read", cmdPrefix)
	}

	var flagMetricLatencyReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricLatencyReadName, flagMetricLatencyReadDefault, flagMetricLatencyReadDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricLatencyTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricLatencyTotalDescription := `Filter by metric.latency.total`

	var flagMetricLatencyTotalName string
	if cmdPrefix == "" {
		flagMetricLatencyTotalName = "metric.latency.total"
	} else {
		flagMetricLatencyTotalName = fmt.Sprintf("%v.metric.latency.total", cmdPrefix)
	}

	var flagMetricLatencyTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricLatencyTotalName, flagMetricLatencyTotalDefault, flagMetricLatencyTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricLatencyWriteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricLatencyWriteDescription := `Filter by metric.latency.write`

	var flagMetricLatencyWriteName string
	if cmdPrefix == "" {
		flagMetricLatencyWriteName = "metric.latency.write"
	} else {
		flagMetricLatencyWriteName = fmt.Sprintf("%v.metric.latency.write", cmdPrefix)
	}

	var flagMetricLatencyWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricLatencyWriteName, flagMetricLatencyWriteDefault, flagMetricLatencyWriteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricStatusDescription := `Filter by metric.status`

	var flagMetricStatusName string
	if cmdPrefix == "" {
		flagMetricStatusName = "metric.status"
	} else {
		flagMetricStatusName = fmt.Sprintf("%v.metric.status", cmdPrefix)
	}

	var flagMetricStatusDefault string

	_ = cmd.PersistentFlags().String(flagMetricStatusName, flagMetricStatusDefault, flagMetricStatusDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricThroughputOtherParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricThroughputOtherDescription := `Filter by metric.throughput.other`

	var flagMetricThroughputOtherName string
	if cmdPrefix == "" {
		flagMetricThroughputOtherName = "metric.throughput.other"
	} else {
		flagMetricThroughputOtherName = fmt.Sprintf("%v.metric.throughput.other", cmdPrefix)
	}

	var flagMetricThroughputOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricThroughputOtherName, flagMetricThroughputOtherDefault, flagMetricThroughputOtherDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricThroughputReadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricThroughputReadDescription := `Filter by metric.throughput.read`

	var flagMetricThroughputReadName string
	if cmdPrefix == "" {
		flagMetricThroughputReadName = "metric.throughput.read"
	} else {
		flagMetricThroughputReadName = fmt.Sprintf("%v.metric.throughput.read", cmdPrefix)
	}

	var flagMetricThroughputReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricThroughputReadName, flagMetricThroughputReadDefault, flagMetricThroughputReadDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricThroughputTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricThroughputTotalDescription := `Filter by metric.throughput.total`

	var flagMetricThroughputTotalName string
	if cmdPrefix == "" {
		flagMetricThroughputTotalName = "metric.throughput.total"
	} else {
		flagMetricThroughputTotalName = fmt.Sprintf("%v.metric.throughput.total", cmdPrefix)
	}

	var flagMetricThroughputTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricThroughputTotalName, flagMetricThroughputTotalDefault, flagMetricThroughputTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricThroughputWriteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricThroughputWriteDescription := `Filter by metric.throughput.write`

	var flagMetricThroughputWriteName string
	if cmdPrefix == "" {
		flagMetricThroughputWriteName = "metric.throughput.write"
	} else {
		flagMetricThroughputWriteName = fmt.Sprintf("%v.metric.throughput.write", cmdPrefix)
	}

	var flagMetricThroughputWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagMetricThroughputWriteName, flagMetricThroughputWriteDefault, flagMetricThroughputWriteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMetricTimestampParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMetricTimestampDescription := `Filter by metric.timestamp`

	var flagMetricTimestampName string
	if cmdPrefix == "" {
		flagMetricTimestampName = "metric.timestamp"
	} else {
		flagMetricTimestampName = fmt.Sprintf("%v.metric.timestamp", cmdPrefix)
	}

	var flagMetricTimestampDefault string

	_ = cmd.PersistentFlags().String(flagMetricTimestampName, flagMetricTimestampDefault, flagMetricTimestampDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMovementCutoverWindowParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMovementCutoverWindowDescription := `Filter by movement.cutover_window`

	var flagMovementCutoverWindowName string
	if cmdPrefix == "" {
		flagMovementCutoverWindowName = "movement.cutover_window"
	} else {
		flagMovementCutoverWindowName = fmt.Sprintf("%v.movement.cutover_window", cmdPrefix)
	}

	var flagMovementCutoverWindowDefault int64

	_ = cmd.PersistentFlags().Int64(flagMovementCutoverWindowName, flagMovementCutoverWindowDefault, flagMovementCutoverWindowDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMovementDestinationAggregateNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMovementDestinationAggregateNameDescription := `Filter by movement.destination_aggregate.name`

	var flagMovementDestinationAggregateNameName string
	if cmdPrefix == "" {
		flagMovementDestinationAggregateNameName = "movement.destination_aggregate.name"
	} else {
		flagMovementDestinationAggregateNameName = fmt.Sprintf("%v.movement.destination_aggregate.name", cmdPrefix)
	}

	var flagMovementDestinationAggregateNameDefault string

	_ = cmd.PersistentFlags().String(flagMovementDestinationAggregateNameName, flagMovementDestinationAggregateNameDefault, flagMovementDestinationAggregateNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMovementDestinationAggregateUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMovementDestinationAggregateUUIDDescription := `Filter by movement.destination_aggregate.uuid`

	var flagMovementDestinationAggregateUUIDName string
	if cmdPrefix == "" {
		flagMovementDestinationAggregateUUIDName = "movement.destination_aggregate.uuid"
	} else {
		flagMovementDestinationAggregateUUIDName = fmt.Sprintf("%v.movement.destination_aggregate.uuid", cmdPrefix)
	}

	var flagMovementDestinationAggregateUUIDDefault string

	_ = cmd.PersistentFlags().String(flagMovementDestinationAggregateUUIDName, flagMovementDestinationAggregateUUIDDefault, flagMovementDestinationAggregateUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMovementPercentCompleteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMovementPercentCompleteDescription := `Filter by movement.percent_complete`

	var flagMovementPercentCompleteName string
	if cmdPrefix == "" {
		flagMovementPercentCompleteName = "movement.percent_complete"
	} else {
		flagMovementPercentCompleteName = fmt.Sprintf("%v.movement.percent_complete", cmdPrefix)
	}

	var flagMovementPercentCompleteDefault int64

	_ = cmd.PersistentFlags().Int64(flagMovementPercentCompleteName, flagMovementPercentCompleteDefault, flagMovementPercentCompleteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMovementStartTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMovementStartTimeDescription := `Filter by movement.start_time`

	var flagMovementStartTimeName string
	if cmdPrefix == "" {
		flagMovementStartTimeName = "movement.start_time"
	} else {
		flagMovementStartTimeName = fmt.Sprintf("%v.movement.start_time", cmdPrefix)
	}

	var flagMovementStartTimeDefault string

	_ = cmd.PersistentFlags().String(flagMovementStartTimeName, flagMovementStartTimeDefault, flagMovementStartTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMovementStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMovementStateDescription := `Filter by movement.state`

	var flagMovementStateName string
	if cmdPrefix == "" {
		flagMovementStateName = "movement.state"
	} else {
		flagMovementStateName = fmt.Sprintf("%v.movement.state", cmdPrefix)
	}

	var flagMovementStateDefault string

	_ = cmd.PersistentFlags().String(flagMovementStateName, flagMovementStateDefault, flagMovementStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetMsidParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagMsidDescription := `Filter by msid`

	var flagMsidName string
	if cmdPrefix == "" {
		flagMsidName = "msid"
	} else {
		flagMsidName = fmt.Sprintf("%v.msid", cmdPrefix)
	}

	var flagMsidDefault int64

	_ = cmd.PersistentFlags().Int64(flagMsidName, flagMsidDefault, flagMsidDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagNameDescription := `Filter by name`

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetNasExportPolicyIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagNasExportPolicyIDDescription := `Filter by nas.export_policy.id`

	var flagNasExportPolicyIDName string
	if cmdPrefix == "" {
		flagNasExportPolicyIDName = "nas.export_policy.id"
	} else {
		flagNasExportPolicyIDName = fmt.Sprintf("%v.nas.export_policy.id", cmdPrefix)
	}

	var flagNasExportPolicyIDDefault int64

	_ = cmd.PersistentFlags().Int64(flagNasExportPolicyIDName, flagNasExportPolicyIDDefault, flagNasExportPolicyIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetNasExportPolicyNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagNasExportPolicyNameDescription := `Filter by nas.export_policy.name`

	var flagNasExportPolicyNameName string
	if cmdPrefix == "" {
		flagNasExportPolicyNameName = "nas.export_policy.name"
	} else {
		flagNasExportPolicyNameName = fmt.Sprintf("%v.nas.export_policy.name", cmdPrefix)
	}

	var flagNasExportPolicyNameDefault string

	_ = cmd.PersistentFlags().String(flagNasExportPolicyNameName, flagNasExportPolicyNameDefault, flagNasExportPolicyNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetNasGidParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagNasGidDescription := `Filter by nas.gid`

	var flagNasGidName string
	if cmdPrefix == "" {
		flagNasGidName = "nas.gid"
	} else {
		flagNasGidName = fmt.Sprintf("%v.nas.gid", cmdPrefix)
	}

	var flagNasGidDefault int64

	_ = cmd.PersistentFlags().Int64(flagNasGidName, flagNasGidDefault, flagNasGidDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetNasJunctionParentNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagNasJunctionParentNameDescription := `Filter by nas.junction_parent.name`

	var flagNasJunctionParentNameName string
	if cmdPrefix == "" {
		flagNasJunctionParentNameName = "nas.junction_parent.name"
	} else {
		flagNasJunctionParentNameName = fmt.Sprintf("%v.nas.junction_parent.name", cmdPrefix)
	}

	var flagNasJunctionParentNameDefault string

	_ = cmd.PersistentFlags().String(flagNasJunctionParentNameName, flagNasJunctionParentNameDefault, flagNasJunctionParentNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetNasJunctionParentUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagNasJunctionParentUUIDDescription := `Filter by nas.junction_parent.uuid`

	var flagNasJunctionParentUUIDName string
	if cmdPrefix == "" {
		flagNasJunctionParentUUIDName = "nas.junction_parent.uuid"
	} else {
		flagNasJunctionParentUUIDName = fmt.Sprintf("%v.nas.junction_parent.uuid", cmdPrefix)
	}

	var flagNasJunctionParentUUIDDefault string

	_ = cmd.PersistentFlags().String(flagNasJunctionParentUUIDName, flagNasJunctionParentUUIDDefault, flagNasJunctionParentUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetNasPathParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagNasPathDescription := `Filter by nas.path`

	var flagNasPathName string
	if cmdPrefix == "" {
		flagNasPathName = "nas.path"
	} else {
		flagNasPathName = fmt.Sprintf("%v.nas.path", cmdPrefix)
	}

	var flagNasPathDefault string

	_ = cmd.PersistentFlags().String(flagNasPathName, flagNasPathDefault, flagNasPathDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetNasSecurityStyleParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagNasSecurityStyleDescription := `Filter by nas.security_style`

	var flagNasSecurityStyleName string
	if cmdPrefix == "" {
		flagNasSecurityStyleName = "nas.security_style"
	} else {
		flagNasSecurityStyleName = fmt.Sprintf("%v.nas.security_style", cmdPrefix)
	}

	var flagNasSecurityStyleDefault string

	_ = cmd.PersistentFlags().String(flagNasSecurityStyleName, flagNasSecurityStyleDefault, flagNasSecurityStyleDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetNasUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagNasUIDDescription := `Filter by nas.uid`

	var flagNasUIDName string
	if cmdPrefix == "" {
		flagNasUIDName = "nas.uid"
	} else {
		flagNasUIDName = fmt.Sprintf("%v.nas.uid", cmdPrefix)
	}

	var flagNasUIDDefault int64

	_ = cmd.PersistentFlags().Int64(flagNasUIDName, flagNasUIDDefault, flagNasUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetNasUnixPermissionsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagNasUnixPermissionsDescription := `Filter by nas.unix_permissions`

	var flagNasUnixPermissionsName string
	if cmdPrefix == "" {
		flagNasUnixPermissionsName = "nas.unix_permissions"
	} else {
		flagNasUnixPermissionsName = fmt.Sprintf("%v.nas.unix_permissions", cmdPrefix)
	}

	var flagNasUnixPermissionsDefault int64

	_ = cmd.PersistentFlags().Int64(flagNasUnixPermissionsName, flagNasUnixPermissionsDefault, flagNasUnixPermissionsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetOrderByParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagOrderByDescription := `Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.`

	var flagOrderByName string
	if cmdPrefix == "" {
		flagOrderByName = "order_by"
	} else {
		flagOrderByName = fmt.Sprintf("%v.order_by", cmdPrefix)
	}

	var flagOrderByDefault []string

	_ = cmd.PersistentFlags().StringSlice(flagOrderByName, flagOrderByDefault, flagOrderByDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetQosPolicyMaxThroughputIopsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagQosPolicyMaxThroughputIopsDescription := `Filter by qos.policy.max_throughput_iops`

	var flagQosPolicyMaxThroughputIopsName string
	if cmdPrefix == "" {
		flagQosPolicyMaxThroughputIopsName = "qos.policy.max_throughput_iops"
	} else {
		flagQosPolicyMaxThroughputIopsName = fmt.Sprintf("%v.qos.policy.max_throughput_iops", cmdPrefix)
	}

	var flagQosPolicyMaxThroughputIopsDefault int64

	_ = cmd.PersistentFlags().Int64(flagQosPolicyMaxThroughputIopsName, flagQosPolicyMaxThroughputIopsDefault, flagQosPolicyMaxThroughputIopsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetQosPolicyMaxThroughputMbpsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagQosPolicyMaxThroughputMbpsDescription := `Filter by qos.policy.max_throughput_mbps`

	var flagQosPolicyMaxThroughputMbpsName string
	if cmdPrefix == "" {
		flagQosPolicyMaxThroughputMbpsName = "qos.policy.max_throughput_mbps"
	} else {
		flagQosPolicyMaxThroughputMbpsName = fmt.Sprintf("%v.qos.policy.max_throughput_mbps", cmdPrefix)
	}

	var flagQosPolicyMaxThroughputMbpsDefault int64

	_ = cmd.PersistentFlags().Int64(flagQosPolicyMaxThroughputMbpsName, flagQosPolicyMaxThroughputMbpsDefault, flagQosPolicyMaxThroughputMbpsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetQosPolicyMinThroughputIopsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagQosPolicyMinThroughputIopsDescription := `Filter by qos.policy.min_throughput_iops`

	var flagQosPolicyMinThroughputIopsName string
	if cmdPrefix == "" {
		flagQosPolicyMinThroughputIopsName = "qos.policy.min_throughput_iops"
	} else {
		flagQosPolicyMinThroughputIopsName = fmt.Sprintf("%v.qos.policy.min_throughput_iops", cmdPrefix)
	}

	var flagQosPolicyMinThroughputIopsDefault int64

	_ = cmd.PersistentFlags().Int64(flagQosPolicyMinThroughputIopsName, flagQosPolicyMinThroughputIopsDefault, flagQosPolicyMinThroughputIopsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetQosPolicyMinThroughputMbpsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagQosPolicyMinThroughputMbpsDescription := `Filter by qos.policy.min_throughput_mbps`

	var flagQosPolicyMinThroughputMbpsName string
	if cmdPrefix == "" {
		flagQosPolicyMinThroughputMbpsName = "qos.policy.min_throughput_mbps"
	} else {
		flagQosPolicyMinThroughputMbpsName = fmt.Sprintf("%v.qos.policy.min_throughput_mbps", cmdPrefix)
	}

	var flagQosPolicyMinThroughputMbpsDefault int64

	_ = cmd.PersistentFlags().Int64(flagQosPolicyMinThroughputMbpsName, flagQosPolicyMinThroughputMbpsDefault, flagQosPolicyMinThroughputMbpsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetQosPolicyNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagQosPolicyNameDescription := `Filter by qos.policy.name`

	var flagQosPolicyNameName string
	if cmdPrefix == "" {
		flagQosPolicyNameName = "qos.policy.name"
	} else {
		flagQosPolicyNameName = fmt.Sprintf("%v.qos.policy.name", cmdPrefix)
	}

	var flagQosPolicyNameDefault string

	_ = cmd.PersistentFlags().String(flagQosPolicyNameName, flagQosPolicyNameDefault, flagQosPolicyNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetQosPolicyUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagQosPolicyUUIDDescription := `Filter by qos.policy.uuid`

	var flagQosPolicyUUIDName string
	if cmdPrefix == "" {
		flagQosPolicyUUIDName = "qos.policy.uuid"
	} else {
		flagQosPolicyUUIDName = fmt.Sprintf("%v.qos.policy.uuid", cmdPrefix)
	}

	var flagQosPolicyUUIDDefault string

	_ = cmd.PersistentFlags().String(flagQosPolicyUUIDName, flagQosPolicyUUIDDefault, flagQosPolicyUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetQueueForEncryptionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagQueueForEncryptionDescription := `Filter by queue_for_encryption`

	var flagQueueForEncryptionName string
	if cmdPrefix == "" {
		flagQueueForEncryptionName = "queue_for_encryption"
	} else {
		flagQueueForEncryptionName = fmt.Sprintf("%v.queue_for_encryption", cmdPrefix)
	}

	var flagQueueForEncryptionDefault bool

	_ = cmd.PersistentFlags().Bool(flagQueueForEncryptionName, flagQueueForEncryptionDefault, flagQueueForEncryptionDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetQuotaStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagQuotaStateDescription := `Filter by quota.state`

	var flagQuotaStateName string
	if cmdPrefix == "" {
		flagQuotaStateName = "quota.state"
	} else {
		flagQuotaStateName = fmt.Sprintf("%v.quota.state", cmdPrefix)
	}

	var flagQuotaStateDefault string

	_ = cmd.PersistentFlags().String(flagQuotaStateName, flagQuotaStateDefault, flagQuotaStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingDataMovedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingDataMovedDescription := `Filter by rebalancing.data_moved`

	var flagRebalancingDataMovedName string
	if cmdPrefix == "" {
		flagRebalancingDataMovedName = "rebalancing.data_moved"
	} else {
		flagRebalancingDataMovedName = fmt.Sprintf("%v.rebalancing.data_moved", cmdPrefix)
	}

	var flagRebalancingDataMovedDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingDataMovedName, flagRebalancingDataMovedDefault, flagRebalancingDataMovedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineMovementFileMovesStartedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineMovementFileMovesStartedDescription := `Filter by rebalancing.engine.movement.file_moves_started`

	var flagRebalancingEngineMovementFileMovesStartedName string
	if cmdPrefix == "" {
		flagRebalancingEngineMovementFileMovesStartedName = "rebalancing.engine.movement.file_moves_started"
	} else {
		flagRebalancingEngineMovementFileMovesStartedName = fmt.Sprintf("%v.rebalancing.engine.movement.file_moves_started", cmdPrefix)
	}

	var flagRebalancingEngineMovementFileMovesStartedDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineMovementFileMovesStartedName, flagRebalancingEngineMovementFileMovesStartedDefault, flagRebalancingEngineMovementFileMovesStartedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorCodeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineMovementLastErrorCodeDescription := `Filter by rebalancing.engine.movement.last_error.code`

	var flagRebalancingEngineMovementLastErrorCodeName string
	if cmdPrefix == "" {
		flagRebalancingEngineMovementLastErrorCodeName = "rebalancing.engine.movement.last_error.code"
	} else {
		flagRebalancingEngineMovementLastErrorCodeName = fmt.Sprintf("%v.rebalancing.engine.movement.last_error.code", cmdPrefix)
	}

	var flagRebalancingEngineMovementLastErrorCodeDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineMovementLastErrorCodeName, flagRebalancingEngineMovementLastErrorCodeDefault, flagRebalancingEngineMovementLastErrorCodeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorDestinationParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineMovementLastErrorDestinationDescription := `Filter by rebalancing.engine.movement.last_error.destination`

	var flagRebalancingEngineMovementLastErrorDestinationName string
	if cmdPrefix == "" {
		flagRebalancingEngineMovementLastErrorDestinationName = "rebalancing.engine.movement.last_error.destination"
	} else {
		flagRebalancingEngineMovementLastErrorDestinationName = fmt.Sprintf("%v.rebalancing.engine.movement.last_error.destination", cmdPrefix)
	}

	var flagRebalancingEngineMovementLastErrorDestinationDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineMovementLastErrorDestinationName, flagRebalancingEngineMovementLastErrorDestinationDefault, flagRebalancingEngineMovementLastErrorDestinationDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorFileIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineMovementLastErrorFileIDDescription := `Filter by rebalancing.engine.movement.last_error.file_id`

	var flagRebalancingEngineMovementLastErrorFileIDName string
	if cmdPrefix == "" {
		flagRebalancingEngineMovementLastErrorFileIDName = "rebalancing.engine.movement.last_error.file_id"
	} else {
		flagRebalancingEngineMovementLastErrorFileIDName = fmt.Sprintf("%v.rebalancing.engine.movement.last_error.file_id", cmdPrefix)
	}

	var flagRebalancingEngineMovementLastErrorFileIDDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineMovementLastErrorFileIDName, flagRebalancingEngineMovementLastErrorFileIDDefault, flagRebalancingEngineMovementLastErrorFileIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineMovementLastErrorTimeDescription := `Filter by rebalancing.engine.movement.last_error.time`

	var flagRebalancingEngineMovementLastErrorTimeName string
	if cmdPrefix == "" {
		flagRebalancingEngineMovementLastErrorTimeName = "rebalancing.engine.movement.last_error.time"
	} else {
		flagRebalancingEngineMovementLastErrorTimeName = fmt.Sprintf("%v.rebalancing.engine.movement.last_error.time", cmdPrefix)
	}

	var flagRebalancingEngineMovementLastErrorTimeDefault string

	_ = cmd.PersistentFlags().String(flagRebalancingEngineMovementLastErrorTimeName, flagRebalancingEngineMovementLastErrorTimeDefault, flagRebalancingEngineMovementLastErrorTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineMovementMostRecentStartTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineMovementMostRecentStartTimeDescription := `Filter by rebalancing.engine.movement.most_recent_start_time`

	var flagRebalancingEngineMovementMostRecentStartTimeName string
	if cmdPrefix == "" {
		flagRebalancingEngineMovementMostRecentStartTimeName = "rebalancing.engine.movement.most_recent_start_time"
	} else {
		flagRebalancingEngineMovementMostRecentStartTimeName = fmt.Sprintf("%v.rebalancing.engine.movement.most_recent_start_time", cmdPrefix)
	}

	var flagRebalancingEngineMovementMostRecentStartTimeDefault string

	_ = cmd.PersistentFlags().String(flagRebalancingEngineMovementMostRecentStartTimeName, flagRebalancingEngineMovementMostRecentStartTimeDefault, flagRebalancingEngineMovementMostRecentStartTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksScannedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksScannedDescription := `Filter by rebalancing.engine.scanner.blocks_scanned`

	var flagRebalancingEngineScannerBlocksScannedName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksScannedName = "rebalancing.engine.scanner.blocks_scanned"
	} else {
		flagRebalancingEngineScannerBlocksScannedName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_scanned", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksScannedDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksScannedName, flagRebalancingEngineScannerBlocksScannedDefault, flagRebalancingEngineScannerBlocksScannedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedEfficiencyBlocksParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.efficiency_blocks`

	var flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksName = "rebalancing.engine.scanner.blocks_skipped.efficiency_blocks"
	} else {
		flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.efficiency_blocks", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksName, flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksDefault, flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedEfficiencyPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.efficiency_percent`

	var flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentName = "rebalancing.engine.scanner.blocks_skipped.efficiency_percent"
	} else {
		flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.efficiency_percent", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentName, flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentDefault, flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedFastTruncateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedFastTruncateDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.fast_truncate`

	var flagRebalancingEngineScannerBlocksSkippedFastTruncateName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedFastTruncateName = "rebalancing.engine.scanner.blocks_skipped.fast_truncate"
	} else {
		flagRebalancingEngineScannerBlocksSkippedFastTruncateName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.fast_truncate", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedFastTruncateDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedFastTruncateName, flagRebalancingEngineScannerBlocksSkippedFastTruncateDefault, flagRebalancingEngineScannerBlocksSkippedFastTruncateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedFootprintInvalidParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedFootprintInvalidDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.footprint_invalid`

	var flagRebalancingEngineScannerBlocksSkippedFootprintInvalidName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedFootprintInvalidName = "rebalancing.engine.scanner.blocks_skipped.footprint_invalid"
	} else {
		flagRebalancingEngineScannerBlocksSkippedFootprintInvalidName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.footprint_invalid", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedFootprintInvalidDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedFootprintInvalidName, flagRebalancingEngineScannerBlocksSkippedFootprintInvalidDefault, flagRebalancingEngineScannerBlocksSkippedFootprintInvalidDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedInSnapshotParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedInSnapshotDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.in_snapshot`

	var flagRebalancingEngineScannerBlocksSkippedInSnapshotName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedInSnapshotName = "rebalancing.engine.scanner.blocks_skipped.in_snapshot"
	} else {
		flagRebalancingEngineScannerBlocksSkippedInSnapshotName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.in_snapshot", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedInSnapshotDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedInSnapshotName, flagRebalancingEngineScannerBlocksSkippedInSnapshotDefault, flagRebalancingEngineScannerBlocksSkippedInSnapshotDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedIncompatibleParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedIncompatibleDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.incompatible`

	var flagRebalancingEngineScannerBlocksSkippedIncompatibleName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedIncompatibleName = "rebalancing.engine.scanner.blocks_skipped.incompatible"
	} else {
		flagRebalancingEngineScannerBlocksSkippedIncompatibleName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.incompatible", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedIncompatibleDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedIncompatibleName, flagRebalancingEngineScannerBlocksSkippedIncompatibleDefault, flagRebalancingEngineScannerBlocksSkippedIncompatibleDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedMetadataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedMetadataDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.metadata`

	var flagRebalancingEngineScannerBlocksSkippedMetadataName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedMetadataName = "rebalancing.engine.scanner.blocks_skipped.metadata"
	} else {
		flagRebalancingEngineScannerBlocksSkippedMetadataName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.metadata", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedMetadataName, flagRebalancingEngineScannerBlocksSkippedMetadataDefault, flagRebalancingEngineScannerBlocksSkippedMetadataDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedOnDemandDestinationParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.on_demand_destination`

	var flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationName = "rebalancing.engine.scanner.blocks_skipped.on_demand_destination"
	} else {
		flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.on_demand_destination", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationName, flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationDefault, flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedOtherParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedOtherDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.other`

	var flagRebalancingEngineScannerBlocksSkippedOtherName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedOtherName = "rebalancing.engine.scanner.blocks_skipped.other"
	} else {
		flagRebalancingEngineScannerBlocksSkippedOtherName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.other", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedOtherName, flagRebalancingEngineScannerBlocksSkippedOtherDefault, flagRebalancingEngineScannerBlocksSkippedOtherDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedRemoteCacheParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedRemoteCacheDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.remote_cache`

	var flagRebalancingEngineScannerBlocksSkippedRemoteCacheName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedRemoteCacheName = "rebalancing.engine.scanner.blocks_skipped.remote_cache"
	} else {
		flagRebalancingEngineScannerBlocksSkippedRemoteCacheName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.remote_cache", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedRemoteCacheDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedRemoteCacheName, flagRebalancingEngineScannerBlocksSkippedRemoteCacheDefault, flagRebalancingEngineScannerBlocksSkippedRemoteCacheDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedTooLargeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedTooLargeDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.too_large`

	var flagRebalancingEngineScannerBlocksSkippedTooLargeName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedTooLargeName = "rebalancing.engine.scanner.blocks_skipped.too_large"
	} else {
		flagRebalancingEngineScannerBlocksSkippedTooLargeName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.too_large", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedTooLargeDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedTooLargeName, flagRebalancingEngineScannerBlocksSkippedTooLargeDefault, flagRebalancingEngineScannerBlocksSkippedTooLargeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedTooSmallParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedTooSmallDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.too_small`

	var flagRebalancingEngineScannerBlocksSkippedTooSmallName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedTooSmallName = "rebalancing.engine.scanner.blocks_skipped.too_small"
	} else {
		flagRebalancingEngineScannerBlocksSkippedTooSmallName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.too_small", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedTooSmallDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedTooSmallName, flagRebalancingEngineScannerBlocksSkippedTooSmallDefault, flagRebalancingEngineScannerBlocksSkippedTooSmallDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedWriteFencedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerBlocksSkippedWriteFencedDescription := `Filter by rebalancing.engine.scanner.blocks_skipped.write_fenced`

	var flagRebalancingEngineScannerBlocksSkippedWriteFencedName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerBlocksSkippedWriteFencedName = "rebalancing.engine.scanner.blocks_skipped.write_fenced"
	} else {
		flagRebalancingEngineScannerBlocksSkippedWriteFencedName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.write_fenced", cmdPrefix)
	}

	var flagRebalancingEngineScannerBlocksSkippedWriteFencedDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerBlocksSkippedWriteFencedName, flagRebalancingEngineScannerBlocksSkippedWriteFencedDefault, flagRebalancingEngineScannerBlocksSkippedWriteFencedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesScannedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesScannedDescription := `Filter by rebalancing.engine.scanner.files_scanned`

	var flagRebalancingEngineScannerFilesScannedName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesScannedName = "rebalancing.engine.scanner.files_scanned"
	} else {
		flagRebalancingEngineScannerFilesScannedName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_scanned", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesScannedDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesScannedName, flagRebalancingEngineScannerFilesScannedDefault, flagRebalancingEngineScannerFilesScannedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedEfficiencyBlocksParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksDescription := `Filter by rebalancing.engine.scanner.files_skipped.efficiency_blocks`

	var flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksName = "rebalancing.engine.scanner.files_skipped.efficiency_blocks"
	} else {
		flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.efficiency_blocks", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksName, flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksDefault, flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedEfficiencyPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedEfficiencyPercentDescription := `Filter by rebalancing.engine.scanner.files_skipped.efficiency_percent`

	var flagRebalancingEngineScannerFilesSkippedEfficiencyPercentName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedEfficiencyPercentName = "rebalancing.engine.scanner.files_skipped.efficiency_percent"
	} else {
		flagRebalancingEngineScannerFilesSkippedEfficiencyPercentName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.efficiency_percent", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedEfficiencyPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedEfficiencyPercentName, flagRebalancingEngineScannerFilesSkippedEfficiencyPercentDefault, flagRebalancingEngineScannerFilesSkippedEfficiencyPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedFastTruncateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedFastTruncateDescription := `Filter by rebalancing.engine.scanner.files_skipped.fast_truncate`

	var flagRebalancingEngineScannerFilesSkippedFastTruncateName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedFastTruncateName = "rebalancing.engine.scanner.files_skipped.fast_truncate"
	} else {
		flagRebalancingEngineScannerFilesSkippedFastTruncateName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.fast_truncate", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedFastTruncateDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedFastTruncateName, flagRebalancingEngineScannerFilesSkippedFastTruncateDefault, flagRebalancingEngineScannerFilesSkippedFastTruncateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedFootprintInvalidParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedFootprintInvalidDescription := `Filter by rebalancing.engine.scanner.files_skipped.footprint_invalid`

	var flagRebalancingEngineScannerFilesSkippedFootprintInvalidName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedFootprintInvalidName = "rebalancing.engine.scanner.files_skipped.footprint_invalid"
	} else {
		flagRebalancingEngineScannerFilesSkippedFootprintInvalidName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.footprint_invalid", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedFootprintInvalidDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedFootprintInvalidName, flagRebalancingEngineScannerFilesSkippedFootprintInvalidDefault, flagRebalancingEngineScannerFilesSkippedFootprintInvalidDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedInSnapshotParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedInSnapshotDescription := `Filter by rebalancing.engine.scanner.files_skipped.in_snapshot`

	var flagRebalancingEngineScannerFilesSkippedInSnapshotName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedInSnapshotName = "rebalancing.engine.scanner.files_skipped.in_snapshot"
	} else {
		flagRebalancingEngineScannerFilesSkippedInSnapshotName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.in_snapshot", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedInSnapshotDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedInSnapshotName, flagRebalancingEngineScannerFilesSkippedInSnapshotDefault, flagRebalancingEngineScannerFilesSkippedInSnapshotDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedIncompatibleParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedIncompatibleDescription := `Filter by rebalancing.engine.scanner.files_skipped.incompatible`

	var flagRebalancingEngineScannerFilesSkippedIncompatibleName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedIncompatibleName = "rebalancing.engine.scanner.files_skipped.incompatible"
	} else {
		flagRebalancingEngineScannerFilesSkippedIncompatibleName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.incompatible", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedIncompatibleDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedIncompatibleName, flagRebalancingEngineScannerFilesSkippedIncompatibleDefault, flagRebalancingEngineScannerFilesSkippedIncompatibleDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedMetadataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedMetadataDescription := `Filter by rebalancing.engine.scanner.files_skipped.metadata`

	var flagRebalancingEngineScannerFilesSkippedMetadataName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedMetadataName = "rebalancing.engine.scanner.files_skipped.metadata"
	} else {
		flagRebalancingEngineScannerFilesSkippedMetadataName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.metadata", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedMetadataName, flagRebalancingEngineScannerFilesSkippedMetadataDefault, flagRebalancingEngineScannerFilesSkippedMetadataDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedOnDemandDestinationParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedOnDemandDestinationDescription := `Filter by rebalancing.engine.scanner.files_skipped.on_demand_destination`

	var flagRebalancingEngineScannerFilesSkippedOnDemandDestinationName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedOnDemandDestinationName = "rebalancing.engine.scanner.files_skipped.on_demand_destination"
	} else {
		flagRebalancingEngineScannerFilesSkippedOnDemandDestinationName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.on_demand_destination", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedOnDemandDestinationDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedOnDemandDestinationName, flagRebalancingEngineScannerFilesSkippedOnDemandDestinationDefault, flagRebalancingEngineScannerFilesSkippedOnDemandDestinationDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedOtherParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedOtherDescription := `Filter by rebalancing.engine.scanner.files_skipped.other`

	var flagRebalancingEngineScannerFilesSkippedOtherName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedOtherName = "rebalancing.engine.scanner.files_skipped.other"
	} else {
		flagRebalancingEngineScannerFilesSkippedOtherName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.other", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedOtherName, flagRebalancingEngineScannerFilesSkippedOtherDefault, flagRebalancingEngineScannerFilesSkippedOtherDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedRemoteCacheParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedRemoteCacheDescription := `Filter by rebalancing.engine.scanner.files_skipped.remote_cache`

	var flagRebalancingEngineScannerFilesSkippedRemoteCacheName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedRemoteCacheName = "rebalancing.engine.scanner.files_skipped.remote_cache"
	} else {
		flagRebalancingEngineScannerFilesSkippedRemoteCacheName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.remote_cache", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedRemoteCacheDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedRemoteCacheName, flagRebalancingEngineScannerFilesSkippedRemoteCacheDefault, flagRebalancingEngineScannerFilesSkippedRemoteCacheDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedTooLargeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedTooLargeDescription := `Filter by rebalancing.engine.scanner.files_skipped.too_large`

	var flagRebalancingEngineScannerFilesSkippedTooLargeName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedTooLargeName = "rebalancing.engine.scanner.files_skipped.too_large"
	} else {
		flagRebalancingEngineScannerFilesSkippedTooLargeName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.too_large", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedTooLargeDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedTooLargeName, flagRebalancingEngineScannerFilesSkippedTooLargeDefault, flagRebalancingEngineScannerFilesSkippedTooLargeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedTooSmallParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedTooSmallDescription := `Filter by rebalancing.engine.scanner.files_skipped.too_small`

	var flagRebalancingEngineScannerFilesSkippedTooSmallName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedTooSmallName = "rebalancing.engine.scanner.files_skipped.too_small"
	} else {
		flagRebalancingEngineScannerFilesSkippedTooSmallName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.too_small", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedTooSmallDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedTooSmallName, flagRebalancingEngineScannerFilesSkippedTooSmallDefault, flagRebalancingEngineScannerFilesSkippedTooSmallDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedWriteFencedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingEngineScannerFilesSkippedWriteFencedDescription := `Filter by rebalancing.engine.scanner.files_skipped.write_fenced`

	var flagRebalancingEngineScannerFilesSkippedWriteFencedName string
	if cmdPrefix == "" {
		flagRebalancingEngineScannerFilesSkippedWriteFencedName = "rebalancing.engine.scanner.files_skipped.write_fenced"
	} else {
		flagRebalancingEngineScannerFilesSkippedWriteFencedName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.write_fenced", cmdPrefix)
	}

	var flagRebalancingEngineScannerFilesSkippedWriteFencedDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingEngineScannerFilesSkippedWriteFencedName, flagRebalancingEngineScannerFilesSkippedWriteFencedDefault, flagRebalancingEngineScannerFilesSkippedWriteFencedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingExcludeSnapshotsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingExcludeSnapshotsDescription := `Filter by rebalancing.exclude_snapshots`

	var flagRebalancingExcludeSnapshotsName string
	if cmdPrefix == "" {
		flagRebalancingExcludeSnapshotsName = "rebalancing.exclude_snapshots"
	} else {
		flagRebalancingExcludeSnapshotsName = fmt.Sprintf("%v.rebalancing.exclude_snapshots", cmdPrefix)
	}

	var flagRebalancingExcludeSnapshotsDefault bool

	_ = cmd.PersistentFlags().Bool(flagRebalancingExcludeSnapshotsName, flagRebalancingExcludeSnapshotsDefault, flagRebalancingExcludeSnapshotsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingImbalancePercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingImbalancePercentDescription := `Filter by rebalancing.imbalance_percent`

	var flagRebalancingImbalancePercentName string
	if cmdPrefix == "" {
		flagRebalancingImbalancePercentName = "rebalancing.imbalance_percent"
	} else {
		flagRebalancingImbalancePercentName = fmt.Sprintf("%v.rebalancing.imbalance_percent", cmdPrefix)
	}

	var flagRebalancingImbalancePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingImbalancePercentName, flagRebalancingImbalancePercentDefault, flagRebalancingImbalancePercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingImbalanceSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingImbalanceSizeDescription := `Filter by rebalancing.imbalance_size`

	var flagRebalancingImbalanceSizeName string
	if cmdPrefix == "" {
		flagRebalancingImbalanceSizeName = "rebalancing.imbalance_size"
	} else {
		flagRebalancingImbalanceSizeName = fmt.Sprintf("%v.rebalancing.imbalance_size", cmdPrefix)
	}

	var flagRebalancingImbalanceSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingImbalanceSizeName, flagRebalancingImbalanceSizeDefault, flagRebalancingImbalanceSizeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingMaxConstituentImbalancePercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingMaxConstituentImbalancePercentDescription := `Filter by rebalancing.max_constituent_imbalance_percent`

	var flagRebalancingMaxConstituentImbalancePercentName string
	if cmdPrefix == "" {
		flagRebalancingMaxConstituentImbalancePercentName = "rebalancing.max_constituent_imbalance_percent"
	} else {
		flagRebalancingMaxConstituentImbalancePercentName = fmt.Sprintf("%v.rebalancing.max_constituent_imbalance_percent", cmdPrefix)
	}

	var flagRebalancingMaxConstituentImbalancePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingMaxConstituentImbalancePercentName, flagRebalancingMaxConstituentImbalancePercentDefault, flagRebalancingMaxConstituentImbalancePercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingMaxFileMovesParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingMaxFileMovesDescription := `Filter by rebalancing.max_file_moves`

	var flagRebalancingMaxFileMovesName string
	if cmdPrefix == "" {
		flagRebalancingMaxFileMovesName = "rebalancing.max_file_moves"
	} else {
		flagRebalancingMaxFileMovesName = fmt.Sprintf("%v.rebalancing.max_file_moves", cmdPrefix)
	}

	var flagRebalancingMaxFileMovesDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingMaxFileMovesName, flagRebalancingMaxFileMovesDefault, flagRebalancingMaxFileMovesDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingMaxRuntimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingMaxRuntimeDescription := `Filter by rebalancing.max_runtime`

	var flagRebalancingMaxRuntimeName string
	if cmdPrefix == "" {
		flagRebalancingMaxRuntimeName = "rebalancing.max_runtime"
	} else {
		flagRebalancingMaxRuntimeName = fmt.Sprintf("%v.rebalancing.max_runtime", cmdPrefix)
	}

	var flagRebalancingMaxRuntimeDefault string

	_ = cmd.PersistentFlags().String(flagRebalancingMaxRuntimeName, flagRebalancingMaxRuntimeDefault, flagRebalancingMaxRuntimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingMaxThresholdParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingMaxThresholdDescription := `Filter by rebalancing.max_threshold`

	var flagRebalancingMaxThresholdName string
	if cmdPrefix == "" {
		flagRebalancingMaxThresholdName = "rebalancing.max_threshold"
	} else {
		flagRebalancingMaxThresholdName = fmt.Sprintf("%v.rebalancing.max_threshold", cmdPrefix)
	}

	var flagRebalancingMaxThresholdDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingMaxThresholdName, flagRebalancingMaxThresholdDefault, flagRebalancingMaxThresholdDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingMinFileSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingMinFileSizeDescription := `Filter by rebalancing.min_file_size`

	var flagRebalancingMinFileSizeName string
	if cmdPrefix == "" {
		flagRebalancingMinFileSizeName = "rebalancing.min_file_size"
	} else {
		flagRebalancingMinFileSizeName = fmt.Sprintf("%v.rebalancing.min_file_size", cmdPrefix)
	}

	var flagRebalancingMinFileSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingMinFileSizeName, flagRebalancingMinFileSizeDefault, flagRebalancingMinFileSizeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingMinThresholdParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingMinThresholdDescription := `Filter by rebalancing.min_threshold`

	var flagRebalancingMinThresholdName string
	if cmdPrefix == "" {
		flagRebalancingMinThresholdName = "rebalancing.min_threshold"
	} else {
		flagRebalancingMinThresholdName = fmt.Sprintf("%v.rebalancing.min_threshold", cmdPrefix)
	}

	var flagRebalancingMinThresholdDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingMinThresholdName, flagRebalancingMinThresholdDefault, flagRebalancingMinThresholdDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingNoticesArgumentsCodeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingNoticesArgumentsCodeDescription := `Filter by rebalancing.notices.arguments.code`

	var flagRebalancingNoticesArgumentsCodeName string
	if cmdPrefix == "" {
		flagRebalancingNoticesArgumentsCodeName = "rebalancing.notices.arguments.code"
	} else {
		flagRebalancingNoticesArgumentsCodeName = fmt.Sprintf("%v.rebalancing.notices.arguments.code", cmdPrefix)
	}

	var flagRebalancingNoticesArgumentsCodeDefault string

	_ = cmd.PersistentFlags().String(flagRebalancingNoticesArgumentsCodeName, flagRebalancingNoticesArgumentsCodeDefault, flagRebalancingNoticesArgumentsCodeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingNoticesArgumentsMessageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingNoticesArgumentsMessageDescription := `Filter by rebalancing.notices.arguments.message`

	var flagRebalancingNoticesArgumentsMessageName string
	if cmdPrefix == "" {
		flagRebalancingNoticesArgumentsMessageName = "rebalancing.notices.arguments.message"
	} else {
		flagRebalancingNoticesArgumentsMessageName = fmt.Sprintf("%v.rebalancing.notices.arguments.message", cmdPrefix)
	}

	var flagRebalancingNoticesArgumentsMessageDefault string

	_ = cmd.PersistentFlags().String(flagRebalancingNoticesArgumentsMessageName, flagRebalancingNoticesArgumentsMessageDefault, flagRebalancingNoticesArgumentsMessageDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingNoticesCodeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingNoticesCodeDescription := `Filter by rebalancing.notices.code`

	var flagRebalancingNoticesCodeName string
	if cmdPrefix == "" {
		flagRebalancingNoticesCodeName = "rebalancing.notices.code"
	} else {
		flagRebalancingNoticesCodeName = fmt.Sprintf("%v.rebalancing.notices.code", cmdPrefix)
	}

	var flagRebalancingNoticesCodeDefault string

	_ = cmd.PersistentFlags().String(flagRebalancingNoticesCodeName, flagRebalancingNoticesCodeDefault, flagRebalancingNoticesCodeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingNoticesMessageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingNoticesMessageDescription := `Filter by rebalancing.notices.message`

	var flagRebalancingNoticesMessageName string
	if cmdPrefix == "" {
		flagRebalancingNoticesMessageName = "rebalancing.notices.message"
	} else {
		flagRebalancingNoticesMessageName = fmt.Sprintf("%v.rebalancing.notices.message", cmdPrefix)
	}

	var flagRebalancingNoticesMessageDefault string

	_ = cmd.PersistentFlags().String(flagRebalancingNoticesMessageName, flagRebalancingNoticesMessageDefault, flagRebalancingNoticesMessageDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingRuntimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingRuntimeDescription := `Filter by rebalancing.runtime`

	var flagRebalancingRuntimeName string
	if cmdPrefix == "" {
		flagRebalancingRuntimeName = "rebalancing.runtime"
	} else {
		flagRebalancingRuntimeName = fmt.Sprintf("%v.rebalancing.runtime", cmdPrefix)
	}

	var flagRebalancingRuntimeDefault string

	_ = cmd.PersistentFlags().String(flagRebalancingRuntimeName, flagRebalancingRuntimeDefault, flagRebalancingRuntimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingStartTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingStartTimeDescription := `Filter by rebalancing.start_time`

	var flagRebalancingStartTimeName string
	if cmdPrefix == "" {
		flagRebalancingStartTimeName = "rebalancing.start_time"
	} else {
		flagRebalancingStartTimeName = fmt.Sprintf("%v.rebalancing.start_time", cmdPrefix)
	}

	var flagRebalancingStartTimeDefault string

	_ = cmd.PersistentFlags().String(flagRebalancingStartTimeName, flagRebalancingStartTimeDefault, flagRebalancingStartTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingStateDescription := `Filter by rebalancing.state`

	var flagRebalancingStateName string
	if cmdPrefix == "" {
		flagRebalancingStateName = "rebalancing.state"
	} else {
		flagRebalancingStateName = fmt.Sprintf("%v.rebalancing.state", cmdPrefix)
	}

	var flagRebalancingStateDefault string

	_ = cmd.PersistentFlags().String(flagRebalancingStateName, flagRebalancingStateDefault, flagRebalancingStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingStopTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingStopTimeDescription := `Filter by rebalancing.stop_time`

	var flagRebalancingStopTimeName string
	if cmdPrefix == "" {
		flagRebalancingStopTimeName = "rebalancing.stop_time"
	} else {
		flagRebalancingStopTimeName = fmt.Sprintf("%v.rebalancing.stop_time", cmdPrefix)
	}

	var flagRebalancingStopTimeDefault string

	_ = cmd.PersistentFlags().String(flagRebalancingStopTimeName, flagRebalancingStopTimeDefault, flagRebalancingStopTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingTargetUsedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingTargetUsedDescription := `Filter by rebalancing.target_used`

	var flagRebalancingTargetUsedName string
	if cmdPrefix == "" {
		flagRebalancingTargetUsedName = "rebalancing.target_used"
	} else {
		flagRebalancingTargetUsedName = fmt.Sprintf("%v.rebalancing.target_used", cmdPrefix)
	}

	var flagRebalancingTargetUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingTargetUsedName, flagRebalancingTargetUsedDefault, flagRebalancingTargetUsedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetRebalancingUsedForImbalanceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagRebalancingUsedForImbalanceDescription := `Filter by rebalancing.used_for_imbalance`

	var flagRebalancingUsedForImbalanceName string
	if cmdPrefix == "" {
		flagRebalancingUsedForImbalanceName = "rebalancing.used_for_imbalance"
	} else {
		flagRebalancingUsedForImbalanceName = fmt.Sprintf("%v.rebalancing.used_for_imbalance", cmdPrefix)
	}

	var flagRebalancingUsedForImbalanceDefault int64

	_ = cmd.PersistentFlags().Int64(flagRebalancingUsedForImbalanceName, flagRebalancingUsedForImbalanceDefault, flagRebalancingUsedForImbalanceDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetReturnRecordsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagReturnRecordsDescription := `The default is true for GET calls.  When set to false, only the number of records is returned.`

	var flagReturnRecordsName string
	if cmdPrefix == "" {
		flagReturnRecordsName = "return_records"
	} else {
		flagReturnRecordsName = fmt.Sprintf("%v.return_records", cmdPrefix)
	}

	var flagReturnRecordsDefault bool = true

	_ = cmd.PersistentFlags().Bool(flagReturnRecordsName, flagReturnRecordsDefault, flagReturnRecordsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetReturnTimeoutParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagReturnTimeoutDescription := `The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.`

	var flagReturnTimeoutName string
	if cmdPrefix == "" {
		flagReturnTimeoutName = "return_timeout"
	} else {
		flagReturnTimeoutName = fmt.Sprintf("%v.return_timeout", cmdPrefix)
	}

	var flagReturnTimeoutDefault int64 = 15

	_ = cmd.PersistentFlags().Int64(flagReturnTimeoutName, flagReturnTimeoutDefault, flagReturnTimeoutDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetScheduledSnapshotNamingSchemeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagScheduledSnapshotNamingSchemeDescription := `Filter by scheduled_snapshot_naming_scheme`

	var flagScheduledSnapshotNamingSchemeName string
	if cmdPrefix == "" {
		flagScheduledSnapshotNamingSchemeName = "scheduled_snapshot_naming_scheme"
	} else {
		flagScheduledSnapshotNamingSchemeName = fmt.Sprintf("%v.scheduled_snapshot_naming_scheme", cmdPrefix)
	}

	var flagScheduledSnapshotNamingSchemeDefault string

	_ = cmd.PersistentFlags().String(flagScheduledSnapshotNamingSchemeName, flagScheduledSnapshotNamingSchemeDefault, flagScheduledSnapshotNamingSchemeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSizeDescription := `Filter by size`

	var flagSizeName string
	if cmdPrefix == "" {
		flagSizeName = "size"
	} else {
		flagSizeName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var flagSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagSizeName, flagSizeDefault, flagSizeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnaplockAppendModeEnabledParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnaplockAppendModeEnabledDescription := `Filter by snaplock.append_mode_enabled`

	var flagSnaplockAppendModeEnabledName string
	if cmdPrefix == "" {
		flagSnaplockAppendModeEnabledName = "snaplock.append_mode_enabled"
	} else {
		flagSnaplockAppendModeEnabledName = fmt.Sprintf("%v.snaplock.append_mode_enabled", cmdPrefix)
	}

	var flagSnaplockAppendModeEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagSnaplockAppendModeEnabledName, flagSnaplockAppendModeEnabledDefault, flagSnaplockAppendModeEnabledDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnaplockAutocommitPeriodParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnaplockAutocommitPeriodDescription := `Filter by snaplock.autocommit_period`

	var flagSnaplockAutocommitPeriodName string
	if cmdPrefix == "" {
		flagSnaplockAutocommitPeriodName = "snaplock.autocommit_period"
	} else {
		flagSnaplockAutocommitPeriodName = fmt.Sprintf("%v.snaplock.autocommit_period", cmdPrefix)
	}

	var flagSnaplockAutocommitPeriodDefault string

	_ = cmd.PersistentFlags().String(flagSnaplockAutocommitPeriodName, flagSnaplockAutocommitPeriodDefault, flagSnaplockAutocommitPeriodDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnaplockComplianceClockTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnaplockComplianceClockTimeDescription := `Filter by snaplock.compliance_clock_time`

	var flagSnaplockComplianceClockTimeName string
	if cmdPrefix == "" {
		flagSnaplockComplianceClockTimeName = "snaplock.compliance_clock_time"
	} else {
		flagSnaplockComplianceClockTimeName = fmt.Sprintf("%v.snaplock.compliance_clock_time", cmdPrefix)
	}

	var flagSnaplockComplianceClockTimeDefault string

	_ = cmd.PersistentFlags().String(flagSnaplockComplianceClockTimeName, flagSnaplockComplianceClockTimeDefault, flagSnaplockComplianceClockTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnaplockExpiryTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnaplockExpiryTimeDescription := `Filter by snaplock.expiry_time`

	var flagSnaplockExpiryTimeName string
	if cmdPrefix == "" {
		flagSnaplockExpiryTimeName = "snaplock.expiry_time"
	} else {
		flagSnaplockExpiryTimeName = fmt.Sprintf("%v.snaplock.expiry_time", cmdPrefix)
	}

	var flagSnaplockExpiryTimeDefault string

	_ = cmd.PersistentFlags().String(flagSnaplockExpiryTimeName, flagSnaplockExpiryTimeDefault, flagSnaplockExpiryTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnaplockIsAuditLogParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnaplockIsAuditLogDescription := `Filter by snaplock.is_audit_log`

	var flagSnaplockIsAuditLogName string
	if cmdPrefix == "" {
		flagSnaplockIsAuditLogName = "snaplock.is_audit_log"
	} else {
		flagSnaplockIsAuditLogName = fmt.Sprintf("%v.snaplock.is_audit_log", cmdPrefix)
	}

	var flagSnaplockIsAuditLogDefault bool

	_ = cmd.PersistentFlags().Bool(flagSnaplockIsAuditLogName, flagSnaplockIsAuditLogDefault, flagSnaplockIsAuditLogDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnaplockLitigationCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnaplockLitigationCountDescription := `Filter by snaplock.litigation_count`

	var flagSnaplockLitigationCountName string
	if cmdPrefix == "" {
		flagSnaplockLitigationCountName = "snaplock.litigation_count"
	} else {
		flagSnaplockLitigationCountName = fmt.Sprintf("%v.snaplock.litigation_count", cmdPrefix)
	}

	var flagSnaplockLitigationCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagSnaplockLitigationCountName, flagSnaplockLitigationCountDefault, flagSnaplockLitigationCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnaplockPrivilegedDeleteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnaplockPrivilegedDeleteDescription := `Filter by snaplock.privileged_delete`

	var flagSnaplockPrivilegedDeleteName string
	if cmdPrefix == "" {
		flagSnaplockPrivilegedDeleteName = "snaplock.privileged_delete"
	} else {
		flagSnaplockPrivilegedDeleteName = fmt.Sprintf("%v.snaplock.privileged_delete", cmdPrefix)
	}

	var flagSnaplockPrivilegedDeleteDefault string

	_ = cmd.PersistentFlags().String(flagSnaplockPrivilegedDeleteName, flagSnaplockPrivilegedDeleteDefault, flagSnaplockPrivilegedDeleteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnaplockRetentionDefaultParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnaplockRetentionDefaultDescription := `Filter by snaplock.retention.default`

	var flagSnaplockRetentionDefaultName string
	if cmdPrefix == "" {
		flagSnaplockRetentionDefaultName = "snaplock.retention.default"
	} else {
		flagSnaplockRetentionDefaultName = fmt.Sprintf("%v.snaplock.retention.default", cmdPrefix)
	}

	var flagSnaplockRetentionDefaultDefault string

	_ = cmd.PersistentFlags().String(flagSnaplockRetentionDefaultName, flagSnaplockRetentionDefaultDefault, flagSnaplockRetentionDefaultDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnaplockRetentionMaximumParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnaplockRetentionMaximumDescription := `Filter by snaplock.retention.maximum`

	var flagSnaplockRetentionMaximumName string
	if cmdPrefix == "" {
		flagSnaplockRetentionMaximumName = "snaplock.retention.maximum"
	} else {
		flagSnaplockRetentionMaximumName = fmt.Sprintf("%v.snaplock.retention.maximum", cmdPrefix)
	}

	var flagSnaplockRetentionMaximumDefault string

	_ = cmd.PersistentFlags().String(flagSnaplockRetentionMaximumName, flagSnaplockRetentionMaximumDefault, flagSnaplockRetentionMaximumDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnaplockRetentionMinimumParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnaplockRetentionMinimumDescription := `Filter by snaplock.retention.minimum`

	var flagSnaplockRetentionMinimumName string
	if cmdPrefix == "" {
		flagSnaplockRetentionMinimumName = "snaplock.retention.minimum"
	} else {
		flagSnaplockRetentionMinimumName = fmt.Sprintf("%v.snaplock.retention.minimum", cmdPrefix)
	}

	var flagSnaplockRetentionMinimumDefault string

	_ = cmd.PersistentFlags().String(flagSnaplockRetentionMinimumName, flagSnaplockRetentionMinimumDefault, flagSnaplockRetentionMinimumDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnaplockTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnaplockTypeDescription := `Filter by snaplock.type`

	var flagSnaplockTypeName string
	if cmdPrefix == "" {
		flagSnaplockTypeName = "snaplock.type"
	} else {
		flagSnaplockTypeName = fmt.Sprintf("%v.snaplock.type", cmdPrefix)
	}

	var flagSnaplockTypeDefault string

	_ = cmd.PersistentFlags().String(flagSnaplockTypeName, flagSnaplockTypeDefault, flagSnaplockTypeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnaplockUnspecifiedRetentionFileCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnaplockUnspecifiedRetentionFileCountDescription := `Filter by snaplock.unspecified_retention_file_count`

	var flagSnaplockUnspecifiedRetentionFileCountName string
	if cmdPrefix == "" {
		flagSnaplockUnspecifiedRetentionFileCountName = "snaplock.unspecified_retention_file_count"
	} else {
		flagSnaplockUnspecifiedRetentionFileCountName = fmt.Sprintf("%v.snaplock.unspecified_retention_file_count", cmdPrefix)
	}

	var flagSnaplockUnspecifiedRetentionFileCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagSnaplockUnspecifiedRetentionFileCountName, flagSnaplockUnspecifiedRetentionFileCountDefault, flagSnaplockUnspecifiedRetentionFileCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnapmirrorDestinationsIsCloudParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnapmirrorDestinationsIsCloudDescription := `Filter by snapmirror.destinations.is_cloud`

	var flagSnapmirrorDestinationsIsCloudName string
	if cmdPrefix == "" {
		flagSnapmirrorDestinationsIsCloudName = "snapmirror.destinations.is_cloud"
	} else {
		flagSnapmirrorDestinationsIsCloudName = fmt.Sprintf("%v.snapmirror.destinations.is_cloud", cmdPrefix)
	}

	var flagSnapmirrorDestinationsIsCloudDefault bool

	_ = cmd.PersistentFlags().Bool(flagSnapmirrorDestinationsIsCloudName, flagSnapmirrorDestinationsIsCloudDefault, flagSnapmirrorDestinationsIsCloudDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnapmirrorDestinationsIsOntapParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnapmirrorDestinationsIsOntapDescription := `Filter by snapmirror.destinations.is_ontap`

	var flagSnapmirrorDestinationsIsOntapName string
	if cmdPrefix == "" {
		flagSnapmirrorDestinationsIsOntapName = "snapmirror.destinations.is_ontap"
	} else {
		flagSnapmirrorDestinationsIsOntapName = fmt.Sprintf("%v.snapmirror.destinations.is_ontap", cmdPrefix)
	}

	var flagSnapmirrorDestinationsIsOntapDefault bool

	_ = cmd.PersistentFlags().Bool(flagSnapmirrorDestinationsIsOntapName, flagSnapmirrorDestinationsIsOntapDefault, flagSnapmirrorDestinationsIsOntapDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnapmirrorIsProtectedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnapmirrorIsProtectedDescription := `Filter by snapmirror.is_protected`

	var flagSnapmirrorIsProtectedName string
	if cmdPrefix == "" {
		flagSnapmirrorIsProtectedName = "snapmirror.is_protected"
	} else {
		flagSnapmirrorIsProtectedName = fmt.Sprintf("%v.snapmirror.is_protected", cmdPrefix)
	}

	var flagSnapmirrorIsProtectedDefault bool

	_ = cmd.PersistentFlags().Bool(flagSnapmirrorIsProtectedName, flagSnapmirrorIsProtectedDefault, flagSnapmirrorIsProtectedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnapshotCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnapshotCountDescription := `Filter by snapshot_count`

	var flagSnapshotCountName string
	if cmdPrefix == "" {
		flagSnapshotCountName = "snapshot_count"
	} else {
		flagSnapshotCountName = fmt.Sprintf("%v.snapshot_count", cmdPrefix)
	}

	var flagSnapshotCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagSnapshotCountName, flagSnapshotCountDefault, flagSnapshotCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnapshotDirectoryAccessEnabledParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnapshotDirectoryAccessEnabledDescription := `Filter by snapshot_directory_access_enabled`

	var flagSnapshotDirectoryAccessEnabledName string
	if cmdPrefix == "" {
		flagSnapshotDirectoryAccessEnabledName = "snapshot_directory_access_enabled"
	} else {
		flagSnapshotDirectoryAccessEnabledName = fmt.Sprintf("%v.snapshot_directory_access_enabled", cmdPrefix)
	}

	var flagSnapshotDirectoryAccessEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagSnapshotDirectoryAccessEnabledName, flagSnapshotDirectoryAccessEnabledDefault, flagSnapshotDirectoryAccessEnabledDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnapshotLockingEnabledParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnapshotLockingEnabledDescription := `Filter by snapshot_locking_enabled`

	var flagSnapshotLockingEnabledName string
	if cmdPrefix == "" {
		flagSnapshotLockingEnabledName = "snapshot_locking_enabled"
	} else {
		flagSnapshotLockingEnabledName = fmt.Sprintf("%v.snapshot_locking_enabled", cmdPrefix)
	}

	var flagSnapshotLockingEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagSnapshotLockingEnabledName, flagSnapshotLockingEnabledDefault, flagSnapshotLockingEnabledDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnapshotPolicyNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnapshotPolicyNameDescription := `Filter by snapshot_policy.name`

	var flagSnapshotPolicyNameName string
	if cmdPrefix == "" {
		flagSnapshotPolicyNameName = "snapshot_policy.name"
	} else {
		flagSnapshotPolicyNameName = fmt.Sprintf("%v.snapshot_policy.name", cmdPrefix)
	}

	var flagSnapshotPolicyNameDefault string

	_ = cmd.PersistentFlags().String(flagSnapshotPolicyNameName, flagSnapshotPolicyNameDefault, flagSnapshotPolicyNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSnapshotPolicyUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSnapshotPolicyUUIDDescription := `Filter by snapshot_policy.uuid`

	var flagSnapshotPolicyUUIDName string
	if cmdPrefix == "" {
		flagSnapshotPolicyUUIDName = "snapshot_policy.uuid"
	} else {
		flagSnapshotPolicyUUIDName = fmt.Sprintf("%v.snapshot_policy.uuid", cmdPrefix)
	}

	var flagSnapshotPolicyUUIDDefault string

	_ = cmd.PersistentFlags().String(flagSnapshotPolicyUUIDName, flagSnapshotPolicyUUIDDefault, flagSnapshotPolicyUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceAfsTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceAfsTotalDescription := `Filter by space.afs_total`

	var flagSpaceAfsTotalName string
	if cmdPrefix == "" {
		flagSpaceAfsTotalName = "space.afs_total"
	} else {
		flagSpaceAfsTotalName = fmt.Sprintf("%v.space.afs_total", cmdPrefix)
	}

	var flagSpaceAfsTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceAfsTotalName, flagSpaceAfsTotalDefault, flagSpaceAfsTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceAutoAdaptiveCompressionFootprintDataReductionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceAutoAdaptiveCompressionFootprintDataReductionDescription := `Filter by space.auto_adaptive_compression_footprint_data_reduction`

	var flagSpaceAutoAdaptiveCompressionFootprintDataReductionName string
	if cmdPrefix == "" {
		flagSpaceAutoAdaptiveCompressionFootprintDataReductionName = "space.auto_adaptive_compression_footprint_data_reduction"
	} else {
		flagSpaceAutoAdaptiveCompressionFootprintDataReductionName = fmt.Sprintf("%v.space.auto_adaptive_compression_footprint_data_reduction", cmdPrefix)
	}

	var flagSpaceAutoAdaptiveCompressionFootprintDataReductionDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceAutoAdaptiveCompressionFootprintDataReductionName, flagSpaceAutoAdaptiveCompressionFootprintDataReductionDefault, flagSpaceAutoAdaptiveCompressionFootprintDataReductionDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceAvailableParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceAvailableDescription := `Filter by space.available`

	var flagSpaceAvailableName string
	if cmdPrefix == "" {
		flagSpaceAvailableName = "space.available"
	} else {
		flagSpaceAvailableName = fmt.Sprintf("%v.space.available", cmdPrefix)
	}

	var flagSpaceAvailableDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceAvailableName, flagSpaceAvailableDefault, flagSpaceAvailableDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceAvailablePercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceAvailablePercentDescription := `Filter by space.available_percent`

	var flagSpaceAvailablePercentName string
	if cmdPrefix == "" {
		flagSpaceAvailablePercentName = "space.available_percent"
	} else {
		flagSpaceAvailablePercentName = fmt.Sprintf("%v.space.available_percent", cmdPrefix)
	}

	var flagSpaceAvailablePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceAvailablePercentName, flagSpaceAvailablePercentDefault, flagSpaceAvailablePercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceBlockStorageInactiveUserDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceBlockStorageInactiveUserDataDescription := `Filter by space.block_storage_inactive_user_data`

	var flagSpaceBlockStorageInactiveUserDataName string
	if cmdPrefix == "" {
		flagSpaceBlockStorageInactiveUserDataName = "space.block_storage_inactive_user_data"
	} else {
		flagSpaceBlockStorageInactiveUserDataName = fmt.Sprintf("%v.space.block_storage_inactive_user_data", cmdPrefix)
	}

	var flagSpaceBlockStorageInactiveUserDataDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceBlockStorageInactiveUserDataName, flagSpaceBlockStorageInactiveUserDataDefault, flagSpaceBlockStorageInactiveUserDataDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceBlockStorageInactiveUserDataPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceBlockStorageInactiveUserDataPercentDescription := `Filter by space.block_storage_inactive_user_data_percent`

	var flagSpaceBlockStorageInactiveUserDataPercentName string
	if cmdPrefix == "" {
		flagSpaceBlockStorageInactiveUserDataPercentName = "space.block_storage_inactive_user_data_percent"
	} else {
		flagSpaceBlockStorageInactiveUserDataPercentName = fmt.Sprintf("%v.space.block_storage_inactive_user_data_percent", cmdPrefix)
	}

	var flagSpaceBlockStorageInactiveUserDataPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceBlockStorageInactiveUserDataPercentName, flagSpaceBlockStorageInactiveUserDataPercentDefault, flagSpaceBlockStorageInactiveUserDataPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceCapacityTierFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceCapacityTierFootprintDescription := `Filter by space.capacity_tier_footprint`

	var flagSpaceCapacityTierFootprintName string
	if cmdPrefix == "" {
		flagSpaceCapacityTierFootprintName = "space.capacity_tier_footprint"
	} else {
		flagSpaceCapacityTierFootprintName = fmt.Sprintf("%v.space.capacity_tier_footprint", cmdPrefix)
	}

	var flagSpaceCapacityTierFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceCapacityTierFootprintName, flagSpaceCapacityTierFootprintDefault, flagSpaceCapacityTierFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceCapacityTierFootprintDataReductionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceCapacityTierFootprintDataReductionDescription := `Filter by space.capacity_tier_footprint_data_reduction`

	var flagSpaceCapacityTierFootprintDataReductionName string
	if cmdPrefix == "" {
		flagSpaceCapacityTierFootprintDataReductionName = "space.capacity_tier_footprint_data_reduction"
	} else {
		flagSpaceCapacityTierFootprintDataReductionName = fmt.Sprintf("%v.space.capacity_tier_footprint_data_reduction", cmdPrefix)
	}

	var flagSpaceCapacityTierFootprintDataReductionDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceCapacityTierFootprintDataReductionName, flagSpaceCapacityTierFootprintDataReductionDefault, flagSpaceCapacityTierFootprintDataReductionDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceCompactionFootprintDataReductionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceCompactionFootprintDataReductionDescription := `Filter by space.compaction_footprint_data_reduction`

	var flagSpaceCompactionFootprintDataReductionName string
	if cmdPrefix == "" {
		flagSpaceCompactionFootprintDataReductionName = "space.compaction_footprint_data_reduction"
	} else {
		flagSpaceCompactionFootprintDataReductionName = fmt.Sprintf("%v.space.compaction_footprint_data_reduction", cmdPrefix)
	}

	var flagSpaceCompactionFootprintDataReductionDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceCompactionFootprintDataReductionName, flagSpaceCompactionFootprintDataReductionDefault, flagSpaceCompactionFootprintDataReductionDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceCrossVolumeDedupeMetafilesFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceCrossVolumeDedupeMetafilesFootprintDescription := `Filter by space.cross_volume_dedupe_metafiles_footprint`

	var flagSpaceCrossVolumeDedupeMetafilesFootprintName string
	if cmdPrefix == "" {
		flagSpaceCrossVolumeDedupeMetafilesFootprintName = "space.cross_volume_dedupe_metafiles_footprint"
	} else {
		flagSpaceCrossVolumeDedupeMetafilesFootprintName = fmt.Sprintf("%v.space.cross_volume_dedupe_metafiles_footprint", cmdPrefix)
	}

	var flagSpaceCrossVolumeDedupeMetafilesFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceCrossVolumeDedupeMetafilesFootprintName, flagSpaceCrossVolumeDedupeMetafilesFootprintDefault, flagSpaceCrossVolumeDedupeMetafilesFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceCrossVolumeDedupeMetafilesTemporaryFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintDescription := `Filter by space.cross_volume_dedupe_metafiles_temporary_footprint`

	var flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintName string
	if cmdPrefix == "" {
		flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintName = "space.cross_volume_dedupe_metafiles_temporary_footprint"
	} else {
		flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintName = fmt.Sprintf("%v.space.cross_volume_dedupe_metafiles_temporary_footprint", cmdPrefix)
	}

	var flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintName, flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintDefault, flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceDedupeMetafilesFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceDedupeMetafilesFootprintDescription := `Filter by space.dedupe_metafiles_footprint`

	var flagSpaceDedupeMetafilesFootprintName string
	if cmdPrefix == "" {
		flagSpaceDedupeMetafilesFootprintName = "space.dedupe_metafiles_footprint"
	} else {
		flagSpaceDedupeMetafilesFootprintName = fmt.Sprintf("%v.space.dedupe_metafiles_footprint", cmdPrefix)
	}

	var flagSpaceDedupeMetafilesFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceDedupeMetafilesFootprintName, flagSpaceDedupeMetafilesFootprintDefault, flagSpaceDedupeMetafilesFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceDedupeMetafilesTemporaryFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceDedupeMetafilesTemporaryFootprintDescription := `Filter by space.dedupe_metafiles_temporary_footprint`

	var flagSpaceDedupeMetafilesTemporaryFootprintName string
	if cmdPrefix == "" {
		flagSpaceDedupeMetafilesTemporaryFootprintName = "space.dedupe_metafiles_temporary_footprint"
	} else {
		flagSpaceDedupeMetafilesTemporaryFootprintName = fmt.Sprintf("%v.space.dedupe_metafiles_temporary_footprint", cmdPrefix)
	}

	var flagSpaceDedupeMetafilesTemporaryFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceDedupeMetafilesTemporaryFootprintName, flagSpaceDedupeMetafilesTemporaryFootprintDefault, flagSpaceDedupeMetafilesTemporaryFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceDelayedFreeFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceDelayedFreeFootprintDescription := `Filter by space.delayed_free_footprint`

	var flagSpaceDelayedFreeFootprintName string
	if cmdPrefix == "" {
		flagSpaceDelayedFreeFootprintName = "space.delayed_free_footprint"
	} else {
		flagSpaceDelayedFreeFootprintName = fmt.Sprintf("%v.space.delayed_free_footprint", cmdPrefix)
	}

	var flagSpaceDelayedFreeFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceDelayedFreeFootprintName, flagSpaceDelayedFreeFootprintDefault, flagSpaceDelayedFreeFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceEffectiveTotalFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceEffectiveTotalFootprintDescription := `Filter by space.effective_total_footprint`

	var flagSpaceEffectiveTotalFootprintName string
	if cmdPrefix == "" {
		flagSpaceEffectiveTotalFootprintName = "space.effective_total_footprint"
	} else {
		flagSpaceEffectiveTotalFootprintName = fmt.Sprintf("%v.space.effective_total_footprint", cmdPrefix)
	}

	var flagSpaceEffectiveTotalFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceEffectiveTotalFootprintName, flagSpaceEffectiveTotalFootprintDefault, flagSpaceEffectiveTotalFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceExpectedAvailableParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceExpectedAvailableDescription := `Filter by space.expected_available`

	var flagSpaceExpectedAvailableName string
	if cmdPrefix == "" {
		flagSpaceExpectedAvailableName = "space.expected_available"
	} else {
		flagSpaceExpectedAvailableName = fmt.Sprintf("%v.space.expected_available", cmdPrefix)
	}

	var flagSpaceExpectedAvailableDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceExpectedAvailableName, flagSpaceExpectedAvailableDefault, flagSpaceExpectedAvailableDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceFileOperationMetadataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceFileOperationMetadataDescription := `Filter by space.file_operation_metadata`

	var flagSpaceFileOperationMetadataName string
	if cmdPrefix == "" {
		flagSpaceFileOperationMetadataName = "space.file_operation_metadata"
	} else {
		flagSpaceFileOperationMetadataName = fmt.Sprintf("%v.space.file_operation_metadata", cmdPrefix)
	}

	var flagSpaceFileOperationMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceFileOperationMetadataName, flagSpaceFileOperationMetadataDefault, flagSpaceFileOperationMetadataDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceFilesystemSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceFilesystemSizeDescription := `Filter by space.filesystem_size`

	var flagSpaceFilesystemSizeName string
	if cmdPrefix == "" {
		flagSpaceFilesystemSizeName = "space.filesystem_size"
	} else {
		flagSpaceFilesystemSizeName = fmt.Sprintf("%v.space.filesystem_size", cmdPrefix)
	}

	var flagSpaceFilesystemSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceFilesystemSizeName, flagSpaceFilesystemSizeDefault, flagSpaceFilesystemSizeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceFilesystemSizeFixedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceFilesystemSizeFixedDescription := `Filter by space.filesystem_size_fixed`

	var flagSpaceFilesystemSizeFixedName string
	if cmdPrefix == "" {
		flagSpaceFilesystemSizeFixedName = "space.filesystem_size_fixed"
	} else {
		flagSpaceFilesystemSizeFixedName = fmt.Sprintf("%v.space.filesystem_size_fixed", cmdPrefix)
	}

	var flagSpaceFilesystemSizeFixedDefault bool

	_ = cmd.PersistentFlags().Bool(flagSpaceFilesystemSizeFixedName, flagSpaceFilesystemSizeFixedDefault, flagSpaceFilesystemSizeFixedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceFootprintDescription := `Filter by space.footprint`

	var flagSpaceFootprintName string
	if cmdPrefix == "" {
		flagSpaceFootprintName = "space.footprint"
	} else {
		flagSpaceFootprintName = fmt.Sprintf("%v.space.footprint", cmdPrefix)
	}

	var flagSpaceFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceFootprintName, flagSpaceFootprintDefault, flagSpaceFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceFractionalReserveParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceFractionalReserveDescription := `Filter by space.fractional_reserve`

	var flagSpaceFractionalReserveName string
	if cmdPrefix == "" {
		flagSpaceFractionalReserveName = "space.fractional_reserve"
	} else {
		flagSpaceFractionalReserveName = fmt.Sprintf("%v.space.fractional_reserve", cmdPrefix)
	}

	var flagSpaceFractionalReserveDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceFractionalReserveName, flagSpaceFractionalReserveDefault, flagSpaceFractionalReserveDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceFullThresholdPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceFullThresholdPercentDescription := `Filter by space.full_threshold_percent`

	var flagSpaceFullThresholdPercentName string
	if cmdPrefix == "" {
		flagSpaceFullThresholdPercentName = "space.full_threshold_percent"
	} else {
		flagSpaceFullThresholdPercentName = fmt.Sprintf("%v.space.full_threshold_percent", cmdPrefix)
	}

	var flagSpaceFullThresholdPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceFullThresholdPercentName, flagSpaceFullThresholdPercentDefault, flagSpaceFullThresholdPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceIsUsedStaleParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceIsUsedStaleDescription := `Filter by space.is_used_stale`

	var flagSpaceIsUsedStaleName string
	if cmdPrefix == "" {
		flagSpaceIsUsedStaleName = "space.is_used_stale"
	} else {
		flagSpaceIsUsedStaleName = fmt.Sprintf("%v.space.is_used_stale", cmdPrefix)
	}

	var flagSpaceIsUsedStaleDefault bool

	_ = cmd.PersistentFlags().Bool(flagSpaceIsUsedStaleName, flagSpaceIsUsedStaleDefault, flagSpaceIsUsedStaleDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceLargeSizeEnabledParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceLargeSizeEnabledDescription := `Filter by space.large_size_enabled`

	var flagSpaceLargeSizeEnabledName string
	if cmdPrefix == "" {
		flagSpaceLargeSizeEnabledName = "space.large_size_enabled"
	} else {
		flagSpaceLargeSizeEnabledName = fmt.Sprintf("%v.space.large_size_enabled", cmdPrefix)
	}

	var flagSpaceLargeSizeEnabledDefault bool

	_ = cmd.PersistentFlags().Bool(flagSpaceLargeSizeEnabledName, flagSpaceLargeSizeEnabledDefault, flagSpaceLargeSizeEnabledDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceLocalTierFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceLocalTierFootprintDescription := `Filter by space.local_tier_footprint`

	var flagSpaceLocalTierFootprintName string
	if cmdPrefix == "" {
		flagSpaceLocalTierFootprintName = "space.local_tier_footprint"
	} else {
		flagSpaceLocalTierFootprintName = fmt.Sprintf("%v.space.local_tier_footprint", cmdPrefix)
	}

	var flagSpaceLocalTierFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceLocalTierFootprintName, flagSpaceLocalTierFootprintDefault, flagSpaceLocalTierFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceAvailableParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceLogicalSpaceAvailableDescription := `Filter by space.logical_space.available`

	var flagSpaceLogicalSpaceAvailableName string
	if cmdPrefix == "" {
		flagSpaceLogicalSpaceAvailableName = "space.logical_space.available"
	} else {
		flagSpaceLogicalSpaceAvailableName = fmt.Sprintf("%v.space.logical_space.available", cmdPrefix)
	}

	var flagSpaceLogicalSpaceAvailableDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceLogicalSpaceAvailableName, flagSpaceLogicalSpaceAvailableDefault, flagSpaceLogicalSpaceAvailableDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceEnforcementParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceLogicalSpaceEnforcementDescription := `Filter by space.logical_space.enforcement`

	var flagSpaceLogicalSpaceEnforcementName string
	if cmdPrefix == "" {
		flagSpaceLogicalSpaceEnforcementName = "space.logical_space.enforcement"
	} else {
		flagSpaceLogicalSpaceEnforcementName = fmt.Sprintf("%v.space.logical_space.enforcement", cmdPrefix)
	}

	var flagSpaceLogicalSpaceEnforcementDefault bool

	_ = cmd.PersistentFlags().Bool(flagSpaceLogicalSpaceEnforcementName, flagSpaceLogicalSpaceEnforcementDefault, flagSpaceLogicalSpaceEnforcementDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceReportingParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceLogicalSpaceReportingDescription := `Filter by space.logical_space.reporting`

	var flagSpaceLogicalSpaceReportingName string
	if cmdPrefix == "" {
		flagSpaceLogicalSpaceReportingName = "space.logical_space.reporting"
	} else {
		flagSpaceLogicalSpaceReportingName = fmt.Sprintf("%v.space.logical_space.reporting", cmdPrefix)
	}

	var flagSpaceLogicalSpaceReportingDefault bool

	_ = cmd.PersistentFlags().Bool(flagSpaceLogicalSpaceReportingName, flagSpaceLogicalSpaceReportingDefault, flagSpaceLogicalSpaceReportingDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceLogicalSpaceUsedDescription := `Filter by space.logical_space.used`

	var flagSpaceLogicalSpaceUsedName string
	if cmdPrefix == "" {
		flagSpaceLogicalSpaceUsedName = "space.logical_space.used"
	} else {
		flagSpaceLogicalSpaceUsedName = fmt.Sprintf("%v.space.logical_space.used", cmdPrefix)
	}

	var flagSpaceLogicalSpaceUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceLogicalSpaceUsedName, flagSpaceLogicalSpaceUsedDefault, flagSpaceLogicalSpaceUsedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedByAfsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceLogicalSpaceUsedByAfsDescription := `Filter by space.logical_space.used_by_afs`

	var flagSpaceLogicalSpaceUsedByAfsName string
	if cmdPrefix == "" {
		flagSpaceLogicalSpaceUsedByAfsName = "space.logical_space.used_by_afs"
	} else {
		flagSpaceLogicalSpaceUsedByAfsName = fmt.Sprintf("%v.space.logical_space.used_by_afs", cmdPrefix)
	}

	var flagSpaceLogicalSpaceUsedByAfsDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceLogicalSpaceUsedByAfsName, flagSpaceLogicalSpaceUsedByAfsDefault, flagSpaceLogicalSpaceUsedByAfsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedBySnapshotsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceLogicalSpaceUsedBySnapshotsDescription := `Filter by space.logical_space.used_by_snapshots`

	var flagSpaceLogicalSpaceUsedBySnapshotsName string
	if cmdPrefix == "" {
		flagSpaceLogicalSpaceUsedBySnapshotsName = "space.logical_space.used_by_snapshots"
	} else {
		flagSpaceLogicalSpaceUsedBySnapshotsName = fmt.Sprintf("%v.space.logical_space.used_by_snapshots", cmdPrefix)
	}

	var flagSpaceLogicalSpaceUsedBySnapshotsDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceLogicalSpaceUsedBySnapshotsName, flagSpaceLogicalSpaceUsedBySnapshotsDefault, flagSpaceLogicalSpaceUsedBySnapshotsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceLogicalSpaceUsedPercentDescription := `Filter by space.logical_space.used_percent`

	var flagSpaceLogicalSpaceUsedPercentName string
	if cmdPrefix == "" {
		flagSpaceLogicalSpaceUsedPercentName = "space.logical_space.used_percent"
	} else {
		flagSpaceLogicalSpaceUsedPercentName = fmt.Sprintf("%v.space.logical_space.used_percent", cmdPrefix)
	}

	var flagSpaceLogicalSpaceUsedPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceLogicalSpaceUsedPercentName, flagSpaceLogicalSpaceUsedPercentDefault, flagSpaceLogicalSpaceUsedPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceMaxSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceMaxSizeDescription := `Filter by space.max_size`

	var flagSpaceMaxSizeName string
	if cmdPrefix == "" {
		flagSpaceMaxSizeName = "space.max_size"
	} else {
		flagSpaceMaxSizeName = fmt.Sprintf("%v.space.max_size", cmdPrefix)
	}

	var flagSpaceMaxSizeDefault string

	_ = cmd.PersistentFlags().String(flagSpaceMaxSizeName, flagSpaceMaxSizeDefault, flagSpaceMaxSizeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceMetadataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceMetadataDescription := `Filter by space.metadata`

	var flagSpaceMetadataName string
	if cmdPrefix == "" {
		flagSpaceMetadataName = "space.metadata"
	} else {
		flagSpaceMetadataName = fmt.Sprintf("%v.space.metadata", cmdPrefix)
	}

	var flagSpaceMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceMetadataName, flagSpaceMetadataDefault, flagSpaceMetadataDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceNearlyFullThresholdPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceNearlyFullThresholdPercentDescription := `Filter by space.nearly_full_threshold_percent`

	var flagSpaceNearlyFullThresholdPercentName string
	if cmdPrefix == "" {
		flagSpaceNearlyFullThresholdPercentName = "space.nearly_full_threshold_percent"
	} else {
		flagSpaceNearlyFullThresholdPercentName = fmt.Sprintf("%v.space.nearly_full_threshold_percent", cmdPrefix)
	}

	var flagSpaceNearlyFullThresholdPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceNearlyFullThresholdPercentName, flagSpaceNearlyFullThresholdPercentDefault, flagSpaceNearlyFullThresholdPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceOverProvisionedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceOverProvisionedDescription := `Filter by space.over_provisioned`

	var flagSpaceOverProvisionedName string
	if cmdPrefix == "" {
		flagSpaceOverProvisionedName = "space.over_provisioned"
	} else {
		flagSpaceOverProvisionedName = fmt.Sprintf("%v.space.over_provisioned", cmdPrefix)
	}

	var flagSpaceOverProvisionedDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceOverProvisionedName, flagSpaceOverProvisionedDefault, flagSpaceOverProvisionedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceOverwriteReserveParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceOverwriteReserveDescription := `Filter by space.overwrite_reserve`

	var flagSpaceOverwriteReserveName string
	if cmdPrefix == "" {
		flagSpaceOverwriteReserveName = "space.overwrite_reserve"
	} else {
		flagSpaceOverwriteReserveName = fmt.Sprintf("%v.space.overwrite_reserve", cmdPrefix)
	}

	var flagSpaceOverwriteReserveDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceOverwriteReserveName, flagSpaceOverwriteReserveDefault, flagSpaceOverwriteReserveDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceOverwriteReserveUsedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceOverwriteReserveUsedDescription := `Filter by space.overwrite_reserve_used`

	var flagSpaceOverwriteReserveUsedName string
	if cmdPrefix == "" {
		flagSpaceOverwriteReserveUsedName = "space.overwrite_reserve_used"
	} else {
		flagSpaceOverwriteReserveUsedName = fmt.Sprintf("%v.space.overwrite_reserve_used", cmdPrefix)
	}

	var flagSpaceOverwriteReserveUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceOverwriteReserveUsedName, flagSpaceOverwriteReserveUsedDefault, flagSpaceOverwriteReserveUsedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpacePercentUsedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpacePercentUsedDescription := `Filter by space.percent_used`

	var flagSpacePercentUsedName string
	if cmdPrefix == "" {
		flagSpacePercentUsedName = "space.percent_used"
	} else {
		flagSpacePercentUsedName = fmt.Sprintf("%v.space.percent_used", cmdPrefix)
	}

	var flagSpacePercentUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpacePercentUsedName, flagSpacePercentUsedDefault, flagSpacePercentUsedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpacePerformanceTierFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpacePerformanceTierFootprintDescription := `Filter by space.performance_tier_footprint`

	var flagSpacePerformanceTierFootprintName string
	if cmdPrefix == "" {
		flagSpacePerformanceTierFootprintName = "space.performance_tier_footprint"
	} else {
		flagSpacePerformanceTierFootprintName = fmt.Sprintf("%v.space.performance_tier_footprint", cmdPrefix)
	}

	var flagSpacePerformanceTierFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpacePerformanceTierFootprintName, flagSpacePerformanceTierFootprintDefault, flagSpacePerformanceTierFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpacePhysicalUsedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpacePhysicalUsedDescription := `Filter by space.physical_used`

	var flagSpacePhysicalUsedName string
	if cmdPrefix == "" {
		flagSpacePhysicalUsedName = "space.physical_used"
	} else {
		flagSpacePhysicalUsedName = fmt.Sprintf("%v.space.physical_used", cmdPrefix)
	}

	var flagSpacePhysicalUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpacePhysicalUsedName, flagSpacePhysicalUsedDefault, flagSpacePhysicalUsedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpacePhysicalUsedPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpacePhysicalUsedPercentDescription := `Filter by space.physical_used_percent`

	var flagSpacePhysicalUsedPercentName string
	if cmdPrefix == "" {
		flagSpacePhysicalUsedPercentName = "space.physical_used_percent"
	} else {
		flagSpacePhysicalUsedPercentName = fmt.Sprintf("%v.space.physical_used_percent", cmdPrefix)
	}

	var flagSpacePhysicalUsedPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpacePhysicalUsedPercentName, flagSpacePhysicalUsedPercentDefault, flagSpacePhysicalUsedPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSizeDescription := `Filter by space.size`

	var flagSpaceSizeName string
	if cmdPrefix == "" {
		flagSpaceSizeName = "space.size"
	} else {
		flagSpaceSizeName = fmt.Sprintf("%v.space.size", cmdPrefix)
	}

	var flagSpaceSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceSizeName, flagSpaceSizeDefault, flagSpaceSizeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSizeAvailableForSnapshotsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSizeAvailableForSnapshotsDescription := `Filter by space.size_available_for_snapshots`

	var flagSpaceSizeAvailableForSnapshotsName string
	if cmdPrefix == "" {
		flagSpaceSizeAvailableForSnapshotsName = "space.size_available_for_snapshots"
	} else {
		flagSpaceSizeAvailableForSnapshotsName = fmt.Sprintf("%v.space.size_available_for_snapshots", cmdPrefix)
	}

	var flagSpaceSizeAvailableForSnapshotsDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceSizeAvailableForSnapshotsName, flagSpaceSizeAvailableForSnapshotsDefault, flagSpaceSizeAvailableForSnapshotsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapmirrorDestinationFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapmirrorDestinationFootprintDescription := `Filter by space.snapmirror_destination_footprint`

	var flagSpaceSnapmirrorDestinationFootprintName string
	if cmdPrefix == "" {
		flagSpaceSnapmirrorDestinationFootprintName = "space.snapmirror_destination_footprint"
	} else {
		flagSpaceSnapmirrorDestinationFootprintName = fmt.Sprintf("%v.space.snapmirror_destination_footprint", cmdPrefix)
	}

	var flagSpaceSnapmirrorDestinationFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceSnapmirrorDestinationFootprintName, flagSpaceSnapmirrorDestinationFootprintDefault, flagSpaceSnapmirrorDestinationFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteCommitmentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotAutodeleteCommitmentDescription := `Filter by space.snapshot.autodelete.commitment`

	var flagSpaceSnapshotAutodeleteCommitmentName string
	if cmdPrefix == "" {
		flagSpaceSnapshotAutodeleteCommitmentName = "space.snapshot.autodelete.commitment"
	} else {
		flagSpaceSnapshotAutodeleteCommitmentName = fmt.Sprintf("%v.space.snapshot.autodelete.commitment", cmdPrefix)
	}

	var flagSpaceSnapshotAutodeleteCommitmentDefault string

	_ = cmd.PersistentFlags().String(flagSpaceSnapshotAutodeleteCommitmentName, flagSpaceSnapshotAutodeleteCommitmentDefault, flagSpaceSnapshotAutodeleteCommitmentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteDeferDeleteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotAutodeleteDeferDeleteDescription := `Filter by space.snapshot.autodelete.defer_delete`

	var flagSpaceSnapshotAutodeleteDeferDeleteName string
	if cmdPrefix == "" {
		flagSpaceSnapshotAutodeleteDeferDeleteName = "space.snapshot.autodelete.defer_delete"
	} else {
		flagSpaceSnapshotAutodeleteDeferDeleteName = fmt.Sprintf("%v.space.snapshot.autodelete.defer_delete", cmdPrefix)
	}

	var flagSpaceSnapshotAutodeleteDeferDeleteDefault string

	_ = cmd.PersistentFlags().String(flagSpaceSnapshotAutodeleteDeferDeleteName, flagSpaceSnapshotAutodeleteDeferDeleteDefault, flagSpaceSnapshotAutodeleteDeferDeleteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteDeleteOrderParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotAutodeleteDeleteOrderDescription := `Filter by space.snapshot.autodelete.delete_order`

	var flagSpaceSnapshotAutodeleteDeleteOrderName string
	if cmdPrefix == "" {
		flagSpaceSnapshotAutodeleteDeleteOrderName = "space.snapshot.autodelete.delete_order"
	} else {
		flagSpaceSnapshotAutodeleteDeleteOrderName = fmt.Sprintf("%v.space.snapshot.autodelete.delete_order", cmdPrefix)
	}

	var flagSpaceSnapshotAutodeleteDeleteOrderDefault string

	_ = cmd.PersistentFlags().String(flagSpaceSnapshotAutodeleteDeleteOrderName, flagSpaceSnapshotAutodeleteDeleteOrderDefault, flagSpaceSnapshotAutodeleteDeleteOrderDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotAutodeletePrefixParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotAutodeletePrefixDescription := `Filter by space.snapshot.autodelete.prefix`

	var flagSpaceSnapshotAutodeletePrefixName string
	if cmdPrefix == "" {
		flagSpaceSnapshotAutodeletePrefixName = "space.snapshot.autodelete.prefix"
	} else {
		flagSpaceSnapshotAutodeletePrefixName = fmt.Sprintf("%v.space.snapshot.autodelete.prefix", cmdPrefix)
	}

	var flagSpaceSnapshotAutodeletePrefixDefault string

	_ = cmd.PersistentFlags().String(flagSpaceSnapshotAutodeletePrefixName, flagSpaceSnapshotAutodeletePrefixDefault, flagSpaceSnapshotAutodeletePrefixDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteTargetFreeSpaceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotAutodeleteTargetFreeSpaceDescription := `Filter by space.snapshot.autodelete.target_free_space`

	var flagSpaceSnapshotAutodeleteTargetFreeSpaceName string
	if cmdPrefix == "" {
		flagSpaceSnapshotAutodeleteTargetFreeSpaceName = "space.snapshot.autodelete.target_free_space"
	} else {
		flagSpaceSnapshotAutodeleteTargetFreeSpaceName = fmt.Sprintf("%v.space.snapshot.autodelete.target_free_space", cmdPrefix)
	}

	var flagSpaceSnapshotAutodeleteTargetFreeSpaceDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceSnapshotAutodeleteTargetFreeSpaceName, flagSpaceSnapshotAutodeleteTargetFreeSpaceDefault, flagSpaceSnapshotAutodeleteTargetFreeSpaceDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteTriggerParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotAutodeleteTriggerDescription := `Filter by space.snapshot.autodelete.trigger`

	var flagSpaceSnapshotAutodeleteTriggerName string
	if cmdPrefix == "" {
		flagSpaceSnapshotAutodeleteTriggerName = "space.snapshot.autodelete.trigger"
	} else {
		flagSpaceSnapshotAutodeleteTriggerName = fmt.Sprintf("%v.space.snapshot.autodelete.trigger", cmdPrefix)
	}

	var flagSpaceSnapshotAutodeleteTriggerDefault string

	_ = cmd.PersistentFlags().String(flagSpaceSnapshotAutodeleteTriggerName, flagSpaceSnapshotAutodeleteTriggerDefault, flagSpaceSnapshotAutodeleteTriggerDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotReserveAvailableParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotReserveAvailableDescription := `Filter by space.snapshot.reserve_available`

	var flagSpaceSnapshotReserveAvailableName string
	if cmdPrefix == "" {
		flagSpaceSnapshotReserveAvailableName = "space.snapshot.reserve_available"
	} else {
		flagSpaceSnapshotReserveAvailableName = fmt.Sprintf("%v.space.snapshot.reserve_available", cmdPrefix)
	}

	var flagSpaceSnapshotReserveAvailableDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceSnapshotReserveAvailableName, flagSpaceSnapshotReserveAvailableDefault, flagSpaceSnapshotReserveAvailableDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotReservePercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotReservePercentDescription := `Filter by space.snapshot.reserve_percent`

	var flagSpaceSnapshotReservePercentName string
	if cmdPrefix == "" {
		flagSpaceSnapshotReservePercentName = "space.snapshot.reserve_percent"
	} else {
		flagSpaceSnapshotReservePercentName = fmt.Sprintf("%v.space.snapshot.reserve_percent", cmdPrefix)
	}

	var flagSpaceSnapshotReservePercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceSnapshotReservePercentName, flagSpaceSnapshotReservePercentDefault, flagSpaceSnapshotReservePercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotReserveSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotReserveSizeDescription := `Filter by space.snapshot.reserve_size`

	var flagSpaceSnapshotReserveSizeName string
	if cmdPrefix == "" {
		flagSpaceSnapshotReserveSizeName = "space.snapshot.reserve_size"
	} else {
		flagSpaceSnapshotReserveSizeName = fmt.Sprintf("%v.space.snapshot.reserve_size", cmdPrefix)
	}

	var flagSpaceSnapshotReserveSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceSnapshotReserveSizeName, flagSpaceSnapshotReserveSizeDefault, flagSpaceSnapshotReserveSizeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotSpaceUsedPercentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotSpaceUsedPercentDescription := `Filter by space.snapshot.space_used_percent`

	var flagSpaceSnapshotSpaceUsedPercentName string
	if cmdPrefix == "" {
		flagSpaceSnapshotSpaceUsedPercentName = "space.snapshot.space_used_percent"
	} else {
		flagSpaceSnapshotSpaceUsedPercentName = fmt.Sprintf("%v.space.snapshot.space_used_percent", cmdPrefix)
	}

	var flagSpaceSnapshotSpaceUsedPercentDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceSnapshotSpaceUsedPercentName, flagSpaceSnapshotSpaceUsedPercentDefault, flagSpaceSnapshotSpaceUsedPercentDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotUsedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotUsedDescription := `Filter by space.snapshot.used`

	var flagSpaceSnapshotUsedName string
	if cmdPrefix == "" {
		flagSpaceSnapshotUsedName = "space.snapshot.used"
	} else {
		flagSpaceSnapshotUsedName = fmt.Sprintf("%v.space.snapshot.used", cmdPrefix)
	}

	var flagSpaceSnapshotUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceSnapshotUsedName, flagSpaceSnapshotUsedDefault, flagSpaceSnapshotUsedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotReserveUnusableParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotReserveUnusableDescription := `Filter by space.snapshot_reserve_unusable`

	var flagSpaceSnapshotReserveUnusableName string
	if cmdPrefix == "" {
		flagSpaceSnapshotReserveUnusableName = "space.snapshot_reserve_unusable"
	} else {
		flagSpaceSnapshotReserveUnusableName = fmt.Sprintf("%v.space.snapshot_reserve_unusable", cmdPrefix)
	}

	var flagSpaceSnapshotReserveUnusableDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceSnapshotReserveUnusableName, flagSpaceSnapshotReserveUnusableDefault, flagSpaceSnapshotReserveUnusableDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceSnapshotSpillParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceSnapshotSpillDescription := `Filter by space.snapshot_spill`

	var flagSpaceSnapshotSpillName string
	if cmdPrefix == "" {
		flagSpaceSnapshotSpillName = "space.snapshot_spill"
	} else {
		flagSpaceSnapshotSpillName = fmt.Sprintf("%v.space.snapshot_spill", cmdPrefix)
	}

	var flagSpaceSnapshotSpillDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceSnapshotSpillName, flagSpaceSnapshotSpillDefault, flagSpaceSnapshotSpillDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceTotalFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceTotalFootprintDescription := `Filter by space.total_footprint`

	var flagSpaceTotalFootprintName string
	if cmdPrefix == "" {
		flagSpaceTotalFootprintName = "space.total_footprint"
	} else {
		flagSpaceTotalFootprintName = fmt.Sprintf("%v.space.total_footprint", cmdPrefix)
	}

	var flagSpaceTotalFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceTotalFootprintName, flagSpaceTotalFootprintDefault, flagSpaceTotalFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceTotalMetadataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceTotalMetadataDescription := `Filter by space.total_metadata`

	var flagSpaceTotalMetadataName string
	if cmdPrefix == "" {
		flagSpaceTotalMetadataName = "space.total_metadata"
	} else {
		flagSpaceTotalMetadataName = fmt.Sprintf("%v.space.total_metadata", cmdPrefix)
	}

	var flagSpaceTotalMetadataDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceTotalMetadataName, flagSpaceTotalMetadataDefault, flagSpaceTotalMetadataDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceTotalMetadataFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceTotalMetadataFootprintDescription := `Filter by space.total_metadata_footprint`

	var flagSpaceTotalMetadataFootprintName string
	if cmdPrefix == "" {
		flagSpaceTotalMetadataFootprintName = "space.total_metadata_footprint"
	} else {
		flagSpaceTotalMetadataFootprintName = fmt.Sprintf("%v.space.total_metadata_footprint", cmdPrefix)
	}

	var flagSpaceTotalMetadataFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceTotalMetadataFootprintName, flagSpaceTotalMetadataFootprintDefault, flagSpaceTotalMetadataFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceUsedParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceUsedDescription := `Filter by space.used`

	var flagSpaceUsedName string
	if cmdPrefix == "" {
		flagSpaceUsedName = "space.used"
	} else {
		flagSpaceUsedName = fmt.Sprintf("%v.space.used", cmdPrefix)
	}

	var flagSpaceUsedDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceUsedName, flagSpaceUsedDefault, flagSpaceUsedDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceUsedByAfsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceUsedByAfsDescription := `Filter by space.used_by_afs`

	var flagSpaceUsedByAfsName string
	if cmdPrefix == "" {
		flagSpaceUsedByAfsName = "space.used_by_afs"
	} else {
		flagSpaceUsedByAfsName = fmt.Sprintf("%v.space.used_by_afs", cmdPrefix)
	}

	var flagSpaceUsedByAfsDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceUsedByAfsName, flagSpaceUsedByAfsDefault, flagSpaceUsedByAfsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceUserDataParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceUserDataDescription := `Filter by space.user_data`

	var flagSpaceUserDataName string
	if cmdPrefix == "" {
		flagSpaceUserDataName = "space.user_data"
	} else {
		flagSpaceUserDataName = fmt.Sprintf("%v.space.user_data", cmdPrefix)
	}

	var flagSpaceUserDataDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceUserDataName, flagSpaceUserDataDefault, flagSpaceUserDataDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSpaceVolumeGuaranteeFootprintParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceVolumeGuaranteeFootprintDescription := `Filter by space.volume_guarantee_footprint`

	var flagSpaceVolumeGuaranteeFootprintName string
	if cmdPrefix == "" {
		flagSpaceVolumeGuaranteeFootprintName = "space.volume_guarantee_footprint"
	} else {
		flagSpaceVolumeGuaranteeFootprintName = fmt.Sprintf("%v.space.volume_guarantee_footprint", cmdPrefix)
	}

	var flagSpaceVolumeGuaranteeFootprintDefault int64

	_ = cmd.PersistentFlags().Int64(flagSpaceVolumeGuaranteeFootprintName, flagSpaceVolumeGuaranteeFootprintDefault, flagSpaceVolumeGuaranteeFootprintDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStateDescription := `Filter by state`

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAccessCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawAccessCountDescription := `Filter by statistics.cifs_ops_raw.access.count`

	var flagStatisticsCifsOpsRawAccessCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawAccessCountName = "statistics.cifs_ops_raw.access.count"
	} else {
		flagStatisticsCifsOpsRawAccessCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.access.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawAccessCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawAccessCountName, flagStatisticsCifsOpsRawAccessCountDefault, flagStatisticsCifsOpsRawAccessCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAccessTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawAccessTotalTimeDescription := `Filter by statistics.cifs_ops_raw.access.total_time`

	var flagStatisticsCifsOpsRawAccessTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawAccessTotalTimeName = "statistics.cifs_ops_raw.access.total_time"
	} else {
		flagStatisticsCifsOpsRawAccessTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.access.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawAccessTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawAccessTotalTimeName, flagStatisticsCifsOpsRawAccessTotalTimeDefault, flagStatisticsCifsOpsRawAccessTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAuditCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawAuditCountDescription := `Filter by statistics.cifs_ops_raw.audit.count`

	var flagStatisticsCifsOpsRawAuditCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawAuditCountName = "statistics.cifs_ops_raw.audit.count"
	} else {
		flagStatisticsCifsOpsRawAuditCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.audit.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawAuditCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawAuditCountName, flagStatisticsCifsOpsRawAuditCountDefault, flagStatisticsCifsOpsRawAuditCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAuditTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawAuditTotalTimeDescription := `Filter by statistics.cifs_ops_raw.audit.total_time`

	var flagStatisticsCifsOpsRawAuditTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawAuditTotalTimeName = "statistics.cifs_ops_raw.audit.total_time"
	} else {
		flagStatisticsCifsOpsRawAuditTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.audit.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawAuditTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawAuditTotalTimeName, flagStatisticsCifsOpsRawAuditTotalTimeDefault, flagStatisticsCifsOpsRawAuditTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateDirCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawCreateDirCountDescription := `Filter by statistics.cifs_ops_raw.create.dir.count`

	var flagStatisticsCifsOpsRawCreateDirCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawCreateDirCountName = "statistics.cifs_ops_raw.create.dir.count"
	} else {
		flagStatisticsCifsOpsRawCreateDirCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.dir.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawCreateDirCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawCreateDirCountName, flagStatisticsCifsOpsRawCreateDirCountDefault, flagStatisticsCifsOpsRawCreateDirCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateDirTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawCreateDirTotalTimeDescription := `Filter by statistics.cifs_ops_raw.create.dir.total_time`

	var flagStatisticsCifsOpsRawCreateDirTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawCreateDirTotalTimeName = "statistics.cifs_ops_raw.create.dir.total_time"
	} else {
		flagStatisticsCifsOpsRawCreateDirTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.dir.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawCreateDirTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawCreateDirTotalTimeName, flagStatisticsCifsOpsRawCreateDirTotalTimeDefault, flagStatisticsCifsOpsRawCreateDirTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateFileCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawCreateFileCountDescription := `Filter by statistics.cifs_ops_raw.create.file.count`

	var flagStatisticsCifsOpsRawCreateFileCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawCreateFileCountName = "statistics.cifs_ops_raw.create.file.count"
	} else {
		flagStatisticsCifsOpsRawCreateFileCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.file.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawCreateFileCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawCreateFileCountName, flagStatisticsCifsOpsRawCreateFileCountDefault, flagStatisticsCifsOpsRawCreateFileCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateFileTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawCreateFileTotalTimeDescription := `Filter by statistics.cifs_ops_raw.create.file.total_time`

	var flagStatisticsCifsOpsRawCreateFileTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawCreateFileTotalTimeName = "statistics.cifs_ops_raw.create.file.total_time"
	} else {
		flagStatisticsCifsOpsRawCreateFileTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.file.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawCreateFileTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawCreateFileTotalTimeName, flagStatisticsCifsOpsRawCreateFileTotalTimeDefault, flagStatisticsCifsOpsRawCreateFileTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateOtherCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawCreateOtherCountDescription := `Filter by statistics.cifs_ops_raw.create.other.count`

	var flagStatisticsCifsOpsRawCreateOtherCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawCreateOtherCountName = "statistics.cifs_ops_raw.create.other.count"
	} else {
		flagStatisticsCifsOpsRawCreateOtherCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.other.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawCreateOtherCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawCreateOtherCountName, flagStatisticsCifsOpsRawCreateOtherCountDefault, flagStatisticsCifsOpsRawCreateOtherCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateOtherTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawCreateOtherTotalTimeDescription := `Filter by statistics.cifs_ops_raw.create.other.total_time`

	var flagStatisticsCifsOpsRawCreateOtherTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawCreateOtherTotalTimeName = "statistics.cifs_ops_raw.create.other.total_time"
	} else {
		flagStatisticsCifsOpsRawCreateOtherTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.other.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawCreateOtherTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawCreateOtherTotalTimeName, flagStatisticsCifsOpsRawCreateOtherTotalTimeDefault, flagStatisticsCifsOpsRawCreateOtherTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateSymlinkCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawCreateSymlinkCountDescription := `Filter by statistics.cifs_ops_raw.create.symlink.count`

	var flagStatisticsCifsOpsRawCreateSymlinkCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawCreateSymlinkCountName = "statistics.cifs_ops_raw.create.symlink.count"
	} else {
		flagStatisticsCifsOpsRawCreateSymlinkCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.symlink.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawCreateSymlinkCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawCreateSymlinkCountName, flagStatisticsCifsOpsRawCreateSymlinkCountDefault, flagStatisticsCifsOpsRawCreateSymlinkCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateSymlinkTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawCreateSymlinkTotalTimeDescription := `Filter by statistics.cifs_ops_raw.create.symlink.total_time`

	var flagStatisticsCifsOpsRawCreateSymlinkTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawCreateSymlinkTotalTimeName = "statistics.cifs_ops_raw.create.symlink.total_time"
	} else {
		flagStatisticsCifsOpsRawCreateSymlinkTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.symlink.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawCreateSymlinkTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawCreateSymlinkTotalTimeName, flagStatisticsCifsOpsRawCreateSymlinkTotalTimeDefault, flagStatisticsCifsOpsRawCreateSymlinkTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawGetattrCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawGetattrCountDescription := `Filter by statistics.cifs_ops_raw.getattr.count`

	var flagStatisticsCifsOpsRawGetattrCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawGetattrCountName = "statistics.cifs_ops_raw.getattr.count"
	} else {
		flagStatisticsCifsOpsRawGetattrCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.getattr.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawGetattrCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawGetattrCountName, flagStatisticsCifsOpsRawGetattrCountDefault, flagStatisticsCifsOpsRawGetattrCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawGetattrTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawGetattrTotalTimeDescription := `Filter by statistics.cifs_ops_raw.getattr.total_time`

	var flagStatisticsCifsOpsRawGetattrTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawGetattrTotalTimeName = "statistics.cifs_ops_raw.getattr.total_time"
	} else {
		flagStatisticsCifsOpsRawGetattrTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.getattr.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawGetattrTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawGetattrTotalTimeName, flagStatisticsCifsOpsRawGetattrTotalTimeDefault, flagStatisticsCifsOpsRawGetattrTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLinkCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawLinkCountDescription := `Filter by statistics.cifs_ops_raw.link.count`

	var flagStatisticsCifsOpsRawLinkCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawLinkCountName = "statistics.cifs_ops_raw.link.count"
	} else {
		flagStatisticsCifsOpsRawLinkCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.link.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawLinkCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawLinkCountName, flagStatisticsCifsOpsRawLinkCountDefault, flagStatisticsCifsOpsRawLinkCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLinkTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawLinkTotalTimeDescription := `Filter by statistics.cifs_ops_raw.link.total_time`

	var flagStatisticsCifsOpsRawLinkTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawLinkTotalTimeName = "statistics.cifs_ops_raw.link.total_time"
	} else {
		flagStatisticsCifsOpsRawLinkTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.link.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawLinkTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawLinkTotalTimeName, flagStatisticsCifsOpsRawLinkTotalTimeDefault, flagStatisticsCifsOpsRawLinkTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLockCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawLockCountDescription := `Filter by statistics.cifs_ops_raw.lock.count`

	var flagStatisticsCifsOpsRawLockCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawLockCountName = "statistics.cifs_ops_raw.lock.count"
	} else {
		flagStatisticsCifsOpsRawLockCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.lock.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawLockCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawLockCountName, flagStatisticsCifsOpsRawLockCountDefault, flagStatisticsCifsOpsRawLockCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLockTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawLockTotalTimeDescription := `Filter by statistics.cifs_ops_raw.lock.total_time`

	var flagStatisticsCifsOpsRawLockTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawLockTotalTimeName = "statistics.cifs_ops_raw.lock.total_time"
	} else {
		flagStatisticsCifsOpsRawLockTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.lock.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawLockTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawLockTotalTimeName, flagStatisticsCifsOpsRawLockTotalTimeDefault, flagStatisticsCifsOpsRawLockTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLookupCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawLookupCountDescription := `Filter by statistics.cifs_ops_raw.lookup.count`

	var flagStatisticsCifsOpsRawLookupCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawLookupCountName = "statistics.cifs_ops_raw.lookup.count"
	} else {
		flagStatisticsCifsOpsRawLookupCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.lookup.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawLookupCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawLookupCountName, flagStatisticsCifsOpsRawLookupCountDefault, flagStatisticsCifsOpsRawLookupCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLookupTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawLookupTotalTimeDescription := `Filter by statistics.cifs_ops_raw.lookup.total_time`

	var flagStatisticsCifsOpsRawLookupTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawLookupTotalTimeName = "statistics.cifs_ops_raw.lookup.total_time"
	} else {
		flagStatisticsCifsOpsRawLookupTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.lookup.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawLookupTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawLookupTotalTimeName, flagStatisticsCifsOpsRawLookupTotalTimeDefault, flagStatisticsCifsOpsRawLookupTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawOpenCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawOpenCountDescription := `Filter by statistics.cifs_ops_raw.open.count`

	var flagStatisticsCifsOpsRawOpenCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawOpenCountName = "statistics.cifs_ops_raw.open.count"
	} else {
		flagStatisticsCifsOpsRawOpenCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.open.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawOpenCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawOpenCountName, flagStatisticsCifsOpsRawOpenCountDefault, flagStatisticsCifsOpsRawOpenCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawOpenTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawOpenTotalTimeDescription := `Filter by statistics.cifs_ops_raw.open.total_time`

	var flagStatisticsCifsOpsRawOpenTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawOpenTotalTimeName = "statistics.cifs_ops_raw.open.total_time"
	} else {
		flagStatisticsCifsOpsRawOpenTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.open.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawOpenTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawOpenTotalTimeName, flagStatisticsCifsOpsRawOpenTotalTimeDefault, flagStatisticsCifsOpsRawOpenTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawReadCountDescription := `Filter by statistics.cifs_ops_raw.read.count`

	var flagStatisticsCifsOpsRawReadCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawReadCountName = "statistics.cifs_ops_raw.read.count"
	} else {
		flagStatisticsCifsOpsRawReadCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.read.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawReadCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawReadCountName, flagStatisticsCifsOpsRawReadCountDefault, flagStatisticsCifsOpsRawReadCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawReadTotalTimeDescription := `Filter by statistics.cifs_ops_raw.read.total_time`

	var flagStatisticsCifsOpsRawReadTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawReadTotalTimeName = "statistics.cifs_ops_raw.read.total_time"
	} else {
		flagStatisticsCifsOpsRawReadTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.read.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawReadTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawReadTotalTimeName, flagStatisticsCifsOpsRawReadTotalTimeDefault, flagStatisticsCifsOpsRawReadTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsDescription := `Filter by statistics.cifs_ops_raw.read.volume_protocol_latency_histogram_counts`

	var flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsName = "statistics.cifs_ops_raw.read.volume_protocol_latency_histogram_counts"
	} else {
		flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.read.volume_protocol_latency_histogram_counts", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsName, flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsDefault, flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsDescription := `Filter by statistics.cifs_ops_raw.read.volume_protocol_latency_histogram_labels`

	var flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsName = "statistics.cifs_ops_raw.read.volume_protocol_latency_histogram_labels"
	} else {
		flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.read.volume_protocol_latency_histogram_labels", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsName, flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsDefault, flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsDescription := `Filter by statistics.cifs_ops_raw.read.volume_protocol_size_histogram_counts`

	var flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsName = "statistics.cifs_ops_raw.read.volume_protocol_size_histogram_counts"
	} else {
		flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.read.volume_protocol_size_histogram_counts", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsName, flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsDefault, flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsDescription := `Filter by statistics.cifs_ops_raw.read.volume_protocol_size_histogram_labels`

	var flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsName = "statistics.cifs_ops_raw.read.volume_protocol_size_histogram_labels"
	} else {
		flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.read.volume_protocol_size_histogram_labels", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsName, flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsDefault, flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReaddirCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawReaddirCountDescription := `Filter by statistics.cifs_ops_raw.readdir.count`

	var flagStatisticsCifsOpsRawReaddirCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawReaddirCountName = "statistics.cifs_ops_raw.readdir.count"
	} else {
		flagStatisticsCifsOpsRawReaddirCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.readdir.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawReaddirCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawReaddirCountName, flagStatisticsCifsOpsRawReaddirCountDefault, flagStatisticsCifsOpsRawReaddirCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReaddirTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawReaddirTotalTimeDescription := `Filter by statistics.cifs_ops_raw.readdir.total_time`

	var flagStatisticsCifsOpsRawReaddirTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawReaddirTotalTimeName = "statistics.cifs_ops_raw.readdir.total_time"
	} else {
		flagStatisticsCifsOpsRawReaddirTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.readdir.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawReaddirTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawReaddirTotalTimeName, flagStatisticsCifsOpsRawReaddirTotalTimeDefault, flagStatisticsCifsOpsRawReaddirTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadlinkCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawReadlinkCountDescription := `Filter by statistics.cifs_ops_raw.readlink.count`

	var flagStatisticsCifsOpsRawReadlinkCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawReadlinkCountName = "statistics.cifs_ops_raw.readlink.count"
	} else {
		flagStatisticsCifsOpsRawReadlinkCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.readlink.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawReadlinkCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawReadlinkCountName, flagStatisticsCifsOpsRawReadlinkCountDefault, flagStatisticsCifsOpsRawReadlinkCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadlinkTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawReadlinkTotalTimeDescription := `Filter by statistics.cifs_ops_raw.readlink.total_time`

	var flagStatisticsCifsOpsRawReadlinkTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawReadlinkTotalTimeName = "statistics.cifs_ops_raw.readlink.total_time"
	} else {
		flagStatisticsCifsOpsRawReadlinkTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.readlink.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawReadlinkTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawReadlinkTotalTimeName, flagStatisticsCifsOpsRawReadlinkTotalTimeDefault, flagStatisticsCifsOpsRawReadlinkTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawRenameCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawRenameCountDescription := `Filter by statistics.cifs_ops_raw.rename.count`

	var flagStatisticsCifsOpsRawRenameCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawRenameCountName = "statistics.cifs_ops_raw.rename.count"
	} else {
		flagStatisticsCifsOpsRawRenameCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.rename.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawRenameCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawRenameCountName, flagStatisticsCifsOpsRawRenameCountDefault, flagStatisticsCifsOpsRawRenameCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawRenameTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawRenameTotalTimeDescription := `Filter by statistics.cifs_ops_raw.rename.total_time`

	var flagStatisticsCifsOpsRawRenameTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawRenameTotalTimeName = "statistics.cifs_ops_raw.rename.total_time"
	} else {
		flagStatisticsCifsOpsRawRenameTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.rename.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawRenameTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawRenameTotalTimeName, flagStatisticsCifsOpsRawRenameTotalTimeDefault, flagStatisticsCifsOpsRawRenameTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawSetattrCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawSetattrCountDescription := `Filter by statistics.cifs_ops_raw.setattr.count`

	var flagStatisticsCifsOpsRawSetattrCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawSetattrCountName = "statistics.cifs_ops_raw.setattr.count"
	} else {
		flagStatisticsCifsOpsRawSetattrCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.setattr.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawSetattrCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawSetattrCountName, flagStatisticsCifsOpsRawSetattrCountDefault, flagStatisticsCifsOpsRawSetattrCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawSetattrTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawSetattrTotalTimeDescription := `Filter by statistics.cifs_ops_raw.setattr.total_time`

	var flagStatisticsCifsOpsRawSetattrTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawSetattrTotalTimeName = "statistics.cifs_ops_raw.setattr.total_time"
	} else {
		flagStatisticsCifsOpsRawSetattrTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.setattr.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawSetattrTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawSetattrTotalTimeName, flagStatisticsCifsOpsRawSetattrTotalTimeDefault, flagStatisticsCifsOpsRawSetattrTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawUnlinkCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawUnlinkCountDescription := `Filter by statistics.cifs_ops_raw.unlink.count`

	var flagStatisticsCifsOpsRawUnlinkCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawUnlinkCountName = "statistics.cifs_ops_raw.unlink.count"
	} else {
		flagStatisticsCifsOpsRawUnlinkCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.unlink.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawUnlinkCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawUnlinkCountName, flagStatisticsCifsOpsRawUnlinkCountDefault, flagStatisticsCifsOpsRawUnlinkCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawUnlinkTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawUnlinkTotalTimeDescription := `Filter by statistics.cifs_ops_raw.unlink.total_time`

	var flagStatisticsCifsOpsRawUnlinkTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawUnlinkTotalTimeName = "statistics.cifs_ops_raw.unlink.total_time"
	} else {
		flagStatisticsCifsOpsRawUnlinkTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.unlink.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawUnlinkTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawUnlinkTotalTimeName, flagStatisticsCifsOpsRawUnlinkTotalTimeDefault, flagStatisticsCifsOpsRawUnlinkTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWatchCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawWatchCountDescription := `Filter by statistics.cifs_ops_raw.watch.count`

	var flagStatisticsCifsOpsRawWatchCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawWatchCountName = "statistics.cifs_ops_raw.watch.count"
	} else {
		flagStatisticsCifsOpsRawWatchCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.watch.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawWatchCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawWatchCountName, flagStatisticsCifsOpsRawWatchCountDefault, flagStatisticsCifsOpsRawWatchCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWatchTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawWatchTotalTimeDescription := `Filter by statistics.cifs_ops_raw.watch.total_time`

	var flagStatisticsCifsOpsRawWatchTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawWatchTotalTimeName = "statistics.cifs_ops_raw.watch.total_time"
	} else {
		flagStatisticsCifsOpsRawWatchTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.watch.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawWatchTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawWatchTotalTimeName, flagStatisticsCifsOpsRawWatchTotalTimeDefault, flagStatisticsCifsOpsRawWatchTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawWriteCountDescription := `Filter by statistics.cifs_ops_raw.write.count`

	var flagStatisticsCifsOpsRawWriteCountName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawWriteCountName = "statistics.cifs_ops_raw.write.count"
	} else {
		flagStatisticsCifsOpsRawWriteCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.write.count", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawWriteCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawWriteCountName, flagStatisticsCifsOpsRawWriteCountDefault, flagStatisticsCifsOpsRawWriteCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawWriteTotalTimeDescription := `Filter by statistics.cifs_ops_raw.write.total_time`

	var flagStatisticsCifsOpsRawWriteTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawWriteTotalTimeName = "statistics.cifs_ops_raw.write.total_time"
	} else {
		flagStatisticsCifsOpsRawWriteTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.write.total_time", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawWriteTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawWriteTotalTimeName, flagStatisticsCifsOpsRawWriteTotalTimeDefault, flagStatisticsCifsOpsRawWriteTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsDescription := `Filter by statistics.cifs_ops_raw.write.volume_protocol_latency_histogram_counts`

	var flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsName = "statistics.cifs_ops_raw.write.volume_protocol_latency_histogram_counts"
	} else {
		flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.write.volume_protocol_latency_histogram_counts", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsName, flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsDefault, flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsDescription := `Filter by statistics.cifs_ops_raw.write.volume_protocol_latency_histogram_labels`

	var flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName = "statistics.cifs_ops_raw.write.volume_protocol_latency_histogram_labels"
	} else {
		flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.write.volume_protocol_latency_histogram_labels", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName, flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsDefault, flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsDescription := `Filter by statistics.cifs_ops_raw.write.volume_protocol_size_histogram_counts`

	var flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsName = "statistics.cifs_ops_raw.write.volume_protocol_size_histogram_counts"
	} else {
		flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.write.volume_protocol_size_histogram_counts", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsName, flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsDefault, flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsDescription := `Filter by statistics.cifs_ops_raw.write.volume_protocol_size_histogram_labels`

	var flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsName string
	if cmdPrefix == "" {
		flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsName = "statistics.cifs_ops_raw.write.volume_protocol_size_histogram_labels"
	} else {
		flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.write.volume_protocol_size_histogram_labels", cmdPrefix)
	}

	var flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsName, flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsDefault, flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCloudIopsRawOtherParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCloudIopsRawOtherDescription := `Filter by statistics.cloud.iops_raw.other`

	var flagStatisticsCloudIopsRawOtherName string
	if cmdPrefix == "" {
		flagStatisticsCloudIopsRawOtherName = "statistics.cloud.iops_raw.other"
	} else {
		flagStatisticsCloudIopsRawOtherName = fmt.Sprintf("%v.statistics.cloud.iops_raw.other", cmdPrefix)
	}

	var flagStatisticsCloudIopsRawOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCloudIopsRawOtherName, flagStatisticsCloudIopsRawOtherDefault, flagStatisticsCloudIopsRawOtherDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCloudIopsRawReadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCloudIopsRawReadDescription := `Filter by statistics.cloud.iops_raw.read`

	var flagStatisticsCloudIopsRawReadName string
	if cmdPrefix == "" {
		flagStatisticsCloudIopsRawReadName = "statistics.cloud.iops_raw.read"
	} else {
		flagStatisticsCloudIopsRawReadName = fmt.Sprintf("%v.statistics.cloud.iops_raw.read", cmdPrefix)
	}

	var flagStatisticsCloudIopsRawReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCloudIopsRawReadName, flagStatisticsCloudIopsRawReadDefault, flagStatisticsCloudIopsRawReadDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCloudIopsRawTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCloudIopsRawTotalDescription := `Filter by statistics.cloud.iops_raw.total`

	var flagStatisticsCloudIopsRawTotalName string
	if cmdPrefix == "" {
		flagStatisticsCloudIopsRawTotalName = "statistics.cloud.iops_raw.total"
	} else {
		flagStatisticsCloudIopsRawTotalName = fmt.Sprintf("%v.statistics.cloud.iops_raw.total", cmdPrefix)
	}

	var flagStatisticsCloudIopsRawTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCloudIopsRawTotalName, flagStatisticsCloudIopsRawTotalDefault, flagStatisticsCloudIopsRawTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCloudIopsRawWriteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCloudIopsRawWriteDescription := `Filter by statistics.cloud.iops_raw.write`

	var flagStatisticsCloudIopsRawWriteName string
	if cmdPrefix == "" {
		flagStatisticsCloudIopsRawWriteName = "statistics.cloud.iops_raw.write"
	} else {
		flagStatisticsCloudIopsRawWriteName = fmt.Sprintf("%v.statistics.cloud.iops_raw.write", cmdPrefix)
	}

	var flagStatisticsCloudIopsRawWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCloudIopsRawWriteName, flagStatisticsCloudIopsRawWriteDefault, flagStatisticsCloudIopsRawWriteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawOtherParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCloudLatencyRawOtherDescription := `Filter by statistics.cloud.latency_raw.other`

	var flagStatisticsCloudLatencyRawOtherName string
	if cmdPrefix == "" {
		flagStatisticsCloudLatencyRawOtherName = "statistics.cloud.latency_raw.other"
	} else {
		flagStatisticsCloudLatencyRawOtherName = fmt.Sprintf("%v.statistics.cloud.latency_raw.other", cmdPrefix)
	}

	var flagStatisticsCloudLatencyRawOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCloudLatencyRawOtherName, flagStatisticsCloudLatencyRawOtherDefault, flagStatisticsCloudLatencyRawOtherDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawReadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCloudLatencyRawReadDescription := `Filter by statistics.cloud.latency_raw.read`

	var flagStatisticsCloudLatencyRawReadName string
	if cmdPrefix == "" {
		flagStatisticsCloudLatencyRawReadName = "statistics.cloud.latency_raw.read"
	} else {
		flagStatisticsCloudLatencyRawReadName = fmt.Sprintf("%v.statistics.cloud.latency_raw.read", cmdPrefix)
	}

	var flagStatisticsCloudLatencyRawReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCloudLatencyRawReadName, flagStatisticsCloudLatencyRawReadDefault, flagStatisticsCloudLatencyRawReadDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCloudLatencyRawTotalDescription := `Filter by statistics.cloud.latency_raw.total`

	var flagStatisticsCloudLatencyRawTotalName string
	if cmdPrefix == "" {
		flagStatisticsCloudLatencyRawTotalName = "statistics.cloud.latency_raw.total"
	} else {
		flagStatisticsCloudLatencyRawTotalName = fmt.Sprintf("%v.statistics.cloud.latency_raw.total", cmdPrefix)
	}

	var flagStatisticsCloudLatencyRawTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCloudLatencyRawTotalName, flagStatisticsCloudLatencyRawTotalDefault, flagStatisticsCloudLatencyRawTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawWriteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCloudLatencyRawWriteDescription := `Filter by statistics.cloud.latency_raw.write`

	var flagStatisticsCloudLatencyRawWriteName string
	if cmdPrefix == "" {
		flagStatisticsCloudLatencyRawWriteName = "statistics.cloud.latency_raw.write"
	} else {
		flagStatisticsCloudLatencyRawWriteName = fmt.Sprintf("%v.statistics.cloud.latency_raw.write", cmdPrefix)
	}

	var flagStatisticsCloudLatencyRawWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsCloudLatencyRawWriteName, flagStatisticsCloudLatencyRawWriteDefault, flagStatisticsCloudLatencyRawWriteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCloudStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCloudStatusDescription := `Filter by statistics.cloud.status`

	var flagStatisticsCloudStatusName string
	if cmdPrefix == "" {
		flagStatisticsCloudStatusName = "statistics.cloud.status"
	} else {
		flagStatisticsCloudStatusName = fmt.Sprintf("%v.statistics.cloud.status", cmdPrefix)
	}

	var flagStatisticsCloudStatusDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsCloudStatusName, flagStatisticsCloudStatusDefault, flagStatisticsCloudStatusDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsCloudTimestampParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsCloudTimestampDescription := `Filter by statistics.cloud.timestamp`

	var flagStatisticsCloudTimestampName string
	if cmdPrefix == "" {
		flagStatisticsCloudTimestampName = "statistics.cloud.timestamp"
	} else {
		flagStatisticsCloudTimestampName = fmt.Sprintf("%v.statistics.cloud.timestamp", cmdPrefix)
	}

	var flagStatisticsCloudTimestampDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsCloudTimestampName, flagStatisticsCloudTimestampDefault, flagStatisticsCloudTimestampDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsFlexcacheRawCacheMissBlocksParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsFlexcacheRawCacheMissBlocksDescription := `Filter by statistics.flexcache_raw.cache_miss_blocks`

	var flagStatisticsFlexcacheRawCacheMissBlocksName string
	if cmdPrefix == "" {
		flagStatisticsFlexcacheRawCacheMissBlocksName = "statistics.flexcache_raw.cache_miss_blocks"
	} else {
		flagStatisticsFlexcacheRawCacheMissBlocksName = fmt.Sprintf("%v.statistics.flexcache_raw.cache_miss_blocks", cmdPrefix)
	}

	var flagStatisticsFlexcacheRawCacheMissBlocksDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsFlexcacheRawCacheMissBlocksName, flagStatisticsFlexcacheRawCacheMissBlocksDefault, flagStatisticsFlexcacheRawCacheMissBlocksDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsFlexcacheRawClientRequestedBlocksParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsFlexcacheRawClientRequestedBlocksDescription := `Filter by statistics.flexcache_raw.client_requested_blocks`

	var flagStatisticsFlexcacheRawClientRequestedBlocksName string
	if cmdPrefix == "" {
		flagStatisticsFlexcacheRawClientRequestedBlocksName = "statistics.flexcache_raw.client_requested_blocks"
	} else {
		flagStatisticsFlexcacheRawClientRequestedBlocksName = fmt.Sprintf("%v.statistics.flexcache_raw.client_requested_blocks", cmdPrefix)
	}

	var flagStatisticsFlexcacheRawClientRequestedBlocksDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsFlexcacheRawClientRequestedBlocksName, flagStatisticsFlexcacheRawClientRequestedBlocksDefault, flagStatisticsFlexcacheRawClientRequestedBlocksDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsFlexcacheRawStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsFlexcacheRawStatusDescription := `Filter by statistics.flexcache_raw.status`

	var flagStatisticsFlexcacheRawStatusName string
	if cmdPrefix == "" {
		flagStatisticsFlexcacheRawStatusName = "statistics.flexcache_raw.status"
	} else {
		flagStatisticsFlexcacheRawStatusName = fmt.Sprintf("%v.statistics.flexcache_raw.status", cmdPrefix)
	}

	var flagStatisticsFlexcacheRawStatusDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsFlexcacheRawStatusName, flagStatisticsFlexcacheRawStatusDefault, flagStatisticsFlexcacheRawStatusDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsFlexcacheRawTimestampParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsFlexcacheRawTimestampDescription := `Filter by statistics.flexcache_raw.timestamp`

	var flagStatisticsFlexcacheRawTimestampName string
	if cmdPrefix == "" {
		flagStatisticsFlexcacheRawTimestampName = "statistics.flexcache_raw.timestamp"
	} else {
		flagStatisticsFlexcacheRawTimestampName = fmt.Sprintf("%v.statistics.flexcache_raw.timestamp", cmdPrefix)
	}

	var flagStatisticsFlexcacheRawTimestampDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsFlexcacheRawTimestampName, flagStatisticsFlexcacheRawTimestampDefault, flagStatisticsFlexcacheRawTimestampDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsIopsRawOtherParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsIopsRawOtherDescription := `Filter by statistics.iops_raw.other`

	var flagStatisticsIopsRawOtherName string
	if cmdPrefix == "" {
		flagStatisticsIopsRawOtherName = "statistics.iops_raw.other"
	} else {
		flagStatisticsIopsRawOtherName = fmt.Sprintf("%v.statistics.iops_raw.other", cmdPrefix)
	}

	var flagStatisticsIopsRawOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsIopsRawOtherName, flagStatisticsIopsRawOtherDefault, flagStatisticsIopsRawOtherDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsIopsRawReadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsIopsRawReadDescription := `Filter by statistics.iops_raw.read`

	var flagStatisticsIopsRawReadName string
	if cmdPrefix == "" {
		flagStatisticsIopsRawReadName = "statistics.iops_raw.read"
	} else {
		flagStatisticsIopsRawReadName = fmt.Sprintf("%v.statistics.iops_raw.read", cmdPrefix)
	}

	var flagStatisticsIopsRawReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsIopsRawReadName, flagStatisticsIopsRawReadDefault, flagStatisticsIopsRawReadDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsIopsRawTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsIopsRawTotalDescription := `Filter by statistics.iops_raw.total`

	var flagStatisticsIopsRawTotalName string
	if cmdPrefix == "" {
		flagStatisticsIopsRawTotalName = "statistics.iops_raw.total"
	} else {
		flagStatisticsIopsRawTotalName = fmt.Sprintf("%v.statistics.iops_raw.total", cmdPrefix)
	}

	var flagStatisticsIopsRawTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsIopsRawTotalName, flagStatisticsIopsRawTotalDefault, flagStatisticsIopsRawTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsIopsRawWriteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsIopsRawWriteDescription := `Filter by statistics.iops_raw.write`

	var flagStatisticsIopsRawWriteName string
	if cmdPrefix == "" {
		flagStatisticsIopsRawWriteName = "statistics.iops_raw.write"
	} else {
		flagStatisticsIopsRawWriteName = fmt.Sprintf("%v.statistics.iops_raw.write", cmdPrefix)
	}

	var flagStatisticsIopsRawWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsIopsRawWriteName, flagStatisticsIopsRawWriteDefault, flagStatisticsIopsRawWriteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsLatencyRawOtherParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsLatencyRawOtherDescription := `Filter by statistics.latency_raw.other`

	var flagStatisticsLatencyRawOtherName string
	if cmdPrefix == "" {
		flagStatisticsLatencyRawOtherName = "statistics.latency_raw.other"
	} else {
		flagStatisticsLatencyRawOtherName = fmt.Sprintf("%v.statistics.latency_raw.other", cmdPrefix)
	}

	var flagStatisticsLatencyRawOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsLatencyRawOtherName, flagStatisticsLatencyRawOtherDefault, flagStatisticsLatencyRawOtherDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsLatencyRawReadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsLatencyRawReadDescription := `Filter by statistics.latency_raw.read`

	var flagStatisticsLatencyRawReadName string
	if cmdPrefix == "" {
		flagStatisticsLatencyRawReadName = "statistics.latency_raw.read"
	} else {
		flagStatisticsLatencyRawReadName = fmt.Sprintf("%v.statistics.latency_raw.read", cmdPrefix)
	}

	var flagStatisticsLatencyRawReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsLatencyRawReadName, flagStatisticsLatencyRawReadDefault, flagStatisticsLatencyRawReadDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsLatencyRawTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsLatencyRawTotalDescription := `Filter by statistics.latency_raw.total`

	var flagStatisticsLatencyRawTotalName string
	if cmdPrefix == "" {
		flagStatisticsLatencyRawTotalName = "statistics.latency_raw.total"
	} else {
		flagStatisticsLatencyRawTotalName = fmt.Sprintf("%v.statistics.latency_raw.total", cmdPrefix)
	}

	var flagStatisticsLatencyRawTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsLatencyRawTotalName, flagStatisticsLatencyRawTotalDefault, flagStatisticsLatencyRawTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsLatencyRawWriteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsLatencyRawWriteDescription := `Filter by statistics.latency_raw.write`

	var flagStatisticsLatencyRawWriteName string
	if cmdPrefix == "" {
		flagStatisticsLatencyRawWriteName = "statistics.latency_raw.write"
	} else {
		flagStatisticsLatencyRawWriteName = fmt.Sprintf("%v.statistics.latency_raw.write", cmdPrefix)
	}

	var flagStatisticsLatencyRawWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsLatencyRawWriteName, flagStatisticsLatencyRawWriteDefault, flagStatisticsLatencyRawWriteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAccessCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawAccessCountDescription := `Filter by statistics.nfs_ops_raw.access.count`

	var flagStatisticsNfsOpsRawAccessCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawAccessCountName = "statistics.nfs_ops_raw.access.count"
	} else {
		flagStatisticsNfsOpsRawAccessCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.access.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawAccessCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawAccessCountName, flagStatisticsNfsOpsRawAccessCountDefault, flagStatisticsNfsOpsRawAccessCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAccessTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawAccessTotalTimeDescription := `Filter by statistics.nfs_ops_raw.access.total_time`

	var flagStatisticsNfsOpsRawAccessTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawAccessTotalTimeName = "statistics.nfs_ops_raw.access.total_time"
	} else {
		flagStatisticsNfsOpsRawAccessTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.access.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawAccessTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawAccessTotalTimeName, flagStatisticsNfsOpsRawAccessTotalTimeDefault, flagStatisticsNfsOpsRawAccessTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAuditCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawAuditCountDescription := `Filter by statistics.nfs_ops_raw.audit.count`

	var flagStatisticsNfsOpsRawAuditCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawAuditCountName = "statistics.nfs_ops_raw.audit.count"
	} else {
		flagStatisticsNfsOpsRawAuditCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.audit.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawAuditCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawAuditCountName, flagStatisticsNfsOpsRawAuditCountDefault, flagStatisticsNfsOpsRawAuditCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAuditTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawAuditTotalTimeDescription := `Filter by statistics.nfs_ops_raw.audit.total_time`

	var flagStatisticsNfsOpsRawAuditTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawAuditTotalTimeName = "statistics.nfs_ops_raw.audit.total_time"
	} else {
		flagStatisticsNfsOpsRawAuditTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.audit.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawAuditTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawAuditTotalTimeName, flagStatisticsNfsOpsRawAuditTotalTimeDefault, flagStatisticsNfsOpsRawAuditTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateDirCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawCreateDirCountDescription := `Filter by statistics.nfs_ops_raw.create.dir.count`

	var flagStatisticsNfsOpsRawCreateDirCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawCreateDirCountName = "statistics.nfs_ops_raw.create.dir.count"
	} else {
		flagStatisticsNfsOpsRawCreateDirCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.dir.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawCreateDirCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawCreateDirCountName, flagStatisticsNfsOpsRawCreateDirCountDefault, flagStatisticsNfsOpsRawCreateDirCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateDirTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawCreateDirTotalTimeDescription := `Filter by statistics.nfs_ops_raw.create.dir.total_time`

	var flagStatisticsNfsOpsRawCreateDirTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawCreateDirTotalTimeName = "statistics.nfs_ops_raw.create.dir.total_time"
	} else {
		flagStatisticsNfsOpsRawCreateDirTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.dir.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawCreateDirTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawCreateDirTotalTimeName, flagStatisticsNfsOpsRawCreateDirTotalTimeDefault, flagStatisticsNfsOpsRawCreateDirTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateFileCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawCreateFileCountDescription := `Filter by statistics.nfs_ops_raw.create.file.count`

	var flagStatisticsNfsOpsRawCreateFileCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawCreateFileCountName = "statistics.nfs_ops_raw.create.file.count"
	} else {
		flagStatisticsNfsOpsRawCreateFileCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.file.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawCreateFileCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawCreateFileCountName, flagStatisticsNfsOpsRawCreateFileCountDefault, flagStatisticsNfsOpsRawCreateFileCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateFileTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawCreateFileTotalTimeDescription := `Filter by statistics.nfs_ops_raw.create.file.total_time`

	var flagStatisticsNfsOpsRawCreateFileTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawCreateFileTotalTimeName = "statistics.nfs_ops_raw.create.file.total_time"
	} else {
		flagStatisticsNfsOpsRawCreateFileTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.file.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawCreateFileTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawCreateFileTotalTimeName, flagStatisticsNfsOpsRawCreateFileTotalTimeDefault, flagStatisticsNfsOpsRawCreateFileTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateOtherCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawCreateOtherCountDescription := `Filter by statistics.nfs_ops_raw.create.other.count`

	var flagStatisticsNfsOpsRawCreateOtherCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawCreateOtherCountName = "statistics.nfs_ops_raw.create.other.count"
	} else {
		flagStatisticsNfsOpsRawCreateOtherCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.other.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawCreateOtherCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawCreateOtherCountName, flagStatisticsNfsOpsRawCreateOtherCountDefault, flagStatisticsNfsOpsRawCreateOtherCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateOtherTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawCreateOtherTotalTimeDescription := `Filter by statistics.nfs_ops_raw.create.other.total_time`

	var flagStatisticsNfsOpsRawCreateOtherTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawCreateOtherTotalTimeName = "statistics.nfs_ops_raw.create.other.total_time"
	} else {
		flagStatisticsNfsOpsRawCreateOtherTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.other.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawCreateOtherTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawCreateOtherTotalTimeName, flagStatisticsNfsOpsRawCreateOtherTotalTimeDefault, flagStatisticsNfsOpsRawCreateOtherTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateSymlinkCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawCreateSymlinkCountDescription := `Filter by statistics.nfs_ops_raw.create.symlink.count`

	var flagStatisticsNfsOpsRawCreateSymlinkCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawCreateSymlinkCountName = "statistics.nfs_ops_raw.create.symlink.count"
	} else {
		flagStatisticsNfsOpsRawCreateSymlinkCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.symlink.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawCreateSymlinkCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawCreateSymlinkCountName, flagStatisticsNfsOpsRawCreateSymlinkCountDefault, flagStatisticsNfsOpsRawCreateSymlinkCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateSymlinkTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawCreateSymlinkTotalTimeDescription := `Filter by statistics.nfs_ops_raw.create.symlink.total_time`

	var flagStatisticsNfsOpsRawCreateSymlinkTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawCreateSymlinkTotalTimeName = "statistics.nfs_ops_raw.create.symlink.total_time"
	} else {
		flagStatisticsNfsOpsRawCreateSymlinkTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.symlink.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawCreateSymlinkTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawCreateSymlinkTotalTimeName, flagStatisticsNfsOpsRawCreateSymlinkTotalTimeDefault, flagStatisticsNfsOpsRawCreateSymlinkTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawGetattrCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawGetattrCountDescription := `Filter by statistics.nfs_ops_raw.getattr.count`

	var flagStatisticsNfsOpsRawGetattrCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawGetattrCountName = "statistics.nfs_ops_raw.getattr.count"
	} else {
		flagStatisticsNfsOpsRawGetattrCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.getattr.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawGetattrCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawGetattrCountName, flagStatisticsNfsOpsRawGetattrCountDefault, flagStatisticsNfsOpsRawGetattrCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawGetattrTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawGetattrTotalTimeDescription := `Filter by statistics.nfs_ops_raw.getattr.total_time`

	var flagStatisticsNfsOpsRawGetattrTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawGetattrTotalTimeName = "statistics.nfs_ops_raw.getattr.total_time"
	} else {
		flagStatisticsNfsOpsRawGetattrTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.getattr.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawGetattrTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawGetattrTotalTimeName, flagStatisticsNfsOpsRawGetattrTotalTimeDefault, flagStatisticsNfsOpsRawGetattrTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLinkCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawLinkCountDescription := `Filter by statistics.nfs_ops_raw.link.count`

	var flagStatisticsNfsOpsRawLinkCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawLinkCountName = "statistics.nfs_ops_raw.link.count"
	} else {
		flagStatisticsNfsOpsRawLinkCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.link.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawLinkCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawLinkCountName, flagStatisticsNfsOpsRawLinkCountDefault, flagStatisticsNfsOpsRawLinkCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLinkTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawLinkTotalTimeDescription := `Filter by statistics.nfs_ops_raw.link.total_time`

	var flagStatisticsNfsOpsRawLinkTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawLinkTotalTimeName = "statistics.nfs_ops_raw.link.total_time"
	} else {
		flagStatisticsNfsOpsRawLinkTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.link.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawLinkTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawLinkTotalTimeName, flagStatisticsNfsOpsRawLinkTotalTimeDefault, flagStatisticsNfsOpsRawLinkTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLockCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawLockCountDescription := `Filter by statistics.nfs_ops_raw.lock.count`

	var flagStatisticsNfsOpsRawLockCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawLockCountName = "statistics.nfs_ops_raw.lock.count"
	} else {
		flagStatisticsNfsOpsRawLockCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.lock.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawLockCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawLockCountName, flagStatisticsNfsOpsRawLockCountDefault, flagStatisticsNfsOpsRawLockCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLockTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawLockTotalTimeDescription := `Filter by statistics.nfs_ops_raw.lock.total_time`

	var flagStatisticsNfsOpsRawLockTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawLockTotalTimeName = "statistics.nfs_ops_raw.lock.total_time"
	} else {
		flagStatisticsNfsOpsRawLockTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.lock.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawLockTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawLockTotalTimeName, flagStatisticsNfsOpsRawLockTotalTimeDefault, flagStatisticsNfsOpsRawLockTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLookupCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawLookupCountDescription := `Filter by statistics.nfs_ops_raw.lookup.count`

	var flagStatisticsNfsOpsRawLookupCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawLookupCountName = "statistics.nfs_ops_raw.lookup.count"
	} else {
		flagStatisticsNfsOpsRawLookupCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.lookup.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawLookupCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawLookupCountName, flagStatisticsNfsOpsRawLookupCountDefault, flagStatisticsNfsOpsRawLookupCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLookupTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawLookupTotalTimeDescription := `Filter by statistics.nfs_ops_raw.lookup.total_time`

	var flagStatisticsNfsOpsRawLookupTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawLookupTotalTimeName = "statistics.nfs_ops_raw.lookup.total_time"
	} else {
		flagStatisticsNfsOpsRawLookupTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.lookup.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawLookupTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawLookupTotalTimeName, flagStatisticsNfsOpsRawLookupTotalTimeDefault, flagStatisticsNfsOpsRawLookupTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawOpenCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawOpenCountDescription := `Filter by statistics.nfs_ops_raw.open.count`

	var flagStatisticsNfsOpsRawOpenCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawOpenCountName = "statistics.nfs_ops_raw.open.count"
	} else {
		flagStatisticsNfsOpsRawOpenCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.open.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawOpenCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawOpenCountName, flagStatisticsNfsOpsRawOpenCountDefault, flagStatisticsNfsOpsRawOpenCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawOpenTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawOpenTotalTimeDescription := `Filter by statistics.nfs_ops_raw.open.total_time`

	var flagStatisticsNfsOpsRawOpenTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawOpenTotalTimeName = "statistics.nfs_ops_raw.open.total_time"
	} else {
		flagStatisticsNfsOpsRawOpenTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.open.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawOpenTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawOpenTotalTimeName, flagStatisticsNfsOpsRawOpenTotalTimeDefault, flagStatisticsNfsOpsRawOpenTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawReadCountDescription := `Filter by statistics.nfs_ops_raw.read.count`

	var flagStatisticsNfsOpsRawReadCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawReadCountName = "statistics.nfs_ops_raw.read.count"
	} else {
		flagStatisticsNfsOpsRawReadCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.read.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawReadCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawReadCountName, flagStatisticsNfsOpsRawReadCountDefault, flagStatisticsNfsOpsRawReadCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawReadTotalTimeDescription := `Filter by statistics.nfs_ops_raw.read.total_time`

	var flagStatisticsNfsOpsRawReadTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawReadTotalTimeName = "statistics.nfs_ops_raw.read.total_time"
	} else {
		flagStatisticsNfsOpsRawReadTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.read.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawReadTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawReadTotalTimeName, flagStatisticsNfsOpsRawReadTotalTimeDefault, flagStatisticsNfsOpsRawReadTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsDescription := `Filter by statistics.nfs_ops_raw.read.volume_protocol_latency_histogram_counts`

	var flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsName = "statistics.nfs_ops_raw.read.volume_protocol_latency_histogram_counts"
	} else {
		flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.read.volume_protocol_latency_histogram_counts", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsName, flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsDefault, flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsDescription := `Filter by statistics.nfs_ops_raw.read.volume_protocol_latency_histogram_labels`

	var flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsName = "statistics.nfs_ops_raw.read.volume_protocol_latency_histogram_labels"
	} else {
		flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.read.volume_protocol_latency_histogram_labels", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsName, flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsDefault, flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsDescription := `Filter by statistics.nfs_ops_raw.read.volume_protocol_size_histogram_counts`

	var flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsName = "statistics.nfs_ops_raw.read.volume_protocol_size_histogram_counts"
	} else {
		flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.read.volume_protocol_size_histogram_counts", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsName, flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsDefault, flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsDescription := `Filter by statistics.nfs_ops_raw.read.volume_protocol_size_histogram_labels`

	var flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsName = "statistics.nfs_ops_raw.read.volume_protocol_size_histogram_labels"
	} else {
		flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.read.volume_protocol_size_histogram_labels", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsName, flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsDefault, flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReaddirCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawReaddirCountDescription := `Filter by statistics.nfs_ops_raw.readdir.count`

	var flagStatisticsNfsOpsRawReaddirCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawReaddirCountName = "statistics.nfs_ops_raw.readdir.count"
	} else {
		flagStatisticsNfsOpsRawReaddirCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.readdir.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawReaddirCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawReaddirCountName, flagStatisticsNfsOpsRawReaddirCountDefault, flagStatisticsNfsOpsRawReaddirCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReaddirTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawReaddirTotalTimeDescription := `Filter by statistics.nfs_ops_raw.readdir.total_time`

	var flagStatisticsNfsOpsRawReaddirTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawReaddirTotalTimeName = "statistics.nfs_ops_raw.readdir.total_time"
	} else {
		flagStatisticsNfsOpsRawReaddirTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.readdir.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawReaddirTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawReaddirTotalTimeName, flagStatisticsNfsOpsRawReaddirTotalTimeDefault, flagStatisticsNfsOpsRawReaddirTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadlinkCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawReadlinkCountDescription := `Filter by statistics.nfs_ops_raw.readlink.count`

	var flagStatisticsNfsOpsRawReadlinkCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawReadlinkCountName = "statistics.nfs_ops_raw.readlink.count"
	} else {
		flagStatisticsNfsOpsRawReadlinkCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.readlink.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawReadlinkCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawReadlinkCountName, flagStatisticsNfsOpsRawReadlinkCountDefault, flagStatisticsNfsOpsRawReadlinkCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadlinkTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawReadlinkTotalTimeDescription := `Filter by statistics.nfs_ops_raw.readlink.total_time`

	var flagStatisticsNfsOpsRawReadlinkTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawReadlinkTotalTimeName = "statistics.nfs_ops_raw.readlink.total_time"
	} else {
		flagStatisticsNfsOpsRawReadlinkTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.readlink.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawReadlinkTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawReadlinkTotalTimeName, flagStatisticsNfsOpsRawReadlinkTotalTimeDefault, flagStatisticsNfsOpsRawReadlinkTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawRenameCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawRenameCountDescription := `Filter by statistics.nfs_ops_raw.rename.count`

	var flagStatisticsNfsOpsRawRenameCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawRenameCountName = "statistics.nfs_ops_raw.rename.count"
	} else {
		flagStatisticsNfsOpsRawRenameCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.rename.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawRenameCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawRenameCountName, flagStatisticsNfsOpsRawRenameCountDefault, flagStatisticsNfsOpsRawRenameCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawRenameTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawRenameTotalTimeDescription := `Filter by statistics.nfs_ops_raw.rename.total_time`

	var flagStatisticsNfsOpsRawRenameTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawRenameTotalTimeName = "statistics.nfs_ops_raw.rename.total_time"
	} else {
		flagStatisticsNfsOpsRawRenameTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.rename.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawRenameTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawRenameTotalTimeName, flagStatisticsNfsOpsRawRenameTotalTimeDefault, flagStatisticsNfsOpsRawRenameTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawSetattrCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawSetattrCountDescription := `Filter by statistics.nfs_ops_raw.setattr.count`

	var flagStatisticsNfsOpsRawSetattrCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawSetattrCountName = "statistics.nfs_ops_raw.setattr.count"
	} else {
		flagStatisticsNfsOpsRawSetattrCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.setattr.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawSetattrCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawSetattrCountName, flagStatisticsNfsOpsRawSetattrCountDefault, flagStatisticsNfsOpsRawSetattrCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawSetattrTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawSetattrTotalTimeDescription := `Filter by statistics.nfs_ops_raw.setattr.total_time`

	var flagStatisticsNfsOpsRawSetattrTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawSetattrTotalTimeName = "statistics.nfs_ops_raw.setattr.total_time"
	} else {
		flagStatisticsNfsOpsRawSetattrTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.setattr.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawSetattrTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawSetattrTotalTimeName, flagStatisticsNfsOpsRawSetattrTotalTimeDefault, flagStatisticsNfsOpsRawSetattrTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawUnlinkCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawUnlinkCountDescription := `Filter by statistics.nfs_ops_raw.unlink.count`

	var flagStatisticsNfsOpsRawUnlinkCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawUnlinkCountName = "statistics.nfs_ops_raw.unlink.count"
	} else {
		flagStatisticsNfsOpsRawUnlinkCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.unlink.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawUnlinkCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawUnlinkCountName, flagStatisticsNfsOpsRawUnlinkCountDefault, flagStatisticsNfsOpsRawUnlinkCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawUnlinkTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawUnlinkTotalTimeDescription := `Filter by statistics.nfs_ops_raw.unlink.total_time`

	var flagStatisticsNfsOpsRawUnlinkTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawUnlinkTotalTimeName = "statistics.nfs_ops_raw.unlink.total_time"
	} else {
		flagStatisticsNfsOpsRawUnlinkTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.unlink.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawUnlinkTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawUnlinkTotalTimeName, flagStatisticsNfsOpsRawUnlinkTotalTimeDefault, flagStatisticsNfsOpsRawUnlinkTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWatchCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawWatchCountDescription := `Filter by statistics.nfs_ops_raw.watch.count`

	var flagStatisticsNfsOpsRawWatchCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawWatchCountName = "statistics.nfs_ops_raw.watch.count"
	} else {
		flagStatisticsNfsOpsRawWatchCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.watch.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawWatchCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawWatchCountName, flagStatisticsNfsOpsRawWatchCountDefault, flagStatisticsNfsOpsRawWatchCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWatchTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawWatchTotalTimeDescription := `Filter by statistics.nfs_ops_raw.watch.total_time`

	var flagStatisticsNfsOpsRawWatchTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawWatchTotalTimeName = "statistics.nfs_ops_raw.watch.total_time"
	} else {
		flagStatisticsNfsOpsRawWatchTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.watch.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawWatchTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawWatchTotalTimeName, flagStatisticsNfsOpsRawWatchTotalTimeDefault, flagStatisticsNfsOpsRawWatchTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawWriteCountDescription := `Filter by statistics.nfs_ops_raw.write.count`

	var flagStatisticsNfsOpsRawWriteCountName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawWriteCountName = "statistics.nfs_ops_raw.write.count"
	} else {
		flagStatisticsNfsOpsRawWriteCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.write.count", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawWriteCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawWriteCountName, flagStatisticsNfsOpsRawWriteCountDefault, flagStatisticsNfsOpsRawWriteCountDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteTotalTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawWriteTotalTimeDescription := `Filter by statistics.nfs_ops_raw.write.total_time`

	var flagStatisticsNfsOpsRawWriteTotalTimeName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawWriteTotalTimeName = "statistics.nfs_ops_raw.write.total_time"
	} else {
		flagStatisticsNfsOpsRawWriteTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.write.total_time", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawWriteTotalTimeDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawWriteTotalTimeName, flagStatisticsNfsOpsRawWriteTotalTimeDefault, flagStatisticsNfsOpsRawWriteTotalTimeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsDescription := `Filter by statistics.nfs_ops_raw.write.volume_protocol_latency_histogram_counts`

	var flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsName = "statistics.nfs_ops_raw.write.volume_protocol_latency_histogram_counts"
	} else {
		flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.write.volume_protocol_latency_histogram_counts", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsName, flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsDefault, flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsDescription := `Filter by statistics.nfs_ops_raw.write.volume_protocol_latency_histogram_labels`

	var flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName = "statistics.nfs_ops_raw.write.volume_protocol_latency_histogram_labels"
	} else {
		flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.write.volume_protocol_latency_histogram_labels", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName, flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsDefault, flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsDescription := `Filter by statistics.nfs_ops_raw.write.volume_protocol_size_histogram_counts`

	var flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsName = "statistics.nfs_ops_raw.write.volume_protocol_size_histogram_counts"
	} else {
		flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.write.volume_protocol_size_histogram_counts", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsName, flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsDefault, flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsDescription := `Filter by statistics.nfs_ops_raw.write.volume_protocol_size_histogram_labels`

	var flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsName string
	if cmdPrefix == "" {
		flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsName = "statistics.nfs_ops_raw.write.volume_protocol_size_histogram_labels"
	} else {
		flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.write.volume_protocol_size_histogram_labels", cmdPrefix)
	}

	var flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsName, flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsDefault, flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsStatusDescription := `Filter by statistics.status`

	var flagStatisticsStatusName string
	if cmdPrefix == "" {
		flagStatisticsStatusName = "statistics.status"
	} else {
		flagStatisticsStatusName = fmt.Sprintf("%v.statistics.status", cmdPrefix)
	}

	var flagStatisticsStatusDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsStatusName, flagStatisticsStatusDefault, flagStatisticsStatusDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsThroughputRawOtherParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsThroughputRawOtherDescription := `Filter by statistics.throughput_raw.other`

	var flagStatisticsThroughputRawOtherName string
	if cmdPrefix == "" {
		flagStatisticsThroughputRawOtherName = "statistics.throughput_raw.other"
	} else {
		flagStatisticsThroughputRawOtherName = fmt.Sprintf("%v.statistics.throughput_raw.other", cmdPrefix)
	}

	var flagStatisticsThroughputRawOtherDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsThroughputRawOtherName, flagStatisticsThroughputRawOtherDefault, flagStatisticsThroughputRawOtherDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsThroughputRawReadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsThroughputRawReadDescription := `Filter by statistics.throughput_raw.read`

	var flagStatisticsThroughputRawReadName string
	if cmdPrefix == "" {
		flagStatisticsThroughputRawReadName = "statistics.throughput_raw.read"
	} else {
		flagStatisticsThroughputRawReadName = fmt.Sprintf("%v.statistics.throughput_raw.read", cmdPrefix)
	}

	var flagStatisticsThroughputRawReadDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsThroughputRawReadName, flagStatisticsThroughputRawReadDefault, flagStatisticsThroughputRawReadDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsThroughputRawTotalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsThroughputRawTotalDescription := `Filter by statistics.throughput_raw.total`

	var flagStatisticsThroughputRawTotalName string
	if cmdPrefix == "" {
		flagStatisticsThroughputRawTotalName = "statistics.throughput_raw.total"
	} else {
		flagStatisticsThroughputRawTotalName = fmt.Sprintf("%v.statistics.throughput_raw.total", cmdPrefix)
	}

	var flagStatisticsThroughputRawTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsThroughputRawTotalName, flagStatisticsThroughputRawTotalDefault, flagStatisticsThroughputRawTotalDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsThroughputRawWriteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsThroughputRawWriteDescription := `Filter by statistics.throughput_raw.write`

	var flagStatisticsThroughputRawWriteName string
	if cmdPrefix == "" {
		flagStatisticsThroughputRawWriteName = "statistics.throughput_raw.write"
	} else {
		flagStatisticsThroughputRawWriteName = fmt.Sprintf("%v.statistics.throughput_raw.write", cmdPrefix)
	}

	var flagStatisticsThroughputRawWriteDefault int64

	_ = cmd.PersistentFlags().Int64(flagStatisticsThroughputRawWriteName, flagStatisticsThroughputRawWriteDefault, flagStatisticsThroughputRawWriteDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatisticsTimestampParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatisticsTimestampDescription := `Filter by statistics.timestamp`

	var flagStatisticsTimestampName string
	if cmdPrefix == "" {
		flagStatisticsTimestampName = "statistics.timestamp"
	} else {
		flagStatisticsTimestampName = fmt.Sprintf("%v.statistics.timestamp", cmdPrefix)
	}

	var flagStatisticsTimestampDefault string

	_ = cmd.PersistentFlags().String(flagStatisticsTimestampName, flagStatisticsTimestampDefault, flagStatisticsTimestampDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStatusDescription := `Filter by status`

	var flagStatusName string
	if cmdPrefix == "" {
		flagStatusName = "status"
	} else {
		flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var flagStatusDefault string

	_ = cmd.PersistentFlags().String(flagStatusName, flagStatusDefault, flagStatusDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetStyleParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagStyleDescription := `Filter by style`

	var flagStyleName string
	if cmdPrefix == "" {
		flagStyleName = "style"
	} else {
		flagStyleName = fmt.Sprintf("%v.style", cmdPrefix)
	}

	var flagStyleDefault string

	_ = cmd.PersistentFlags().String(flagStyleName, flagStyleDefault, flagStyleDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSvmNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSvmNameDescription := `Filter by svm.name`

	var flagSvmNameName string
	if cmdPrefix == "" {
		flagSvmNameName = "svm.name"
	} else {
		flagSvmNameName = fmt.Sprintf("%v.svm.name", cmdPrefix)
	}

	var flagSvmNameDefault string

	_ = cmd.PersistentFlags().String(flagSvmNameName, flagSvmNameDefault, flagSvmNameDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetSvmUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSvmUUIDDescription := `Filter by svm.uuid`

	var flagSvmUUIDName string
	if cmdPrefix == "" {
		flagSvmUUIDName = "svm.uuid"
	} else {
		flagSvmUUIDName = fmt.Sprintf("%v.svm.uuid", cmdPrefix)
	}

	var flagSvmUUIDDefault string

	_ = cmd.PersistentFlags().String(flagSvmUUIDName, flagSvmUUIDDefault, flagSvmUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetTieringMinCoolingDaysParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagTieringMinCoolingDaysDescription := `Filter by tiering.min_cooling_days`

	var flagTieringMinCoolingDaysName string
	if cmdPrefix == "" {
		flagTieringMinCoolingDaysName = "tiering.min_cooling_days"
	} else {
		flagTieringMinCoolingDaysName = fmt.Sprintf("%v.tiering.min_cooling_days", cmdPrefix)
	}

	var flagTieringMinCoolingDaysDefault int64

	_ = cmd.PersistentFlags().Int64(flagTieringMinCoolingDaysName, flagTieringMinCoolingDaysDefault, flagTieringMinCoolingDaysDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetTieringObjectTagsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagTieringObjectTagsDescription := `Filter by tiering.object_tags`

	var flagTieringObjectTagsName string
	if cmdPrefix == "" {
		flagTieringObjectTagsName = "tiering.object_tags"
	} else {
		flagTieringObjectTagsName = fmt.Sprintf("%v.tiering.object_tags", cmdPrefix)
	}

	var flagTieringObjectTagsDefault string

	_ = cmd.PersistentFlags().String(flagTieringObjectTagsName, flagTieringObjectTagsDefault, flagTieringObjectTagsDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetTieringPolicyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagTieringPolicyDescription := `Filter by tiering.policy`

	var flagTieringPolicyName string
	if cmdPrefix == "" {
		flagTieringPolicyName = "tiering.policy"
	} else {
		flagTieringPolicyName = fmt.Sprintf("%v.tiering.policy", cmdPrefix)
	}

	var flagTieringPolicyDefault string

	_ = cmd.PersistentFlags().String(flagTieringPolicyName, flagTieringPolicyDefault, flagTieringPolicyDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagTypeDescription := `Filter by type`

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetUUIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagUUIDDescription := `Filter by uuid`

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

func registerOperationStorageVolumeCollectionGetValidateOnlyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagValidateOnlyDescription := `Filter by validate_only`

	var flagValidateOnlyName string
	if cmdPrefix == "" {
		flagValidateOnlyName = "validate_only"
	} else {
		flagValidateOnlyName = fmt.Sprintf("%v.validate_only", cmdPrefix)
	}

	var flagValidateOnlyDefault bool

	_ = cmd.PersistentFlags().Bool(flagValidateOnlyName, flagValidateOnlyDefault, flagValidateOnlyDescription)

	return nil
}

func retrieveOperationStorageVolumeCollectionGetTagsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("_tags") {

		var flagTagsName string
		if cmdPrefix == "" {
			flagTagsName = "_tags"
		} else {
			flagTagsName = fmt.Sprintf("%v._tags", cmdPrefix)
		}

		flagTagsValue, err := cmd.Flags().GetString(flagTagsName)
		if err != nil {
			return err, false
		}
		m.Tags = &flagTagsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAccessTimeEnabledFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("access_time_enabled") {

		var flagAccessTimeEnabledName string
		if cmdPrefix == "" {
			flagAccessTimeEnabledName = "access_time_enabled"
		} else {
			flagAccessTimeEnabledName = fmt.Sprintf("%v.access_time_enabled", cmdPrefix)
		}

		flagAccessTimeEnabledValue, err := cmd.Flags().GetBool(flagAccessTimeEnabledName)
		if err != nil {
			return err, false
		}
		m.AccessTimeEnabled = &flagAccessTimeEnabledValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetActivityTrackingStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("activity_tracking.state") {

		var flagActivityTrackingStateName string
		if cmdPrefix == "" {
			flagActivityTrackingStateName = "activity_tracking.state"
		} else {
			flagActivityTrackingStateName = fmt.Sprintf("%v.activity_tracking.state", cmdPrefix)
		}

		flagActivityTrackingStateValue, err := cmd.Flags().GetString(flagActivityTrackingStateName)
		if err != nil {
			return err, false
		}
		m.ActivityTrackingState = &flagActivityTrackingStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetActivityTrackingSupportedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("activity_tracking.supported") {

		var flagActivityTrackingSupportedName string
		if cmdPrefix == "" {
			flagActivityTrackingSupportedName = "activity_tracking.supported"
		} else {
			flagActivityTrackingSupportedName = fmt.Sprintf("%v.activity_tracking.supported", cmdPrefix)
		}

		flagActivityTrackingSupportedValue, err := cmd.Flags().GetBool(flagActivityTrackingSupportedName)
		if err != nil {
			return err, false
		}
		m.ActivityTrackingSupported = &flagActivityTrackingSupportedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetActivityTrackingUnsupportedReasonCodeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("activity_tracking.unsupported_reason.code") {

		var flagActivityTrackingUnsupportedReasonCodeName string
		if cmdPrefix == "" {
			flagActivityTrackingUnsupportedReasonCodeName = "activity_tracking.unsupported_reason.code"
		} else {
			flagActivityTrackingUnsupportedReasonCodeName = fmt.Sprintf("%v.activity_tracking.unsupported_reason.code", cmdPrefix)
		}

		flagActivityTrackingUnsupportedReasonCodeValue, err := cmd.Flags().GetString(flagActivityTrackingUnsupportedReasonCodeName)
		if err != nil {
			return err, false
		}
		m.ActivityTrackingUnsupportedReasonCode = &flagActivityTrackingUnsupportedReasonCodeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetActivityTrackingUnsupportedReasonMessageFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("activity_tracking.unsupported_reason.message") {

		var flagActivityTrackingUnsupportedReasonMessageName string
		if cmdPrefix == "" {
			flagActivityTrackingUnsupportedReasonMessageName = "activity_tracking.unsupported_reason.message"
		} else {
			flagActivityTrackingUnsupportedReasonMessageName = fmt.Sprintf("%v.activity_tracking.unsupported_reason.message", cmdPrefix)
		}

		flagActivityTrackingUnsupportedReasonMessageValue, err := cmd.Flags().GetString(flagActivityTrackingUnsupportedReasonMessageName)
		if err != nil {
			return err, false
		}
		m.ActivityTrackingUnsupportedReasonMessage = &flagActivityTrackingUnsupportedReasonMessageValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAggregatesNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("aggregates.name") {

		var flagAggregatesNameName string
		if cmdPrefix == "" {
			flagAggregatesNameName = "aggregates.name"
		} else {
			flagAggregatesNameName = fmt.Sprintf("%v.aggregates.name", cmdPrefix)
		}

		flagAggregatesNameValue, err := cmd.Flags().GetString(flagAggregatesNameName)
		if err != nil {
			return err, false
		}
		m.AggregatesName = &flagAggregatesNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAggregatesUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("aggregates.uuid") {

		var flagAggregatesUUIDName string
		if cmdPrefix == "" {
			flagAggregatesUUIDName = "aggregates.uuid"
		} else {
			flagAggregatesUUIDName = fmt.Sprintf("%v.aggregates.uuid", cmdPrefix)
		}

		flagAggregatesUUIDValue, err := cmd.Flags().GetString(flagAggregatesUUIDName)
		if err != nil {
			return err, false
		}
		m.AggregatesUUID = &flagAggregatesUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAggressiveReadaheadModeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("aggressive_readahead_mode") {

		var flagAggressiveReadaheadModeName string
		if cmdPrefix == "" {
			flagAggressiveReadaheadModeName = "aggressive_readahead_mode"
		} else {
			flagAggressiveReadaheadModeName = fmt.Sprintf("%v.aggressive_readahead_mode", cmdPrefix)
		}

		flagAggressiveReadaheadModeValue, err := cmd.Flags().GetString(flagAggressiveReadaheadModeName)
		if err != nil {
			return err, false
		}
		m.AggressiveReadaheadMode = &flagAggressiveReadaheadModeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAnalyticsFilesScannedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("analytics.files_scanned") {

		var flagAnalyticsFilesScannedName string
		if cmdPrefix == "" {
			flagAnalyticsFilesScannedName = "analytics.files_scanned"
		} else {
			flagAnalyticsFilesScannedName = fmt.Sprintf("%v.analytics.files_scanned", cmdPrefix)
		}

		flagAnalyticsFilesScannedValue, err := cmd.Flags().GetInt64(flagAnalyticsFilesScannedName)
		if err != nil {
			return err, false
		}
		m.AnalyticsFilesScanned = &flagAnalyticsFilesScannedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAnalyticsInitializationStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("analytics.initialization.state") {

		var flagAnalyticsInitializationStateName string
		if cmdPrefix == "" {
			flagAnalyticsInitializationStateName = "analytics.initialization.state"
		} else {
			flagAnalyticsInitializationStateName = fmt.Sprintf("%v.analytics.initialization.state", cmdPrefix)
		}

		flagAnalyticsInitializationStateValue, err := cmd.Flags().GetString(flagAnalyticsInitializationStateName)
		if err != nil {
			return err, false
		}
		m.AnalyticsInitializationState = &flagAnalyticsInitializationStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAnalyticsScanProgressFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("analytics.scan_progress") {

		var flagAnalyticsScanProgressName string
		if cmdPrefix == "" {
			flagAnalyticsScanProgressName = "analytics.scan_progress"
		} else {
			flagAnalyticsScanProgressName = fmt.Sprintf("%v.analytics.scan_progress", cmdPrefix)
		}

		flagAnalyticsScanProgressValue, err := cmd.Flags().GetInt64(flagAnalyticsScanProgressName)
		if err != nil {
			return err, false
		}
		m.AnalyticsScanProgress = &flagAnalyticsScanProgressValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAnalyticsScanThrottleReasonArgumentsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("analytics.scan_throttle_reason.arguments") {

		var flagAnalyticsScanThrottleReasonArgumentsName string
		if cmdPrefix == "" {
			flagAnalyticsScanThrottleReasonArgumentsName = "analytics.scan_throttle_reason.arguments"
		} else {
			flagAnalyticsScanThrottleReasonArgumentsName = fmt.Sprintf("%v.analytics.scan_throttle_reason.arguments", cmdPrefix)
		}

		flagAnalyticsScanThrottleReasonArgumentsValue, err := cmd.Flags().GetString(flagAnalyticsScanThrottleReasonArgumentsName)
		if err != nil {
			return err, false
		}
		m.AnalyticsScanThrottleReasonArguments = &flagAnalyticsScanThrottleReasonArgumentsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAnalyticsScanThrottleReasonCodeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("analytics.scan_throttle_reason.code") {

		var flagAnalyticsScanThrottleReasonCodeName string
		if cmdPrefix == "" {
			flagAnalyticsScanThrottleReasonCodeName = "analytics.scan_throttle_reason.code"
		} else {
			flagAnalyticsScanThrottleReasonCodeName = fmt.Sprintf("%v.analytics.scan_throttle_reason.code", cmdPrefix)
		}

		flagAnalyticsScanThrottleReasonCodeValue, err := cmd.Flags().GetString(flagAnalyticsScanThrottleReasonCodeName)
		if err != nil {
			return err, false
		}
		m.AnalyticsScanThrottleReasonCode = &flagAnalyticsScanThrottleReasonCodeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAnalyticsScanThrottleReasonMessageFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("analytics.scan_throttle_reason.message") {

		var flagAnalyticsScanThrottleReasonMessageName string
		if cmdPrefix == "" {
			flagAnalyticsScanThrottleReasonMessageName = "analytics.scan_throttle_reason.message"
		} else {
			flagAnalyticsScanThrottleReasonMessageName = fmt.Sprintf("%v.analytics.scan_throttle_reason.message", cmdPrefix)
		}

		flagAnalyticsScanThrottleReasonMessageValue, err := cmd.Flags().GetString(flagAnalyticsScanThrottleReasonMessageName)
		if err != nil {
			return err, false
		}
		m.AnalyticsScanThrottleReasonMessage = &flagAnalyticsScanThrottleReasonMessageValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAnalyticsStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("analytics.state") {

		var flagAnalyticsStateName string
		if cmdPrefix == "" {
			flagAnalyticsStateName = "analytics.state"
		} else {
			flagAnalyticsStateName = fmt.Sprintf("%v.analytics.state", cmdPrefix)
		}

		flagAnalyticsStateValue, err := cmd.Flags().GetString(flagAnalyticsStateName)
		if err != nil {
			return err, false
		}
		m.AnalyticsState = &flagAnalyticsStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAnalyticsSupportedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("analytics.supported") {

		var flagAnalyticsSupportedName string
		if cmdPrefix == "" {
			flagAnalyticsSupportedName = "analytics.supported"
		} else {
			flagAnalyticsSupportedName = fmt.Sprintf("%v.analytics.supported", cmdPrefix)
		}

		flagAnalyticsSupportedValue, err := cmd.Flags().GetBool(flagAnalyticsSupportedName)
		if err != nil {
			return err, false
		}
		m.AnalyticsSupported = &flagAnalyticsSupportedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAnalyticsTotalFilesFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("analytics.total_files") {

		var flagAnalyticsTotalFilesName string
		if cmdPrefix == "" {
			flagAnalyticsTotalFilesName = "analytics.total_files"
		} else {
			flagAnalyticsTotalFilesName = fmt.Sprintf("%v.analytics.total_files", cmdPrefix)
		}

		flagAnalyticsTotalFilesValue, err := cmd.Flags().GetInt64(flagAnalyticsTotalFilesName)
		if err != nil {
			return err, false
		}
		m.AnalyticsTotalFiles = &flagAnalyticsTotalFilesValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAnalyticsUnsupportedReasonCodeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("analytics.unsupported_reason.code") {

		var flagAnalyticsUnsupportedReasonCodeName string
		if cmdPrefix == "" {
			flagAnalyticsUnsupportedReasonCodeName = "analytics.unsupported_reason.code"
		} else {
			flagAnalyticsUnsupportedReasonCodeName = fmt.Sprintf("%v.analytics.unsupported_reason.code", cmdPrefix)
		}

		flagAnalyticsUnsupportedReasonCodeValue, err := cmd.Flags().GetString(flagAnalyticsUnsupportedReasonCodeName)
		if err != nil {
			return err, false
		}
		m.AnalyticsUnsupportedReasonCode = &flagAnalyticsUnsupportedReasonCodeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAnalyticsUnsupportedReasonMessageFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("analytics.unsupported_reason.message") {

		var flagAnalyticsUnsupportedReasonMessageName string
		if cmdPrefix == "" {
			flagAnalyticsUnsupportedReasonMessageName = "analytics.unsupported_reason.message"
		} else {
			flagAnalyticsUnsupportedReasonMessageName = fmt.Sprintf("%v.analytics.unsupported_reason.message", cmdPrefix)
		}

		flagAnalyticsUnsupportedReasonMessageValue, err := cmd.Flags().GetString(flagAnalyticsUnsupportedReasonMessageName)
		if err != nil {
			return err, false
		}
		m.AnalyticsUnsupportedReasonMessage = &flagAnalyticsUnsupportedReasonMessageValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_detection_parameters.based_on_file_create_op_rate") {

		var flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateName = "anti_ransomware.attack_detection_parameters.based_on_file_create_op_rate"
		} else {
			flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.based_on_file_create_op_rate", cmdPrefix)
		}

		flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateValue, err := cmd.Flags().GetBool(flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRate = &flagAntiRansomwareAttackDetectionParametersBasedOnFileCreateOpRateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_detection_parameters.based_on_file_delete_op_rate") {

		var flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateName = "anti_ransomware.attack_detection_parameters.based_on_file_delete_op_rate"
		} else {
			flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.based_on_file_delete_op_rate", cmdPrefix)
		}

		flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateValue, err := cmd.Flags().GetBool(flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRate = &flagAntiRansomwareAttackDetectionParametersBasedOnFileDeleteOpRateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_detection_parameters.based_on_file_rename_op_rate") {

		var flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateName = "anti_ransomware.attack_detection_parameters.based_on_file_rename_op_rate"
		} else {
			flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.based_on_file_rename_op_rate", cmdPrefix)
		}

		flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateValue, err := cmd.Flags().GetBool(flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRate = &flagAntiRansomwareAttackDetectionParametersBasedOnFileRenameOpRateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_detection_parameters.based_on_high_entropy_data_rate") {

		var flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateName = "anti_ransomware.attack_detection_parameters.based_on_high_entropy_data_rate"
		} else {
			flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.based_on_high_entropy_data_rate", cmdPrefix)
		}

		flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateValue, err := cmd.Flags().GetBool(flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRate = &flagAntiRansomwareAttackDetectionParametersBasedOnHighEntropyDataRateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_detection_parameters.based_on_never_seen_before_file_extension") {

		var flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionName = "anti_ransomware.attack_detection_parameters.based_on_never_seen_before_file_extension"
		} else {
			flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.based_on_never_seen_before_file_extension", cmdPrefix)
		}

		flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionValue, err := cmd.Flags().GetBool(flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtension = &flagAntiRansomwareAttackDetectionParametersBasedOnNeverSeenBeforeFileExtensionValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_detection_parameters.file_create_op_rate_surge_notify_percent") {

		var flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentName = "anti_ransomware.attack_detection_parameters.file_create_op_rate_surge_notify_percent"
		} else {
			flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.file_create_op_rate_surge_notify_percent", cmdPrefix)
		}

		flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentValue, err := cmd.Flags().GetInt64(flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercent = &flagAntiRansomwareAttackDetectionParametersFileCreateOpRateSurgeNotifyPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_detection_parameters.file_delete_op_rate_surge_notify_percent") {

		var flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentName = "anti_ransomware.attack_detection_parameters.file_delete_op_rate_surge_notify_percent"
		} else {
			flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.file_delete_op_rate_surge_notify_percent", cmdPrefix)
		}

		flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentValue, err := cmd.Flags().GetInt64(flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercent = &flagAntiRansomwareAttackDetectionParametersFileDeleteOpRateSurgeNotifyPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_detection_parameters.file_rename_op_rate_surge_notify_percent") {

		var flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentName = "anti_ransomware.attack_detection_parameters.file_rename_op_rate_surge_notify_percent"
		} else {
			flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.file_rename_op_rate_surge_notify_percent", cmdPrefix)
		}

		flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentValue, err := cmd.Flags().GetInt64(flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercent = &flagAntiRansomwareAttackDetectionParametersFileRenameOpRateSurgeNotifyPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_detection_parameters.high_entropy_data_surge_notify_percent") {

		var flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentName = "anti_ransomware.attack_detection_parameters.high_entropy_data_surge_notify_percent"
		} else {
			flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.high_entropy_data_surge_notify_percent", cmdPrefix)
		}

		flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentValue, err := cmd.Flags().GetInt64(flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercent = &flagAntiRansomwareAttackDetectionParametersHighEntropyDataSurgeNotifyPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_detection_parameters.never_seen_before_file_extension_count_notify_threshold") {

		var flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdName = "anti_ransomware.attack_detection_parameters.never_seen_before_file_extension_count_notify_threshold"
		} else {
			flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.never_seen_before_file_extension_count_notify_threshold", cmdPrefix)
		}

		flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdValue, err := cmd.Flags().GetInt64(flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThreshold = &flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionCountNotifyThresholdValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_detection_parameters.never_seen_before_file_extension_duration_in_hours") {

		var flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursName = "anti_ransomware.attack_detection_parameters.never_seen_before_file_extension_duration_in_hours"
		} else {
			flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.never_seen_before_file_extension_duration_in_hours", cmdPrefix)
		}

		flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursValue, err := cmd.Flags().GetInt64(flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHours = &flagAntiRansomwareAttackDetectionParametersNeverSeenBeforeFileExtensionDurationInHoursValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_detection_parameters.relaxing_popular_file_extensions") {

		var flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsName = "anti_ransomware.attack_detection_parameters.relaxing_popular_file_extensions"
		} else {
			flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsName = fmt.Sprintf("%v.anti_ransomware.attack_detection_parameters.relaxing_popular_file_extensions", cmdPrefix)
		}

		flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsValue, err := cmd.Flags().GetBool(flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensions = &flagAntiRansomwareAttackDetectionParametersRelaxingPopularFileExtensionsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackProbabilityFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_probability") {

		var flagAntiRansomwareAttackProbabilityName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackProbabilityName = "anti_ransomware.attack_probability"
		} else {
			flagAntiRansomwareAttackProbabilityName = fmt.Sprintf("%v.anti_ransomware.attack_probability", cmdPrefix)
		}

		flagAntiRansomwareAttackProbabilityValue, err := cmd.Flags().GetString(flagAntiRansomwareAttackProbabilityName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackProbability = &flagAntiRansomwareAttackProbabilityValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareAttackReportsTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.attack_reports.time") {

		var flagAntiRansomwareAttackReportsTimeName string
		if cmdPrefix == "" {
			flagAntiRansomwareAttackReportsTimeName = "anti_ransomware.attack_reports.time"
		} else {
			flagAntiRansomwareAttackReportsTimeName = fmt.Sprintf("%v.anti_ransomware.attack_reports.time", cmdPrefix)
		}

		flagAntiRansomwareAttackReportsTimeValue, err := cmd.Flags().GetString(flagAntiRansomwareAttackReportsTimeName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareAttackReportsTime = &flagAntiRansomwareAttackReportsTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareDryRunStartTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.dry_run_start_time") {

		var flagAntiRansomwareDryRunStartTimeName string
		if cmdPrefix == "" {
			flagAntiRansomwareDryRunStartTimeName = "anti_ransomware.dry_run_start_time"
		} else {
			flagAntiRansomwareDryRunStartTimeName = fmt.Sprintf("%v.anti_ransomware.dry_run_start_time", cmdPrefix)
		}

		flagAntiRansomwareDryRunStartTimeValue, err := cmd.Flags().GetString(flagAntiRansomwareDryRunStartTimeName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareDryRunStartTime = &flagAntiRansomwareDryRunStartTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.event_log.is_enabled_on_new_file_extension_seen") {

		var flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenName string
		if cmdPrefix == "" {
			flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenName = "anti_ransomware.event_log.is_enabled_on_new_file_extension_seen"
		} else {
			flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenName = fmt.Sprintf("%v.anti_ransomware.event_log.is_enabled_on_new_file_extension_seen", cmdPrefix)
		}

		flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenValue, err := cmd.Flags().GetBool(flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareEventLogIsEnabledOnNewFileExtensionSeen = &flagAntiRansomwareEventLogIsEnabledOnNewFileExtensionSeenValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.event_log.is_enabled_on_snapshot_copy_creation") {

		var flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationName string
		if cmdPrefix == "" {
			flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationName = "anti_ransomware.event_log.is_enabled_on_snapshot_copy_creation"
		} else {
			flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationName = fmt.Sprintf("%v.anti_ransomware.event_log.is_enabled_on_snapshot_copy_creation", cmdPrefix)
		}

		flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationValue, err := cmd.Flags().GetBool(flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareEventLogIsEnabledOnSnapshotCopyCreation = &flagAntiRansomwareEventLogIsEnabledOnSnapshotCopyCreationValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSpaceSnapshotCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.space.snapshot_count") {

		var flagAntiRansomwareSpaceSnapshotCountName string
		if cmdPrefix == "" {
			flagAntiRansomwareSpaceSnapshotCountName = "anti_ransomware.space.snapshot_count"
		} else {
			flagAntiRansomwareSpaceSnapshotCountName = fmt.Sprintf("%v.anti_ransomware.space.snapshot_count", cmdPrefix)
		}

		flagAntiRansomwareSpaceSnapshotCountValue, err := cmd.Flags().GetInt64(flagAntiRansomwareSpaceSnapshotCountName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSpaceSnapshotCount = &flagAntiRansomwareSpaceSnapshotCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSpaceUsedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.space.used") {

		var flagAntiRansomwareSpaceUsedName string
		if cmdPrefix == "" {
			flagAntiRansomwareSpaceUsedName = "anti_ransomware.space.used"
		} else {
			flagAntiRansomwareSpaceUsedName = fmt.Sprintf("%v.anti_ransomware.space.used", cmdPrefix)
		}

		flagAntiRansomwareSpaceUsedValue, err := cmd.Flags().GetInt64(flagAntiRansomwareSpaceUsedName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSpaceUsed = &flagAntiRansomwareSpaceUsedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSpaceUsedByLogsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.space.used_by_logs") {

		var flagAntiRansomwareSpaceUsedByLogsName string
		if cmdPrefix == "" {
			flagAntiRansomwareSpaceUsedByLogsName = "anti_ransomware.space.used_by_logs"
		} else {
			flagAntiRansomwareSpaceUsedByLogsName = fmt.Sprintf("%v.anti_ransomware.space.used_by_logs", cmdPrefix)
		}

		flagAntiRansomwareSpaceUsedByLogsValue, err := cmd.Flags().GetInt64(flagAntiRansomwareSpaceUsedByLogsName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSpaceUsedByLogs = &flagAntiRansomwareSpaceUsedByLogsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSpaceUsedBySnapshotsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.space.used_by_snapshots") {

		var flagAntiRansomwareSpaceUsedBySnapshotsName string
		if cmdPrefix == "" {
			flagAntiRansomwareSpaceUsedBySnapshotsName = "anti_ransomware.space.used_by_snapshots"
		} else {
			flagAntiRansomwareSpaceUsedBySnapshotsName = fmt.Sprintf("%v.anti_ransomware.space.used_by_snapshots", cmdPrefix)
		}

		flagAntiRansomwareSpaceUsedBySnapshotsValue, err := cmd.Flags().GetInt64(flagAntiRansomwareSpaceUsedBySnapshotsName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSpaceUsedBySnapshots = &flagAntiRansomwareSpaceUsedBySnapshotsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.state") {

		var flagAntiRansomwareStateName string
		if cmdPrefix == "" {
			flagAntiRansomwareStateName = "anti_ransomware.state"
		} else {
			flagAntiRansomwareStateName = fmt.Sprintf("%v.anti_ransomware.state", cmdPrefix)
		}

		flagAntiRansomwareStateValue, err := cmd.Flags().GetString(flagAntiRansomwareStateName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareState = &flagAntiRansomwareStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeAsNormalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.surge_as_normal") {

		var flagAntiRansomwareSurgeAsNormalName string
		if cmdPrefix == "" {
			flagAntiRansomwareSurgeAsNormalName = "anti_ransomware.surge_as_normal"
		} else {
			flagAntiRansomwareSurgeAsNormalName = fmt.Sprintf("%v.anti_ransomware.surge_as_normal", cmdPrefix)
		}

		flagAntiRansomwareSurgeAsNormalValue, err := cmd.Flags().GetBool(flagAntiRansomwareSurgeAsNormalName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSurgeAsNormal = &flagAntiRansomwareSurgeAsNormalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.surge_usage.file_create_peak_rate_per_minute") {

		var flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteName = "anti_ransomware.surge_usage.file_create_peak_rate_per_minute"
		} else {
			flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.surge_usage.file_create_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSurgeUsageFileCreatePeakRatePerMinute = &flagAntiRansomwareSurgeUsageFileCreatePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.surge_usage.file_delete_peak_rate_per_minute") {

		var flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteName = "anti_ransomware.surge_usage.file_delete_peak_rate_per_minute"
		} else {
			flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.surge_usage.file_delete_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSurgeUsageFileDeletePeakRatePerMinute = &flagAntiRansomwareSurgeUsageFileDeletePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.surge_usage.file_rename_peak_rate_per_minute") {

		var flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteName = "anti_ransomware.surge_usage.file_rename_peak_rate_per_minute"
		} else {
			flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.surge_usage.file_rename_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSurgeUsageFileRenamePeakRatePerMinute = &flagAntiRansomwareSurgeUsageFileRenamePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.surge_usage.high_entropy_data_write_peak_percent") {

		var flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentName string
		if cmdPrefix == "" {
			flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentName = "anti_ransomware.surge_usage.high_entropy_data_write_peak_percent"
		} else {
			flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.anti_ransomware.surge_usage.high_entropy_data_write_peak_percent", cmdPrefix)
		}

		flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentValue, err := cmd.Flags().GetInt64(flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSurgeUsageHighEntropyDataWritePeakPercent = &flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.surge_usage.high_entropy_data_write_peak_rate_kb_per_minute") {

		var flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName = "anti_ransomware.surge_usage.high_entropy_data_write_peak_rate_kb_per_minute"
		} else {
			flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.anti_ransomware.surge_usage.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
		}

		flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinute = &flagAntiRansomwareSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSurgeUsageTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.surge_usage.time") {

		var flagAntiRansomwareSurgeUsageTimeName string
		if cmdPrefix == "" {
			flagAntiRansomwareSurgeUsageTimeName = "anti_ransomware.surge_usage.time"
		} else {
			flagAntiRansomwareSurgeUsageTimeName = fmt.Sprintf("%v.anti_ransomware.surge_usage.time", cmdPrefix)
		}

		flagAntiRansomwareSurgeUsageTimeValue, err := cmd.Flags().GetString(flagAntiRansomwareSurgeUsageTimeName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSurgeUsageTime = &flagAntiRansomwareSurgeUsageTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSuspectFilesCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.suspect_files.count") {

		var flagAntiRansomwareSuspectFilesCountName string
		if cmdPrefix == "" {
			flagAntiRansomwareSuspectFilesCountName = "anti_ransomware.suspect_files.count"
		} else {
			flagAntiRansomwareSuspectFilesCountName = fmt.Sprintf("%v.anti_ransomware.suspect_files.count", cmdPrefix)
		}

		flagAntiRansomwareSuspectFilesCountValue, err := cmd.Flags().GetInt64(flagAntiRansomwareSuspectFilesCountName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSuspectFilesCount = &flagAntiRansomwareSuspectFilesCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSuspectFilesEntropyFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.suspect_files.entropy") {

		var flagAntiRansomwareSuspectFilesEntropyName string
		if cmdPrefix == "" {
			flagAntiRansomwareSuspectFilesEntropyName = "anti_ransomware.suspect_files.entropy"
		} else {
			flagAntiRansomwareSuspectFilesEntropyName = fmt.Sprintf("%v.anti_ransomware.suspect_files.entropy", cmdPrefix)
		}

		flagAntiRansomwareSuspectFilesEntropyValue, err := cmd.Flags().GetString(flagAntiRansomwareSuspectFilesEntropyName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSuspectFilesEntropy = &flagAntiRansomwareSuspectFilesEntropyValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareSuspectFilesFormatFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.suspect_files.format") {

		var flagAntiRansomwareSuspectFilesFormatName string
		if cmdPrefix == "" {
			flagAntiRansomwareSuspectFilesFormatName = "anti_ransomware.suspect_files.format"
		} else {
			flagAntiRansomwareSuspectFilesFormatName = fmt.Sprintf("%v.anti_ransomware.suspect_files.format", cmdPrefix)
		}

		flagAntiRansomwareSuspectFilesFormatValue, err := cmd.Flags().GetString(flagAntiRansomwareSuspectFilesFormatName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareSuspectFilesFormat = &flagAntiRansomwareSuspectFilesFormatValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.typical_usage.file_create_peak_rate_per_minute") {

		var flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteName = "anti_ransomware.typical_usage.file_create_peak_rate_per_minute"
		} else {
			flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.typical_usage.file_create_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareTypicalUsageFileCreatePeakRatePerMinute = &flagAntiRansomwareTypicalUsageFileCreatePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.typical_usage.file_delete_peak_rate_per_minute") {

		var flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteName = "anti_ransomware.typical_usage.file_delete_peak_rate_per_minute"
		} else {
			flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.typical_usage.file_delete_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareTypicalUsageFileDeletePeakRatePerMinute = &flagAntiRansomwareTypicalUsageFileDeletePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.typical_usage.file_rename_peak_rate_per_minute") {

		var flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteName = "anti_ransomware.typical_usage.file_rename_peak_rate_per_minute"
		} else {
			flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.typical_usage.file_rename_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareTypicalUsageFileRenamePeakRatePerMinute = &flagAntiRansomwareTypicalUsageFileRenamePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.typical_usage.high_entropy_data_write_peak_percent") {

		var flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentName string
		if cmdPrefix == "" {
			flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentName = "anti_ransomware.typical_usage.high_entropy_data_write_peak_percent"
		} else {
			flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.anti_ransomware.typical_usage.high_entropy_data_write_peak_percent", cmdPrefix)
		}

		flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentValue, err := cmd.Flags().GetInt64(flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareTypicalUsageHighEntropyDataWritePeakPercent = &flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.typical_usage.high_entropy_data_write_peak_rate_kb_per_minute") {

		var flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName = "anti_ransomware.typical_usage.high_entropy_data_write_peak_rate_kb_per_minute"
		} else {
			flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.anti_ransomware.typical_usage.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
		}

		flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinute = &flagAntiRansomwareTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareUpdateBaselineFromSurgeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.update_baseline_from_surge") {

		var flagAntiRansomwareUpdateBaselineFromSurgeName string
		if cmdPrefix == "" {
			flagAntiRansomwareUpdateBaselineFromSurgeName = "anti_ransomware.update_baseline_from_surge"
		} else {
			flagAntiRansomwareUpdateBaselineFromSurgeName = fmt.Sprintf("%v.anti_ransomware.update_baseline_from_surge", cmdPrefix)
		}

		flagAntiRansomwareUpdateBaselineFromSurgeValue, err := cmd.Flags().GetBool(flagAntiRansomwareUpdateBaselineFromSurgeName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareUpdateBaselineFromSurge = &flagAntiRansomwareUpdateBaselineFromSurgeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadFileExtensionTypesCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.file_extension_types_count") {

		var flagAntiRansomwareWorkloadFileExtensionTypesCountName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadFileExtensionTypesCountName = "anti_ransomware.workload.file_extension_types_count"
		} else {
			flagAntiRansomwareWorkloadFileExtensionTypesCountName = fmt.Sprintf("%v.anti_ransomware.workload.file_extension_types_count", cmdPrefix)
		}

		flagAntiRansomwareWorkloadFileExtensionTypesCountValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadFileExtensionTypesCountName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadFileExtensionTypesCount = &flagAntiRansomwareWorkloadFileExtensionTypesCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadFileExtensionsObservedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.file_extensions_observed") {

		var flagAntiRansomwareWorkloadFileExtensionsObservedName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadFileExtensionsObservedName = "anti_ransomware.workload.file_extensions_observed"
		} else {
			flagAntiRansomwareWorkloadFileExtensionsObservedName = fmt.Sprintf("%v.anti_ransomware.workload.file_extensions_observed", cmdPrefix)
		}

		flagAntiRansomwareWorkloadFileExtensionsObservedValue, err := cmd.Flags().GetString(flagAntiRansomwareWorkloadFileExtensionsObservedName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadFileExtensionsObserved = &flagAntiRansomwareWorkloadFileExtensionsObservedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.historical_statistics.file_create_peak_rate_per_minute") {

		var flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteName = "anti_ransomware.workload.historical_statistics.file_create_peak_rate_per_minute"
		} else {
			flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.historical_statistics.file_create_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinute = &flagAntiRansomwareWorkloadHistoricalStatisticsFileCreatePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.historical_statistics.file_delete_peak_rate_per_minute") {

		var flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteName = "anti_ransomware.workload.historical_statistics.file_delete_peak_rate_per_minute"
		} else {
			flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.historical_statistics.file_delete_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinute = &flagAntiRansomwareWorkloadHistoricalStatisticsFileDeletePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.historical_statistics.file_rename_peak_rate_per_minute") {

		var flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteName = "anti_ransomware.workload.historical_statistics.file_rename_peak_rate_per_minute"
		} else {
			flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.historical_statistics.file_rename_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinute = &flagAntiRansomwareWorkloadHistoricalStatisticsFileRenamePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.historical_statistics.high_entropy_data_write_peak_percent") {

		var flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentName = "anti_ransomware.workload.historical_statistics.high_entropy_data_write_peak_percent"
		} else {
			flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.anti_ransomware.workload.historical_statistics.high_entropy_data_write_peak_percent", cmdPrefix)
		}

		flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercent = &flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.historical_statistics.high_entropy_data_write_peak_rate_kb_per_minute") {

		var flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteName = "anti_ransomware.workload.historical_statistics.high_entropy_data_write_peak_rate_kb_per_minute"
		} else {
			flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.historical_statistics.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinute = &flagAntiRansomwareWorkloadHistoricalStatisticsHighEntropyDataWritePeakRateKbPerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadNewlyObservedFileExtensionsCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.newly_observed_file_extensions.count") {

		var flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountName = "anti_ransomware.workload.newly_observed_file_extensions.count"
		} else {
			flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountName = fmt.Sprintf("%v.anti_ransomware.workload.newly_observed_file_extensions.count", cmdPrefix)
		}

		flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadNewlyObservedFileExtensionsCount = &flagAntiRansomwareWorkloadNewlyObservedFileExtensionsCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadNewlyObservedFileExtensionsNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.newly_observed_file_extensions.name") {

		var flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameName = "anti_ransomware.workload.newly_observed_file_extensions.name"
		} else {
			flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameName = fmt.Sprintf("%v.anti_ransomware.workload.newly_observed_file_extensions.name", cmdPrefix)
		}

		flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameValue, err := cmd.Flags().GetString(flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadNewlyObservedFileExtensionsName = &flagAntiRansomwareWorkloadNewlyObservedFileExtensionsNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_statistics.file_create_peak_rate_per_minute") {

		var flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteName = "anti_ransomware.workload.surge_statistics.file_create_peak_rate_per_minute"
		} else {
			flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_statistics.file_create_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinute = &flagAntiRansomwareWorkloadSurgeStatisticsFileCreatePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_statistics.file_delete_peak_rate_per_minute") {

		var flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteName = "anti_ransomware.workload.surge_statistics.file_delete_peak_rate_per_minute"
		} else {
			flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_statistics.file_delete_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinute = &flagAntiRansomwareWorkloadSurgeStatisticsFileDeletePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_statistics.file_rename_peak_rate_per_minute") {

		var flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteName = "anti_ransomware.workload.surge_statistics.file_rename_peak_rate_per_minute"
		} else {
			flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_statistics.file_rename_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinute = &flagAntiRansomwareWorkloadSurgeStatisticsFileRenamePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_statistics.high_entropy_data_write_peak_percent") {

		var flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentName = "anti_ransomware.workload.surge_statistics.high_entropy_data_write_peak_percent"
		} else {
			flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.anti_ransomware.workload.surge_statistics.high_entropy_data_write_peak_percent", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercent = &flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_statistics.high_entropy_data_write_peak_rate_kb_per_minute") {

		var flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteName = "anti_ransomware.workload.surge_statistics.high_entropy_data_write_peak_rate_kb_per_minute"
		} else {
			flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_statistics.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinute = &flagAntiRansomwareWorkloadSurgeStatisticsHighEntropyDataWritePeakRateKbPerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeStatisticsTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_statistics.time") {

		var flagAntiRansomwareWorkloadSurgeStatisticsTimeName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeStatisticsTimeName = "anti_ransomware.workload.surge_statistics.time"
		} else {
			flagAntiRansomwareWorkloadSurgeStatisticsTimeName = fmt.Sprintf("%v.anti_ransomware.workload.surge_statistics.time", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeStatisticsTimeValue, err := cmd.Flags().GetString(flagAntiRansomwareWorkloadSurgeStatisticsTimeName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeStatisticsTime = &flagAntiRansomwareWorkloadSurgeStatisticsTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_usage.file_create_peak_rate_per_minute") {

		var flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteName = "anti_ransomware.workload.surge_usage.file_create_peak_rate_per_minute"
		} else {
			flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.file_create_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinute = &flagAntiRansomwareWorkloadSurgeUsageFileCreatePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_usage.file_delete_peak_rate_per_minute") {

		var flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteName = "anti_ransomware.workload.surge_usage.file_delete_peak_rate_per_minute"
		} else {
			flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.file_delete_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinute = &flagAntiRansomwareWorkloadSurgeUsageFileDeletePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_usage.file_rename_peak_rate_per_minute") {

		var flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteName = "anti_ransomware.workload.surge_usage.file_rename_peak_rate_per_minute"
		} else {
			flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.file_rename_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinute = &flagAntiRansomwareWorkloadSurgeUsageFileRenamePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_usage.high_entropy_data_write_peak_percent") {

		var flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentName = "anti_ransomware.workload.surge_usage.high_entropy_data_write_peak_percent"
		} else {
			flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.high_entropy_data_write_peak_percent", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercent = &flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_usage.high_entropy_data_write_peak_rate_kb_per_minute") {

		var flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName = "anti_ransomware.workload.surge_usage.high_entropy_data_write_peak_rate_kb_per_minute"
		} else {
			flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinute = &flagAntiRansomwareWorkloadSurgeUsageHighEntropyDataWritePeakRateKbPerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_usage.newly_observed_file_extensions.count") {

		var flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountName = "anti_ransomware.workload.surge_usage.newly_observed_file_extensions.count"
		} else {
			flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.newly_observed_file_extensions.count", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCount = &flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_usage.newly_observed_file_extensions.name") {

		var flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameName = "anti_ransomware.workload.surge_usage.newly_observed_file_extensions.name"
		} else {
			flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.newly_observed_file_extensions.name", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameValue, err := cmd.Flags().GetString(flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsName = &flagAntiRansomwareWorkloadSurgeUsageNewlyObservedFileExtensionsNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadSurgeUsageTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.surge_usage.time") {

		var flagAntiRansomwareWorkloadSurgeUsageTimeName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadSurgeUsageTimeName = "anti_ransomware.workload.surge_usage.time"
		} else {
			flagAntiRansomwareWorkloadSurgeUsageTimeName = fmt.Sprintf("%v.anti_ransomware.workload.surge_usage.time", cmdPrefix)
		}

		flagAntiRansomwareWorkloadSurgeUsageTimeValue, err := cmd.Flags().GetString(flagAntiRansomwareWorkloadSurgeUsageTimeName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadSurgeUsageTime = &flagAntiRansomwareWorkloadSurgeUsageTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.typical_usage.file_create_peak_rate_per_minute") {

		var flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteName = "anti_ransomware.workload.typical_usage.file_create_peak_rate_per_minute"
		} else {
			flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.typical_usage.file_create_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinute = &flagAntiRansomwareWorkloadTypicalUsageFileCreatePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.typical_usage.file_delete_peak_rate_per_minute") {

		var flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteName = "anti_ransomware.workload.typical_usage.file_delete_peak_rate_per_minute"
		} else {
			flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.typical_usage.file_delete_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinute = &flagAntiRansomwareWorkloadTypicalUsageFileDeletePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.typical_usage.file_rename_peak_rate_per_minute") {

		var flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteName = "anti_ransomware.workload.typical_usage.file_rename_peak_rate_per_minute"
		} else {
			flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.typical_usage.file_rename_peak_rate_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinute = &flagAntiRansomwareWorkloadTypicalUsageFileRenamePeakRatePerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.typical_usage.high_entropy_data_write_peak_percent") {

		var flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentName = "anti_ransomware.workload.typical_usage.high_entropy_data_write_peak_percent"
		} else {
			flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentName = fmt.Sprintf("%v.anti_ransomware.workload.typical_usage.high_entropy_data_write_peak_percent", cmdPrefix)
		}

		flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercent = &flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("anti_ransomware.workload.typical_usage.high_entropy_data_write_peak_rate_kb_per_minute") {

		var flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName string
		if cmdPrefix == "" {
			flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName = "anti_ransomware.workload.typical_usage.high_entropy_data_write_peak_rate_kb_per_minute"
		} else {
			flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName = fmt.Sprintf("%v.anti_ransomware.workload.typical_usage.high_entropy_data_write_peak_rate_kb_per_minute", cmdPrefix)
		}

		flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteValue, err := cmd.Flags().GetInt64(flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteName)
		if err != nil {
			return err, false
		}
		m.AntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinute = &flagAntiRansomwareWorkloadTypicalUsageHighEntropyDataWritePeakRateKbPerMinuteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetApplicationNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("application.name") {

		var flagApplicationNameName string
		if cmdPrefix == "" {
			flagApplicationNameName = "application.name"
		} else {
			flagApplicationNameName = fmt.Sprintf("%v.application.name", cmdPrefix)
		}

		flagApplicationNameValue, err := cmd.Flags().GetString(flagApplicationNameName)
		if err != nil {
			return err, false
		}
		m.ApplicationName = &flagApplicationNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetApplicationUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("application.uuid") {

		var flagApplicationUUIDName string
		if cmdPrefix == "" {
			flagApplicationUUIDName = "application.uuid"
		} else {
			flagApplicationUUIDName = fmt.Sprintf("%v.application.uuid", cmdPrefix)
		}

		flagApplicationUUIDValue, err := cmd.Flags().GetString(flagApplicationUUIDName)
		if err != nil {
			return err, false
		}
		m.ApplicationUUID = &flagApplicationUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAsynchronousDirectoryDeleteEnabledFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("asynchronous_directory_delete.enabled") {

		var flagAsynchronousDirectoryDeleteEnabledName string
		if cmdPrefix == "" {
			flagAsynchronousDirectoryDeleteEnabledName = "asynchronous_directory_delete.enabled"
		} else {
			flagAsynchronousDirectoryDeleteEnabledName = fmt.Sprintf("%v.asynchronous_directory_delete.enabled", cmdPrefix)
		}

		flagAsynchronousDirectoryDeleteEnabledValue, err := cmd.Flags().GetBool(flagAsynchronousDirectoryDeleteEnabledName)
		if err != nil {
			return err, false
		}
		m.AsynchronousDirectoryDeleteEnabled = &flagAsynchronousDirectoryDeleteEnabledValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAsynchronousDirectoryDeleteTrashBinFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("asynchronous_directory_delete.trash_bin") {

		var flagAsynchronousDirectoryDeleteTrashBinName string
		if cmdPrefix == "" {
			flagAsynchronousDirectoryDeleteTrashBinName = "asynchronous_directory_delete.trash_bin"
		} else {
			flagAsynchronousDirectoryDeleteTrashBinName = fmt.Sprintf("%v.asynchronous_directory_delete.trash_bin", cmdPrefix)
		}

		flagAsynchronousDirectoryDeleteTrashBinValue, err := cmd.Flags().GetString(flagAsynchronousDirectoryDeleteTrashBinName)
		if err != nil {
			return err, false
		}
		m.AsynchronousDirectoryDeleteTrashBin = &flagAsynchronousDirectoryDeleteTrashBinValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAutosizeGrowThresholdFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("autosize.grow_threshold") {

		var flagAutosizeGrowThresholdName string
		if cmdPrefix == "" {
			flagAutosizeGrowThresholdName = "autosize.grow_threshold"
		} else {
			flagAutosizeGrowThresholdName = fmt.Sprintf("%v.autosize.grow_threshold", cmdPrefix)
		}

		flagAutosizeGrowThresholdValue, err := cmd.Flags().GetInt64(flagAutosizeGrowThresholdName)
		if err != nil {
			return err, false
		}
		m.AutosizeGrowThreshold = &flagAutosizeGrowThresholdValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAutosizeMaximumFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("autosize.maximum") {

		var flagAutosizeMaximumName string
		if cmdPrefix == "" {
			flagAutosizeMaximumName = "autosize.maximum"
		} else {
			flagAutosizeMaximumName = fmt.Sprintf("%v.autosize.maximum", cmdPrefix)
		}

		flagAutosizeMaximumValue, err := cmd.Flags().GetInt64(flagAutosizeMaximumName)
		if err != nil {
			return err, false
		}
		m.AutosizeMaximum = &flagAutosizeMaximumValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAutosizeMinimumFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("autosize.minimum") {

		var flagAutosizeMinimumName string
		if cmdPrefix == "" {
			flagAutosizeMinimumName = "autosize.minimum"
		} else {
			flagAutosizeMinimumName = fmt.Sprintf("%v.autosize.minimum", cmdPrefix)
		}

		flagAutosizeMinimumValue, err := cmd.Flags().GetInt64(flagAutosizeMinimumName)
		if err != nil {
			return err, false
		}
		m.AutosizeMinimum = &flagAutosizeMinimumValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAutosizeModeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("autosize.mode") {

		var flagAutosizeModeName string
		if cmdPrefix == "" {
			flagAutosizeModeName = "autosize.mode"
		} else {
			flagAutosizeModeName = fmt.Sprintf("%v.autosize.mode", cmdPrefix)
		}

		flagAutosizeModeValue, err := cmd.Flags().GetString(flagAutosizeModeName)
		if err != nil {
			return err, false
		}
		m.AutosizeMode = &flagAutosizeModeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetAutosizeShrinkThresholdFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("autosize.shrink_threshold") {

		var flagAutosizeShrinkThresholdName string
		if cmdPrefix == "" {
			flagAutosizeShrinkThresholdName = "autosize.shrink_threshold"
		} else {
			flagAutosizeShrinkThresholdName = fmt.Sprintf("%v.autosize.shrink_threshold", cmdPrefix)
		}

		flagAutosizeShrinkThresholdValue, err := cmd.Flags().GetInt64(flagAutosizeShrinkThresholdName)
		if err != nil {
			return err, false
		}
		m.AutosizeShrinkThreshold = &flagAutosizeShrinkThresholdValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneHasFlexcloneFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.has_flexclone") {

		var flagCloneHasFlexcloneName string
		if cmdPrefix == "" {
			flagCloneHasFlexcloneName = "clone.has_flexclone"
		} else {
			flagCloneHasFlexcloneName = fmt.Sprintf("%v.clone.has_flexclone", cmdPrefix)
		}

		flagCloneHasFlexcloneValue, err := cmd.Flags().GetBool(flagCloneHasFlexcloneName)
		if err != nil {
			return err, false
		}
		m.CloneHasFlexclone = &flagCloneHasFlexcloneValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneInheritedPhysicalUsedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.inherited_physical_used") {

		var flagCloneInheritedPhysicalUsedName string
		if cmdPrefix == "" {
			flagCloneInheritedPhysicalUsedName = "clone.inherited_physical_used"
		} else {
			flagCloneInheritedPhysicalUsedName = fmt.Sprintf("%v.clone.inherited_physical_used", cmdPrefix)
		}

		flagCloneInheritedPhysicalUsedValue, err := cmd.Flags().GetInt64(flagCloneInheritedPhysicalUsedName)
		if err != nil {
			return err, false
		}
		m.CloneInheritedPhysicalUsed = &flagCloneInheritedPhysicalUsedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneInheritedSavingsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.inherited_savings") {

		var flagCloneInheritedSavingsName string
		if cmdPrefix == "" {
			flagCloneInheritedSavingsName = "clone.inherited_savings"
		} else {
			flagCloneInheritedSavingsName = fmt.Sprintf("%v.clone.inherited_savings", cmdPrefix)
		}

		flagCloneInheritedSavingsValue, err := cmd.Flags().GetInt64(flagCloneInheritedSavingsName)
		if err != nil {
			return err, false
		}
		m.CloneInheritedSavings = &flagCloneInheritedSavingsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneIsFlexcloneFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.is_flexclone") {

		var flagCloneIsFlexcloneName string
		if cmdPrefix == "" {
			flagCloneIsFlexcloneName = "clone.is_flexclone"
		} else {
			flagCloneIsFlexcloneName = fmt.Sprintf("%v.clone.is_flexclone", cmdPrefix)
		}

		flagCloneIsFlexcloneValue, err := cmd.Flags().GetBool(flagCloneIsFlexcloneName)
		if err != nil {
			return err, false
		}
		m.CloneIsFlexclone = &flagCloneIsFlexcloneValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneParentSnapshotNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.parent_snapshot.name") {

		var flagCloneParentSnapshotNameName string
		if cmdPrefix == "" {
			flagCloneParentSnapshotNameName = "clone.parent_snapshot.name"
		} else {
			flagCloneParentSnapshotNameName = fmt.Sprintf("%v.clone.parent_snapshot.name", cmdPrefix)
		}

		flagCloneParentSnapshotNameValue, err := cmd.Flags().GetString(flagCloneParentSnapshotNameName)
		if err != nil {
			return err, false
		}
		m.CloneParentSnapshotName = &flagCloneParentSnapshotNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneParentSnapshotUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.parent_snapshot.uuid") {

		var flagCloneParentSnapshotUUIDName string
		if cmdPrefix == "" {
			flagCloneParentSnapshotUUIDName = "clone.parent_snapshot.uuid"
		} else {
			flagCloneParentSnapshotUUIDName = fmt.Sprintf("%v.clone.parent_snapshot.uuid", cmdPrefix)
		}

		flagCloneParentSnapshotUUIDValue, err := cmd.Flags().GetString(flagCloneParentSnapshotUUIDName)
		if err != nil {
			return err, false
		}
		m.CloneParentSnapshotUUID = &flagCloneParentSnapshotUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneParentSvmNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.parent_svm.name") {

		var flagCloneParentSvmNameName string
		if cmdPrefix == "" {
			flagCloneParentSvmNameName = "clone.parent_svm.name"
		} else {
			flagCloneParentSvmNameName = fmt.Sprintf("%v.clone.parent_svm.name", cmdPrefix)
		}

		flagCloneParentSvmNameValue, err := cmd.Flags().GetString(flagCloneParentSvmNameName)
		if err != nil {
			return err, false
		}
		m.CloneParentSvmName = &flagCloneParentSvmNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneParentSvmUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.parent_svm.uuid") {

		var flagCloneParentSvmUUIDName string
		if cmdPrefix == "" {
			flagCloneParentSvmUUIDName = "clone.parent_svm.uuid"
		} else {
			flagCloneParentSvmUUIDName = fmt.Sprintf("%v.clone.parent_svm.uuid", cmdPrefix)
		}

		flagCloneParentSvmUUIDValue, err := cmd.Flags().GetString(flagCloneParentSvmUUIDName)
		if err != nil {
			return err, false
		}
		m.CloneParentSvmUUID = &flagCloneParentSvmUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneParentVolumeNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.parent_volume.name") {

		var flagCloneParentVolumeNameName string
		if cmdPrefix == "" {
			flagCloneParentVolumeNameName = "clone.parent_volume.name"
		} else {
			flagCloneParentVolumeNameName = fmt.Sprintf("%v.clone.parent_volume.name", cmdPrefix)
		}

		flagCloneParentVolumeNameValue, err := cmd.Flags().GetString(flagCloneParentVolumeNameName)
		if err != nil {
			return err, false
		}
		m.CloneParentVolumeName = &flagCloneParentVolumeNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneParentVolumeUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.parent_volume.uuid") {

		var flagCloneParentVolumeUUIDName string
		if cmdPrefix == "" {
			flagCloneParentVolumeUUIDName = "clone.parent_volume.uuid"
		} else {
			flagCloneParentVolumeUUIDName = fmt.Sprintf("%v.clone.parent_volume.uuid", cmdPrefix)
		}

		flagCloneParentVolumeUUIDValue, err := cmd.Flags().GetString(flagCloneParentVolumeUUIDName)
		if err != nil {
			return err, false
		}
		m.CloneParentVolumeUUID = &flagCloneParentVolumeUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneSplitCompletePercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.split_complete_percent") {

		var flagCloneSplitCompletePercentName string
		if cmdPrefix == "" {
			flagCloneSplitCompletePercentName = "clone.split_complete_percent"
		} else {
			flagCloneSplitCompletePercentName = fmt.Sprintf("%v.clone.split_complete_percent", cmdPrefix)
		}

		flagCloneSplitCompletePercentValue, err := cmd.Flags().GetInt64(flagCloneSplitCompletePercentName)
		if err != nil {
			return err, false
		}
		m.CloneSplitCompletePercent = &flagCloneSplitCompletePercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneSplitEstimateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.split_estimate") {

		var flagCloneSplitEstimateName string
		if cmdPrefix == "" {
			flagCloneSplitEstimateName = "clone.split_estimate"
		} else {
			flagCloneSplitEstimateName = fmt.Sprintf("%v.clone.split_estimate", cmdPrefix)
		}

		flagCloneSplitEstimateValue, err := cmd.Flags().GetInt64(flagCloneSplitEstimateName)
		if err != nil {
			return err, false
		}
		m.CloneSplitEstimate = &flagCloneSplitEstimateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloneSplitInitiatedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clone.split_initiated") {

		var flagCloneSplitInitiatedName string
		if cmdPrefix == "" {
			flagCloneSplitInitiatedName = "clone.split_initiated"
		} else {
			flagCloneSplitInitiatedName = fmt.Sprintf("%v.clone.split_initiated", cmdPrefix)
		}

		flagCloneSplitInitiatedValue, err := cmd.Flags().GetBool(flagCloneSplitInitiatedName)
		if err != nil {
			return err, false
		}
		m.CloneSplitInitiated = &flagCloneSplitInitiatedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloudRetrievalPolicyFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("cloud_retrieval_policy") {

		var flagCloudRetrievalPolicyName string
		if cmdPrefix == "" {
			flagCloudRetrievalPolicyName = "cloud_retrieval_policy"
		} else {
			flagCloudRetrievalPolicyName = fmt.Sprintf("%v.cloud_retrieval_policy", cmdPrefix)
		}

		flagCloudRetrievalPolicyValue, err := cmd.Flags().GetString(flagCloudRetrievalPolicyName)
		if err != nil {
			return err, false
		}
		m.CloudRetrievalPolicy = &flagCloudRetrievalPolicyValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCloudWriteEnabledFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("cloud_write_enabled") {

		var flagCloudWriteEnabledName string
		if cmdPrefix == "" {
			flagCloudWriteEnabledName = "cloud_write_enabled"
		} else {
			flagCloudWriteEnabledName = fmt.Sprintf("%v.cloud_write_enabled", cmdPrefix)
		}

		flagCloudWriteEnabledValue, err := cmd.Flags().GetBool(flagCloudWriteEnabledName)
		if err != nil {
			return err, false
		}
		m.CloudWriteEnabled = &flagCloudWriteEnabledValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCommentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("comment") {

		var flagCommentName string
		if cmdPrefix == "" {
			flagCommentName = "comment"
		} else {
			flagCommentName = fmt.Sprintf("%v.comment", cmdPrefix)
		}

		flagCommentValue, err := cmd.Flags().GetString(flagCommentName)
		if err != nil {
			return err, false
		}
		m.Comment = &flagCommentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConsistencyGroupNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("consistency_group.name") {

		var flagConsistencyGroupNameName string
		if cmdPrefix == "" {
			flagConsistencyGroupNameName = "consistency_group.name"
		} else {
			flagConsistencyGroupNameName = fmt.Sprintf("%v.consistency_group.name", cmdPrefix)
		}

		flagConsistencyGroupNameValue, err := cmd.Flags().GetString(flagConsistencyGroupNameName)
		if err != nil {
			return err, false
		}
		m.ConsistencyGroupName = &flagConsistencyGroupNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConsistencyGroupUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("consistency_group.uuid") {

		var flagConsistencyGroupUUIDName string
		if cmdPrefix == "" {
			flagConsistencyGroupUUIDName = "consistency_group.uuid"
		} else {
			flagConsistencyGroupUUIDName = fmt.Sprintf("%v.consistency_group.uuid", cmdPrefix)
		}

		flagConsistencyGroupUUIDValue, err := cmd.Flags().GetString(flagConsistencyGroupUUIDName)
		if err != nil {
			return err, false
		}
		m.ConsistencyGroupUUID = &flagConsistencyGroupUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsAggregatesNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.aggregates.name") {

		var flagConstituentsAggregatesNameName string
		if cmdPrefix == "" {
			flagConstituentsAggregatesNameName = "constituents.aggregates.name"
		} else {
			flagConstituentsAggregatesNameName = fmt.Sprintf("%v.constituents.aggregates.name", cmdPrefix)
		}

		flagConstituentsAggregatesNameValue, err := cmd.Flags().GetString(flagConstituentsAggregatesNameName)
		if err != nil {
			return err, false
		}
		m.ConstituentsAggregatesName = &flagConstituentsAggregatesNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsAggregatesUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.aggregates.uuid") {

		var flagConstituentsAggregatesUUIDName string
		if cmdPrefix == "" {
			flagConstituentsAggregatesUUIDName = "constituents.aggregates.uuid"
		} else {
			flagConstituentsAggregatesUUIDName = fmt.Sprintf("%v.constituents.aggregates.uuid", cmdPrefix)
		}

		flagConstituentsAggregatesUUIDValue, err := cmd.Flags().GetString(flagConstituentsAggregatesUUIDName)
		if err != nil {
			return err, false
		}
		m.ConstituentsAggregatesUUID = &flagConstituentsAggregatesUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsMovementCutoverWindowFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.movement.cutover_window") {

		var flagConstituentsMovementCutoverWindowName string
		if cmdPrefix == "" {
			flagConstituentsMovementCutoverWindowName = "constituents.movement.cutover_window"
		} else {
			flagConstituentsMovementCutoverWindowName = fmt.Sprintf("%v.constituents.movement.cutover_window", cmdPrefix)
		}

		flagConstituentsMovementCutoverWindowValue, err := cmd.Flags().GetInt64(flagConstituentsMovementCutoverWindowName)
		if err != nil {
			return err, false
		}
		m.ConstituentsMovementCutoverWindow = &flagConstituentsMovementCutoverWindowValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsMovementDestinationAggregateNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.movement.destination_aggregate.name") {

		var flagConstituentsMovementDestinationAggregateNameName string
		if cmdPrefix == "" {
			flagConstituentsMovementDestinationAggregateNameName = "constituents.movement.destination_aggregate.name"
		} else {
			flagConstituentsMovementDestinationAggregateNameName = fmt.Sprintf("%v.constituents.movement.destination_aggregate.name", cmdPrefix)
		}

		flagConstituentsMovementDestinationAggregateNameValue, err := cmd.Flags().GetString(flagConstituentsMovementDestinationAggregateNameName)
		if err != nil {
			return err, false
		}
		m.ConstituentsMovementDestinationAggregateName = &flagConstituentsMovementDestinationAggregateNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsMovementDestinationAggregateUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.movement.destination_aggregate.uuid") {

		var flagConstituentsMovementDestinationAggregateUUIDName string
		if cmdPrefix == "" {
			flagConstituentsMovementDestinationAggregateUUIDName = "constituents.movement.destination_aggregate.uuid"
		} else {
			flagConstituentsMovementDestinationAggregateUUIDName = fmt.Sprintf("%v.constituents.movement.destination_aggregate.uuid", cmdPrefix)
		}

		flagConstituentsMovementDestinationAggregateUUIDValue, err := cmd.Flags().GetString(flagConstituentsMovementDestinationAggregateUUIDName)
		if err != nil {
			return err, false
		}
		m.ConstituentsMovementDestinationAggregateUUID = &flagConstituentsMovementDestinationAggregateUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsMovementPercentCompleteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.movement.percent_complete") {

		var flagConstituentsMovementPercentCompleteName string
		if cmdPrefix == "" {
			flagConstituentsMovementPercentCompleteName = "constituents.movement.percent_complete"
		} else {
			flagConstituentsMovementPercentCompleteName = fmt.Sprintf("%v.constituents.movement.percent_complete", cmdPrefix)
		}

		flagConstituentsMovementPercentCompleteValue, err := cmd.Flags().GetInt64(flagConstituentsMovementPercentCompleteName)
		if err != nil {
			return err, false
		}
		m.ConstituentsMovementPercentComplete = &flagConstituentsMovementPercentCompleteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsMovementStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.movement.state") {

		var flagConstituentsMovementStateName string
		if cmdPrefix == "" {
			flagConstituentsMovementStateName = "constituents.movement.state"
		} else {
			flagConstituentsMovementStateName = fmt.Sprintf("%v.constituents.movement.state", cmdPrefix)
		}

		flagConstituentsMovementStateValue, err := cmd.Flags().GetString(flagConstituentsMovementStateName)
		if err != nil {
			return err, false
		}
		m.ConstituentsMovementState = &flagConstituentsMovementStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.name") {

		var flagConstituentsNameName string
		if cmdPrefix == "" {
			flagConstituentsNameName = "constituents.name"
		} else {
			flagConstituentsNameName = fmt.Sprintf("%v.constituents.name", cmdPrefix)
		}

		flagConstituentsNameValue, err := cmd.Flags().GetString(flagConstituentsNameName)
		if err != nil {
			return err, false
		}
		m.ConstituentsName = &flagConstituentsNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceAfsTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.afs_total") {

		var flagConstituentsSpaceAfsTotalName string
		if cmdPrefix == "" {
			flagConstituentsSpaceAfsTotalName = "constituents.space.afs_total"
		} else {
			flagConstituentsSpaceAfsTotalName = fmt.Sprintf("%v.constituents.space.afs_total", cmdPrefix)
		}

		flagConstituentsSpaceAfsTotalValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceAfsTotalName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceAfsTotal = &flagConstituentsSpaceAfsTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceAvailableFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.available") {

		var flagConstituentsSpaceAvailableName string
		if cmdPrefix == "" {
			flagConstituentsSpaceAvailableName = "constituents.space.available"
		} else {
			flagConstituentsSpaceAvailableName = fmt.Sprintf("%v.constituents.space.available", cmdPrefix)
		}

		flagConstituentsSpaceAvailableValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceAvailableName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceAvailable = &flagConstituentsSpaceAvailableValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceAvailablePercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.available_percent") {

		var flagConstituentsSpaceAvailablePercentName string
		if cmdPrefix == "" {
			flagConstituentsSpaceAvailablePercentName = "constituents.space.available_percent"
		} else {
			flagConstituentsSpaceAvailablePercentName = fmt.Sprintf("%v.constituents.space.available_percent", cmdPrefix)
		}

		flagConstituentsSpaceAvailablePercentValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceAvailablePercentName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceAvailablePercent = &flagConstituentsSpaceAvailablePercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceBlockStorageInactiveUserDataFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.block_storage_inactive_user_data") {

		var flagConstituentsSpaceBlockStorageInactiveUserDataName string
		if cmdPrefix == "" {
			flagConstituentsSpaceBlockStorageInactiveUserDataName = "constituents.space.block_storage_inactive_user_data"
		} else {
			flagConstituentsSpaceBlockStorageInactiveUserDataName = fmt.Sprintf("%v.constituents.space.block_storage_inactive_user_data", cmdPrefix)
		}

		flagConstituentsSpaceBlockStorageInactiveUserDataValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceBlockStorageInactiveUserDataName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceBlockStorageInactiveUserData = &flagConstituentsSpaceBlockStorageInactiveUserDataValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceCapacityTierFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.capacity_tier_footprint") {

		var flagConstituentsSpaceCapacityTierFootprintName string
		if cmdPrefix == "" {
			flagConstituentsSpaceCapacityTierFootprintName = "constituents.space.capacity_tier_footprint"
		} else {
			flagConstituentsSpaceCapacityTierFootprintName = fmt.Sprintf("%v.constituents.space.capacity_tier_footprint", cmdPrefix)
		}

		flagConstituentsSpaceCapacityTierFootprintValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceCapacityTierFootprintName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceCapacityTierFootprint = &flagConstituentsSpaceCapacityTierFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.footprint") {

		var flagConstituentsSpaceFootprintName string
		if cmdPrefix == "" {
			flagConstituentsSpaceFootprintName = "constituents.space.footprint"
		} else {
			flagConstituentsSpaceFootprintName = fmt.Sprintf("%v.constituents.space.footprint", cmdPrefix)
		}

		flagConstituentsSpaceFootprintValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceFootprintName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceFootprint = &flagConstituentsSpaceFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceLargeSizeEnabledFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.large_size_enabled") {

		var flagConstituentsSpaceLargeSizeEnabledName string
		if cmdPrefix == "" {
			flagConstituentsSpaceLargeSizeEnabledName = "constituents.space.large_size_enabled"
		} else {
			flagConstituentsSpaceLargeSizeEnabledName = fmt.Sprintf("%v.constituents.space.large_size_enabled", cmdPrefix)
		}

		flagConstituentsSpaceLargeSizeEnabledValue, err := cmd.Flags().GetBool(flagConstituentsSpaceLargeSizeEnabledName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceLargeSizeEnabled = &flagConstituentsSpaceLargeSizeEnabledValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceLocalTierFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.local_tier_footprint") {

		var flagConstituentsSpaceLocalTierFootprintName string
		if cmdPrefix == "" {
			flagConstituentsSpaceLocalTierFootprintName = "constituents.space.local_tier_footprint"
		} else {
			flagConstituentsSpaceLocalTierFootprintName = fmt.Sprintf("%v.constituents.space.local_tier_footprint", cmdPrefix)
		}

		flagConstituentsSpaceLocalTierFootprintValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceLocalTierFootprintName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceLocalTierFootprint = &flagConstituentsSpaceLocalTierFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceAvailableFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.logical_space.available") {

		var flagConstituentsSpaceLogicalSpaceAvailableName string
		if cmdPrefix == "" {
			flagConstituentsSpaceLogicalSpaceAvailableName = "constituents.space.logical_space.available"
		} else {
			flagConstituentsSpaceLogicalSpaceAvailableName = fmt.Sprintf("%v.constituents.space.logical_space.available", cmdPrefix)
		}

		flagConstituentsSpaceLogicalSpaceAvailableValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceLogicalSpaceAvailableName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceLogicalSpaceAvailable = &flagConstituentsSpaceLogicalSpaceAvailableValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceEnforcementFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.logical_space.enforcement") {

		var flagConstituentsSpaceLogicalSpaceEnforcementName string
		if cmdPrefix == "" {
			flagConstituentsSpaceLogicalSpaceEnforcementName = "constituents.space.logical_space.enforcement"
		} else {
			flagConstituentsSpaceLogicalSpaceEnforcementName = fmt.Sprintf("%v.constituents.space.logical_space.enforcement", cmdPrefix)
		}

		flagConstituentsSpaceLogicalSpaceEnforcementValue, err := cmd.Flags().GetBool(flagConstituentsSpaceLogicalSpaceEnforcementName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceLogicalSpaceEnforcement = &flagConstituentsSpaceLogicalSpaceEnforcementValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceReportingFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.logical_space.reporting") {

		var flagConstituentsSpaceLogicalSpaceReportingName string
		if cmdPrefix == "" {
			flagConstituentsSpaceLogicalSpaceReportingName = "constituents.space.logical_space.reporting"
		} else {
			flagConstituentsSpaceLogicalSpaceReportingName = fmt.Sprintf("%v.constituents.space.logical_space.reporting", cmdPrefix)
		}

		flagConstituentsSpaceLogicalSpaceReportingValue, err := cmd.Flags().GetBool(flagConstituentsSpaceLogicalSpaceReportingName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceLogicalSpaceReporting = &flagConstituentsSpaceLogicalSpaceReportingValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceLogicalSpaceUsedByAfsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.logical_space.used_by_afs") {

		var flagConstituentsSpaceLogicalSpaceUsedByAfsName string
		if cmdPrefix == "" {
			flagConstituentsSpaceLogicalSpaceUsedByAfsName = "constituents.space.logical_space.used_by_afs"
		} else {
			flagConstituentsSpaceLogicalSpaceUsedByAfsName = fmt.Sprintf("%v.constituents.space.logical_space.used_by_afs", cmdPrefix)
		}

		flagConstituentsSpaceLogicalSpaceUsedByAfsValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceLogicalSpaceUsedByAfsName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceLogicalSpaceUsedByAfs = &flagConstituentsSpaceLogicalSpaceUsedByAfsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceMaxSizeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.max_size") {

		var flagConstituentsSpaceMaxSizeName string
		if cmdPrefix == "" {
			flagConstituentsSpaceMaxSizeName = "constituents.space.max_size"
		} else {
			flagConstituentsSpaceMaxSizeName = fmt.Sprintf("%v.constituents.space.max_size", cmdPrefix)
		}

		flagConstituentsSpaceMaxSizeValue, err := cmd.Flags().GetString(flagConstituentsSpaceMaxSizeName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceMaxSize = &flagConstituentsSpaceMaxSizeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceMetadataFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.metadata") {

		var flagConstituentsSpaceMetadataName string
		if cmdPrefix == "" {
			flagConstituentsSpaceMetadataName = "constituents.space.metadata"
		} else {
			flagConstituentsSpaceMetadataName = fmt.Sprintf("%v.constituents.space.metadata", cmdPrefix)
		}

		flagConstituentsSpaceMetadataValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceMetadataName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceMetadata = &flagConstituentsSpaceMetadataValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceOverProvisionedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.over_provisioned") {

		var flagConstituentsSpaceOverProvisionedName string
		if cmdPrefix == "" {
			flagConstituentsSpaceOverProvisionedName = "constituents.space.over_provisioned"
		} else {
			flagConstituentsSpaceOverProvisionedName = fmt.Sprintf("%v.constituents.space.over_provisioned", cmdPrefix)
		}

		flagConstituentsSpaceOverProvisionedValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceOverProvisionedName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceOverProvisioned = &flagConstituentsSpaceOverProvisionedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpacePerformanceTierFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.performance_tier_footprint") {

		var flagConstituentsSpacePerformanceTierFootprintName string
		if cmdPrefix == "" {
			flagConstituentsSpacePerformanceTierFootprintName = "constituents.space.performance_tier_footprint"
		} else {
			flagConstituentsSpacePerformanceTierFootprintName = fmt.Sprintf("%v.constituents.space.performance_tier_footprint", cmdPrefix)
		}

		flagConstituentsSpacePerformanceTierFootprintValue, err := cmd.Flags().GetInt64(flagConstituentsSpacePerformanceTierFootprintName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpacePerformanceTierFootprint = &flagConstituentsSpacePerformanceTierFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceSizeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.size") {

		var flagConstituentsSpaceSizeName string
		if cmdPrefix == "" {
			flagConstituentsSpaceSizeName = "constituents.space.size"
		} else {
			flagConstituentsSpaceSizeName = fmt.Sprintf("%v.constituents.space.size", cmdPrefix)
		}

		flagConstituentsSpaceSizeValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceSizeName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceSize = &flagConstituentsSpaceSizeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceSnapshotReservePercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.snapshot.reserve_percent") {

		var flagConstituentsSpaceSnapshotReservePercentName string
		if cmdPrefix == "" {
			flagConstituentsSpaceSnapshotReservePercentName = "constituents.space.snapshot.reserve_percent"
		} else {
			flagConstituentsSpaceSnapshotReservePercentName = fmt.Sprintf("%v.constituents.space.snapshot.reserve_percent", cmdPrefix)
		}

		flagConstituentsSpaceSnapshotReservePercentValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceSnapshotReservePercentName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceSnapshotReservePercent = &flagConstituentsSpaceSnapshotReservePercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceSnapshotUsedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.snapshot.used") {

		var flagConstituentsSpaceSnapshotUsedName string
		if cmdPrefix == "" {
			flagConstituentsSpaceSnapshotUsedName = "constituents.space.snapshot.used"
		} else {
			flagConstituentsSpaceSnapshotUsedName = fmt.Sprintf("%v.constituents.space.snapshot.used", cmdPrefix)
		}

		flagConstituentsSpaceSnapshotUsedValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceSnapshotUsedName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceSnapshotUsed = &flagConstituentsSpaceSnapshotUsedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceTotalFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.total_footprint") {

		var flagConstituentsSpaceTotalFootprintName string
		if cmdPrefix == "" {
			flagConstituentsSpaceTotalFootprintName = "constituents.space.total_footprint"
		} else {
			flagConstituentsSpaceTotalFootprintName = fmt.Sprintf("%v.constituents.space.total_footprint", cmdPrefix)
		}

		flagConstituentsSpaceTotalFootprintValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceTotalFootprintName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceTotalFootprint = &flagConstituentsSpaceTotalFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceTotalMetadataFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.total_metadata") {

		var flagConstituentsSpaceTotalMetadataName string
		if cmdPrefix == "" {
			flagConstituentsSpaceTotalMetadataName = "constituents.space.total_metadata"
		} else {
			flagConstituentsSpaceTotalMetadataName = fmt.Sprintf("%v.constituents.space.total_metadata", cmdPrefix)
		}

		flagConstituentsSpaceTotalMetadataValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceTotalMetadataName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceTotalMetadata = &flagConstituentsSpaceTotalMetadataValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceTotalMetadataFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.total_metadata_footprint") {

		var flagConstituentsSpaceTotalMetadataFootprintName string
		if cmdPrefix == "" {
			flagConstituentsSpaceTotalMetadataFootprintName = "constituents.space.total_metadata_footprint"
		} else {
			flagConstituentsSpaceTotalMetadataFootprintName = fmt.Sprintf("%v.constituents.space.total_metadata_footprint", cmdPrefix)
		}

		flagConstituentsSpaceTotalMetadataFootprintValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceTotalMetadataFootprintName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceTotalMetadataFootprint = &flagConstituentsSpaceTotalMetadataFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceUsedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.used") {

		var flagConstituentsSpaceUsedName string
		if cmdPrefix == "" {
			flagConstituentsSpaceUsedName = "constituents.space.used"
		} else {
			flagConstituentsSpaceUsedName = fmt.Sprintf("%v.constituents.space.used", cmdPrefix)
		}

		flagConstituentsSpaceUsedValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceUsedName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceUsed = &flagConstituentsSpaceUsedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceUsedByAfsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.used_by_afs") {

		var flagConstituentsSpaceUsedByAfsName string
		if cmdPrefix == "" {
			flagConstituentsSpaceUsedByAfsName = "constituents.space.used_by_afs"
		} else {
			flagConstituentsSpaceUsedByAfsName = fmt.Sprintf("%v.constituents.space.used_by_afs", cmdPrefix)
		}

		flagConstituentsSpaceUsedByAfsValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceUsedByAfsName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceUsedByAfs = &flagConstituentsSpaceUsedByAfsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConstituentsSpaceUsedPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("constituents.space.used_percent") {

		var flagConstituentsSpaceUsedPercentName string
		if cmdPrefix == "" {
			flagConstituentsSpaceUsedPercentName = "constituents.space.used_percent"
		} else {
			flagConstituentsSpaceUsedPercentName = fmt.Sprintf("%v.constituents.space.used_percent", cmdPrefix)
		}

		flagConstituentsSpaceUsedPercentValue, err := cmd.Flags().GetInt64(flagConstituentsSpaceUsedPercentName)
		if err != nil {
			return err, false
		}
		m.ConstituentsSpaceUsedPercent = &flagConstituentsSpaceUsedPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetConvertUnicodeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("convert_unicode") {

		var flagConvertUnicodeName string
		if cmdPrefix == "" {
			flagConvertUnicodeName = "convert_unicode"
		} else {
			flagConvertUnicodeName = fmt.Sprintf("%v.convert_unicode", cmdPrefix)
		}

		flagConvertUnicodeValue, err := cmd.Flags().GetBool(flagConvertUnicodeName)
		if err != nil {
			return err, false
		}
		m.ConvertUnicode = &flagConvertUnicodeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetCreateTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("create_time") {

		var flagCreateTimeName string
		if cmdPrefix == "" {
			flagCreateTimeName = "create_time"
		} else {
			flagCreateTimeName = fmt.Sprintf("%v.create_time", cmdPrefix)
		}

		flagCreateTimeValue, err := cmd.Flags().GetString(flagCreateTimeName)
		if err != nil {
			return err, false
		}
		m.CreateTime = &flagCreateTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyApplicationIoSizeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.application_io_size") {

		var flagEfficiencyApplicationIoSizeName string
		if cmdPrefix == "" {
			flagEfficiencyApplicationIoSizeName = "efficiency.application_io_size"
		} else {
			flagEfficiencyApplicationIoSizeName = fmt.Sprintf("%v.efficiency.application_io_size", cmdPrefix)
		}

		flagEfficiencyApplicationIoSizeValue, err := cmd.Flags().GetString(flagEfficiencyApplicationIoSizeName)
		if err != nil {
			return err, false
		}
		m.EfficiencyApplicationIoSize = &flagEfficiencyApplicationIoSizeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyAutoStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.auto_state") {

		var flagEfficiencyAutoStateName string
		if cmdPrefix == "" {
			flagEfficiencyAutoStateName = "efficiency.auto_state"
		} else {
			flagEfficiencyAutoStateName = fmt.Sprintf("%v.efficiency.auto_state", cmdPrefix)
		}

		flagEfficiencyAutoStateValue, err := cmd.Flags().GetString(flagEfficiencyAutoStateName)
		if err != nil {
			return err, false
		}
		m.EfficiencyAutoState = &flagEfficiencyAutoStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyCompactionFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.compaction") {

		var flagEfficiencyCompactionName string
		if cmdPrefix == "" {
			flagEfficiencyCompactionName = "efficiency.compaction"
		} else {
			flagEfficiencyCompactionName = fmt.Sprintf("%v.efficiency.compaction", cmdPrefix)
		}

		flagEfficiencyCompactionValue, err := cmd.Flags().GetString(flagEfficiencyCompactionName)
		if err != nil {
			return err, false
		}
		m.EfficiencyCompaction = &flagEfficiencyCompactionValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyCompressionFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.compression") {

		var flagEfficiencyCompressionName string
		if cmdPrefix == "" {
			flagEfficiencyCompressionName = "efficiency.compression"
		} else {
			flagEfficiencyCompressionName = fmt.Sprintf("%v.efficiency.compression", cmdPrefix)
		}

		flagEfficiencyCompressionValue, err := cmd.Flags().GetString(flagEfficiencyCompressionName)
		if err != nil {
			return err, false
		}
		m.EfficiencyCompression = &flagEfficiencyCompressionValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyCompressionTypeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.compression_type") {

		var flagEfficiencyCompressionTypeName string
		if cmdPrefix == "" {
			flagEfficiencyCompressionTypeName = "efficiency.compression_type"
		} else {
			flagEfficiencyCompressionTypeName = fmt.Sprintf("%v.efficiency.compression_type", cmdPrefix)
		}

		flagEfficiencyCompressionTypeValue, err := cmd.Flags().GetString(flagEfficiencyCompressionTypeName)
		if err != nil {
			return err, false
		}
		m.EfficiencyCompressionType = &flagEfficiencyCompressionTypeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyCrossVolumeDedupeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.cross_volume_dedupe") {

		var flagEfficiencyCrossVolumeDedupeName string
		if cmdPrefix == "" {
			flagEfficiencyCrossVolumeDedupeName = "efficiency.cross_volume_dedupe"
		} else {
			flagEfficiencyCrossVolumeDedupeName = fmt.Sprintf("%v.efficiency.cross_volume_dedupe", cmdPrefix)
		}

		flagEfficiencyCrossVolumeDedupeValue, err := cmd.Flags().GetString(flagEfficiencyCrossVolumeDedupeName)
		if err != nil {
			return err, false
		}
		m.EfficiencyCrossVolumeDedupe = &flagEfficiencyCrossVolumeDedupeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyDedupeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.dedupe") {

		var flagEfficiencyDedupeName string
		if cmdPrefix == "" {
			flagEfficiencyDedupeName = "efficiency.dedupe"
		} else {
			flagEfficiencyDedupeName = fmt.Sprintf("%v.efficiency.dedupe", cmdPrefix)
		}

		flagEfficiencyDedupeValue, err := cmd.Flags().GetString(flagEfficiencyDedupeName)
		if err != nil {
			return err, false
		}
		m.EfficiencyDedupe = &flagEfficiencyDedupeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyHasSavingsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.has_savings") {

		var flagEfficiencyHasSavingsName string
		if cmdPrefix == "" {
			flagEfficiencyHasSavingsName = "efficiency.has_savings"
		} else {
			flagEfficiencyHasSavingsName = fmt.Sprintf("%v.efficiency.has_savings", cmdPrefix)
		}

		flagEfficiencyHasSavingsValue, err := cmd.Flags().GetBool(flagEfficiencyHasSavingsName)
		if err != nil {
			return err, false
		}
		m.EfficiencyHasSavings = &flagEfficiencyHasSavingsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyIdcsScannerEnabledFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.idcs_scanner.enabled") {

		var flagEfficiencyIdcsScannerEnabledName string
		if cmdPrefix == "" {
			flagEfficiencyIdcsScannerEnabledName = "efficiency.idcs_scanner.enabled"
		} else {
			flagEfficiencyIdcsScannerEnabledName = fmt.Sprintf("%v.efficiency.idcs_scanner.enabled", cmdPrefix)
		}

		flagEfficiencyIdcsScannerEnabledValue, err := cmd.Flags().GetBool(flagEfficiencyIdcsScannerEnabledName)
		if err != nil {
			return err, false
		}
		m.EfficiencyIdcsScannerEnabled = &flagEfficiencyIdcsScannerEnabledValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyIdcsScannerModeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.idcs_scanner.mode") {

		var flagEfficiencyIdcsScannerModeName string
		if cmdPrefix == "" {
			flagEfficiencyIdcsScannerModeName = "efficiency.idcs_scanner.mode"
		} else {
			flagEfficiencyIdcsScannerModeName = fmt.Sprintf("%v.efficiency.idcs_scanner.mode", cmdPrefix)
		}

		flagEfficiencyIdcsScannerModeValue, err := cmd.Flags().GetString(flagEfficiencyIdcsScannerModeName)
		if err != nil {
			return err, false
		}
		m.EfficiencyIdcsScannerMode = &flagEfficiencyIdcsScannerModeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyIdcsScannerOperationStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.idcs_scanner.operation_state") {

		var flagEfficiencyIdcsScannerOperationStateName string
		if cmdPrefix == "" {
			flagEfficiencyIdcsScannerOperationStateName = "efficiency.idcs_scanner.operation_state"
		} else {
			flagEfficiencyIdcsScannerOperationStateName = fmt.Sprintf("%v.efficiency.idcs_scanner.operation_state", cmdPrefix)
		}

		flagEfficiencyIdcsScannerOperationStateValue, err := cmd.Flags().GetString(flagEfficiencyIdcsScannerOperationStateName)
		if err != nil {
			return err, false
		}
		m.EfficiencyIdcsScannerOperationState = &flagEfficiencyIdcsScannerOperationStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyIdcsScannerStatusFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.idcs_scanner.status") {

		var flagEfficiencyIdcsScannerStatusName string
		if cmdPrefix == "" {
			flagEfficiencyIdcsScannerStatusName = "efficiency.idcs_scanner.status"
		} else {
			flagEfficiencyIdcsScannerStatusName = fmt.Sprintf("%v.efficiency.idcs_scanner.status", cmdPrefix)
		}

		flagEfficiencyIdcsScannerStatusValue, err := cmd.Flags().GetString(flagEfficiencyIdcsScannerStatusName)
		if err != nil {
			return err, false
		}
		m.EfficiencyIdcsScannerStatus = &flagEfficiencyIdcsScannerStatusValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyIdcsScannerThresholdInactiveTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.idcs_scanner.threshold_inactive_time") {

		var flagEfficiencyIdcsScannerThresholdInactiveTimeName string
		if cmdPrefix == "" {
			flagEfficiencyIdcsScannerThresholdInactiveTimeName = "efficiency.idcs_scanner.threshold_inactive_time"
		} else {
			flagEfficiencyIdcsScannerThresholdInactiveTimeName = fmt.Sprintf("%v.efficiency.idcs_scanner.threshold_inactive_time", cmdPrefix)
		}

		flagEfficiencyIdcsScannerThresholdInactiveTimeValue, err := cmd.Flags().GetString(flagEfficiencyIdcsScannerThresholdInactiveTimeName)
		if err != nil {
			return err, false
		}
		m.EfficiencyIdcsScannerThresholdInactiveTime = &flagEfficiencyIdcsScannerThresholdInactiveTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyLastOpBeginFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.last_op_begin") {

		var flagEfficiencyLastOpBeginName string
		if cmdPrefix == "" {
			flagEfficiencyLastOpBeginName = "efficiency.last_op_begin"
		} else {
			flagEfficiencyLastOpBeginName = fmt.Sprintf("%v.efficiency.last_op_begin", cmdPrefix)
		}

		flagEfficiencyLastOpBeginValue, err := cmd.Flags().GetString(flagEfficiencyLastOpBeginName)
		if err != nil {
			return err, false
		}
		m.EfficiencyLastOpBegin = &flagEfficiencyLastOpBeginValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyLastOpEndFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.last_op_end") {

		var flagEfficiencyLastOpEndName string
		if cmdPrefix == "" {
			flagEfficiencyLastOpEndName = "efficiency.last_op_end"
		} else {
			flagEfficiencyLastOpEndName = fmt.Sprintf("%v.efficiency.last_op_end", cmdPrefix)
		}

		flagEfficiencyLastOpEndValue, err := cmd.Flags().GetString(flagEfficiencyLastOpEndName)
		if err != nil {
			return err, false
		}
		m.EfficiencyLastOpEnd = &flagEfficiencyLastOpEndValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyLastOpErrFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.last_op_err") {

		var flagEfficiencyLastOpErrName string
		if cmdPrefix == "" {
			flagEfficiencyLastOpErrName = "efficiency.last_op_err"
		} else {
			flagEfficiencyLastOpErrName = fmt.Sprintf("%v.efficiency.last_op_err", cmdPrefix)
		}

		flagEfficiencyLastOpErrValue, err := cmd.Flags().GetString(flagEfficiencyLastOpErrName)
		if err != nil {
			return err, false
		}
		m.EfficiencyLastOpErr = &flagEfficiencyLastOpErrValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyLastOpSizeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.last_op_size") {

		var flagEfficiencyLastOpSizeName string
		if cmdPrefix == "" {
			flagEfficiencyLastOpSizeName = "efficiency.last_op_size"
		} else {
			flagEfficiencyLastOpSizeName = fmt.Sprintf("%v.efficiency.last_op_size", cmdPrefix)
		}

		flagEfficiencyLastOpSizeValue, err := cmd.Flags().GetInt64(flagEfficiencyLastOpSizeName)
		if err != nil {
			return err, false
		}
		m.EfficiencyLastOpSize = &flagEfficiencyLastOpSizeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyLastOpStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.last_op_state") {

		var flagEfficiencyLastOpStateName string
		if cmdPrefix == "" {
			flagEfficiencyLastOpStateName = "efficiency.last_op_state"
		} else {
			flagEfficiencyLastOpStateName = fmt.Sprintf("%v.efficiency.last_op_state", cmdPrefix)
		}

		flagEfficiencyLastOpStateValue, err := cmd.Flags().GetString(flagEfficiencyLastOpStateName)
		if err != nil {
			return err, false
		}
		m.EfficiencyLastOpState = &flagEfficiencyLastOpStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyLoggingEnabledFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.logging_enabled") {

		var flagEfficiencyLoggingEnabledName string
		if cmdPrefix == "" {
			flagEfficiencyLoggingEnabledName = "efficiency.logging_enabled"
		} else {
			flagEfficiencyLoggingEnabledName = fmt.Sprintf("%v.efficiency.logging_enabled", cmdPrefix)
		}

		flagEfficiencyLoggingEnabledValue, err := cmd.Flags().GetBool(flagEfficiencyLoggingEnabledName)
		if err != nil {
			return err, false
		}
		m.EfficiencyLoggingEnabled = &flagEfficiencyLoggingEnabledValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyOpStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.op_state") {

		var flagEfficiencyOpStateName string
		if cmdPrefix == "" {
			flagEfficiencyOpStateName = "efficiency.op_state"
		} else {
			flagEfficiencyOpStateName = fmt.Sprintf("%v.efficiency.op_state", cmdPrefix)
		}

		flagEfficiencyOpStateValue, err := cmd.Flags().GetString(flagEfficiencyOpStateName)
		if err != nil {
			return err, false
		}
		m.EfficiencyOpState = &flagEfficiencyOpStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyPolicyNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.policy.name") {

		var flagEfficiencyPolicyNameName string
		if cmdPrefix == "" {
			flagEfficiencyPolicyNameName = "efficiency.policy.name"
		} else {
			flagEfficiencyPolicyNameName = fmt.Sprintf("%v.efficiency.policy.name", cmdPrefix)
		}

		flagEfficiencyPolicyNameValue, err := cmd.Flags().GetString(flagEfficiencyPolicyNameName)
		if err != nil {
			return err, false
		}
		m.EfficiencyPolicyName = &flagEfficiencyPolicyNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyProgressFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.progress") {

		var flagEfficiencyProgressName string
		if cmdPrefix == "" {
			flagEfficiencyProgressName = "efficiency.progress"
		} else {
			flagEfficiencyProgressName = fmt.Sprintf("%v.efficiency.progress", cmdPrefix)
		}

		flagEfficiencyProgressValue, err := cmd.Flags().GetString(flagEfficiencyProgressName)
		if err != nil {
			return err, false
		}
		m.EfficiencyProgress = &flagEfficiencyProgressValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyScannerCompressionFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.scanner.compression") {

		var flagEfficiencyScannerCompressionName string
		if cmdPrefix == "" {
			flagEfficiencyScannerCompressionName = "efficiency.scanner.compression"
		} else {
			flagEfficiencyScannerCompressionName = fmt.Sprintf("%v.efficiency.scanner.compression", cmdPrefix)
		}

		flagEfficiencyScannerCompressionValue, err := cmd.Flags().GetBool(flagEfficiencyScannerCompressionName)
		if err != nil {
			return err, false
		}
		m.EfficiencyScannerCompression = &flagEfficiencyScannerCompressionValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyScannerDedupeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.scanner.dedupe") {

		var flagEfficiencyScannerDedupeName string
		if cmdPrefix == "" {
			flagEfficiencyScannerDedupeName = "efficiency.scanner.dedupe"
		} else {
			flagEfficiencyScannerDedupeName = fmt.Sprintf("%v.efficiency.scanner.dedupe", cmdPrefix)
		}

		flagEfficiencyScannerDedupeValue, err := cmd.Flags().GetBool(flagEfficiencyScannerDedupeName)
		if err != nil {
			return err, false
		}
		m.EfficiencyScannerDedupe = &flagEfficiencyScannerDedupeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyScannerScanOldDataFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.scanner.scan_old_data") {

		var flagEfficiencyScannerScanOldDataName string
		if cmdPrefix == "" {
			flagEfficiencyScannerScanOldDataName = "efficiency.scanner.scan_old_data"
		} else {
			flagEfficiencyScannerScanOldDataName = fmt.Sprintf("%v.efficiency.scanner.scan_old_data", cmdPrefix)
		}

		flagEfficiencyScannerScanOldDataValue, err := cmd.Flags().GetBool(flagEfficiencyScannerScanOldDataName)
		if err != nil {
			return err, false
		}
		m.EfficiencyScannerScanOldData = &flagEfficiencyScannerScanOldDataValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyScannerStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.scanner.state") {

		var flagEfficiencyScannerStateName string
		if cmdPrefix == "" {
			flagEfficiencyScannerStateName = "efficiency.scanner.state"
		} else {
			flagEfficiencyScannerStateName = fmt.Sprintf("%v.efficiency.scanner.state", cmdPrefix)
		}

		flagEfficiencyScannerStateValue, err := cmd.Flags().GetString(flagEfficiencyScannerStateName)
		if err != nil {
			return err, false
		}
		m.EfficiencyScannerState = &flagEfficiencyScannerStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyScheduleFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.schedule") {

		var flagEfficiencyScheduleName string
		if cmdPrefix == "" {
			flagEfficiencyScheduleName = "efficiency.schedule"
		} else {
			flagEfficiencyScheduleName = fmt.Sprintf("%v.efficiency.schedule", cmdPrefix)
		}

		flagEfficiencyScheduleValue, err := cmd.Flags().GetString(flagEfficiencyScheduleName)
		if err != nil {
			return err, false
		}
		m.EfficiencySchedule = &flagEfficiencyScheduleValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsCompressionFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.space_savings.compression") {

		var flagEfficiencySpaceSavingsCompressionName string
		if cmdPrefix == "" {
			flagEfficiencySpaceSavingsCompressionName = "efficiency.space_savings.compression"
		} else {
			flagEfficiencySpaceSavingsCompressionName = fmt.Sprintf("%v.efficiency.space_savings.compression", cmdPrefix)
		}

		flagEfficiencySpaceSavingsCompressionValue, err := cmd.Flags().GetInt64(flagEfficiencySpaceSavingsCompressionName)
		if err != nil {
			return err, false
		}
		m.EfficiencySpaceSavingsCompression = &flagEfficiencySpaceSavingsCompressionValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsCompressionPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.space_savings.compression_percent") {

		var flagEfficiencySpaceSavingsCompressionPercentName string
		if cmdPrefix == "" {
			flagEfficiencySpaceSavingsCompressionPercentName = "efficiency.space_savings.compression_percent"
		} else {
			flagEfficiencySpaceSavingsCompressionPercentName = fmt.Sprintf("%v.efficiency.space_savings.compression_percent", cmdPrefix)
		}

		flagEfficiencySpaceSavingsCompressionPercentValue, err := cmd.Flags().GetInt64(flagEfficiencySpaceSavingsCompressionPercentName)
		if err != nil {
			return err, false
		}
		m.EfficiencySpaceSavingsCompressionPercent = &flagEfficiencySpaceSavingsCompressionPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsDedupeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.space_savings.dedupe") {

		var flagEfficiencySpaceSavingsDedupeName string
		if cmdPrefix == "" {
			flagEfficiencySpaceSavingsDedupeName = "efficiency.space_savings.dedupe"
		} else {
			flagEfficiencySpaceSavingsDedupeName = fmt.Sprintf("%v.efficiency.space_savings.dedupe", cmdPrefix)
		}

		flagEfficiencySpaceSavingsDedupeValue, err := cmd.Flags().GetInt64(flagEfficiencySpaceSavingsDedupeName)
		if err != nil {
			return err, false
		}
		m.EfficiencySpaceSavingsDedupe = &flagEfficiencySpaceSavingsDedupeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsDedupePercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.space_savings.dedupe_percent") {

		var flagEfficiencySpaceSavingsDedupePercentName string
		if cmdPrefix == "" {
			flagEfficiencySpaceSavingsDedupePercentName = "efficiency.space_savings.dedupe_percent"
		} else {
			flagEfficiencySpaceSavingsDedupePercentName = fmt.Sprintf("%v.efficiency.space_savings.dedupe_percent", cmdPrefix)
		}

		flagEfficiencySpaceSavingsDedupePercentValue, err := cmd.Flags().GetInt64(flagEfficiencySpaceSavingsDedupePercentName)
		if err != nil {
			return err, false
		}
		m.EfficiencySpaceSavingsDedupePercent = &flagEfficiencySpaceSavingsDedupePercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsDedupeSharingFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.space_savings.dedupe_sharing") {

		var flagEfficiencySpaceSavingsDedupeSharingName string
		if cmdPrefix == "" {
			flagEfficiencySpaceSavingsDedupeSharingName = "efficiency.space_savings.dedupe_sharing"
		} else {
			flagEfficiencySpaceSavingsDedupeSharingName = fmt.Sprintf("%v.efficiency.space_savings.dedupe_sharing", cmdPrefix)
		}

		flagEfficiencySpaceSavingsDedupeSharingValue, err := cmd.Flags().GetInt64(flagEfficiencySpaceSavingsDedupeSharingName)
		if err != nil {
			return err, false
		}
		m.EfficiencySpaceSavingsDedupeSharing = &flagEfficiencySpaceSavingsDedupeSharingValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.space_savings.total") {

		var flagEfficiencySpaceSavingsTotalName string
		if cmdPrefix == "" {
			flagEfficiencySpaceSavingsTotalName = "efficiency.space_savings.total"
		} else {
			flagEfficiencySpaceSavingsTotalName = fmt.Sprintf("%v.efficiency.space_savings.total", cmdPrefix)
		}

		flagEfficiencySpaceSavingsTotalValue, err := cmd.Flags().GetInt64(flagEfficiencySpaceSavingsTotalName)
		if err != nil {
			return err, false
		}
		m.EfficiencySpaceSavingsTotal = &flagEfficiencySpaceSavingsTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencySpaceSavingsTotalPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.space_savings.total_percent") {

		var flagEfficiencySpaceSavingsTotalPercentName string
		if cmdPrefix == "" {
			flagEfficiencySpaceSavingsTotalPercentName = "efficiency.space_savings.total_percent"
		} else {
			flagEfficiencySpaceSavingsTotalPercentName = fmt.Sprintf("%v.efficiency.space_savings.total_percent", cmdPrefix)
		}

		flagEfficiencySpaceSavingsTotalPercentValue, err := cmd.Flags().GetInt64(flagEfficiencySpaceSavingsTotalPercentName)
		if err != nil {
			return err, false
		}
		m.EfficiencySpaceSavingsTotalPercent = &flagEfficiencySpaceSavingsTotalPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.state") {

		var flagEfficiencyStateName string
		if cmdPrefix == "" {
			flagEfficiencyStateName = "efficiency.state"
		} else {
			flagEfficiencyStateName = fmt.Sprintf("%v.efficiency.state", cmdPrefix)
		}

		flagEfficiencyStateValue, err := cmd.Flags().GetString(flagEfficiencyStateName)
		if err != nil {
			return err, false
		}
		m.EfficiencyState = &flagEfficiencyStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyStorageEfficiencyModeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.storage_efficiency_mode") {

		var flagEfficiencyStorageEfficiencyModeName string
		if cmdPrefix == "" {
			flagEfficiencyStorageEfficiencyModeName = "efficiency.storage_efficiency_mode"
		} else {
			flagEfficiencyStorageEfficiencyModeName = fmt.Sprintf("%v.efficiency.storage_efficiency_mode", cmdPrefix)
		}

		flagEfficiencyStorageEfficiencyModeValue, err := cmd.Flags().GetString(flagEfficiencyStorageEfficiencyModeName)
		if err != nil {
			return err, false
		}
		m.EfficiencyStorageEfficiencyMode = &flagEfficiencyStorageEfficiencyModeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyTypeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.type") {

		var flagEfficiencyTypeName string
		if cmdPrefix == "" {
			flagEfficiencyTypeName = "efficiency.type"
		} else {
			flagEfficiencyTypeName = fmt.Sprintf("%v.efficiency.type", cmdPrefix)
		}

		flagEfficiencyTypeValue, err := cmd.Flags().GetString(flagEfficiencyTypeName)
		if err != nil {
			return err, false
		}
		m.EfficiencyType = &flagEfficiencyTypeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEfficiencyVolumePathFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("efficiency.volume_path") {

		var flagEfficiencyVolumePathName string
		if cmdPrefix == "" {
			flagEfficiencyVolumePathName = "efficiency.volume_path"
		} else {
			flagEfficiencyVolumePathName = fmt.Sprintf("%v.efficiency.volume_path", cmdPrefix)
		}

		flagEfficiencyVolumePathValue, err := cmd.Flags().GetString(flagEfficiencyVolumePathName)
		if err != nil {
			return err, false
		}
		m.EfficiencyVolumePath = &flagEfficiencyVolumePathValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEncryptionActionFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("encryption.action") {

		var flagEncryptionActionName string
		if cmdPrefix == "" {
			flagEncryptionActionName = "encryption.action"
		} else {
			flagEncryptionActionName = fmt.Sprintf("%v.encryption.action", cmdPrefix)
		}

		flagEncryptionActionValue, err := cmd.Flags().GetString(flagEncryptionActionName)
		if err != nil {
			return err, false
		}
		m.EncryptionAction = &flagEncryptionActionValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEncryptionEnabledFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("encryption.enabled") {

		var flagEncryptionEnabledName string
		if cmdPrefix == "" {
			flagEncryptionEnabledName = "encryption.enabled"
		} else {
			flagEncryptionEnabledName = fmt.Sprintf("%v.encryption.enabled", cmdPrefix)
		}

		flagEncryptionEnabledValue, err := cmd.Flags().GetBool(flagEncryptionEnabledName)
		if err != nil {
			return err, false
		}
		m.EncryptionEnabled = &flagEncryptionEnabledValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEncryptionKeyCreateTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("encryption.key_create_time") {

		var flagEncryptionKeyCreateTimeName string
		if cmdPrefix == "" {
			flagEncryptionKeyCreateTimeName = "encryption.key_create_time"
		} else {
			flagEncryptionKeyCreateTimeName = fmt.Sprintf("%v.encryption.key_create_time", cmdPrefix)
		}

		flagEncryptionKeyCreateTimeValue, err := cmd.Flags().GetString(flagEncryptionKeyCreateTimeName)
		if err != nil {
			return err, false
		}
		m.EncryptionKeyCreateTime = &flagEncryptionKeyCreateTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEncryptionKeyIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("encryption.key_id") {

		var flagEncryptionKeyIDName string
		if cmdPrefix == "" {
			flagEncryptionKeyIDName = "encryption.key_id"
		} else {
			flagEncryptionKeyIDName = fmt.Sprintf("%v.encryption.key_id", cmdPrefix)
		}

		flagEncryptionKeyIDValue, err := cmd.Flags().GetString(flagEncryptionKeyIDName)
		if err != nil {
			return err, false
		}
		m.EncryptionKeyID = &flagEncryptionKeyIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEncryptionRekeyFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("encryption.rekey") {

		var flagEncryptionRekeyName string
		if cmdPrefix == "" {
			flagEncryptionRekeyName = "encryption.rekey"
		} else {
			flagEncryptionRekeyName = fmt.Sprintf("%v.encryption.rekey", cmdPrefix)
		}

		flagEncryptionRekeyValue, err := cmd.Flags().GetBool(flagEncryptionRekeyName)
		if err != nil {
			return err, false
		}
		m.EncryptionRekey = &flagEncryptionRekeyValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEncryptionStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("encryption.state") {

		var flagEncryptionStateName string
		if cmdPrefix == "" {
			flagEncryptionStateName = "encryption.state"
		} else {
			flagEncryptionStateName = fmt.Sprintf("%v.encryption.state", cmdPrefix)
		}

		flagEncryptionStateValue, err := cmd.Flags().GetString(flagEncryptionStateName)
		if err != nil {
			return err, false
		}
		m.EncryptionState = &flagEncryptionStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEncryptionStatusCodeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("encryption.status.code") {

		var flagEncryptionStatusCodeName string
		if cmdPrefix == "" {
			flagEncryptionStatusCodeName = "encryption.status.code"
		} else {
			flagEncryptionStatusCodeName = fmt.Sprintf("%v.encryption.status.code", cmdPrefix)
		}

		flagEncryptionStatusCodeValue, err := cmd.Flags().GetString(flagEncryptionStatusCodeName)
		if err != nil {
			return err, false
		}
		m.EncryptionStatusCode = &flagEncryptionStatusCodeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEncryptionStatusMessageFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("encryption.status.message") {

		var flagEncryptionStatusMessageName string
		if cmdPrefix == "" {
			flagEncryptionStatusMessageName = "encryption.status.message"
		} else {
			flagEncryptionStatusMessageName = fmt.Sprintf("%v.encryption.status.message", cmdPrefix)
		}

		flagEncryptionStatusMessageValue, err := cmd.Flags().GetString(flagEncryptionStatusMessageName)
		if err != nil {
			return err, false
		}
		m.EncryptionStatusMessage = &flagEncryptionStatusMessageValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetEncryptionTypeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("encryption.type") {

		var flagEncryptionTypeName string
		if cmdPrefix == "" {
			flagEncryptionTypeName = "encryption.type"
		} else {
			flagEncryptionTypeName = fmt.Sprintf("%v.encryption.type", cmdPrefix)
		}

		flagEncryptionTypeValue, err := cmd.Flags().GetString(flagEncryptionTypeName)
		if err != nil {
			return err, false
		}
		m.EncryptionType = &flagEncryptionTypeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetErrorStateHasBadBlocksFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("error_state.has_bad_blocks") {

		var flagErrorStateHasBadBlocksName string
		if cmdPrefix == "" {
			flagErrorStateHasBadBlocksName = "error_state.has_bad_blocks"
		} else {
			flagErrorStateHasBadBlocksName = fmt.Sprintf("%v.error_state.has_bad_blocks", cmdPrefix)
		}

		flagErrorStateHasBadBlocksValue, err := cmd.Flags().GetBool(flagErrorStateHasBadBlocksName)
		if err != nil {
			return err, false
		}
		m.ErrorStateHasBadBlocks = &flagErrorStateHasBadBlocksValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetErrorStateIsInconsistentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("error_state.is_inconsistent") {

		var flagErrorStateIsInconsistentName string
		if cmdPrefix == "" {
			flagErrorStateIsInconsistentName = "error_state.is_inconsistent"
		} else {
			flagErrorStateIsInconsistentName = fmt.Sprintf("%v.error_state.is_inconsistent", cmdPrefix)
		}

		flagErrorStateIsInconsistentValue, err := cmd.Flags().GetBool(flagErrorStateIsInconsistentName)
		if err != nil {
			return err, false
		}
		m.ErrorStateIsInconsistent = &flagErrorStateIsInconsistentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetFieldsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("fields") {

		var flagFieldsName string
		if cmdPrefix == "" {
			flagFieldsName = "fields"
		} else {
			flagFieldsName = fmt.Sprintf("%v.fields", cmdPrefix)
		}

		flagFieldsValue, err := cmd.Flags().GetStringSlice(flagFieldsName)
		if err != nil {
			return err, false
		}
		m.Fields = flagFieldsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetFilesMaximumFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("files.maximum") {

		var flagFilesMaximumName string
		if cmdPrefix == "" {
			flagFilesMaximumName = "files.maximum"
		} else {
			flagFilesMaximumName = fmt.Sprintf("%v.files.maximum", cmdPrefix)
		}

		flagFilesMaximumValue, err := cmd.Flags().GetInt64(flagFilesMaximumName)
		if err != nil {
			return err, false
		}
		m.FilesMaximum = &flagFilesMaximumValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetFilesUsedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("files.used") {

		var flagFilesUsedName string
		if cmdPrefix == "" {
			flagFilesUsedName = "files.used"
		} else {
			flagFilesUsedName = fmt.Sprintf("%v.files.used", cmdPrefix)
		}

		flagFilesUsedValue, err := cmd.Flags().GetInt64(flagFilesUsedName)
		if err != nil {
			return err, false
		}
		m.FilesUsed = &flagFilesUsedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetFlashPoolCacheEligibilityFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("flash_pool.cache_eligibility") {

		var flagFlashPoolCacheEligibilityName string
		if cmdPrefix == "" {
			flagFlashPoolCacheEligibilityName = "flash_pool.cache_eligibility"
		} else {
			flagFlashPoolCacheEligibilityName = fmt.Sprintf("%v.flash_pool.cache_eligibility", cmdPrefix)
		}

		flagFlashPoolCacheEligibilityValue, err := cmd.Flags().GetString(flagFlashPoolCacheEligibilityName)
		if err != nil {
			return err, false
		}
		m.FlashPoolCacheEligibility = &flagFlashPoolCacheEligibilityValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetFlashPoolCacheRetentionPriorityFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("flash_pool.cache_retention_priority") {

		var flagFlashPoolCacheRetentionPriorityName string
		if cmdPrefix == "" {
			flagFlashPoolCacheRetentionPriorityName = "flash_pool.cache_retention_priority"
		} else {
			flagFlashPoolCacheRetentionPriorityName = fmt.Sprintf("%v.flash_pool.cache_retention_priority", cmdPrefix)
		}

		flagFlashPoolCacheRetentionPriorityValue, err := cmd.Flags().GetString(flagFlashPoolCacheRetentionPriorityName)
		if err != nil {
			return err, false
		}
		m.FlashPoolCacheRetentionPriority = &flagFlashPoolCacheRetentionPriorityValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetFlashPoolCachingPolicyFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("flash_pool.caching_policy") {

		var flagFlashPoolCachingPolicyName string
		if cmdPrefix == "" {
			flagFlashPoolCachingPolicyName = "flash_pool.caching_policy"
		} else {
			flagFlashPoolCachingPolicyName = fmt.Sprintf("%v.flash_pool.caching_policy", cmdPrefix)
		}

		flagFlashPoolCachingPolicyValue, err := cmd.Flags().GetString(flagFlashPoolCachingPolicyName)
		if err != nil {
			return err, false
		}
		m.FlashPoolCachingPolicy = &flagFlashPoolCachingPolicyValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetFlexcacheEndpointTypeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("flexcache_endpoint_type") {

		var flagFlexcacheEndpointTypeName string
		if cmdPrefix == "" {
			flagFlexcacheEndpointTypeName = "flexcache_endpoint_type"
		} else {
			flagFlexcacheEndpointTypeName = fmt.Sprintf("%v.flexcache_endpoint_type", cmdPrefix)
		}

		flagFlexcacheEndpointTypeValue, err := cmd.Flags().GetString(flagFlexcacheEndpointTypeName)
		if err != nil {
			return err, false
		}
		m.FlexcacheEndpointType = &flagFlexcacheEndpointTypeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetFlexgroupNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("flexgroup.name") {

		var flagFlexgroupNameName string
		if cmdPrefix == "" {
			flagFlexgroupNameName = "flexgroup.name"
		} else {
			flagFlexgroupNameName = fmt.Sprintf("%v.flexgroup.name", cmdPrefix)
		}

		flagFlexgroupNameValue, err := cmd.Flags().GetString(flagFlexgroupNameName)
		if err != nil {
			return err, false
		}
		m.FlexgroupName = &flagFlexgroupNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetFlexgroupUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("flexgroup.uuid") {

		var flagFlexgroupUUIDName string
		if cmdPrefix == "" {
			flagFlexgroupUUIDName = "flexgroup.uuid"
		} else {
			flagFlexgroupUUIDName = fmt.Sprintf("%v.flexgroup.uuid", cmdPrefix)
		}

		flagFlexgroupUUIDValue, err := cmd.Flags().GetString(flagFlexgroupUUIDName)
		if err != nil {
			return err, false
		}
		m.FlexgroupUUID = &flagFlexgroupUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetGranularDataFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("granular_data") {

		var flagGranularDataName string
		if cmdPrefix == "" {
			flagGranularDataName = "granular_data"
		} else {
			flagGranularDataName = fmt.Sprintf("%v.granular_data", cmdPrefix)
		}

		flagGranularDataValue, err := cmd.Flags().GetBool(flagGranularDataName)
		if err != nil {
			return err, false
		}
		m.GranularData = &flagGranularDataValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetGranularDataModeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("granular_data_mode") {

		var flagGranularDataModeName string
		if cmdPrefix == "" {
			flagGranularDataModeName = "granular_data_mode"
		} else {
			flagGranularDataModeName = fmt.Sprintf("%v.granular_data_mode", cmdPrefix)
		}

		flagGranularDataModeValue, err := cmd.Flags().GetString(flagGranularDataModeName)
		if err != nil {
			return err, false
		}
		m.GranularDataMode = &flagGranularDataModeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetGuaranteeHonoredFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("guarantee.honored") {

		var flagGuaranteeHonoredName string
		if cmdPrefix == "" {
			flagGuaranteeHonoredName = "guarantee.honored"
		} else {
			flagGuaranteeHonoredName = fmt.Sprintf("%v.guarantee.honored", cmdPrefix)
		}

		flagGuaranteeHonoredValue, err := cmd.Flags().GetBool(flagGuaranteeHonoredName)
		if err != nil {
			return err, false
		}
		m.GuaranteeHonored = &flagGuaranteeHonoredValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetGuaranteeTypeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("guarantee.type") {

		var flagGuaranteeTypeName string
		if cmdPrefix == "" {
			flagGuaranteeTypeName = "guarantee.type"
		} else {
			flagGuaranteeTypeName = fmt.Sprintf("%v.guarantee.type", cmdPrefix)
		}

		flagGuaranteeTypeValue, err := cmd.Flags().GetString(flagGuaranteeTypeName)
		if err != nil {
			return err, false
		}
		m.GuaranteeType = &flagGuaranteeTypeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetIsConstituentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("is_constituent") {

		var flagIsConstituentName string
		if cmdPrefix == "" {
			flagIsConstituentName = "is_constituent"
		} else {
			flagIsConstituentName = fmt.Sprintf("%v.is_constituent", cmdPrefix)
		}

		flagIsConstituentValue, err := cmd.Flags().GetBool(flagIsConstituentName)
		if err != nil {
			return err, false
		}
		m.IsConstituent = &flagIsConstituentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetIsObjectStoreFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("is_object_store") {

		var flagIsObjectStoreName string
		if cmdPrefix == "" {
			flagIsObjectStoreName = "is_object_store"
		} else {
			flagIsObjectStoreName = fmt.Sprintf("%v.is_object_store", cmdPrefix)
		}

		flagIsObjectStoreValue, err := cmd.Flags().GetBool(flagIsObjectStoreName)
		if err != nil {
			return err, false
		}
		m.IsObjectStore = &flagIsObjectStoreValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetIsSvmRootFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("is_svm_root") {

		var flagIsSvmRootName string
		if cmdPrefix == "" {
			flagIsSvmRootName = "is_svm_root"
		} else {
			flagIsSvmRootName = fmt.Sprintf("%v.is_svm_root", cmdPrefix)
		}

		flagIsSvmRootValue, err := cmd.Flags().GetBool(flagIsSvmRootName)
		if err != nil {
			return err, false
		}
		m.IsSvmRoot = &flagIsSvmRootValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetLanguageFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("language") {

		var flagLanguageName string
		if cmdPrefix == "" {
			flagLanguageName = "language"
		} else {
			flagLanguageName = fmt.Sprintf("%v.language", cmdPrefix)
		}

		flagLanguageValue, err := cmd.Flags().GetString(flagLanguageName)
		if err != nil {
			return err, false
		}
		m.Language = &flagLanguageValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMaxDirSizeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("max_dir_size") {

		var flagMaxDirSizeName string
		if cmdPrefix == "" {
			flagMaxDirSizeName = "max_dir_size"
		} else {
			flagMaxDirSizeName = fmt.Sprintf("%v.max_dir_size", cmdPrefix)
		}

		flagMaxDirSizeValue, err := cmd.Flags().GetInt64(flagMaxDirSizeName)
		if err != nil {
			return err, false
		}
		m.MaxDirSize = &flagMaxDirSizeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMaxRecordsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("max_records") {

		var flagMaxRecordsName string
		if cmdPrefix == "" {
			flagMaxRecordsName = "max_records"
		} else {
			flagMaxRecordsName = fmt.Sprintf("%v.max_records", cmdPrefix)
		}

		flagMaxRecordsValue, err := cmd.Flags().GetInt64(flagMaxRecordsName)
		if err != nil {
			return err, false
		}
		m.MaxRecords = &flagMaxRecordsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricCloudDurationFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.cloud.duration") {

		var flagMetricCloudDurationName string
		if cmdPrefix == "" {
			flagMetricCloudDurationName = "metric.cloud.duration"
		} else {
			flagMetricCloudDurationName = fmt.Sprintf("%v.metric.cloud.duration", cmdPrefix)
		}

		flagMetricCloudDurationValue, err := cmd.Flags().GetString(flagMetricCloudDurationName)
		if err != nil {
			return err, false
		}
		m.MetricCloudDuration = &flagMetricCloudDurationValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricCloudIopsOtherFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.cloud.iops.other") {

		var flagMetricCloudIopsOtherName string
		if cmdPrefix == "" {
			flagMetricCloudIopsOtherName = "metric.cloud.iops.other"
		} else {
			flagMetricCloudIopsOtherName = fmt.Sprintf("%v.metric.cloud.iops.other", cmdPrefix)
		}

		flagMetricCloudIopsOtherValue, err := cmd.Flags().GetInt64(flagMetricCloudIopsOtherName)
		if err != nil {
			return err, false
		}
		m.MetricCloudIopsOther = &flagMetricCloudIopsOtherValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricCloudIopsReadFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.cloud.iops.read") {

		var flagMetricCloudIopsReadName string
		if cmdPrefix == "" {
			flagMetricCloudIopsReadName = "metric.cloud.iops.read"
		} else {
			flagMetricCloudIopsReadName = fmt.Sprintf("%v.metric.cloud.iops.read", cmdPrefix)
		}

		flagMetricCloudIopsReadValue, err := cmd.Flags().GetInt64(flagMetricCloudIopsReadName)
		if err != nil {
			return err, false
		}
		m.MetricCloudIopsRead = &flagMetricCloudIopsReadValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricCloudIopsTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.cloud.iops.total") {

		var flagMetricCloudIopsTotalName string
		if cmdPrefix == "" {
			flagMetricCloudIopsTotalName = "metric.cloud.iops.total"
		} else {
			flagMetricCloudIopsTotalName = fmt.Sprintf("%v.metric.cloud.iops.total", cmdPrefix)
		}

		flagMetricCloudIopsTotalValue, err := cmd.Flags().GetInt64(flagMetricCloudIopsTotalName)
		if err != nil {
			return err, false
		}
		m.MetricCloudIopsTotal = &flagMetricCloudIopsTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricCloudIopsWriteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.cloud.iops.write") {

		var flagMetricCloudIopsWriteName string
		if cmdPrefix == "" {
			flagMetricCloudIopsWriteName = "metric.cloud.iops.write"
		} else {
			flagMetricCloudIopsWriteName = fmt.Sprintf("%v.metric.cloud.iops.write", cmdPrefix)
		}

		flagMetricCloudIopsWriteValue, err := cmd.Flags().GetInt64(flagMetricCloudIopsWriteName)
		if err != nil {
			return err, false
		}
		m.MetricCloudIopsWrite = &flagMetricCloudIopsWriteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricCloudLatencyOtherFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.cloud.latency.other") {

		var flagMetricCloudLatencyOtherName string
		if cmdPrefix == "" {
			flagMetricCloudLatencyOtherName = "metric.cloud.latency.other"
		} else {
			flagMetricCloudLatencyOtherName = fmt.Sprintf("%v.metric.cloud.latency.other", cmdPrefix)
		}

		flagMetricCloudLatencyOtherValue, err := cmd.Flags().GetInt64(flagMetricCloudLatencyOtherName)
		if err != nil {
			return err, false
		}
		m.MetricCloudLatencyOther = &flagMetricCloudLatencyOtherValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricCloudLatencyReadFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.cloud.latency.read") {

		var flagMetricCloudLatencyReadName string
		if cmdPrefix == "" {
			flagMetricCloudLatencyReadName = "metric.cloud.latency.read"
		} else {
			flagMetricCloudLatencyReadName = fmt.Sprintf("%v.metric.cloud.latency.read", cmdPrefix)
		}

		flagMetricCloudLatencyReadValue, err := cmd.Flags().GetInt64(flagMetricCloudLatencyReadName)
		if err != nil {
			return err, false
		}
		m.MetricCloudLatencyRead = &flagMetricCloudLatencyReadValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricCloudLatencyTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.cloud.latency.total") {

		var flagMetricCloudLatencyTotalName string
		if cmdPrefix == "" {
			flagMetricCloudLatencyTotalName = "metric.cloud.latency.total"
		} else {
			flagMetricCloudLatencyTotalName = fmt.Sprintf("%v.metric.cloud.latency.total", cmdPrefix)
		}

		flagMetricCloudLatencyTotalValue, err := cmd.Flags().GetInt64(flagMetricCloudLatencyTotalName)
		if err != nil {
			return err, false
		}
		m.MetricCloudLatencyTotal = &flagMetricCloudLatencyTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricCloudLatencyWriteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.cloud.latency.write") {

		var flagMetricCloudLatencyWriteName string
		if cmdPrefix == "" {
			flagMetricCloudLatencyWriteName = "metric.cloud.latency.write"
		} else {
			flagMetricCloudLatencyWriteName = fmt.Sprintf("%v.metric.cloud.latency.write", cmdPrefix)
		}

		flagMetricCloudLatencyWriteValue, err := cmd.Flags().GetInt64(flagMetricCloudLatencyWriteName)
		if err != nil {
			return err, false
		}
		m.MetricCloudLatencyWrite = &flagMetricCloudLatencyWriteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricCloudStatusFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.cloud.status") {

		var flagMetricCloudStatusName string
		if cmdPrefix == "" {
			flagMetricCloudStatusName = "metric.cloud.status"
		} else {
			flagMetricCloudStatusName = fmt.Sprintf("%v.metric.cloud.status", cmdPrefix)
		}

		flagMetricCloudStatusValue, err := cmd.Flags().GetString(flagMetricCloudStatusName)
		if err != nil {
			return err, false
		}
		m.MetricCloudStatus = &flagMetricCloudStatusValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricCloudTimestampFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.cloud.timestamp") {

		var flagMetricCloudTimestampName string
		if cmdPrefix == "" {
			flagMetricCloudTimestampName = "metric.cloud.timestamp"
		} else {
			flagMetricCloudTimestampName = fmt.Sprintf("%v.metric.cloud.timestamp", cmdPrefix)
		}

		flagMetricCloudTimestampValue, err := cmd.Flags().GetString(flagMetricCloudTimestampName)
		if err != nil {
			return err, false
		}
		m.MetricCloudTimestamp = &flagMetricCloudTimestampValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricDurationFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.duration") {

		var flagMetricDurationName string
		if cmdPrefix == "" {
			flagMetricDurationName = "metric.duration"
		} else {
			flagMetricDurationName = fmt.Sprintf("%v.metric.duration", cmdPrefix)
		}

		flagMetricDurationValue, err := cmd.Flags().GetString(flagMetricDurationName)
		if err != nil {
			return err, false
		}
		m.MetricDuration = &flagMetricDurationValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricFlexcacheBandwidthSavingsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.flexcache.bandwidth_savings") {

		var flagMetricFlexcacheBandwidthSavingsName string
		if cmdPrefix == "" {
			flagMetricFlexcacheBandwidthSavingsName = "metric.flexcache.bandwidth_savings"
		} else {
			flagMetricFlexcacheBandwidthSavingsName = fmt.Sprintf("%v.metric.flexcache.bandwidth_savings", cmdPrefix)
		}

		flagMetricFlexcacheBandwidthSavingsValue, err := cmd.Flags().GetInt64(flagMetricFlexcacheBandwidthSavingsName)
		if err != nil {
			return err, false
		}
		m.MetricFlexcacheBandwidthSavings = &flagMetricFlexcacheBandwidthSavingsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricFlexcacheCacheMissPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.flexcache.cache_miss_percent") {

		var flagMetricFlexcacheCacheMissPercentName string
		if cmdPrefix == "" {
			flagMetricFlexcacheCacheMissPercentName = "metric.flexcache.cache_miss_percent"
		} else {
			flagMetricFlexcacheCacheMissPercentName = fmt.Sprintf("%v.metric.flexcache.cache_miss_percent", cmdPrefix)
		}

		flagMetricFlexcacheCacheMissPercentValue, err := cmd.Flags().GetInt64(flagMetricFlexcacheCacheMissPercentName)
		if err != nil {
			return err, false
		}
		m.MetricFlexcacheCacheMissPercent = &flagMetricFlexcacheCacheMissPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricFlexcacheDurationFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.flexcache.duration") {

		var flagMetricFlexcacheDurationName string
		if cmdPrefix == "" {
			flagMetricFlexcacheDurationName = "metric.flexcache.duration"
		} else {
			flagMetricFlexcacheDurationName = fmt.Sprintf("%v.metric.flexcache.duration", cmdPrefix)
		}

		flagMetricFlexcacheDurationValue, err := cmd.Flags().GetString(flagMetricFlexcacheDurationName)
		if err != nil {
			return err, false
		}
		m.MetricFlexcacheDuration = &flagMetricFlexcacheDurationValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricFlexcacheStatusFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.flexcache.status") {

		var flagMetricFlexcacheStatusName string
		if cmdPrefix == "" {
			flagMetricFlexcacheStatusName = "metric.flexcache.status"
		} else {
			flagMetricFlexcacheStatusName = fmt.Sprintf("%v.metric.flexcache.status", cmdPrefix)
		}

		flagMetricFlexcacheStatusValue, err := cmd.Flags().GetString(flagMetricFlexcacheStatusName)
		if err != nil {
			return err, false
		}
		m.MetricFlexcacheStatus = &flagMetricFlexcacheStatusValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricFlexcacheTimestampFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.flexcache.timestamp") {

		var flagMetricFlexcacheTimestampName string
		if cmdPrefix == "" {
			flagMetricFlexcacheTimestampName = "metric.flexcache.timestamp"
		} else {
			flagMetricFlexcacheTimestampName = fmt.Sprintf("%v.metric.flexcache.timestamp", cmdPrefix)
		}

		flagMetricFlexcacheTimestampValue, err := cmd.Flags().GetString(flagMetricFlexcacheTimestampName)
		if err != nil {
			return err, false
		}
		m.MetricFlexcacheTimestamp = &flagMetricFlexcacheTimestampValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricIopsOtherFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.iops.other") {

		var flagMetricIopsOtherName string
		if cmdPrefix == "" {
			flagMetricIopsOtherName = "metric.iops.other"
		} else {
			flagMetricIopsOtherName = fmt.Sprintf("%v.metric.iops.other", cmdPrefix)
		}

		flagMetricIopsOtherValue, err := cmd.Flags().GetInt64(flagMetricIopsOtherName)
		if err != nil {
			return err, false
		}
		m.MetricIopsOther = &flagMetricIopsOtherValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricIopsReadFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.iops.read") {

		var flagMetricIopsReadName string
		if cmdPrefix == "" {
			flagMetricIopsReadName = "metric.iops.read"
		} else {
			flagMetricIopsReadName = fmt.Sprintf("%v.metric.iops.read", cmdPrefix)
		}

		flagMetricIopsReadValue, err := cmd.Flags().GetInt64(flagMetricIopsReadName)
		if err != nil {
			return err, false
		}
		m.MetricIopsRead = &flagMetricIopsReadValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricIopsTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.iops.total") {

		var flagMetricIopsTotalName string
		if cmdPrefix == "" {
			flagMetricIopsTotalName = "metric.iops.total"
		} else {
			flagMetricIopsTotalName = fmt.Sprintf("%v.metric.iops.total", cmdPrefix)
		}

		flagMetricIopsTotalValue, err := cmd.Flags().GetInt64(flagMetricIopsTotalName)
		if err != nil {
			return err, false
		}
		m.MetricIopsTotal = &flagMetricIopsTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricIopsWriteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.iops.write") {

		var flagMetricIopsWriteName string
		if cmdPrefix == "" {
			flagMetricIopsWriteName = "metric.iops.write"
		} else {
			flagMetricIopsWriteName = fmt.Sprintf("%v.metric.iops.write", cmdPrefix)
		}

		flagMetricIopsWriteValue, err := cmd.Flags().GetInt64(flagMetricIopsWriteName)
		if err != nil {
			return err, false
		}
		m.MetricIopsWrite = &flagMetricIopsWriteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricLatencyOtherFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.latency.other") {

		var flagMetricLatencyOtherName string
		if cmdPrefix == "" {
			flagMetricLatencyOtherName = "metric.latency.other"
		} else {
			flagMetricLatencyOtherName = fmt.Sprintf("%v.metric.latency.other", cmdPrefix)
		}

		flagMetricLatencyOtherValue, err := cmd.Flags().GetInt64(flagMetricLatencyOtherName)
		if err != nil {
			return err, false
		}
		m.MetricLatencyOther = &flagMetricLatencyOtherValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricLatencyReadFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.latency.read") {

		var flagMetricLatencyReadName string
		if cmdPrefix == "" {
			flagMetricLatencyReadName = "metric.latency.read"
		} else {
			flagMetricLatencyReadName = fmt.Sprintf("%v.metric.latency.read", cmdPrefix)
		}

		flagMetricLatencyReadValue, err := cmd.Flags().GetInt64(flagMetricLatencyReadName)
		if err != nil {
			return err, false
		}
		m.MetricLatencyRead = &flagMetricLatencyReadValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricLatencyTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.latency.total") {

		var flagMetricLatencyTotalName string
		if cmdPrefix == "" {
			flagMetricLatencyTotalName = "metric.latency.total"
		} else {
			flagMetricLatencyTotalName = fmt.Sprintf("%v.metric.latency.total", cmdPrefix)
		}

		flagMetricLatencyTotalValue, err := cmd.Flags().GetInt64(flagMetricLatencyTotalName)
		if err != nil {
			return err, false
		}
		m.MetricLatencyTotal = &flagMetricLatencyTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricLatencyWriteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.latency.write") {

		var flagMetricLatencyWriteName string
		if cmdPrefix == "" {
			flagMetricLatencyWriteName = "metric.latency.write"
		} else {
			flagMetricLatencyWriteName = fmt.Sprintf("%v.metric.latency.write", cmdPrefix)
		}

		flagMetricLatencyWriteValue, err := cmd.Flags().GetInt64(flagMetricLatencyWriteName)
		if err != nil {
			return err, false
		}
		m.MetricLatencyWrite = &flagMetricLatencyWriteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricStatusFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.status") {

		var flagMetricStatusName string
		if cmdPrefix == "" {
			flagMetricStatusName = "metric.status"
		} else {
			flagMetricStatusName = fmt.Sprintf("%v.metric.status", cmdPrefix)
		}

		flagMetricStatusValue, err := cmd.Flags().GetString(flagMetricStatusName)
		if err != nil {
			return err, false
		}
		m.MetricStatus = &flagMetricStatusValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricThroughputOtherFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.throughput.other") {

		var flagMetricThroughputOtherName string
		if cmdPrefix == "" {
			flagMetricThroughputOtherName = "metric.throughput.other"
		} else {
			flagMetricThroughputOtherName = fmt.Sprintf("%v.metric.throughput.other", cmdPrefix)
		}

		flagMetricThroughputOtherValue, err := cmd.Flags().GetInt64(flagMetricThroughputOtherName)
		if err != nil {
			return err, false
		}
		m.MetricThroughputOther = &flagMetricThroughputOtherValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricThroughputReadFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.throughput.read") {

		var flagMetricThroughputReadName string
		if cmdPrefix == "" {
			flagMetricThroughputReadName = "metric.throughput.read"
		} else {
			flagMetricThroughputReadName = fmt.Sprintf("%v.metric.throughput.read", cmdPrefix)
		}

		flagMetricThroughputReadValue, err := cmd.Flags().GetInt64(flagMetricThroughputReadName)
		if err != nil {
			return err, false
		}
		m.MetricThroughputRead = &flagMetricThroughputReadValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricThroughputTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.throughput.total") {

		var flagMetricThroughputTotalName string
		if cmdPrefix == "" {
			flagMetricThroughputTotalName = "metric.throughput.total"
		} else {
			flagMetricThroughputTotalName = fmt.Sprintf("%v.metric.throughput.total", cmdPrefix)
		}

		flagMetricThroughputTotalValue, err := cmd.Flags().GetInt64(flagMetricThroughputTotalName)
		if err != nil {
			return err, false
		}
		m.MetricThroughputTotal = &flagMetricThroughputTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricThroughputWriteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.throughput.write") {

		var flagMetricThroughputWriteName string
		if cmdPrefix == "" {
			flagMetricThroughputWriteName = "metric.throughput.write"
		} else {
			flagMetricThroughputWriteName = fmt.Sprintf("%v.metric.throughput.write", cmdPrefix)
		}

		flagMetricThroughputWriteValue, err := cmd.Flags().GetInt64(flagMetricThroughputWriteName)
		if err != nil {
			return err, false
		}
		m.MetricThroughputWrite = &flagMetricThroughputWriteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMetricTimestampFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("metric.timestamp") {

		var flagMetricTimestampName string
		if cmdPrefix == "" {
			flagMetricTimestampName = "metric.timestamp"
		} else {
			flagMetricTimestampName = fmt.Sprintf("%v.metric.timestamp", cmdPrefix)
		}

		flagMetricTimestampValue, err := cmd.Flags().GetString(flagMetricTimestampName)
		if err != nil {
			return err, false
		}
		m.MetricTimestamp = &flagMetricTimestampValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMovementCutoverWindowFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("movement.cutover_window") {

		var flagMovementCutoverWindowName string
		if cmdPrefix == "" {
			flagMovementCutoverWindowName = "movement.cutover_window"
		} else {
			flagMovementCutoverWindowName = fmt.Sprintf("%v.movement.cutover_window", cmdPrefix)
		}

		flagMovementCutoverWindowValue, err := cmd.Flags().GetInt64(flagMovementCutoverWindowName)
		if err != nil {
			return err, false
		}
		m.MovementCutoverWindow = &flagMovementCutoverWindowValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMovementDestinationAggregateNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("movement.destination_aggregate.name") {

		var flagMovementDestinationAggregateNameName string
		if cmdPrefix == "" {
			flagMovementDestinationAggregateNameName = "movement.destination_aggregate.name"
		} else {
			flagMovementDestinationAggregateNameName = fmt.Sprintf("%v.movement.destination_aggregate.name", cmdPrefix)
		}

		flagMovementDestinationAggregateNameValue, err := cmd.Flags().GetString(flagMovementDestinationAggregateNameName)
		if err != nil {
			return err, false
		}
		m.MovementDestinationAggregateName = &flagMovementDestinationAggregateNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMovementDestinationAggregateUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("movement.destination_aggregate.uuid") {

		var flagMovementDestinationAggregateUUIDName string
		if cmdPrefix == "" {
			flagMovementDestinationAggregateUUIDName = "movement.destination_aggregate.uuid"
		} else {
			flagMovementDestinationAggregateUUIDName = fmt.Sprintf("%v.movement.destination_aggregate.uuid", cmdPrefix)
		}

		flagMovementDestinationAggregateUUIDValue, err := cmd.Flags().GetString(flagMovementDestinationAggregateUUIDName)
		if err != nil {
			return err, false
		}
		m.MovementDestinationAggregateUUID = &flagMovementDestinationAggregateUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMovementPercentCompleteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("movement.percent_complete") {

		var flagMovementPercentCompleteName string
		if cmdPrefix == "" {
			flagMovementPercentCompleteName = "movement.percent_complete"
		} else {
			flagMovementPercentCompleteName = fmt.Sprintf("%v.movement.percent_complete", cmdPrefix)
		}

		flagMovementPercentCompleteValue, err := cmd.Flags().GetInt64(flagMovementPercentCompleteName)
		if err != nil {
			return err, false
		}
		m.MovementPercentComplete = &flagMovementPercentCompleteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMovementStartTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("movement.start_time") {

		var flagMovementStartTimeName string
		if cmdPrefix == "" {
			flagMovementStartTimeName = "movement.start_time"
		} else {
			flagMovementStartTimeName = fmt.Sprintf("%v.movement.start_time", cmdPrefix)
		}

		flagMovementStartTimeValue, err := cmd.Flags().GetString(flagMovementStartTimeName)
		if err != nil {
			return err, false
		}
		m.MovementStartTime = &flagMovementStartTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMovementStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("movement.state") {

		var flagMovementStateName string
		if cmdPrefix == "" {
			flagMovementStateName = "movement.state"
		} else {
			flagMovementStateName = fmt.Sprintf("%v.movement.state", cmdPrefix)
		}

		flagMovementStateValue, err := cmd.Flags().GetString(flagMovementStateName)
		if err != nil {
			return err, false
		}
		m.MovementState = &flagMovementStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetMsidFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("msid") {

		var flagMsidName string
		if cmdPrefix == "" {
			flagMsidName = "msid"
		} else {
			flagMsidName = fmt.Sprintf("%v.msid", cmdPrefix)
		}

		flagMsidValue, err := cmd.Flags().GetInt64(flagMsidName)
		if err != nil {
			return err, false
		}
		m.Msid = &flagMsidValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetNasExportPolicyIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("nas.export_policy.id") {

		var flagNasExportPolicyIDName string
		if cmdPrefix == "" {
			flagNasExportPolicyIDName = "nas.export_policy.id"
		} else {
			flagNasExportPolicyIDName = fmt.Sprintf("%v.nas.export_policy.id", cmdPrefix)
		}

		flagNasExportPolicyIDValue, err := cmd.Flags().GetInt64(flagNasExportPolicyIDName)
		if err != nil {
			return err, false
		}
		m.NasExportPolicyID = &flagNasExportPolicyIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetNasExportPolicyNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("nas.export_policy.name") {

		var flagNasExportPolicyNameName string
		if cmdPrefix == "" {
			flagNasExportPolicyNameName = "nas.export_policy.name"
		} else {
			flagNasExportPolicyNameName = fmt.Sprintf("%v.nas.export_policy.name", cmdPrefix)
		}

		flagNasExportPolicyNameValue, err := cmd.Flags().GetString(flagNasExportPolicyNameName)
		if err != nil {
			return err, false
		}
		m.NasExportPolicyName = &flagNasExportPolicyNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetNasGidFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("nas.gid") {

		var flagNasGidName string
		if cmdPrefix == "" {
			flagNasGidName = "nas.gid"
		} else {
			flagNasGidName = fmt.Sprintf("%v.nas.gid", cmdPrefix)
		}

		flagNasGidValue, err := cmd.Flags().GetInt64(flagNasGidName)
		if err != nil {
			return err, false
		}
		m.NasGid = &flagNasGidValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetNasJunctionParentNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("nas.junction_parent.name") {

		var flagNasJunctionParentNameName string
		if cmdPrefix == "" {
			flagNasJunctionParentNameName = "nas.junction_parent.name"
		} else {
			flagNasJunctionParentNameName = fmt.Sprintf("%v.nas.junction_parent.name", cmdPrefix)
		}

		flagNasJunctionParentNameValue, err := cmd.Flags().GetString(flagNasJunctionParentNameName)
		if err != nil {
			return err, false
		}
		m.NasJunctionParentName = &flagNasJunctionParentNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetNasJunctionParentUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("nas.junction_parent.uuid") {

		var flagNasJunctionParentUUIDName string
		if cmdPrefix == "" {
			flagNasJunctionParentUUIDName = "nas.junction_parent.uuid"
		} else {
			flagNasJunctionParentUUIDName = fmt.Sprintf("%v.nas.junction_parent.uuid", cmdPrefix)
		}

		flagNasJunctionParentUUIDValue, err := cmd.Flags().GetString(flagNasJunctionParentUUIDName)
		if err != nil {
			return err, false
		}
		m.NasJunctionParentUUID = &flagNasJunctionParentUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetNasPathFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("nas.path") {

		var flagNasPathName string
		if cmdPrefix == "" {
			flagNasPathName = "nas.path"
		} else {
			flagNasPathName = fmt.Sprintf("%v.nas.path", cmdPrefix)
		}

		flagNasPathValue, err := cmd.Flags().GetString(flagNasPathName)
		if err != nil {
			return err, false
		}
		m.NasPath = &flagNasPathValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetNasSecurityStyleFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("nas.security_style") {

		var flagNasSecurityStyleName string
		if cmdPrefix == "" {
			flagNasSecurityStyleName = "nas.security_style"
		} else {
			flagNasSecurityStyleName = fmt.Sprintf("%v.nas.security_style", cmdPrefix)
		}

		flagNasSecurityStyleValue, err := cmd.Flags().GetString(flagNasSecurityStyleName)
		if err != nil {
			return err, false
		}
		m.NasSecurityStyle = &flagNasSecurityStyleValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetNasUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("nas.uid") {

		var flagNasUIDName string
		if cmdPrefix == "" {
			flagNasUIDName = "nas.uid"
		} else {
			flagNasUIDName = fmt.Sprintf("%v.nas.uid", cmdPrefix)
		}

		flagNasUIDValue, err := cmd.Flags().GetInt64(flagNasUIDName)
		if err != nil {
			return err, false
		}
		m.NasUID = &flagNasUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetNasUnixPermissionsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("nas.unix_permissions") {

		var flagNasUnixPermissionsName string
		if cmdPrefix == "" {
			flagNasUnixPermissionsName = "nas.unix_permissions"
		} else {
			flagNasUnixPermissionsName = fmt.Sprintf("%v.nas.unix_permissions", cmdPrefix)
		}

		flagNasUnixPermissionsValue, err := cmd.Flags().GetInt64(flagNasUnixPermissionsName)
		if err != nil {
			return err, false
		}
		m.NasUnixPermissions = &flagNasUnixPermissionsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetOrderByFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("order_by") {

		var flagOrderByName string
		if cmdPrefix == "" {
			flagOrderByName = "order_by"
		} else {
			flagOrderByName = fmt.Sprintf("%v.order_by", cmdPrefix)
		}

		flagOrderByValue, err := cmd.Flags().GetStringSlice(flagOrderByName)
		if err != nil {
			return err, false
		}
		m.OrderBy = flagOrderByValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetQosPolicyMaxThroughputIopsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("qos.policy.max_throughput_iops") {

		var flagQosPolicyMaxThroughputIopsName string
		if cmdPrefix == "" {
			flagQosPolicyMaxThroughputIopsName = "qos.policy.max_throughput_iops"
		} else {
			flagQosPolicyMaxThroughputIopsName = fmt.Sprintf("%v.qos.policy.max_throughput_iops", cmdPrefix)
		}

		flagQosPolicyMaxThroughputIopsValue, err := cmd.Flags().GetInt64(flagQosPolicyMaxThroughputIopsName)
		if err != nil {
			return err, false
		}
		m.QosPolicyMaxThroughputIops = &flagQosPolicyMaxThroughputIopsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetQosPolicyMaxThroughputMbpsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("qos.policy.max_throughput_mbps") {

		var flagQosPolicyMaxThroughputMbpsName string
		if cmdPrefix == "" {
			flagQosPolicyMaxThroughputMbpsName = "qos.policy.max_throughput_mbps"
		} else {
			flagQosPolicyMaxThroughputMbpsName = fmt.Sprintf("%v.qos.policy.max_throughput_mbps", cmdPrefix)
		}

		flagQosPolicyMaxThroughputMbpsValue, err := cmd.Flags().GetInt64(flagQosPolicyMaxThroughputMbpsName)
		if err != nil {
			return err, false
		}
		m.QosPolicyMaxThroughputMbps = &flagQosPolicyMaxThroughputMbpsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetQosPolicyMinThroughputIopsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("qos.policy.min_throughput_iops") {

		var flagQosPolicyMinThroughputIopsName string
		if cmdPrefix == "" {
			flagQosPolicyMinThroughputIopsName = "qos.policy.min_throughput_iops"
		} else {
			flagQosPolicyMinThroughputIopsName = fmt.Sprintf("%v.qos.policy.min_throughput_iops", cmdPrefix)
		}

		flagQosPolicyMinThroughputIopsValue, err := cmd.Flags().GetInt64(flagQosPolicyMinThroughputIopsName)
		if err != nil {
			return err, false
		}
		m.QosPolicyMinThroughputIops = &flagQosPolicyMinThroughputIopsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetQosPolicyMinThroughputMbpsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("qos.policy.min_throughput_mbps") {

		var flagQosPolicyMinThroughputMbpsName string
		if cmdPrefix == "" {
			flagQosPolicyMinThroughputMbpsName = "qos.policy.min_throughput_mbps"
		} else {
			flagQosPolicyMinThroughputMbpsName = fmt.Sprintf("%v.qos.policy.min_throughput_mbps", cmdPrefix)
		}

		flagQosPolicyMinThroughputMbpsValue, err := cmd.Flags().GetInt64(flagQosPolicyMinThroughputMbpsName)
		if err != nil {
			return err, false
		}
		m.QosPolicyMinThroughputMbps = &flagQosPolicyMinThroughputMbpsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetQosPolicyNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("qos.policy.name") {

		var flagQosPolicyNameName string
		if cmdPrefix == "" {
			flagQosPolicyNameName = "qos.policy.name"
		} else {
			flagQosPolicyNameName = fmt.Sprintf("%v.qos.policy.name", cmdPrefix)
		}

		flagQosPolicyNameValue, err := cmd.Flags().GetString(flagQosPolicyNameName)
		if err != nil {
			return err, false
		}
		m.QosPolicyName = &flagQosPolicyNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetQosPolicyUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("qos.policy.uuid") {

		var flagQosPolicyUUIDName string
		if cmdPrefix == "" {
			flagQosPolicyUUIDName = "qos.policy.uuid"
		} else {
			flagQosPolicyUUIDName = fmt.Sprintf("%v.qos.policy.uuid", cmdPrefix)
		}

		flagQosPolicyUUIDValue, err := cmd.Flags().GetString(flagQosPolicyUUIDName)
		if err != nil {
			return err, false
		}
		m.QosPolicyUUID = &flagQosPolicyUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetQueueForEncryptionFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("queue_for_encryption") {

		var flagQueueForEncryptionName string
		if cmdPrefix == "" {
			flagQueueForEncryptionName = "queue_for_encryption"
		} else {
			flagQueueForEncryptionName = fmt.Sprintf("%v.queue_for_encryption", cmdPrefix)
		}

		flagQueueForEncryptionValue, err := cmd.Flags().GetBool(flagQueueForEncryptionName)
		if err != nil {
			return err, false
		}
		m.QueueForEncryption = &flagQueueForEncryptionValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetQuotaStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("quota.state") {

		var flagQuotaStateName string
		if cmdPrefix == "" {
			flagQuotaStateName = "quota.state"
		} else {
			flagQuotaStateName = fmt.Sprintf("%v.quota.state", cmdPrefix)
		}

		flagQuotaStateValue, err := cmd.Flags().GetString(flagQuotaStateName)
		if err != nil {
			return err, false
		}
		m.QuotaState = &flagQuotaStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingDataMovedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.data_moved") {

		var flagRebalancingDataMovedName string
		if cmdPrefix == "" {
			flagRebalancingDataMovedName = "rebalancing.data_moved"
		} else {
			flagRebalancingDataMovedName = fmt.Sprintf("%v.rebalancing.data_moved", cmdPrefix)
		}

		flagRebalancingDataMovedValue, err := cmd.Flags().GetInt64(flagRebalancingDataMovedName)
		if err != nil {
			return err, false
		}
		m.RebalancingDataMoved = &flagRebalancingDataMovedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineMovementFileMovesStartedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.movement.file_moves_started") {

		var flagRebalancingEngineMovementFileMovesStartedName string
		if cmdPrefix == "" {
			flagRebalancingEngineMovementFileMovesStartedName = "rebalancing.engine.movement.file_moves_started"
		} else {
			flagRebalancingEngineMovementFileMovesStartedName = fmt.Sprintf("%v.rebalancing.engine.movement.file_moves_started", cmdPrefix)
		}

		flagRebalancingEngineMovementFileMovesStartedValue, err := cmd.Flags().GetInt64(flagRebalancingEngineMovementFileMovesStartedName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineMovementFileMovesStarted = &flagRebalancingEngineMovementFileMovesStartedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorCodeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.movement.last_error.code") {

		var flagRebalancingEngineMovementLastErrorCodeName string
		if cmdPrefix == "" {
			flagRebalancingEngineMovementLastErrorCodeName = "rebalancing.engine.movement.last_error.code"
		} else {
			flagRebalancingEngineMovementLastErrorCodeName = fmt.Sprintf("%v.rebalancing.engine.movement.last_error.code", cmdPrefix)
		}

		flagRebalancingEngineMovementLastErrorCodeValue, err := cmd.Flags().GetInt64(flagRebalancingEngineMovementLastErrorCodeName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineMovementLastErrorCode = &flagRebalancingEngineMovementLastErrorCodeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorDestinationFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.movement.last_error.destination") {

		var flagRebalancingEngineMovementLastErrorDestinationName string
		if cmdPrefix == "" {
			flagRebalancingEngineMovementLastErrorDestinationName = "rebalancing.engine.movement.last_error.destination"
		} else {
			flagRebalancingEngineMovementLastErrorDestinationName = fmt.Sprintf("%v.rebalancing.engine.movement.last_error.destination", cmdPrefix)
		}

		flagRebalancingEngineMovementLastErrorDestinationValue, err := cmd.Flags().GetInt64(flagRebalancingEngineMovementLastErrorDestinationName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineMovementLastErrorDestination = &flagRebalancingEngineMovementLastErrorDestinationValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorFileIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.movement.last_error.file_id") {

		var flagRebalancingEngineMovementLastErrorFileIDName string
		if cmdPrefix == "" {
			flagRebalancingEngineMovementLastErrorFileIDName = "rebalancing.engine.movement.last_error.file_id"
		} else {
			flagRebalancingEngineMovementLastErrorFileIDName = fmt.Sprintf("%v.rebalancing.engine.movement.last_error.file_id", cmdPrefix)
		}

		flagRebalancingEngineMovementLastErrorFileIDValue, err := cmd.Flags().GetInt64(flagRebalancingEngineMovementLastErrorFileIDName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineMovementLastErrorFileID = &flagRebalancingEngineMovementLastErrorFileIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineMovementLastErrorTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.movement.last_error.time") {

		var flagRebalancingEngineMovementLastErrorTimeName string
		if cmdPrefix == "" {
			flagRebalancingEngineMovementLastErrorTimeName = "rebalancing.engine.movement.last_error.time"
		} else {
			flagRebalancingEngineMovementLastErrorTimeName = fmt.Sprintf("%v.rebalancing.engine.movement.last_error.time", cmdPrefix)
		}

		flagRebalancingEngineMovementLastErrorTimeValue, err := cmd.Flags().GetString(flagRebalancingEngineMovementLastErrorTimeName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineMovementLastErrorTime = &flagRebalancingEngineMovementLastErrorTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineMovementMostRecentStartTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.movement.most_recent_start_time") {

		var flagRebalancingEngineMovementMostRecentStartTimeName string
		if cmdPrefix == "" {
			flagRebalancingEngineMovementMostRecentStartTimeName = "rebalancing.engine.movement.most_recent_start_time"
		} else {
			flagRebalancingEngineMovementMostRecentStartTimeName = fmt.Sprintf("%v.rebalancing.engine.movement.most_recent_start_time", cmdPrefix)
		}

		flagRebalancingEngineMovementMostRecentStartTimeValue, err := cmd.Flags().GetString(flagRebalancingEngineMovementMostRecentStartTimeName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineMovementMostRecentStartTime = &flagRebalancingEngineMovementMostRecentStartTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksScannedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_scanned") {

		var flagRebalancingEngineScannerBlocksScannedName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksScannedName = "rebalancing.engine.scanner.blocks_scanned"
		} else {
			flagRebalancingEngineScannerBlocksScannedName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_scanned", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksScannedValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksScannedName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksScanned = &flagRebalancingEngineScannerBlocksScannedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedEfficiencyBlocksFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.efficiency_blocks") {

		var flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksName = "rebalancing.engine.scanner.blocks_skipped.efficiency_blocks"
		} else {
			flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.efficiency_blocks", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedEfficiencyBlocks = &flagRebalancingEngineScannerBlocksSkippedEfficiencyBlocksValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedEfficiencyPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.efficiency_percent") {

		var flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentName = "rebalancing.engine.scanner.blocks_skipped.efficiency_percent"
		} else {
			flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.efficiency_percent", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedEfficiencyPercent = &flagRebalancingEngineScannerBlocksSkippedEfficiencyPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedFastTruncateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.fast_truncate") {

		var flagRebalancingEngineScannerBlocksSkippedFastTruncateName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedFastTruncateName = "rebalancing.engine.scanner.blocks_skipped.fast_truncate"
		} else {
			flagRebalancingEngineScannerBlocksSkippedFastTruncateName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.fast_truncate", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedFastTruncateValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedFastTruncateName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedFastTruncate = &flagRebalancingEngineScannerBlocksSkippedFastTruncateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedFootprintInvalidFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.footprint_invalid") {

		var flagRebalancingEngineScannerBlocksSkippedFootprintInvalidName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedFootprintInvalidName = "rebalancing.engine.scanner.blocks_skipped.footprint_invalid"
		} else {
			flagRebalancingEngineScannerBlocksSkippedFootprintInvalidName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.footprint_invalid", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedFootprintInvalidValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedFootprintInvalidName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedFootprintInvalid = &flagRebalancingEngineScannerBlocksSkippedFootprintInvalidValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedInSnapshotFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.in_snapshot") {

		var flagRebalancingEngineScannerBlocksSkippedInSnapshotName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedInSnapshotName = "rebalancing.engine.scanner.blocks_skipped.in_snapshot"
		} else {
			flagRebalancingEngineScannerBlocksSkippedInSnapshotName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.in_snapshot", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedInSnapshotValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedInSnapshotName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedInSnapshot = &flagRebalancingEngineScannerBlocksSkippedInSnapshotValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedIncompatibleFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.incompatible") {

		var flagRebalancingEngineScannerBlocksSkippedIncompatibleName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedIncompatibleName = "rebalancing.engine.scanner.blocks_skipped.incompatible"
		} else {
			flagRebalancingEngineScannerBlocksSkippedIncompatibleName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.incompatible", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedIncompatibleValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedIncompatibleName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedIncompatible = &flagRebalancingEngineScannerBlocksSkippedIncompatibleValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedMetadataFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.metadata") {

		var flagRebalancingEngineScannerBlocksSkippedMetadataName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedMetadataName = "rebalancing.engine.scanner.blocks_skipped.metadata"
		} else {
			flagRebalancingEngineScannerBlocksSkippedMetadataName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.metadata", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedMetadataValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedMetadataName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedMetadata = &flagRebalancingEngineScannerBlocksSkippedMetadataValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedOnDemandDestinationFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.on_demand_destination") {

		var flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationName = "rebalancing.engine.scanner.blocks_skipped.on_demand_destination"
		} else {
			flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.on_demand_destination", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedOnDemandDestination = &flagRebalancingEngineScannerBlocksSkippedOnDemandDestinationValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedOtherFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.other") {

		var flagRebalancingEngineScannerBlocksSkippedOtherName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedOtherName = "rebalancing.engine.scanner.blocks_skipped.other"
		} else {
			flagRebalancingEngineScannerBlocksSkippedOtherName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.other", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedOtherValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedOtherName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedOther = &flagRebalancingEngineScannerBlocksSkippedOtherValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedRemoteCacheFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.remote_cache") {

		var flagRebalancingEngineScannerBlocksSkippedRemoteCacheName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedRemoteCacheName = "rebalancing.engine.scanner.blocks_skipped.remote_cache"
		} else {
			flagRebalancingEngineScannerBlocksSkippedRemoteCacheName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.remote_cache", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedRemoteCacheValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedRemoteCacheName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedRemoteCache = &flagRebalancingEngineScannerBlocksSkippedRemoteCacheValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedTooLargeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.too_large") {

		var flagRebalancingEngineScannerBlocksSkippedTooLargeName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedTooLargeName = "rebalancing.engine.scanner.blocks_skipped.too_large"
		} else {
			flagRebalancingEngineScannerBlocksSkippedTooLargeName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.too_large", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedTooLargeValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedTooLargeName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedTooLarge = &flagRebalancingEngineScannerBlocksSkippedTooLargeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedTooSmallFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.too_small") {

		var flagRebalancingEngineScannerBlocksSkippedTooSmallName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedTooSmallName = "rebalancing.engine.scanner.blocks_skipped.too_small"
		} else {
			flagRebalancingEngineScannerBlocksSkippedTooSmallName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.too_small", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedTooSmallValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedTooSmallName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedTooSmall = &flagRebalancingEngineScannerBlocksSkippedTooSmallValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerBlocksSkippedWriteFencedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.blocks_skipped.write_fenced") {

		var flagRebalancingEngineScannerBlocksSkippedWriteFencedName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerBlocksSkippedWriteFencedName = "rebalancing.engine.scanner.blocks_skipped.write_fenced"
		} else {
			flagRebalancingEngineScannerBlocksSkippedWriteFencedName = fmt.Sprintf("%v.rebalancing.engine.scanner.blocks_skipped.write_fenced", cmdPrefix)
		}

		flagRebalancingEngineScannerBlocksSkippedWriteFencedValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerBlocksSkippedWriteFencedName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerBlocksSkippedWriteFenced = &flagRebalancingEngineScannerBlocksSkippedWriteFencedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesScannedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_scanned") {

		var flagRebalancingEngineScannerFilesScannedName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesScannedName = "rebalancing.engine.scanner.files_scanned"
		} else {
			flagRebalancingEngineScannerFilesScannedName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_scanned", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesScannedValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesScannedName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesScanned = &flagRebalancingEngineScannerFilesScannedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedEfficiencyBlocksFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.efficiency_blocks") {

		var flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksName = "rebalancing.engine.scanner.files_skipped.efficiency_blocks"
		} else {
			flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.efficiency_blocks", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedEfficiencyBlocks = &flagRebalancingEngineScannerFilesSkippedEfficiencyBlocksValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedEfficiencyPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.efficiency_percent") {

		var flagRebalancingEngineScannerFilesSkippedEfficiencyPercentName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedEfficiencyPercentName = "rebalancing.engine.scanner.files_skipped.efficiency_percent"
		} else {
			flagRebalancingEngineScannerFilesSkippedEfficiencyPercentName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.efficiency_percent", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedEfficiencyPercentValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedEfficiencyPercentName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedEfficiencyPercent = &flagRebalancingEngineScannerFilesSkippedEfficiencyPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedFastTruncateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.fast_truncate") {

		var flagRebalancingEngineScannerFilesSkippedFastTruncateName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedFastTruncateName = "rebalancing.engine.scanner.files_skipped.fast_truncate"
		} else {
			flagRebalancingEngineScannerFilesSkippedFastTruncateName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.fast_truncate", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedFastTruncateValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedFastTruncateName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedFastTruncate = &flagRebalancingEngineScannerFilesSkippedFastTruncateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedFootprintInvalidFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.footprint_invalid") {

		var flagRebalancingEngineScannerFilesSkippedFootprintInvalidName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedFootprintInvalidName = "rebalancing.engine.scanner.files_skipped.footprint_invalid"
		} else {
			flagRebalancingEngineScannerFilesSkippedFootprintInvalidName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.footprint_invalid", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedFootprintInvalidValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedFootprintInvalidName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedFootprintInvalid = &flagRebalancingEngineScannerFilesSkippedFootprintInvalidValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedInSnapshotFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.in_snapshot") {

		var flagRebalancingEngineScannerFilesSkippedInSnapshotName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedInSnapshotName = "rebalancing.engine.scanner.files_skipped.in_snapshot"
		} else {
			flagRebalancingEngineScannerFilesSkippedInSnapshotName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.in_snapshot", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedInSnapshotValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedInSnapshotName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedInSnapshot = &flagRebalancingEngineScannerFilesSkippedInSnapshotValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedIncompatibleFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.incompatible") {

		var flagRebalancingEngineScannerFilesSkippedIncompatibleName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedIncompatibleName = "rebalancing.engine.scanner.files_skipped.incompatible"
		} else {
			flagRebalancingEngineScannerFilesSkippedIncompatibleName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.incompatible", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedIncompatibleValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedIncompatibleName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedIncompatible = &flagRebalancingEngineScannerFilesSkippedIncompatibleValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedMetadataFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.metadata") {

		var flagRebalancingEngineScannerFilesSkippedMetadataName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedMetadataName = "rebalancing.engine.scanner.files_skipped.metadata"
		} else {
			flagRebalancingEngineScannerFilesSkippedMetadataName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.metadata", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedMetadataValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedMetadataName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedMetadata = &flagRebalancingEngineScannerFilesSkippedMetadataValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedOnDemandDestinationFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.on_demand_destination") {

		var flagRebalancingEngineScannerFilesSkippedOnDemandDestinationName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedOnDemandDestinationName = "rebalancing.engine.scanner.files_skipped.on_demand_destination"
		} else {
			flagRebalancingEngineScannerFilesSkippedOnDemandDestinationName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.on_demand_destination", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedOnDemandDestinationValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedOnDemandDestinationName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedOnDemandDestination = &flagRebalancingEngineScannerFilesSkippedOnDemandDestinationValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedOtherFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.other") {

		var flagRebalancingEngineScannerFilesSkippedOtherName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedOtherName = "rebalancing.engine.scanner.files_skipped.other"
		} else {
			flagRebalancingEngineScannerFilesSkippedOtherName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.other", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedOtherValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedOtherName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedOther = &flagRebalancingEngineScannerFilesSkippedOtherValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedRemoteCacheFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.remote_cache") {

		var flagRebalancingEngineScannerFilesSkippedRemoteCacheName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedRemoteCacheName = "rebalancing.engine.scanner.files_skipped.remote_cache"
		} else {
			flagRebalancingEngineScannerFilesSkippedRemoteCacheName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.remote_cache", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedRemoteCacheValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedRemoteCacheName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedRemoteCache = &flagRebalancingEngineScannerFilesSkippedRemoteCacheValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedTooLargeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.too_large") {

		var flagRebalancingEngineScannerFilesSkippedTooLargeName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedTooLargeName = "rebalancing.engine.scanner.files_skipped.too_large"
		} else {
			flagRebalancingEngineScannerFilesSkippedTooLargeName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.too_large", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedTooLargeValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedTooLargeName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedTooLarge = &flagRebalancingEngineScannerFilesSkippedTooLargeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedTooSmallFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.too_small") {

		var flagRebalancingEngineScannerFilesSkippedTooSmallName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedTooSmallName = "rebalancing.engine.scanner.files_skipped.too_small"
		} else {
			flagRebalancingEngineScannerFilesSkippedTooSmallName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.too_small", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedTooSmallValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedTooSmallName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedTooSmall = &flagRebalancingEngineScannerFilesSkippedTooSmallValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingEngineScannerFilesSkippedWriteFencedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.engine.scanner.files_skipped.write_fenced") {

		var flagRebalancingEngineScannerFilesSkippedWriteFencedName string
		if cmdPrefix == "" {
			flagRebalancingEngineScannerFilesSkippedWriteFencedName = "rebalancing.engine.scanner.files_skipped.write_fenced"
		} else {
			flagRebalancingEngineScannerFilesSkippedWriteFencedName = fmt.Sprintf("%v.rebalancing.engine.scanner.files_skipped.write_fenced", cmdPrefix)
		}

		flagRebalancingEngineScannerFilesSkippedWriteFencedValue, err := cmd.Flags().GetInt64(flagRebalancingEngineScannerFilesSkippedWriteFencedName)
		if err != nil {
			return err, false
		}
		m.RebalancingEngineScannerFilesSkippedWriteFenced = &flagRebalancingEngineScannerFilesSkippedWriteFencedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingExcludeSnapshotsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.exclude_snapshots") {

		var flagRebalancingExcludeSnapshotsName string
		if cmdPrefix == "" {
			flagRebalancingExcludeSnapshotsName = "rebalancing.exclude_snapshots"
		} else {
			flagRebalancingExcludeSnapshotsName = fmt.Sprintf("%v.rebalancing.exclude_snapshots", cmdPrefix)
		}

		flagRebalancingExcludeSnapshotsValue, err := cmd.Flags().GetBool(flagRebalancingExcludeSnapshotsName)
		if err != nil {
			return err, false
		}
		m.RebalancingExcludeSnapshots = &flagRebalancingExcludeSnapshotsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingImbalancePercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.imbalance_percent") {

		var flagRebalancingImbalancePercentName string
		if cmdPrefix == "" {
			flagRebalancingImbalancePercentName = "rebalancing.imbalance_percent"
		} else {
			flagRebalancingImbalancePercentName = fmt.Sprintf("%v.rebalancing.imbalance_percent", cmdPrefix)
		}

		flagRebalancingImbalancePercentValue, err := cmd.Flags().GetInt64(flagRebalancingImbalancePercentName)
		if err != nil {
			return err, false
		}
		m.RebalancingImbalancePercent = &flagRebalancingImbalancePercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingImbalanceSizeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.imbalance_size") {

		var flagRebalancingImbalanceSizeName string
		if cmdPrefix == "" {
			flagRebalancingImbalanceSizeName = "rebalancing.imbalance_size"
		} else {
			flagRebalancingImbalanceSizeName = fmt.Sprintf("%v.rebalancing.imbalance_size", cmdPrefix)
		}

		flagRebalancingImbalanceSizeValue, err := cmd.Flags().GetInt64(flagRebalancingImbalanceSizeName)
		if err != nil {
			return err, false
		}
		m.RebalancingImbalanceSize = &flagRebalancingImbalanceSizeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingMaxConstituentImbalancePercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.max_constituent_imbalance_percent") {

		var flagRebalancingMaxConstituentImbalancePercentName string
		if cmdPrefix == "" {
			flagRebalancingMaxConstituentImbalancePercentName = "rebalancing.max_constituent_imbalance_percent"
		} else {
			flagRebalancingMaxConstituentImbalancePercentName = fmt.Sprintf("%v.rebalancing.max_constituent_imbalance_percent", cmdPrefix)
		}

		flagRebalancingMaxConstituentImbalancePercentValue, err := cmd.Flags().GetInt64(flagRebalancingMaxConstituentImbalancePercentName)
		if err != nil {
			return err, false
		}
		m.RebalancingMaxConstituentImbalancePercent = &flagRebalancingMaxConstituentImbalancePercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingMaxFileMovesFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.max_file_moves") {

		var flagRebalancingMaxFileMovesName string
		if cmdPrefix == "" {
			flagRebalancingMaxFileMovesName = "rebalancing.max_file_moves"
		} else {
			flagRebalancingMaxFileMovesName = fmt.Sprintf("%v.rebalancing.max_file_moves", cmdPrefix)
		}

		flagRebalancingMaxFileMovesValue, err := cmd.Flags().GetInt64(flagRebalancingMaxFileMovesName)
		if err != nil {
			return err, false
		}
		m.RebalancingMaxFileMoves = &flagRebalancingMaxFileMovesValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingMaxRuntimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.max_runtime") {

		var flagRebalancingMaxRuntimeName string
		if cmdPrefix == "" {
			flagRebalancingMaxRuntimeName = "rebalancing.max_runtime"
		} else {
			flagRebalancingMaxRuntimeName = fmt.Sprintf("%v.rebalancing.max_runtime", cmdPrefix)
		}

		flagRebalancingMaxRuntimeValue, err := cmd.Flags().GetString(flagRebalancingMaxRuntimeName)
		if err != nil {
			return err, false
		}
		m.RebalancingMaxRuntime = &flagRebalancingMaxRuntimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingMaxThresholdFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.max_threshold") {

		var flagRebalancingMaxThresholdName string
		if cmdPrefix == "" {
			flagRebalancingMaxThresholdName = "rebalancing.max_threshold"
		} else {
			flagRebalancingMaxThresholdName = fmt.Sprintf("%v.rebalancing.max_threshold", cmdPrefix)
		}

		flagRebalancingMaxThresholdValue, err := cmd.Flags().GetInt64(flagRebalancingMaxThresholdName)
		if err != nil {
			return err, false
		}
		m.RebalancingMaxThreshold = &flagRebalancingMaxThresholdValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingMinFileSizeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.min_file_size") {

		var flagRebalancingMinFileSizeName string
		if cmdPrefix == "" {
			flagRebalancingMinFileSizeName = "rebalancing.min_file_size"
		} else {
			flagRebalancingMinFileSizeName = fmt.Sprintf("%v.rebalancing.min_file_size", cmdPrefix)
		}

		flagRebalancingMinFileSizeValue, err := cmd.Flags().GetInt64(flagRebalancingMinFileSizeName)
		if err != nil {
			return err, false
		}
		m.RebalancingMinFileSize = &flagRebalancingMinFileSizeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingMinThresholdFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.min_threshold") {

		var flagRebalancingMinThresholdName string
		if cmdPrefix == "" {
			flagRebalancingMinThresholdName = "rebalancing.min_threshold"
		} else {
			flagRebalancingMinThresholdName = fmt.Sprintf("%v.rebalancing.min_threshold", cmdPrefix)
		}

		flagRebalancingMinThresholdValue, err := cmd.Flags().GetInt64(flagRebalancingMinThresholdName)
		if err != nil {
			return err, false
		}
		m.RebalancingMinThreshold = &flagRebalancingMinThresholdValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingNoticesArgumentsCodeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.notices.arguments.code") {

		var flagRebalancingNoticesArgumentsCodeName string
		if cmdPrefix == "" {
			flagRebalancingNoticesArgumentsCodeName = "rebalancing.notices.arguments.code"
		} else {
			flagRebalancingNoticesArgumentsCodeName = fmt.Sprintf("%v.rebalancing.notices.arguments.code", cmdPrefix)
		}

		flagRebalancingNoticesArgumentsCodeValue, err := cmd.Flags().GetString(flagRebalancingNoticesArgumentsCodeName)
		if err != nil {
			return err, false
		}
		m.RebalancingNoticesArgumentsCode = &flagRebalancingNoticesArgumentsCodeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingNoticesArgumentsMessageFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.notices.arguments.message") {

		var flagRebalancingNoticesArgumentsMessageName string
		if cmdPrefix == "" {
			flagRebalancingNoticesArgumentsMessageName = "rebalancing.notices.arguments.message"
		} else {
			flagRebalancingNoticesArgumentsMessageName = fmt.Sprintf("%v.rebalancing.notices.arguments.message", cmdPrefix)
		}

		flagRebalancingNoticesArgumentsMessageValue, err := cmd.Flags().GetString(flagRebalancingNoticesArgumentsMessageName)
		if err != nil {
			return err, false
		}
		m.RebalancingNoticesArgumentsMessage = &flagRebalancingNoticesArgumentsMessageValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingNoticesCodeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.notices.code") {

		var flagRebalancingNoticesCodeName string
		if cmdPrefix == "" {
			flagRebalancingNoticesCodeName = "rebalancing.notices.code"
		} else {
			flagRebalancingNoticesCodeName = fmt.Sprintf("%v.rebalancing.notices.code", cmdPrefix)
		}

		flagRebalancingNoticesCodeValue, err := cmd.Flags().GetString(flagRebalancingNoticesCodeName)
		if err != nil {
			return err, false
		}
		m.RebalancingNoticesCode = &flagRebalancingNoticesCodeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingNoticesMessageFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.notices.message") {

		var flagRebalancingNoticesMessageName string
		if cmdPrefix == "" {
			flagRebalancingNoticesMessageName = "rebalancing.notices.message"
		} else {
			flagRebalancingNoticesMessageName = fmt.Sprintf("%v.rebalancing.notices.message", cmdPrefix)
		}

		flagRebalancingNoticesMessageValue, err := cmd.Flags().GetString(flagRebalancingNoticesMessageName)
		if err != nil {
			return err, false
		}
		m.RebalancingNoticesMessage = &flagRebalancingNoticesMessageValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingRuntimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.runtime") {

		var flagRebalancingRuntimeName string
		if cmdPrefix == "" {
			flagRebalancingRuntimeName = "rebalancing.runtime"
		} else {
			flagRebalancingRuntimeName = fmt.Sprintf("%v.rebalancing.runtime", cmdPrefix)
		}

		flagRebalancingRuntimeValue, err := cmd.Flags().GetString(flagRebalancingRuntimeName)
		if err != nil {
			return err, false
		}
		m.RebalancingRuntime = &flagRebalancingRuntimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingStartTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.start_time") {

		var flagRebalancingStartTimeName string
		if cmdPrefix == "" {
			flagRebalancingStartTimeName = "rebalancing.start_time"
		} else {
			flagRebalancingStartTimeName = fmt.Sprintf("%v.rebalancing.start_time", cmdPrefix)
		}

		flagRebalancingStartTimeValue, err := cmd.Flags().GetString(flagRebalancingStartTimeName)
		if err != nil {
			return err, false
		}
		m.RebalancingStartTime = &flagRebalancingStartTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.state") {

		var flagRebalancingStateName string
		if cmdPrefix == "" {
			flagRebalancingStateName = "rebalancing.state"
		} else {
			flagRebalancingStateName = fmt.Sprintf("%v.rebalancing.state", cmdPrefix)
		}

		flagRebalancingStateValue, err := cmd.Flags().GetString(flagRebalancingStateName)
		if err != nil {
			return err, false
		}
		m.RebalancingState = &flagRebalancingStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingStopTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.stop_time") {

		var flagRebalancingStopTimeName string
		if cmdPrefix == "" {
			flagRebalancingStopTimeName = "rebalancing.stop_time"
		} else {
			flagRebalancingStopTimeName = fmt.Sprintf("%v.rebalancing.stop_time", cmdPrefix)
		}

		flagRebalancingStopTimeValue, err := cmd.Flags().GetString(flagRebalancingStopTimeName)
		if err != nil {
			return err, false
		}
		m.RebalancingStopTime = &flagRebalancingStopTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingTargetUsedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.target_used") {

		var flagRebalancingTargetUsedName string
		if cmdPrefix == "" {
			flagRebalancingTargetUsedName = "rebalancing.target_used"
		} else {
			flagRebalancingTargetUsedName = fmt.Sprintf("%v.rebalancing.target_used", cmdPrefix)
		}

		flagRebalancingTargetUsedValue, err := cmd.Flags().GetInt64(flagRebalancingTargetUsedName)
		if err != nil {
			return err, false
		}
		m.RebalancingTargetUsed = &flagRebalancingTargetUsedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetRebalancingUsedForImbalanceFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rebalancing.used_for_imbalance") {

		var flagRebalancingUsedForImbalanceName string
		if cmdPrefix == "" {
			flagRebalancingUsedForImbalanceName = "rebalancing.used_for_imbalance"
		} else {
			flagRebalancingUsedForImbalanceName = fmt.Sprintf("%v.rebalancing.used_for_imbalance", cmdPrefix)
		}

		flagRebalancingUsedForImbalanceValue, err := cmd.Flags().GetInt64(flagRebalancingUsedForImbalanceName)
		if err != nil {
			return err, false
		}
		m.RebalancingUsedForImbalance = &flagRebalancingUsedForImbalanceValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetReturnRecordsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("return_records") {

		var flagReturnRecordsName string
		if cmdPrefix == "" {
			flagReturnRecordsName = "return_records"
		} else {
			flagReturnRecordsName = fmt.Sprintf("%v.return_records", cmdPrefix)
		}

		flagReturnRecordsValue, err := cmd.Flags().GetBool(flagReturnRecordsName)
		if err != nil {
			return err, false
		}
		m.ReturnRecords = &flagReturnRecordsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetReturnTimeoutFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("return_timeout") {

		var flagReturnTimeoutName string
		if cmdPrefix == "" {
			flagReturnTimeoutName = "return_timeout"
		} else {
			flagReturnTimeoutName = fmt.Sprintf("%v.return_timeout", cmdPrefix)
		}

		flagReturnTimeoutValue, err := cmd.Flags().GetInt64(flagReturnTimeoutName)
		if err != nil {
			return err, false
		}
		m.ReturnTimeout = &flagReturnTimeoutValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetScheduledSnapshotNamingSchemeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("scheduled_snapshot_naming_scheme") {

		var flagScheduledSnapshotNamingSchemeName string
		if cmdPrefix == "" {
			flagScheduledSnapshotNamingSchemeName = "scheduled_snapshot_naming_scheme"
		} else {
			flagScheduledSnapshotNamingSchemeName = fmt.Sprintf("%v.scheduled_snapshot_naming_scheme", cmdPrefix)
		}

		flagScheduledSnapshotNamingSchemeValue, err := cmd.Flags().GetString(flagScheduledSnapshotNamingSchemeName)
		if err != nil {
			return err, false
		}
		m.ScheduledSnapshotNamingScheme = &flagScheduledSnapshotNamingSchemeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSizeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("size") {

		var flagSizeName string
		if cmdPrefix == "" {
			flagSizeName = "size"
		} else {
			flagSizeName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		flagSizeValue, err := cmd.Flags().GetInt64(flagSizeName)
		if err != nil {
			return err, false
		}
		m.Size = &flagSizeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnaplockAppendModeEnabledFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snaplock.append_mode_enabled") {

		var flagSnaplockAppendModeEnabledName string
		if cmdPrefix == "" {
			flagSnaplockAppendModeEnabledName = "snaplock.append_mode_enabled"
		} else {
			flagSnaplockAppendModeEnabledName = fmt.Sprintf("%v.snaplock.append_mode_enabled", cmdPrefix)
		}

		flagSnaplockAppendModeEnabledValue, err := cmd.Flags().GetBool(flagSnaplockAppendModeEnabledName)
		if err != nil {
			return err, false
		}
		m.SnaplockAppendModeEnabled = &flagSnaplockAppendModeEnabledValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnaplockAutocommitPeriodFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snaplock.autocommit_period") {

		var flagSnaplockAutocommitPeriodName string
		if cmdPrefix == "" {
			flagSnaplockAutocommitPeriodName = "snaplock.autocommit_period"
		} else {
			flagSnaplockAutocommitPeriodName = fmt.Sprintf("%v.snaplock.autocommit_period", cmdPrefix)
		}

		flagSnaplockAutocommitPeriodValue, err := cmd.Flags().GetString(flagSnaplockAutocommitPeriodName)
		if err != nil {
			return err, false
		}
		m.SnaplockAutocommitPeriod = &flagSnaplockAutocommitPeriodValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnaplockComplianceClockTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snaplock.compliance_clock_time") {

		var flagSnaplockComplianceClockTimeName string
		if cmdPrefix == "" {
			flagSnaplockComplianceClockTimeName = "snaplock.compliance_clock_time"
		} else {
			flagSnaplockComplianceClockTimeName = fmt.Sprintf("%v.snaplock.compliance_clock_time", cmdPrefix)
		}

		flagSnaplockComplianceClockTimeValue, err := cmd.Flags().GetString(flagSnaplockComplianceClockTimeName)
		if err != nil {
			return err, false
		}
		m.SnaplockComplianceClockTime = &flagSnaplockComplianceClockTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnaplockExpiryTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snaplock.expiry_time") {

		var flagSnaplockExpiryTimeName string
		if cmdPrefix == "" {
			flagSnaplockExpiryTimeName = "snaplock.expiry_time"
		} else {
			flagSnaplockExpiryTimeName = fmt.Sprintf("%v.snaplock.expiry_time", cmdPrefix)
		}

		flagSnaplockExpiryTimeValue, err := cmd.Flags().GetString(flagSnaplockExpiryTimeName)
		if err != nil {
			return err, false
		}
		m.SnaplockExpiryTime = &flagSnaplockExpiryTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnaplockIsAuditLogFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snaplock.is_audit_log") {

		var flagSnaplockIsAuditLogName string
		if cmdPrefix == "" {
			flagSnaplockIsAuditLogName = "snaplock.is_audit_log"
		} else {
			flagSnaplockIsAuditLogName = fmt.Sprintf("%v.snaplock.is_audit_log", cmdPrefix)
		}

		flagSnaplockIsAuditLogValue, err := cmd.Flags().GetBool(flagSnaplockIsAuditLogName)
		if err != nil {
			return err, false
		}
		m.SnaplockIsAuditLog = &flagSnaplockIsAuditLogValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnaplockLitigationCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snaplock.litigation_count") {

		var flagSnaplockLitigationCountName string
		if cmdPrefix == "" {
			flagSnaplockLitigationCountName = "snaplock.litigation_count"
		} else {
			flagSnaplockLitigationCountName = fmt.Sprintf("%v.snaplock.litigation_count", cmdPrefix)
		}

		flagSnaplockLitigationCountValue, err := cmd.Flags().GetInt64(flagSnaplockLitigationCountName)
		if err != nil {
			return err, false
		}
		m.SnaplockLitigationCount = &flagSnaplockLitigationCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnaplockPrivilegedDeleteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snaplock.privileged_delete") {

		var flagSnaplockPrivilegedDeleteName string
		if cmdPrefix == "" {
			flagSnaplockPrivilegedDeleteName = "snaplock.privileged_delete"
		} else {
			flagSnaplockPrivilegedDeleteName = fmt.Sprintf("%v.snaplock.privileged_delete", cmdPrefix)
		}

		flagSnaplockPrivilegedDeleteValue, err := cmd.Flags().GetString(flagSnaplockPrivilegedDeleteName)
		if err != nil {
			return err, false
		}
		m.SnaplockPrivilegedDelete = &flagSnaplockPrivilegedDeleteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnaplockRetentionDefaultFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snaplock.retention.default") {

		var flagSnaplockRetentionDefaultName string
		if cmdPrefix == "" {
			flagSnaplockRetentionDefaultName = "snaplock.retention.default"
		} else {
			flagSnaplockRetentionDefaultName = fmt.Sprintf("%v.snaplock.retention.default", cmdPrefix)
		}

		flagSnaplockRetentionDefaultValue, err := cmd.Flags().GetString(flagSnaplockRetentionDefaultName)
		if err != nil {
			return err, false
		}
		m.SnaplockRetentionDefault = &flagSnaplockRetentionDefaultValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnaplockRetentionMaximumFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snaplock.retention.maximum") {

		var flagSnaplockRetentionMaximumName string
		if cmdPrefix == "" {
			flagSnaplockRetentionMaximumName = "snaplock.retention.maximum"
		} else {
			flagSnaplockRetentionMaximumName = fmt.Sprintf("%v.snaplock.retention.maximum", cmdPrefix)
		}

		flagSnaplockRetentionMaximumValue, err := cmd.Flags().GetString(flagSnaplockRetentionMaximumName)
		if err != nil {
			return err, false
		}
		m.SnaplockRetentionMaximum = &flagSnaplockRetentionMaximumValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnaplockRetentionMinimumFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snaplock.retention.minimum") {

		var flagSnaplockRetentionMinimumName string
		if cmdPrefix == "" {
			flagSnaplockRetentionMinimumName = "snaplock.retention.minimum"
		} else {
			flagSnaplockRetentionMinimumName = fmt.Sprintf("%v.snaplock.retention.minimum", cmdPrefix)
		}

		flagSnaplockRetentionMinimumValue, err := cmd.Flags().GetString(flagSnaplockRetentionMinimumName)
		if err != nil {
			return err, false
		}
		m.SnaplockRetentionMinimum = &flagSnaplockRetentionMinimumValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnaplockTypeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snaplock.type") {

		var flagSnaplockTypeName string
		if cmdPrefix == "" {
			flagSnaplockTypeName = "snaplock.type"
		} else {
			flagSnaplockTypeName = fmt.Sprintf("%v.snaplock.type", cmdPrefix)
		}

		flagSnaplockTypeValue, err := cmd.Flags().GetString(flagSnaplockTypeName)
		if err != nil {
			return err, false
		}
		m.SnaplockType = &flagSnaplockTypeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnaplockUnspecifiedRetentionFileCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snaplock.unspecified_retention_file_count") {

		var flagSnaplockUnspecifiedRetentionFileCountName string
		if cmdPrefix == "" {
			flagSnaplockUnspecifiedRetentionFileCountName = "snaplock.unspecified_retention_file_count"
		} else {
			flagSnaplockUnspecifiedRetentionFileCountName = fmt.Sprintf("%v.snaplock.unspecified_retention_file_count", cmdPrefix)
		}

		flagSnaplockUnspecifiedRetentionFileCountValue, err := cmd.Flags().GetInt64(flagSnaplockUnspecifiedRetentionFileCountName)
		if err != nil {
			return err, false
		}
		m.SnaplockUnspecifiedRetentionFileCount = &flagSnaplockUnspecifiedRetentionFileCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnapmirrorDestinationsIsCloudFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snapmirror.destinations.is_cloud") {

		var flagSnapmirrorDestinationsIsCloudName string
		if cmdPrefix == "" {
			flagSnapmirrorDestinationsIsCloudName = "snapmirror.destinations.is_cloud"
		} else {
			flagSnapmirrorDestinationsIsCloudName = fmt.Sprintf("%v.snapmirror.destinations.is_cloud", cmdPrefix)
		}

		flagSnapmirrorDestinationsIsCloudValue, err := cmd.Flags().GetBool(flagSnapmirrorDestinationsIsCloudName)
		if err != nil {
			return err, false
		}
		m.SnapmirrorDestinationsIsCloud = &flagSnapmirrorDestinationsIsCloudValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnapmirrorDestinationsIsOntapFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snapmirror.destinations.is_ontap") {

		var flagSnapmirrorDestinationsIsOntapName string
		if cmdPrefix == "" {
			flagSnapmirrorDestinationsIsOntapName = "snapmirror.destinations.is_ontap"
		} else {
			flagSnapmirrorDestinationsIsOntapName = fmt.Sprintf("%v.snapmirror.destinations.is_ontap", cmdPrefix)
		}

		flagSnapmirrorDestinationsIsOntapValue, err := cmd.Flags().GetBool(flagSnapmirrorDestinationsIsOntapName)
		if err != nil {
			return err, false
		}
		m.SnapmirrorDestinationsIsOntap = &flagSnapmirrorDestinationsIsOntapValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnapmirrorIsProtectedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snapmirror.is_protected") {

		var flagSnapmirrorIsProtectedName string
		if cmdPrefix == "" {
			flagSnapmirrorIsProtectedName = "snapmirror.is_protected"
		} else {
			flagSnapmirrorIsProtectedName = fmt.Sprintf("%v.snapmirror.is_protected", cmdPrefix)
		}

		flagSnapmirrorIsProtectedValue, err := cmd.Flags().GetBool(flagSnapmirrorIsProtectedName)
		if err != nil {
			return err, false
		}
		m.SnapmirrorIsProtected = &flagSnapmirrorIsProtectedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnapshotCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snapshot_count") {

		var flagSnapshotCountName string
		if cmdPrefix == "" {
			flagSnapshotCountName = "snapshot_count"
		} else {
			flagSnapshotCountName = fmt.Sprintf("%v.snapshot_count", cmdPrefix)
		}

		flagSnapshotCountValue, err := cmd.Flags().GetInt64(flagSnapshotCountName)
		if err != nil {
			return err, false
		}
		m.SnapshotCount = &flagSnapshotCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnapshotDirectoryAccessEnabledFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snapshot_directory_access_enabled") {

		var flagSnapshotDirectoryAccessEnabledName string
		if cmdPrefix == "" {
			flagSnapshotDirectoryAccessEnabledName = "snapshot_directory_access_enabled"
		} else {
			flagSnapshotDirectoryAccessEnabledName = fmt.Sprintf("%v.snapshot_directory_access_enabled", cmdPrefix)
		}

		flagSnapshotDirectoryAccessEnabledValue, err := cmd.Flags().GetBool(flagSnapshotDirectoryAccessEnabledName)
		if err != nil {
			return err, false
		}
		m.SnapshotDirectoryAccessEnabled = &flagSnapshotDirectoryAccessEnabledValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnapshotLockingEnabledFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snapshot_locking_enabled") {

		var flagSnapshotLockingEnabledName string
		if cmdPrefix == "" {
			flagSnapshotLockingEnabledName = "snapshot_locking_enabled"
		} else {
			flagSnapshotLockingEnabledName = fmt.Sprintf("%v.snapshot_locking_enabled", cmdPrefix)
		}

		flagSnapshotLockingEnabledValue, err := cmd.Flags().GetBool(flagSnapshotLockingEnabledName)
		if err != nil {
			return err, false
		}
		m.SnapshotLockingEnabled = &flagSnapshotLockingEnabledValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnapshotPolicyNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snapshot_policy.name") {

		var flagSnapshotPolicyNameName string
		if cmdPrefix == "" {
			flagSnapshotPolicyNameName = "snapshot_policy.name"
		} else {
			flagSnapshotPolicyNameName = fmt.Sprintf("%v.snapshot_policy.name", cmdPrefix)
		}

		flagSnapshotPolicyNameValue, err := cmd.Flags().GetString(flagSnapshotPolicyNameName)
		if err != nil {
			return err, false
		}
		m.SnapshotPolicyName = &flagSnapshotPolicyNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSnapshotPolicyUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("snapshot_policy.uuid") {

		var flagSnapshotPolicyUUIDName string
		if cmdPrefix == "" {
			flagSnapshotPolicyUUIDName = "snapshot_policy.uuid"
		} else {
			flagSnapshotPolicyUUIDName = fmt.Sprintf("%v.snapshot_policy.uuid", cmdPrefix)
		}

		flagSnapshotPolicyUUIDValue, err := cmd.Flags().GetString(flagSnapshotPolicyUUIDName)
		if err != nil {
			return err, false
		}
		m.SnapshotPolicyUUID = &flagSnapshotPolicyUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceAfsTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.afs_total") {

		var flagSpaceAfsTotalName string
		if cmdPrefix == "" {
			flagSpaceAfsTotalName = "space.afs_total"
		} else {
			flagSpaceAfsTotalName = fmt.Sprintf("%v.space.afs_total", cmdPrefix)
		}

		flagSpaceAfsTotalValue, err := cmd.Flags().GetInt64(flagSpaceAfsTotalName)
		if err != nil {
			return err, false
		}
		m.SpaceAfsTotal = &flagSpaceAfsTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceAutoAdaptiveCompressionFootprintDataReductionFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.auto_adaptive_compression_footprint_data_reduction") {

		var flagSpaceAutoAdaptiveCompressionFootprintDataReductionName string
		if cmdPrefix == "" {
			flagSpaceAutoAdaptiveCompressionFootprintDataReductionName = "space.auto_adaptive_compression_footprint_data_reduction"
		} else {
			flagSpaceAutoAdaptiveCompressionFootprintDataReductionName = fmt.Sprintf("%v.space.auto_adaptive_compression_footprint_data_reduction", cmdPrefix)
		}

		flagSpaceAutoAdaptiveCompressionFootprintDataReductionValue, err := cmd.Flags().GetInt64(flagSpaceAutoAdaptiveCompressionFootprintDataReductionName)
		if err != nil {
			return err, false
		}
		m.SpaceAutoAdaptiveCompressionFootprintDataReduction = &flagSpaceAutoAdaptiveCompressionFootprintDataReductionValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceAvailableFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.available") {

		var flagSpaceAvailableName string
		if cmdPrefix == "" {
			flagSpaceAvailableName = "space.available"
		} else {
			flagSpaceAvailableName = fmt.Sprintf("%v.space.available", cmdPrefix)
		}

		flagSpaceAvailableValue, err := cmd.Flags().GetInt64(flagSpaceAvailableName)
		if err != nil {
			return err, false
		}
		m.SpaceAvailable = &flagSpaceAvailableValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceAvailablePercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.available_percent") {

		var flagSpaceAvailablePercentName string
		if cmdPrefix == "" {
			flagSpaceAvailablePercentName = "space.available_percent"
		} else {
			flagSpaceAvailablePercentName = fmt.Sprintf("%v.space.available_percent", cmdPrefix)
		}

		flagSpaceAvailablePercentValue, err := cmd.Flags().GetInt64(flagSpaceAvailablePercentName)
		if err != nil {
			return err, false
		}
		m.SpaceAvailablePercent = &flagSpaceAvailablePercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceBlockStorageInactiveUserDataFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.block_storage_inactive_user_data") {

		var flagSpaceBlockStorageInactiveUserDataName string
		if cmdPrefix == "" {
			flagSpaceBlockStorageInactiveUserDataName = "space.block_storage_inactive_user_data"
		} else {
			flagSpaceBlockStorageInactiveUserDataName = fmt.Sprintf("%v.space.block_storage_inactive_user_data", cmdPrefix)
		}

		flagSpaceBlockStorageInactiveUserDataValue, err := cmd.Flags().GetInt64(flagSpaceBlockStorageInactiveUserDataName)
		if err != nil {
			return err, false
		}
		m.SpaceBlockStorageInactiveUserData = &flagSpaceBlockStorageInactiveUserDataValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceBlockStorageInactiveUserDataPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.block_storage_inactive_user_data_percent") {

		var flagSpaceBlockStorageInactiveUserDataPercentName string
		if cmdPrefix == "" {
			flagSpaceBlockStorageInactiveUserDataPercentName = "space.block_storage_inactive_user_data_percent"
		} else {
			flagSpaceBlockStorageInactiveUserDataPercentName = fmt.Sprintf("%v.space.block_storage_inactive_user_data_percent", cmdPrefix)
		}

		flagSpaceBlockStorageInactiveUserDataPercentValue, err := cmd.Flags().GetInt64(flagSpaceBlockStorageInactiveUserDataPercentName)
		if err != nil {
			return err, false
		}
		m.SpaceBlockStorageInactiveUserDataPercent = &flagSpaceBlockStorageInactiveUserDataPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceCapacityTierFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.capacity_tier_footprint") {

		var flagSpaceCapacityTierFootprintName string
		if cmdPrefix == "" {
			flagSpaceCapacityTierFootprintName = "space.capacity_tier_footprint"
		} else {
			flagSpaceCapacityTierFootprintName = fmt.Sprintf("%v.space.capacity_tier_footprint", cmdPrefix)
		}

		flagSpaceCapacityTierFootprintValue, err := cmd.Flags().GetInt64(flagSpaceCapacityTierFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceCapacityTierFootprint = &flagSpaceCapacityTierFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceCapacityTierFootprintDataReductionFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.capacity_tier_footprint_data_reduction") {

		var flagSpaceCapacityTierFootprintDataReductionName string
		if cmdPrefix == "" {
			flagSpaceCapacityTierFootprintDataReductionName = "space.capacity_tier_footprint_data_reduction"
		} else {
			flagSpaceCapacityTierFootprintDataReductionName = fmt.Sprintf("%v.space.capacity_tier_footprint_data_reduction", cmdPrefix)
		}

		flagSpaceCapacityTierFootprintDataReductionValue, err := cmd.Flags().GetInt64(flagSpaceCapacityTierFootprintDataReductionName)
		if err != nil {
			return err, false
		}
		m.SpaceCapacityTierFootprintDataReduction = &flagSpaceCapacityTierFootprintDataReductionValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceCompactionFootprintDataReductionFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.compaction_footprint_data_reduction") {

		var flagSpaceCompactionFootprintDataReductionName string
		if cmdPrefix == "" {
			flagSpaceCompactionFootprintDataReductionName = "space.compaction_footprint_data_reduction"
		} else {
			flagSpaceCompactionFootprintDataReductionName = fmt.Sprintf("%v.space.compaction_footprint_data_reduction", cmdPrefix)
		}

		flagSpaceCompactionFootprintDataReductionValue, err := cmd.Flags().GetInt64(flagSpaceCompactionFootprintDataReductionName)
		if err != nil {
			return err, false
		}
		m.SpaceCompactionFootprintDataReduction = &flagSpaceCompactionFootprintDataReductionValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceCrossVolumeDedupeMetafilesFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.cross_volume_dedupe_metafiles_footprint") {

		var flagSpaceCrossVolumeDedupeMetafilesFootprintName string
		if cmdPrefix == "" {
			flagSpaceCrossVolumeDedupeMetafilesFootprintName = "space.cross_volume_dedupe_metafiles_footprint"
		} else {
			flagSpaceCrossVolumeDedupeMetafilesFootprintName = fmt.Sprintf("%v.space.cross_volume_dedupe_metafiles_footprint", cmdPrefix)
		}

		flagSpaceCrossVolumeDedupeMetafilesFootprintValue, err := cmd.Flags().GetInt64(flagSpaceCrossVolumeDedupeMetafilesFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceCrossVolumeDedupeMetafilesFootprint = &flagSpaceCrossVolumeDedupeMetafilesFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceCrossVolumeDedupeMetafilesTemporaryFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.cross_volume_dedupe_metafiles_temporary_footprint") {

		var flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintName string
		if cmdPrefix == "" {
			flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintName = "space.cross_volume_dedupe_metafiles_temporary_footprint"
		} else {
			flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintName = fmt.Sprintf("%v.space.cross_volume_dedupe_metafiles_temporary_footprint", cmdPrefix)
		}

		flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintValue, err := cmd.Flags().GetInt64(flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceCrossVolumeDedupeMetafilesTemporaryFootprint = &flagSpaceCrossVolumeDedupeMetafilesTemporaryFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceDedupeMetafilesFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.dedupe_metafiles_footprint") {

		var flagSpaceDedupeMetafilesFootprintName string
		if cmdPrefix == "" {
			flagSpaceDedupeMetafilesFootprintName = "space.dedupe_metafiles_footprint"
		} else {
			flagSpaceDedupeMetafilesFootprintName = fmt.Sprintf("%v.space.dedupe_metafiles_footprint", cmdPrefix)
		}

		flagSpaceDedupeMetafilesFootprintValue, err := cmd.Flags().GetInt64(flagSpaceDedupeMetafilesFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceDedupeMetafilesFootprint = &flagSpaceDedupeMetafilesFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceDedupeMetafilesTemporaryFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.dedupe_metafiles_temporary_footprint") {

		var flagSpaceDedupeMetafilesTemporaryFootprintName string
		if cmdPrefix == "" {
			flagSpaceDedupeMetafilesTemporaryFootprintName = "space.dedupe_metafiles_temporary_footprint"
		} else {
			flagSpaceDedupeMetafilesTemporaryFootprintName = fmt.Sprintf("%v.space.dedupe_metafiles_temporary_footprint", cmdPrefix)
		}

		flagSpaceDedupeMetafilesTemporaryFootprintValue, err := cmd.Flags().GetInt64(flagSpaceDedupeMetafilesTemporaryFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceDedupeMetafilesTemporaryFootprint = &flagSpaceDedupeMetafilesTemporaryFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceDelayedFreeFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.delayed_free_footprint") {

		var flagSpaceDelayedFreeFootprintName string
		if cmdPrefix == "" {
			flagSpaceDelayedFreeFootprintName = "space.delayed_free_footprint"
		} else {
			flagSpaceDelayedFreeFootprintName = fmt.Sprintf("%v.space.delayed_free_footprint", cmdPrefix)
		}

		flagSpaceDelayedFreeFootprintValue, err := cmd.Flags().GetInt64(flagSpaceDelayedFreeFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceDelayedFreeFootprint = &flagSpaceDelayedFreeFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceEffectiveTotalFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.effective_total_footprint") {

		var flagSpaceEffectiveTotalFootprintName string
		if cmdPrefix == "" {
			flagSpaceEffectiveTotalFootprintName = "space.effective_total_footprint"
		} else {
			flagSpaceEffectiveTotalFootprintName = fmt.Sprintf("%v.space.effective_total_footprint", cmdPrefix)
		}

		flagSpaceEffectiveTotalFootprintValue, err := cmd.Flags().GetInt64(flagSpaceEffectiveTotalFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceEffectiveTotalFootprint = &flagSpaceEffectiveTotalFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceExpectedAvailableFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.expected_available") {

		var flagSpaceExpectedAvailableName string
		if cmdPrefix == "" {
			flagSpaceExpectedAvailableName = "space.expected_available"
		} else {
			flagSpaceExpectedAvailableName = fmt.Sprintf("%v.space.expected_available", cmdPrefix)
		}

		flagSpaceExpectedAvailableValue, err := cmd.Flags().GetInt64(flagSpaceExpectedAvailableName)
		if err != nil {
			return err, false
		}
		m.SpaceExpectedAvailable = &flagSpaceExpectedAvailableValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceFileOperationMetadataFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.file_operation_metadata") {

		var flagSpaceFileOperationMetadataName string
		if cmdPrefix == "" {
			flagSpaceFileOperationMetadataName = "space.file_operation_metadata"
		} else {
			flagSpaceFileOperationMetadataName = fmt.Sprintf("%v.space.file_operation_metadata", cmdPrefix)
		}

		flagSpaceFileOperationMetadataValue, err := cmd.Flags().GetInt64(flagSpaceFileOperationMetadataName)
		if err != nil {
			return err, false
		}
		m.SpaceFileOperationMetadata = &flagSpaceFileOperationMetadataValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceFilesystemSizeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.filesystem_size") {

		var flagSpaceFilesystemSizeName string
		if cmdPrefix == "" {
			flagSpaceFilesystemSizeName = "space.filesystem_size"
		} else {
			flagSpaceFilesystemSizeName = fmt.Sprintf("%v.space.filesystem_size", cmdPrefix)
		}

		flagSpaceFilesystemSizeValue, err := cmd.Flags().GetInt64(flagSpaceFilesystemSizeName)
		if err != nil {
			return err, false
		}
		m.SpaceFilesystemSize = &flagSpaceFilesystemSizeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceFilesystemSizeFixedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.filesystem_size_fixed") {

		var flagSpaceFilesystemSizeFixedName string
		if cmdPrefix == "" {
			flagSpaceFilesystemSizeFixedName = "space.filesystem_size_fixed"
		} else {
			flagSpaceFilesystemSizeFixedName = fmt.Sprintf("%v.space.filesystem_size_fixed", cmdPrefix)
		}

		flagSpaceFilesystemSizeFixedValue, err := cmd.Flags().GetBool(flagSpaceFilesystemSizeFixedName)
		if err != nil {
			return err, false
		}
		m.SpaceFilesystemSizeFixed = &flagSpaceFilesystemSizeFixedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.footprint") {

		var flagSpaceFootprintName string
		if cmdPrefix == "" {
			flagSpaceFootprintName = "space.footprint"
		} else {
			flagSpaceFootprintName = fmt.Sprintf("%v.space.footprint", cmdPrefix)
		}

		flagSpaceFootprintValue, err := cmd.Flags().GetInt64(flagSpaceFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceFootprint = &flagSpaceFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceFractionalReserveFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.fractional_reserve") {

		var flagSpaceFractionalReserveName string
		if cmdPrefix == "" {
			flagSpaceFractionalReserveName = "space.fractional_reserve"
		} else {
			flagSpaceFractionalReserveName = fmt.Sprintf("%v.space.fractional_reserve", cmdPrefix)
		}

		flagSpaceFractionalReserveValue, err := cmd.Flags().GetInt64(flagSpaceFractionalReserveName)
		if err != nil {
			return err, false
		}
		m.SpaceFractionalReserve = &flagSpaceFractionalReserveValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceFullThresholdPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.full_threshold_percent") {

		var flagSpaceFullThresholdPercentName string
		if cmdPrefix == "" {
			flagSpaceFullThresholdPercentName = "space.full_threshold_percent"
		} else {
			flagSpaceFullThresholdPercentName = fmt.Sprintf("%v.space.full_threshold_percent", cmdPrefix)
		}

		flagSpaceFullThresholdPercentValue, err := cmd.Flags().GetInt64(flagSpaceFullThresholdPercentName)
		if err != nil {
			return err, false
		}
		m.SpaceFullThresholdPercent = &flagSpaceFullThresholdPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceIsUsedStaleFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.is_used_stale") {

		var flagSpaceIsUsedStaleName string
		if cmdPrefix == "" {
			flagSpaceIsUsedStaleName = "space.is_used_stale"
		} else {
			flagSpaceIsUsedStaleName = fmt.Sprintf("%v.space.is_used_stale", cmdPrefix)
		}

		flagSpaceIsUsedStaleValue, err := cmd.Flags().GetBool(flagSpaceIsUsedStaleName)
		if err != nil {
			return err, false
		}
		m.SpaceIsUsedStale = &flagSpaceIsUsedStaleValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceLargeSizeEnabledFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.large_size_enabled") {

		var flagSpaceLargeSizeEnabledName string
		if cmdPrefix == "" {
			flagSpaceLargeSizeEnabledName = "space.large_size_enabled"
		} else {
			flagSpaceLargeSizeEnabledName = fmt.Sprintf("%v.space.large_size_enabled", cmdPrefix)
		}

		flagSpaceLargeSizeEnabledValue, err := cmd.Flags().GetBool(flagSpaceLargeSizeEnabledName)
		if err != nil {
			return err, false
		}
		m.SpaceLargeSizeEnabled = &flagSpaceLargeSizeEnabledValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceLocalTierFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.local_tier_footprint") {

		var flagSpaceLocalTierFootprintName string
		if cmdPrefix == "" {
			flagSpaceLocalTierFootprintName = "space.local_tier_footprint"
		} else {
			flagSpaceLocalTierFootprintName = fmt.Sprintf("%v.space.local_tier_footprint", cmdPrefix)
		}

		flagSpaceLocalTierFootprintValue, err := cmd.Flags().GetInt64(flagSpaceLocalTierFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceLocalTierFootprint = &flagSpaceLocalTierFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceAvailableFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.logical_space.available") {

		var flagSpaceLogicalSpaceAvailableName string
		if cmdPrefix == "" {
			flagSpaceLogicalSpaceAvailableName = "space.logical_space.available"
		} else {
			flagSpaceLogicalSpaceAvailableName = fmt.Sprintf("%v.space.logical_space.available", cmdPrefix)
		}

		flagSpaceLogicalSpaceAvailableValue, err := cmd.Flags().GetInt64(flagSpaceLogicalSpaceAvailableName)
		if err != nil {
			return err, false
		}
		m.SpaceLogicalSpaceAvailable = &flagSpaceLogicalSpaceAvailableValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceEnforcementFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.logical_space.enforcement") {

		var flagSpaceLogicalSpaceEnforcementName string
		if cmdPrefix == "" {
			flagSpaceLogicalSpaceEnforcementName = "space.logical_space.enforcement"
		} else {
			flagSpaceLogicalSpaceEnforcementName = fmt.Sprintf("%v.space.logical_space.enforcement", cmdPrefix)
		}

		flagSpaceLogicalSpaceEnforcementValue, err := cmd.Flags().GetBool(flagSpaceLogicalSpaceEnforcementName)
		if err != nil {
			return err, false
		}
		m.SpaceLogicalSpaceEnforcement = &flagSpaceLogicalSpaceEnforcementValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceReportingFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.logical_space.reporting") {

		var flagSpaceLogicalSpaceReportingName string
		if cmdPrefix == "" {
			flagSpaceLogicalSpaceReportingName = "space.logical_space.reporting"
		} else {
			flagSpaceLogicalSpaceReportingName = fmt.Sprintf("%v.space.logical_space.reporting", cmdPrefix)
		}

		flagSpaceLogicalSpaceReportingValue, err := cmd.Flags().GetBool(flagSpaceLogicalSpaceReportingName)
		if err != nil {
			return err, false
		}
		m.SpaceLogicalSpaceReporting = &flagSpaceLogicalSpaceReportingValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.logical_space.used") {

		var flagSpaceLogicalSpaceUsedName string
		if cmdPrefix == "" {
			flagSpaceLogicalSpaceUsedName = "space.logical_space.used"
		} else {
			flagSpaceLogicalSpaceUsedName = fmt.Sprintf("%v.space.logical_space.used", cmdPrefix)
		}

		flagSpaceLogicalSpaceUsedValue, err := cmd.Flags().GetInt64(flagSpaceLogicalSpaceUsedName)
		if err != nil {
			return err, false
		}
		m.SpaceLogicalSpaceUsed = &flagSpaceLogicalSpaceUsedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedByAfsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.logical_space.used_by_afs") {

		var flagSpaceLogicalSpaceUsedByAfsName string
		if cmdPrefix == "" {
			flagSpaceLogicalSpaceUsedByAfsName = "space.logical_space.used_by_afs"
		} else {
			flagSpaceLogicalSpaceUsedByAfsName = fmt.Sprintf("%v.space.logical_space.used_by_afs", cmdPrefix)
		}

		flagSpaceLogicalSpaceUsedByAfsValue, err := cmd.Flags().GetInt64(flagSpaceLogicalSpaceUsedByAfsName)
		if err != nil {
			return err, false
		}
		m.SpaceLogicalSpaceUsedByAfs = &flagSpaceLogicalSpaceUsedByAfsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedBySnapshotsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.logical_space.used_by_snapshots") {

		var flagSpaceLogicalSpaceUsedBySnapshotsName string
		if cmdPrefix == "" {
			flagSpaceLogicalSpaceUsedBySnapshotsName = "space.logical_space.used_by_snapshots"
		} else {
			flagSpaceLogicalSpaceUsedBySnapshotsName = fmt.Sprintf("%v.space.logical_space.used_by_snapshots", cmdPrefix)
		}

		flagSpaceLogicalSpaceUsedBySnapshotsValue, err := cmd.Flags().GetInt64(flagSpaceLogicalSpaceUsedBySnapshotsName)
		if err != nil {
			return err, false
		}
		m.SpaceLogicalSpaceUsedBySnapshots = &flagSpaceLogicalSpaceUsedBySnapshotsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceLogicalSpaceUsedPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.logical_space.used_percent") {

		var flagSpaceLogicalSpaceUsedPercentName string
		if cmdPrefix == "" {
			flagSpaceLogicalSpaceUsedPercentName = "space.logical_space.used_percent"
		} else {
			flagSpaceLogicalSpaceUsedPercentName = fmt.Sprintf("%v.space.logical_space.used_percent", cmdPrefix)
		}

		flagSpaceLogicalSpaceUsedPercentValue, err := cmd.Flags().GetInt64(flagSpaceLogicalSpaceUsedPercentName)
		if err != nil {
			return err, false
		}
		m.SpaceLogicalSpaceUsedPercent = &flagSpaceLogicalSpaceUsedPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceMaxSizeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.max_size") {

		var flagSpaceMaxSizeName string
		if cmdPrefix == "" {
			flagSpaceMaxSizeName = "space.max_size"
		} else {
			flagSpaceMaxSizeName = fmt.Sprintf("%v.space.max_size", cmdPrefix)
		}

		flagSpaceMaxSizeValue, err := cmd.Flags().GetString(flagSpaceMaxSizeName)
		if err != nil {
			return err, false
		}
		m.SpaceMaxSize = &flagSpaceMaxSizeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceMetadataFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.metadata") {

		var flagSpaceMetadataName string
		if cmdPrefix == "" {
			flagSpaceMetadataName = "space.metadata"
		} else {
			flagSpaceMetadataName = fmt.Sprintf("%v.space.metadata", cmdPrefix)
		}

		flagSpaceMetadataValue, err := cmd.Flags().GetInt64(flagSpaceMetadataName)
		if err != nil {
			return err, false
		}
		m.SpaceMetadata = &flagSpaceMetadataValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceNearlyFullThresholdPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.nearly_full_threshold_percent") {

		var flagSpaceNearlyFullThresholdPercentName string
		if cmdPrefix == "" {
			flagSpaceNearlyFullThresholdPercentName = "space.nearly_full_threshold_percent"
		} else {
			flagSpaceNearlyFullThresholdPercentName = fmt.Sprintf("%v.space.nearly_full_threshold_percent", cmdPrefix)
		}

		flagSpaceNearlyFullThresholdPercentValue, err := cmd.Flags().GetInt64(flagSpaceNearlyFullThresholdPercentName)
		if err != nil {
			return err, false
		}
		m.SpaceNearlyFullThresholdPercent = &flagSpaceNearlyFullThresholdPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceOverProvisionedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.over_provisioned") {

		var flagSpaceOverProvisionedName string
		if cmdPrefix == "" {
			flagSpaceOverProvisionedName = "space.over_provisioned"
		} else {
			flagSpaceOverProvisionedName = fmt.Sprintf("%v.space.over_provisioned", cmdPrefix)
		}

		flagSpaceOverProvisionedValue, err := cmd.Flags().GetInt64(flagSpaceOverProvisionedName)
		if err != nil {
			return err, false
		}
		m.SpaceOverProvisioned = &flagSpaceOverProvisionedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceOverwriteReserveFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.overwrite_reserve") {

		var flagSpaceOverwriteReserveName string
		if cmdPrefix == "" {
			flagSpaceOverwriteReserveName = "space.overwrite_reserve"
		} else {
			flagSpaceOverwriteReserveName = fmt.Sprintf("%v.space.overwrite_reserve", cmdPrefix)
		}

		flagSpaceOverwriteReserveValue, err := cmd.Flags().GetInt64(flagSpaceOverwriteReserveName)
		if err != nil {
			return err, false
		}
		m.SpaceOverwriteReserve = &flagSpaceOverwriteReserveValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceOverwriteReserveUsedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.overwrite_reserve_used") {

		var flagSpaceOverwriteReserveUsedName string
		if cmdPrefix == "" {
			flagSpaceOverwriteReserveUsedName = "space.overwrite_reserve_used"
		} else {
			flagSpaceOverwriteReserveUsedName = fmt.Sprintf("%v.space.overwrite_reserve_used", cmdPrefix)
		}

		flagSpaceOverwriteReserveUsedValue, err := cmd.Flags().GetInt64(flagSpaceOverwriteReserveUsedName)
		if err != nil {
			return err, false
		}
		m.SpaceOverwriteReserveUsed = &flagSpaceOverwriteReserveUsedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpacePercentUsedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.percent_used") {

		var flagSpacePercentUsedName string
		if cmdPrefix == "" {
			flagSpacePercentUsedName = "space.percent_used"
		} else {
			flagSpacePercentUsedName = fmt.Sprintf("%v.space.percent_used", cmdPrefix)
		}

		flagSpacePercentUsedValue, err := cmd.Flags().GetInt64(flagSpacePercentUsedName)
		if err != nil {
			return err, false
		}
		m.SpacePercentUsed = &flagSpacePercentUsedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpacePerformanceTierFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.performance_tier_footprint") {

		var flagSpacePerformanceTierFootprintName string
		if cmdPrefix == "" {
			flagSpacePerformanceTierFootprintName = "space.performance_tier_footprint"
		} else {
			flagSpacePerformanceTierFootprintName = fmt.Sprintf("%v.space.performance_tier_footprint", cmdPrefix)
		}

		flagSpacePerformanceTierFootprintValue, err := cmd.Flags().GetInt64(flagSpacePerformanceTierFootprintName)
		if err != nil {
			return err, false
		}
		m.SpacePerformanceTierFootprint = &flagSpacePerformanceTierFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpacePhysicalUsedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.physical_used") {

		var flagSpacePhysicalUsedName string
		if cmdPrefix == "" {
			flagSpacePhysicalUsedName = "space.physical_used"
		} else {
			flagSpacePhysicalUsedName = fmt.Sprintf("%v.space.physical_used", cmdPrefix)
		}

		flagSpacePhysicalUsedValue, err := cmd.Flags().GetInt64(flagSpacePhysicalUsedName)
		if err != nil {
			return err, false
		}
		m.SpacePhysicalUsed = &flagSpacePhysicalUsedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpacePhysicalUsedPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.physical_used_percent") {

		var flagSpacePhysicalUsedPercentName string
		if cmdPrefix == "" {
			flagSpacePhysicalUsedPercentName = "space.physical_used_percent"
		} else {
			flagSpacePhysicalUsedPercentName = fmt.Sprintf("%v.space.physical_used_percent", cmdPrefix)
		}

		flagSpacePhysicalUsedPercentValue, err := cmd.Flags().GetInt64(flagSpacePhysicalUsedPercentName)
		if err != nil {
			return err, false
		}
		m.SpacePhysicalUsedPercent = &flagSpacePhysicalUsedPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSizeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.size") {

		var flagSpaceSizeName string
		if cmdPrefix == "" {
			flagSpaceSizeName = "space.size"
		} else {
			flagSpaceSizeName = fmt.Sprintf("%v.space.size", cmdPrefix)
		}

		flagSpaceSizeValue, err := cmd.Flags().GetInt64(flagSpaceSizeName)
		if err != nil {
			return err, false
		}
		m.SpaceSize = &flagSpaceSizeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSizeAvailableForSnapshotsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.size_available_for_snapshots") {

		var flagSpaceSizeAvailableForSnapshotsName string
		if cmdPrefix == "" {
			flagSpaceSizeAvailableForSnapshotsName = "space.size_available_for_snapshots"
		} else {
			flagSpaceSizeAvailableForSnapshotsName = fmt.Sprintf("%v.space.size_available_for_snapshots", cmdPrefix)
		}

		flagSpaceSizeAvailableForSnapshotsValue, err := cmd.Flags().GetInt64(flagSpaceSizeAvailableForSnapshotsName)
		if err != nil {
			return err, false
		}
		m.SpaceSizeAvailableForSnapshots = &flagSpaceSizeAvailableForSnapshotsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapmirrorDestinationFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapmirror_destination_footprint") {

		var flagSpaceSnapmirrorDestinationFootprintName string
		if cmdPrefix == "" {
			flagSpaceSnapmirrorDestinationFootprintName = "space.snapmirror_destination_footprint"
		} else {
			flagSpaceSnapmirrorDestinationFootprintName = fmt.Sprintf("%v.space.snapmirror_destination_footprint", cmdPrefix)
		}

		flagSpaceSnapmirrorDestinationFootprintValue, err := cmd.Flags().GetInt64(flagSpaceSnapmirrorDestinationFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapmirrorDestinationFootprint = &flagSpaceSnapmirrorDestinationFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteCommitmentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot.autodelete.commitment") {

		var flagSpaceSnapshotAutodeleteCommitmentName string
		if cmdPrefix == "" {
			flagSpaceSnapshotAutodeleteCommitmentName = "space.snapshot.autodelete.commitment"
		} else {
			flagSpaceSnapshotAutodeleteCommitmentName = fmt.Sprintf("%v.space.snapshot.autodelete.commitment", cmdPrefix)
		}

		flagSpaceSnapshotAutodeleteCommitmentValue, err := cmd.Flags().GetString(flagSpaceSnapshotAutodeleteCommitmentName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotAutodeleteCommitment = &flagSpaceSnapshotAutodeleteCommitmentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteDeferDeleteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot.autodelete.defer_delete") {

		var flagSpaceSnapshotAutodeleteDeferDeleteName string
		if cmdPrefix == "" {
			flagSpaceSnapshotAutodeleteDeferDeleteName = "space.snapshot.autodelete.defer_delete"
		} else {
			flagSpaceSnapshotAutodeleteDeferDeleteName = fmt.Sprintf("%v.space.snapshot.autodelete.defer_delete", cmdPrefix)
		}

		flagSpaceSnapshotAutodeleteDeferDeleteValue, err := cmd.Flags().GetString(flagSpaceSnapshotAutodeleteDeferDeleteName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotAutodeleteDeferDelete = &flagSpaceSnapshotAutodeleteDeferDeleteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteDeleteOrderFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot.autodelete.delete_order") {

		var flagSpaceSnapshotAutodeleteDeleteOrderName string
		if cmdPrefix == "" {
			flagSpaceSnapshotAutodeleteDeleteOrderName = "space.snapshot.autodelete.delete_order"
		} else {
			flagSpaceSnapshotAutodeleteDeleteOrderName = fmt.Sprintf("%v.space.snapshot.autodelete.delete_order", cmdPrefix)
		}

		flagSpaceSnapshotAutodeleteDeleteOrderValue, err := cmd.Flags().GetString(flagSpaceSnapshotAutodeleteDeleteOrderName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotAutodeleteDeleteOrder = &flagSpaceSnapshotAutodeleteDeleteOrderValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotAutodeletePrefixFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot.autodelete.prefix") {

		var flagSpaceSnapshotAutodeletePrefixName string
		if cmdPrefix == "" {
			flagSpaceSnapshotAutodeletePrefixName = "space.snapshot.autodelete.prefix"
		} else {
			flagSpaceSnapshotAutodeletePrefixName = fmt.Sprintf("%v.space.snapshot.autodelete.prefix", cmdPrefix)
		}

		flagSpaceSnapshotAutodeletePrefixValue, err := cmd.Flags().GetString(flagSpaceSnapshotAutodeletePrefixName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotAutodeletePrefix = &flagSpaceSnapshotAutodeletePrefixValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteTargetFreeSpaceFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot.autodelete.target_free_space") {

		var flagSpaceSnapshotAutodeleteTargetFreeSpaceName string
		if cmdPrefix == "" {
			flagSpaceSnapshotAutodeleteTargetFreeSpaceName = "space.snapshot.autodelete.target_free_space"
		} else {
			flagSpaceSnapshotAutodeleteTargetFreeSpaceName = fmt.Sprintf("%v.space.snapshot.autodelete.target_free_space", cmdPrefix)
		}

		flagSpaceSnapshotAutodeleteTargetFreeSpaceValue, err := cmd.Flags().GetInt64(flagSpaceSnapshotAutodeleteTargetFreeSpaceName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotAutodeleteTargetFreeSpace = &flagSpaceSnapshotAutodeleteTargetFreeSpaceValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotAutodeleteTriggerFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot.autodelete.trigger") {

		var flagSpaceSnapshotAutodeleteTriggerName string
		if cmdPrefix == "" {
			flagSpaceSnapshotAutodeleteTriggerName = "space.snapshot.autodelete.trigger"
		} else {
			flagSpaceSnapshotAutodeleteTriggerName = fmt.Sprintf("%v.space.snapshot.autodelete.trigger", cmdPrefix)
		}

		flagSpaceSnapshotAutodeleteTriggerValue, err := cmd.Flags().GetString(flagSpaceSnapshotAutodeleteTriggerName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotAutodeleteTrigger = &flagSpaceSnapshotAutodeleteTriggerValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotReserveAvailableFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot.reserve_available") {

		var flagSpaceSnapshotReserveAvailableName string
		if cmdPrefix == "" {
			flagSpaceSnapshotReserveAvailableName = "space.snapshot.reserve_available"
		} else {
			flagSpaceSnapshotReserveAvailableName = fmt.Sprintf("%v.space.snapshot.reserve_available", cmdPrefix)
		}

		flagSpaceSnapshotReserveAvailableValue, err := cmd.Flags().GetInt64(flagSpaceSnapshotReserveAvailableName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotReserveAvailable = &flagSpaceSnapshotReserveAvailableValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotReservePercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot.reserve_percent") {

		var flagSpaceSnapshotReservePercentName string
		if cmdPrefix == "" {
			flagSpaceSnapshotReservePercentName = "space.snapshot.reserve_percent"
		} else {
			flagSpaceSnapshotReservePercentName = fmt.Sprintf("%v.space.snapshot.reserve_percent", cmdPrefix)
		}

		flagSpaceSnapshotReservePercentValue, err := cmd.Flags().GetInt64(flagSpaceSnapshotReservePercentName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotReservePercent = &flagSpaceSnapshotReservePercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotReserveSizeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot.reserve_size") {

		var flagSpaceSnapshotReserveSizeName string
		if cmdPrefix == "" {
			flagSpaceSnapshotReserveSizeName = "space.snapshot.reserve_size"
		} else {
			flagSpaceSnapshotReserveSizeName = fmt.Sprintf("%v.space.snapshot.reserve_size", cmdPrefix)
		}

		flagSpaceSnapshotReserveSizeValue, err := cmd.Flags().GetInt64(flagSpaceSnapshotReserveSizeName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotReserveSize = &flagSpaceSnapshotReserveSizeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotSpaceUsedPercentFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot.space_used_percent") {

		var flagSpaceSnapshotSpaceUsedPercentName string
		if cmdPrefix == "" {
			flagSpaceSnapshotSpaceUsedPercentName = "space.snapshot.space_used_percent"
		} else {
			flagSpaceSnapshotSpaceUsedPercentName = fmt.Sprintf("%v.space.snapshot.space_used_percent", cmdPrefix)
		}

		flagSpaceSnapshotSpaceUsedPercentValue, err := cmd.Flags().GetInt64(flagSpaceSnapshotSpaceUsedPercentName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotSpaceUsedPercent = &flagSpaceSnapshotSpaceUsedPercentValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotUsedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot.used") {

		var flagSpaceSnapshotUsedName string
		if cmdPrefix == "" {
			flagSpaceSnapshotUsedName = "space.snapshot.used"
		} else {
			flagSpaceSnapshotUsedName = fmt.Sprintf("%v.space.snapshot.used", cmdPrefix)
		}

		flagSpaceSnapshotUsedValue, err := cmd.Flags().GetInt64(flagSpaceSnapshotUsedName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotUsed = &flagSpaceSnapshotUsedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotReserveUnusableFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot_reserve_unusable") {

		var flagSpaceSnapshotReserveUnusableName string
		if cmdPrefix == "" {
			flagSpaceSnapshotReserveUnusableName = "space.snapshot_reserve_unusable"
		} else {
			flagSpaceSnapshotReserveUnusableName = fmt.Sprintf("%v.space.snapshot_reserve_unusable", cmdPrefix)
		}

		flagSpaceSnapshotReserveUnusableValue, err := cmd.Flags().GetInt64(flagSpaceSnapshotReserveUnusableName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotReserveUnusable = &flagSpaceSnapshotReserveUnusableValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceSnapshotSpillFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.snapshot_spill") {

		var flagSpaceSnapshotSpillName string
		if cmdPrefix == "" {
			flagSpaceSnapshotSpillName = "space.snapshot_spill"
		} else {
			flagSpaceSnapshotSpillName = fmt.Sprintf("%v.space.snapshot_spill", cmdPrefix)
		}

		flagSpaceSnapshotSpillValue, err := cmd.Flags().GetInt64(flagSpaceSnapshotSpillName)
		if err != nil {
			return err, false
		}
		m.SpaceSnapshotSpill = &flagSpaceSnapshotSpillValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceTotalFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.total_footprint") {

		var flagSpaceTotalFootprintName string
		if cmdPrefix == "" {
			flagSpaceTotalFootprintName = "space.total_footprint"
		} else {
			flagSpaceTotalFootprintName = fmt.Sprintf("%v.space.total_footprint", cmdPrefix)
		}

		flagSpaceTotalFootprintValue, err := cmd.Flags().GetInt64(flagSpaceTotalFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceTotalFootprint = &flagSpaceTotalFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceTotalMetadataFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.total_metadata") {

		var flagSpaceTotalMetadataName string
		if cmdPrefix == "" {
			flagSpaceTotalMetadataName = "space.total_metadata"
		} else {
			flagSpaceTotalMetadataName = fmt.Sprintf("%v.space.total_metadata", cmdPrefix)
		}

		flagSpaceTotalMetadataValue, err := cmd.Flags().GetInt64(flagSpaceTotalMetadataName)
		if err != nil {
			return err, false
		}
		m.SpaceTotalMetadata = &flagSpaceTotalMetadataValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceTotalMetadataFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.total_metadata_footprint") {

		var flagSpaceTotalMetadataFootprintName string
		if cmdPrefix == "" {
			flagSpaceTotalMetadataFootprintName = "space.total_metadata_footprint"
		} else {
			flagSpaceTotalMetadataFootprintName = fmt.Sprintf("%v.space.total_metadata_footprint", cmdPrefix)
		}

		flagSpaceTotalMetadataFootprintValue, err := cmd.Flags().GetInt64(flagSpaceTotalMetadataFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceTotalMetadataFootprint = &flagSpaceTotalMetadataFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceUsedFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.used") {

		var flagSpaceUsedName string
		if cmdPrefix == "" {
			flagSpaceUsedName = "space.used"
		} else {
			flagSpaceUsedName = fmt.Sprintf("%v.space.used", cmdPrefix)
		}

		flagSpaceUsedValue, err := cmd.Flags().GetInt64(flagSpaceUsedName)
		if err != nil {
			return err, false
		}
		m.SpaceUsed = &flagSpaceUsedValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceUsedByAfsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.used_by_afs") {

		var flagSpaceUsedByAfsName string
		if cmdPrefix == "" {
			flagSpaceUsedByAfsName = "space.used_by_afs"
		} else {
			flagSpaceUsedByAfsName = fmt.Sprintf("%v.space.used_by_afs", cmdPrefix)
		}

		flagSpaceUsedByAfsValue, err := cmd.Flags().GetInt64(flagSpaceUsedByAfsName)
		if err != nil {
			return err, false
		}
		m.SpaceUsedByAfs = &flagSpaceUsedByAfsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceUserDataFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.user_data") {

		var flagSpaceUserDataName string
		if cmdPrefix == "" {
			flagSpaceUserDataName = "space.user_data"
		} else {
			flagSpaceUserDataName = fmt.Sprintf("%v.space.user_data", cmdPrefix)
		}

		flagSpaceUserDataValue, err := cmd.Flags().GetInt64(flagSpaceUserDataName)
		if err != nil {
			return err, false
		}
		m.SpaceUserData = &flagSpaceUserDataValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSpaceVolumeGuaranteeFootprintFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space.volume_guarantee_footprint") {

		var flagSpaceVolumeGuaranteeFootprintName string
		if cmdPrefix == "" {
			flagSpaceVolumeGuaranteeFootprintName = "space.volume_guarantee_footprint"
		} else {
			flagSpaceVolumeGuaranteeFootprintName = fmt.Sprintf("%v.space.volume_guarantee_footprint", cmdPrefix)
		}

		flagSpaceVolumeGuaranteeFootprintValue, err := cmd.Flags().GetInt64(flagSpaceVolumeGuaranteeFootprintName)
		if err != nil {
			return err, false
		}
		m.SpaceVolumeGuaranteeFootprint = &flagSpaceVolumeGuaranteeFootprintValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStateFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("state") {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = &flagStateValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAccessCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.access.count") {

		var flagStatisticsCifsOpsRawAccessCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawAccessCountName = "statistics.cifs_ops_raw.access.count"
		} else {
			flagStatisticsCifsOpsRawAccessCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.access.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawAccessCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawAccessCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawAccessCount = &flagStatisticsCifsOpsRawAccessCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAccessTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.access.total_time") {

		var flagStatisticsCifsOpsRawAccessTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawAccessTotalTimeName = "statistics.cifs_ops_raw.access.total_time"
		} else {
			flagStatisticsCifsOpsRawAccessTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.access.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawAccessTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawAccessTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawAccessTotalTime = &flagStatisticsCifsOpsRawAccessTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAuditCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.audit.count") {

		var flagStatisticsCifsOpsRawAuditCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawAuditCountName = "statistics.cifs_ops_raw.audit.count"
		} else {
			flagStatisticsCifsOpsRawAuditCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.audit.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawAuditCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawAuditCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawAuditCount = &flagStatisticsCifsOpsRawAuditCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawAuditTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.audit.total_time") {

		var flagStatisticsCifsOpsRawAuditTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawAuditTotalTimeName = "statistics.cifs_ops_raw.audit.total_time"
		} else {
			flagStatisticsCifsOpsRawAuditTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.audit.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawAuditTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawAuditTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawAuditTotalTime = &flagStatisticsCifsOpsRawAuditTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateDirCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.create.dir.count") {

		var flagStatisticsCifsOpsRawCreateDirCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawCreateDirCountName = "statistics.cifs_ops_raw.create.dir.count"
		} else {
			flagStatisticsCifsOpsRawCreateDirCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.dir.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawCreateDirCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawCreateDirCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawCreateDirCount = &flagStatisticsCifsOpsRawCreateDirCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateDirTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.create.dir.total_time") {

		var flagStatisticsCifsOpsRawCreateDirTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawCreateDirTotalTimeName = "statistics.cifs_ops_raw.create.dir.total_time"
		} else {
			flagStatisticsCifsOpsRawCreateDirTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.dir.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawCreateDirTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawCreateDirTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawCreateDirTotalTime = &flagStatisticsCifsOpsRawCreateDirTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateFileCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.create.file.count") {

		var flagStatisticsCifsOpsRawCreateFileCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawCreateFileCountName = "statistics.cifs_ops_raw.create.file.count"
		} else {
			flagStatisticsCifsOpsRawCreateFileCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.file.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawCreateFileCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawCreateFileCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawCreateFileCount = &flagStatisticsCifsOpsRawCreateFileCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateFileTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.create.file.total_time") {

		var flagStatisticsCifsOpsRawCreateFileTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawCreateFileTotalTimeName = "statistics.cifs_ops_raw.create.file.total_time"
		} else {
			flagStatisticsCifsOpsRawCreateFileTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.file.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawCreateFileTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawCreateFileTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawCreateFileTotalTime = &flagStatisticsCifsOpsRawCreateFileTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateOtherCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.create.other.count") {

		var flagStatisticsCifsOpsRawCreateOtherCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawCreateOtherCountName = "statistics.cifs_ops_raw.create.other.count"
		} else {
			flagStatisticsCifsOpsRawCreateOtherCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.other.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawCreateOtherCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawCreateOtherCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawCreateOtherCount = &flagStatisticsCifsOpsRawCreateOtherCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateOtherTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.create.other.total_time") {

		var flagStatisticsCifsOpsRawCreateOtherTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawCreateOtherTotalTimeName = "statistics.cifs_ops_raw.create.other.total_time"
		} else {
			flagStatisticsCifsOpsRawCreateOtherTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.other.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawCreateOtherTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawCreateOtherTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawCreateOtherTotalTime = &flagStatisticsCifsOpsRawCreateOtherTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateSymlinkCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.create.symlink.count") {

		var flagStatisticsCifsOpsRawCreateSymlinkCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawCreateSymlinkCountName = "statistics.cifs_ops_raw.create.symlink.count"
		} else {
			flagStatisticsCifsOpsRawCreateSymlinkCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.symlink.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawCreateSymlinkCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawCreateSymlinkCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawCreateSymlinkCount = &flagStatisticsCifsOpsRawCreateSymlinkCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawCreateSymlinkTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.create.symlink.total_time") {

		var flagStatisticsCifsOpsRawCreateSymlinkTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawCreateSymlinkTotalTimeName = "statistics.cifs_ops_raw.create.symlink.total_time"
		} else {
			flagStatisticsCifsOpsRawCreateSymlinkTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.create.symlink.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawCreateSymlinkTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawCreateSymlinkTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawCreateSymlinkTotalTime = &flagStatisticsCifsOpsRawCreateSymlinkTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawGetattrCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.getattr.count") {

		var flagStatisticsCifsOpsRawGetattrCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawGetattrCountName = "statistics.cifs_ops_raw.getattr.count"
		} else {
			flagStatisticsCifsOpsRawGetattrCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.getattr.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawGetattrCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawGetattrCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawGetattrCount = &flagStatisticsCifsOpsRawGetattrCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawGetattrTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.getattr.total_time") {

		var flagStatisticsCifsOpsRawGetattrTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawGetattrTotalTimeName = "statistics.cifs_ops_raw.getattr.total_time"
		} else {
			flagStatisticsCifsOpsRawGetattrTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.getattr.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawGetattrTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawGetattrTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawGetattrTotalTime = &flagStatisticsCifsOpsRawGetattrTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLinkCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.link.count") {

		var flagStatisticsCifsOpsRawLinkCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawLinkCountName = "statistics.cifs_ops_raw.link.count"
		} else {
			flagStatisticsCifsOpsRawLinkCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.link.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawLinkCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawLinkCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawLinkCount = &flagStatisticsCifsOpsRawLinkCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLinkTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.link.total_time") {

		var flagStatisticsCifsOpsRawLinkTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawLinkTotalTimeName = "statistics.cifs_ops_raw.link.total_time"
		} else {
			flagStatisticsCifsOpsRawLinkTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.link.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawLinkTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawLinkTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawLinkTotalTime = &flagStatisticsCifsOpsRawLinkTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLockCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.lock.count") {

		var flagStatisticsCifsOpsRawLockCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawLockCountName = "statistics.cifs_ops_raw.lock.count"
		} else {
			flagStatisticsCifsOpsRawLockCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.lock.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawLockCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawLockCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawLockCount = &flagStatisticsCifsOpsRawLockCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLockTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.lock.total_time") {

		var flagStatisticsCifsOpsRawLockTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawLockTotalTimeName = "statistics.cifs_ops_raw.lock.total_time"
		} else {
			flagStatisticsCifsOpsRawLockTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.lock.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawLockTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawLockTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawLockTotalTime = &flagStatisticsCifsOpsRawLockTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLookupCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.lookup.count") {

		var flagStatisticsCifsOpsRawLookupCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawLookupCountName = "statistics.cifs_ops_raw.lookup.count"
		} else {
			flagStatisticsCifsOpsRawLookupCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.lookup.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawLookupCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawLookupCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawLookupCount = &flagStatisticsCifsOpsRawLookupCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawLookupTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.lookup.total_time") {

		var flagStatisticsCifsOpsRawLookupTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawLookupTotalTimeName = "statistics.cifs_ops_raw.lookup.total_time"
		} else {
			flagStatisticsCifsOpsRawLookupTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.lookup.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawLookupTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawLookupTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawLookupTotalTime = &flagStatisticsCifsOpsRawLookupTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawOpenCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.open.count") {

		var flagStatisticsCifsOpsRawOpenCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawOpenCountName = "statistics.cifs_ops_raw.open.count"
		} else {
			flagStatisticsCifsOpsRawOpenCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.open.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawOpenCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawOpenCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawOpenCount = &flagStatisticsCifsOpsRawOpenCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawOpenTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.open.total_time") {

		var flagStatisticsCifsOpsRawOpenTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawOpenTotalTimeName = "statistics.cifs_ops_raw.open.total_time"
		} else {
			flagStatisticsCifsOpsRawOpenTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.open.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawOpenTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawOpenTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawOpenTotalTime = &flagStatisticsCifsOpsRawOpenTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.read.count") {

		var flagStatisticsCifsOpsRawReadCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawReadCountName = "statistics.cifs_ops_raw.read.count"
		} else {
			flagStatisticsCifsOpsRawReadCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.read.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawReadCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawReadCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawReadCount = &flagStatisticsCifsOpsRawReadCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.read.total_time") {

		var flagStatisticsCifsOpsRawReadTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawReadTotalTimeName = "statistics.cifs_ops_raw.read.total_time"
		} else {
			flagStatisticsCifsOpsRawReadTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.read.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawReadTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawReadTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawReadTotalTime = &flagStatisticsCifsOpsRawReadTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.read.volume_protocol_latency_histogram_counts") {

		var flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsName = "statistics.cifs_ops_raw.read.volume_protocol_latency_histogram_counts"
		} else {
			flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.read.volume_protocol_latency_histogram_counts", cmdPrefix)
		}

		flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCounts = &flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramCountsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.read.volume_protocol_latency_histogram_labels") {

		var flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsName = "statistics.cifs_ops_raw.read.volume_protocol_latency_histogram_labels"
		} else {
			flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.read.volume_protocol_latency_histogram_labels", cmdPrefix)
		}

		flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsValue, err := cmd.Flags().GetString(flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabels = &flagStatisticsCifsOpsRawReadVolumeProtocolLatencyHistogramLabelsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.read.volume_protocol_size_histogram_counts") {

		var flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsName = "statistics.cifs_ops_raw.read.volume_protocol_size_histogram_counts"
		} else {
			flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.read.volume_protocol_size_histogram_counts", cmdPrefix)
		}

		flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCounts = &flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramCountsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.read.volume_protocol_size_histogram_labels") {

		var flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsName = "statistics.cifs_ops_raw.read.volume_protocol_size_histogram_labels"
		} else {
			flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.read.volume_protocol_size_histogram_labels", cmdPrefix)
		}

		flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsValue, err := cmd.Flags().GetString(flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabels = &flagStatisticsCifsOpsRawReadVolumeProtocolSizeHistogramLabelsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReaddirCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.readdir.count") {

		var flagStatisticsCifsOpsRawReaddirCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawReaddirCountName = "statistics.cifs_ops_raw.readdir.count"
		} else {
			flagStatisticsCifsOpsRawReaddirCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.readdir.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawReaddirCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawReaddirCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawReaddirCount = &flagStatisticsCifsOpsRawReaddirCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReaddirTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.readdir.total_time") {

		var flagStatisticsCifsOpsRawReaddirTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawReaddirTotalTimeName = "statistics.cifs_ops_raw.readdir.total_time"
		} else {
			flagStatisticsCifsOpsRawReaddirTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.readdir.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawReaddirTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawReaddirTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawReaddirTotalTime = &flagStatisticsCifsOpsRawReaddirTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadlinkCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.readlink.count") {

		var flagStatisticsCifsOpsRawReadlinkCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawReadlinkCountName = "statistics.cifs_ops_raw.readlink.count"
		} else {
			flagStatisticsCifsOpsRawReadlinkCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.readlink.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawReadlinkCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawReadlinkCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawReadlinkCount = &flagStatisticsCifsOpsRawReadlinkCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawReadlinkTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.readlink.total_time") {

		var flagStatisticsCifsOpsRawReadlinkTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawReadlinkTotalTimeName = "statistics.cifs_ops_raw.readlink.total_time"
		} else {
			flagStatisticsCifsOpsRawReadlinkTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.readlink.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawReadlinkTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawReadlinkTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawReadlinkTotalTime = &flagStatisticsCifsOpsRawReadlinkTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawRenameCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.rename.count") {

		var flagStatisticsCifsOpsRawRenameCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawRenameCountName = "statistics.cifs_ops_raw.rename.count"
		} else {
			flagStatisticsCifsOpsRawRenameCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.rename.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawRenameCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawRenameCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawRenameCount = &flagStatisticsCifsOpsRawRenameCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawRenameTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.rename.total_time") {

		var flagStatisticsCifsOpsRawRenameTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawRenameTotalTimeName = "statistics.cifs_ops_raw.rename.total_time"
		} else {
			flagStatisticsCifsOpsRawRenameTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.rename.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawRenameTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawRenameTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawRenameTotalTime = &flagStatisticsCifsOpsRawRenameTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawSetattrCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.setattr.count") {

		var flagStatisticsCifsOpsRawSetattrCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawSetattrCountName = "statistics.cifs_ops_raw.setattr.count"
		} else {
			flagStatisticsCifsOpsRawSetattrCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.setattr.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawSetattrCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawSetattrCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawSetattrCount = &flagStatisticsCifsOpsRawSetattrCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawSetattrTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.setattr.total_time") {

		var flagStatisticsCifsOpsRawSetattrTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawSetattrTotalTimeName = "statistics.cifs_ops_raw.setattr.total_time"
		} else {
			flagStatisticsCifsOpsRawSetattrTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.setattr.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawSetattrTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawSetattrTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawSetattrTotalTime = &flagStatisticsCifsOpsRawSetattrTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawUnlinkCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.unlink.count") {

		var flagStatisticsCifsOpsRawUnlinkCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawUnlinkCountName = "statistics.cifs_ops_raw.unlink.count"
		} else {
			flagStatisticsCifsOpsRawUnlinkCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.unlink.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawUnlinkCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawUnlinkCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawUnlinkCount = &flagStatisticsCifsOpsRawUnlinkCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawUnlinkTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.unlink.total_time") {

		var flagStatisticsCifsOpsRawUnlinkTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawUnlinkTotalTimeName = "statistics.cifs_ops_raw.unlink.total_time"
		} else {
			flagStatisticsCifsOpsRawUnlinkTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.unlink.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawUnlinkTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawUnlinkTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawUnlinkTotalTime = &flagStatisticsCifsOpsRawUnlinkTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWatchCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.watch.count") {

		var flagStatisticsCifsOpsRawWatchCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawWatchCountName = "statistics.cifs_ops_raw.watch.count"
		} else {
			flagStatisticsCifsOpsRawWatchCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.watch.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawWatchCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawWatchCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawWatchCount = &flagStatisticsCifsOpsRawWatchCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWatchTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.watch.total_time") {

		var flagStatisticsCifsOpsRawWatchTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawWatchTotalTimeName = "statistics.cifs_ops_raw.watch.total_time"
		} else {
			flagStatisticsCifsOpsRawWatchTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.watch.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawWatchTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawWatchTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawWatchTotalTime = &flagStatisticsCifsOpsRawWatchTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.write.count") {

		var flagStatisticsCifsOpsRawWriteCountName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawWriteCountName = "statistics.cifs_ops_raw.write.count"
		} else {
			flagStatisticsCifsOpsRawWriteCountName = fmt.Sprintf("%v.statistics.cifs_ops_raw.write.count", cmdPrefix)
		}

		flagStatisticsCifsOpsRawWriteCountValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawWriteCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawWriteCount = &flagStatisticsCifsOpsRawWriteCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.write.total_time") {

		var flagStatisticsCifsOpsRawWriteTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawWriteTotalTimeName = "statistics.cifs_ops_raw.write.total_time"
		} else {
			flagStatisticsCifsOpsRawWriteTotalTimeName = fmt.Sprintf("%v.statistics.cifs_ops_raw.write.total_time", cmdPrefix)
		}

		flagStatisticsCifsOpsRawWriteTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawWriteTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawWriteTotalTime = &flagStatisticsCifsOpsRawWriteTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.write.volume_protocol_latency_histogram_counts") {

		var flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsName = "statistics.cifs_ops_raw.write.volume_protocol_latency_histogram_counts"
		} else {
			flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.write.volume_protocol_latency_histogram_counts", cmdPrefix)
		}

		flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCounts = &flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramCountsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.write.volume_protocol_latency_histogram_labels") {

		var flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName = "statistics.cifs_ops_raw.write.volume_protocol_latency_histogram_labels"
		} else {
			flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.write.volume_protocol_latency_histogram_labels", cmdPrefix)
		}

		flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsValue, err := cmd.Flags().GetString(flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabels = &flagStatisticsCifsOpsRawWriteVolumeProtocolLatencyHistogramLabelsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.write.volume_protocol_size_histogram_counts") {

		var flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsName = "statistics.cifs_ops_raw.write.volume_protocol_size_histogram_counts"
		} else {
			flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.write.volume_protocol_size_histogram_counts", cmdPrefix)
		}

		flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsValue, err := cmd.Flags().GetInt64(flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCounts = &flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramCountsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cifs_ops_raw.write.volume_protocol_size_histogram_labels") {

		var flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsName string
		if cmdPrefix == "" {
			flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsName = "statistics.cifs_ops_raw.write.volume_protocol_size_histogram_labels"
		} else {
			flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsName = fmt.Sprintf("%v.statistics.cifs_ops_raw.write.volume_protocol_size_histogram_labels", cmdPrefix)
		}

		flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsValue, err := cmd.Flags().GetString(flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsName)
		if err != nil {
			return err, false
		}
		m.StatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabels = &flagStatisticsCifsOpsRawWriteVolumeProtocolSizeHistogramLabelsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCloudIopsRawOtherFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cloud.iops_raw.other") {

		var flagStatisticsCloudIopsRawOtherName string
		if cmdPrefix == "" {
			flagStatisticsCloudIopsRawOtherName = "statistics.cloud.iops_raw.other"
		} else {
			flagStatisticsCloudIopsRawOtherName = fmt.Sprintf("%v.statistics.cloud.iops_raw.other", cmdPrefix)
		}

		flagStatisticsCloudIopsRawOtherValue, err := cmd.Flags().GetInt64(flagStatisticsCloudIopsRawOtherName)
		if err != nil {
			return err, false
		}
		m.StatisticsCloudIopsRawOther = &flagStatisticsCloudIopsRawOtherValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCloudIopsRawReadFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cloud.iops_raw.read") {

		var flagStatisticsCloudIopsRawReadName string
		if cmdPrefix == "" {
			flagStatisticsCloudIopsRawReadName = "statistics.cloud.iops_raw.read"
		} else {
			flagStatisticsCloudIopsRawReadName = fmt.Sprintf("%v.statistics.cloud.iops_raw.read", cmdPrefix)
		}

		flagStatisticsCloudIopsRawReadValue, err := cmd.Flags().GetInt64(flagStatisticsCloudIopsRawReadName)
		if err != nil {
			return err, false
		}
		m.StatisticsCloudIopsRawRead = &flagStatisticsCloudIopsRawReadValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCloudIopsRawTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cloud.iops_raw.total") {

		var flagStatisticsCloudIopsRawTotalName string
		if cmdPrefix == "" {
			flagStatisticsCloudIopsRawTotalName = "statistics.cloud.iops_raw.total"
		} else {
			flagStatisticsCloudIopsRawTotalName = fmt.Sprintf("%v.statistics.cloud.iops_raw.total", cmdPrefix)
		}

		flagStatisticsCloudIopsRawTotalValue, err := cmd.Flags().GetInt64(flagStatisticsCloudIopsRawTotalName)
		if err != nil {
			return err, false
		}
		m.StatisticsCloudIopsRawTotal = &flagStatisticsCloudIopsRawTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCloudIopsRawWriteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cloud.iops_raw.write") {

		var flagStatisticsCloudIopsRawWriteName string
		if cmdPrefix == "" {
			flagStatisticsCloudIopsRawWriteName = "statistics.cloud.iops_raw.write"
		} else {
			flagStatisticsCloudIopsRawWriteName = fmt.Sprintf("%v.statistics.cloud.iops_raw.write", cmdPrefix)
		}

		flagStatisticsCloudIopsRawWriteValue, err := cmd.Flags().GetInt64(flagStatisticsCloudIopsRawWriteName)
		if err != nil {
			return err, false
		}
		m.StatisticsCloudIopsRawWrite = &flagStatisticsCloudIopsRawWriteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawOtherFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cloud.latency_raw.other") {

		var flagStatisticsCloudLatencyRawOtherName string
		if cmdPrefix == "" {
			flagStatisticsCloudLatencyRawOtherName = "statistics.cloud.latency_raw.other"
		} else {
			flagStatisticsCloudLatencyRawOtherName = fmt.Sprintf("%v.statistics.cloud.latency_raw.other", cmdPrefix)
		}

		flagStatisticsCloudLatencyRawOtherValue, err := cmd.Flags().GetInt64(flagStatisticsCloudLatencyRawOtherName)
		if err != nil {
			return err, false
		}
		m.StatisticsCloudLatencyRawOther = &flagStatisticsCloudLatencyRawOtherValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawReadFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cloud.latency_raw.read") {

		var flagStatisticsCloudLatencyRawReadName string
		if cmdPrefix == "" {
			flagStatisticsCloudLatencyRawReadName = "statistics.cloud.latency_raw.read"
		} else {
			flagStatisticsCloudLatencyRawReadName = fmt.Sprintf("%v.statistics.cloud.latency_raw.read", cmdPrefix)
		}

		flagStatisticsCloudLatencyRawReadValue, err := cmd.Flags().GetInt64(flagStatisticsCloudLatencyRawReadName)
		if err != nil {
			return err, false
		}
		m.StatisticsCloudLatencyRawRead = &flagStatisticsCloudLatencyRawReadValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cloud.latency_raw.total") {

		var flagStatisticsCloudLatencyRawTotalName string
		if cmdPrefix == "" {
			flagStatisticsCloudLatencyRawTotalName = "statistics.cloud.latency_raw.total"
		} else {
			flagStatisticsCloudLatencyRawTotalName = fmt.Sprintf("%v.statistics.cloud.latency_raw.total", cmdPrefix)
		}

		flagStatisticsCloudLatencyRawTotalValue, err := cmd.Flags().GetInt64(flagStatisticsCloudLatencyRawTotalName)
		if err != nil {
			return err, false
		}
		m.StatisticsCloudLatencyRawTotal = &flagStatisticsCloudLatencyRawTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCloudLatencyRawWriteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cloud.latency_raw.write") {

		var flagStatisticsCloudLatencyRawWriteName string
		if cmdPrefix == "" {
			flagStatisticsCloudLatencyRawWriteName = "statistics.cloud.latency_raw.write"
		} else {
			flagStatisticsCloudLatencyRawWriteName = fmt.Sprintf("%v.statistics.cloud.latency_raw.write", cmdPrefix)
		}

		flagStatisticsCloudLatencyRawWriteValue, err := cmd.Flags().GetInt64(flagStatisticsCloudLatencyRawWriteName)
		if err != nil {
			return err, false
		}
		m.StatisticsCloudLatencyRawWrite = &flagStatisticsCloudLatencyRawWriteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCloudStatusFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cloud.status") {

		var flagStatisticsCloudStatusName string
		if cmdPrefix == "" {
			flagStatisticsCloudStatusName = "statistics.cloud.status"
		} else {
			flagStatisticsCloudStatusName = fmt.Sprintf("%v.statistics.cloud.status", cmdPrefix)
		}

		flagStatisticsCloudStatusValue, err := cmd.Flags().GetString(flagStatisticsCloudStatusName)
		if err != nil {
			return err, false
		}
		m.StatisticsCloudStatus = &flagStatisticsCloudStatusValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsCloudTimestampFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.cloud.timestamp") {

		var flagStatisticsCloudTimestampName string
		if cmdPrefix == "" {
			flagStatisticsCloudTimestampName = "statistics.cloud.timestamp"
		} else {
			flagStatisticsCloudTimestampName = fmt.Sprintf("%v.statistics.cloud.timestamp", cmdPrefix)
		}

		flagStatisticsCloudTimestampValue, err := cmd.Flags().GetString(flagStatisticsCloudTimestampName)
		if err != nil {
			return err, false
		}
		m.StatisticsCloudTimestamp = &flagStatisticsCloudTimestampValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsFlexcacheRawCacheMissBlocksFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.flexcache_raw.cache_miss_blocks") {

		var flagStatisticsFlexcacheRawCacheMissBlocksName string
		if cmdPrefix == "" {
			flagStatisticsFlexcacheRawCacheMissBlocksName = "statistics.flexcache_raw.cache_miss_blocks"
		} else {
			flagStatisticsFlexcacheRawCacheMissBlocksName = fmt.Sprintf("%v.statistics.flexcache_raw.cache_miss_blocks", cmdPrefix)
		}

		flagStatisticsFlexcacheRawCacheMissBlocksValue, err := cmd.Flags().GetInt64(flagStatisticsFlexcacheRawCacheMissBlocksName)
		if err != nil {
			return err, false
		}
		m.StatisticsFlexcacheRawCacheMissBlocks = &flagStatisticsFlexcacheRawCacheMissBlocksValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsFlexcacheRawClientRequestedBlocksFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.flexcache_raw.client_requested_blocks") {

		var flagStatisticsFlexcacheRawClientRequestedBlocksName string
		if cmdPrefix == "" {
			flagStatisticsFlexcacheRawClientRequestedBlocksName = "statistics.flexcache_raw.client_requested_blocks"
		} else {
			flagStatisticsFlexcacheRawClientRequestedBlocksName = fmt.Sprintf("%v.statistics.flexcache_raw.client_requested_blocks", cmdPrefix)
		}

		flagStatisticsFlexcacheRawClientRequestedBlocksValue, err := cmd.Flags().GetInt64(flagStatisticsFlexcacheRawClientRequestedBlocksName)
		if err != nil {
			return err, false
		}
		m.StatisticsFlexcacheRawClientRequestedBlocks = &flagStatisticsFlexcacheRawClientRequestedBlocksValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsFlexcacheRawStatusFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.flexcache_raw.status") {

		var flagStatisticsFlexcacheRawStatusName string
		if cmdPrefix == "" {
			flagStatisticsFlexcacheRawStatusName = "statistics.flexcache_raw.status"
		} else {
			flagStatisticsFlexcacheRawStatusName = fmt.Sprintf("%v.statistics.flexcache_raw.status", cmdPrefix)
		}

		flagStatisticsFlexcacheRawStatusValue, err := cmd.Flags().GetString(flagStatisticsFlexcacheRawStatusName)
		if err != nil {
			return err, false
		}
		m.StatisticsFlexcacheRawStatus = &flagStatisticsFlexcacheRawStatusValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsFlexcacheRawTimestampFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.flexcache_raw.timestamp") {

		var flagStatisticsFlexcacheRawTimestampName string
		if cmdPrefix == "" {
			flagStatisticsFlexcacheRawTimestampName = "statistics.flexcache_raw.timestamp"
		} else {
			flagStatisticsFlexcacheRawTimestampName = fmt.Sprintf("%v.statistics.flexcache_raw.timestamp", cmdPrefix)
		}

		flagStatisticsFlexcacheRawTimestampValue, err := cmd.Flags().GetString(flagStatisticsFlexcacheRawTimestampName)
		if err != nil {
			return err, false
		}
		m.StatisticsFlexcacheRawTimestamp = &flagStatisticsFlexcacheRawTimestampValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsIopsRawOtherFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.iops_raw.other") {

		var flagStatisticsIopsRawOtherName string
		if cmdPrefix == "" {
			flagStatisticsIopsRawOtherName = "statistics.iops_raw.other"
		} else {
			flagStatisticsIopsRawOtherName = fmt.Sprintf("%v.statistics.iops_raw.other", cmdPrefix)
		}

		flagStatisticsIopsRawOtherValue, err := cmd.Flags().GetInt64(flagStatisticsIopsRawOtherName)
		if err != nil {
			return err, false
		}
		m.StatisticsIopsRawOther = &flagStatisticsIopsRawOtherValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsIopsRawReadFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.iops_raw.read") {

		var flagStatisticsIopsRawReadName string
		if cmdPrefix == "" {
			flagStatisticsIopsRawReadName = "statistics.iops_raw.read"
		} else {
			flagStatisticsIopsRawReadName = fmt.Sprintf("%v.statistics.iops_raw.read", cmdPrefix)
		}

		flagStatisticsIopsRawReadValue, err := cmd.Flags().GetInt64(flagStatisticsIopsRawReadName)
		if err != nil {
			return err, false
		}
		m.StatisticsIopsRawRead = &flagStatisticsIopsRawReadValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsIopsRawTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.iops_raw.total") {

		var flagStatisticsIopsRawTotalName string
		if cmdPrefix == "" {
			flagStatisticsIopsRawTotalName = "statistics.iops_raw.total"
		} else {
			flagStatisticsIopsRawTotalName = fmt.Sprintf("%v.statistics.iops_raw.total", cmdPrefix)
		}

		flagStatisticsIopsRawTotalValue, err := cmd.Flags().GetInt64(flagStatisticsIopsRawTotalName)
		if err != nil {
			return err, false
		}
		m.StatisticsIopsRawTotal = &flagStatisticsIopsRawTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsIopsRawWriteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.iops_raw.write") {

		var flagStatisticsIopsRawWriteName string
		if cmdPrefix == "" {
			flagStatisticsIopsRawWriteName = "statistics.iops_raw.write"
		} else {
			flagStatisticsIopsRawWriteName = fmt.Sprintf("%v.statistics.iops_raw.write", cmdPrefix)
		}

		flagStatisticsIopsRawWriteValue, err := cmd.Flags().GetInt64(flagStatisticsIopsRawWriteName)
		if err != nil {
			return err, false
		}
		m.StatisticsIopsRawWrite = &flagStatisticsIopsRawWriteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsLatencyRawOtherFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.latency_raw.other") {

		var flagStatisticsLatencyRawOtherName string
		if cmdPrefix == "" {
			flagStatisticsLatencyRawOtherName = "statistics.latency_raw.other"
		} else {
			flagStatisticsLatencyRawOtherName = fmt.Sprintf("%v.statistics.latency_raw.other", cmdPrefix)
		}

		flagStatisticsLatencyRawOtherValue, err := cmd.Flags().GetInt64(flagStatisticsLatencyRawOtherName)
		if err != nil {
			return err, false
		}
		m.StatisticsLatencyRawOther = &flagStatisticsLatencyRawOtherValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsLatencyRawReadFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.latency_raw.read") {

		var flagStatisticsLatencyRawReadName string
		if cmdPrefix == "" {
			flagStatisticsLatencyRawReadName = "statistics.latency_raw.read"
		} else {
			flagStatisticsLatencyRawReadName = fmt.Sprintf("%v.statistics.latency_raw.read", cmdPrefix)
		}

		flagStatisticsLatencyRawReadValue, err := cmd.Flags().GetInt64(flagStatisticsLatencyRawReadName)
		if err != nil {
			return err, false
		}
		m.StatisticsLatencyRawRead = &flagStatisticsLatencyRawReadValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsLatencyRawTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.latency_raw.total") {

		var flagStatisticsLatencyRawTotalName string
		if cmdPrefix == "" {
			flagStatisticsLatencyRawTotalName = "statistics.latency_raw.total"
		} else {
			flagStatisticsLatencyRawTotalName = fmt.Sprintf("%v.statistics.latency_raw.total", cmdPrefix)
		}

		flagStatisticsLatencyRawTotalValue, err := cmd.Flags().GetInt64(flagStatisticsLatencyRawTotalName)
		if err != nil {
			return err, false
		}
		m.StatisticsLatencyRawTotal = &flagStatisticsLatencyRawTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsLatencyRawWriteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.latency_raw.write") {

		var flagStatisticsLatencyRawWriteName string
		if cmdPrefix == "" {
			flagStatisticsLatencyRawWriteName = "statistics.latency_raw.write"
		} else {
			flagStatisticsLatencyRawWriteName = fmt.Sprintf("%v.statistics.latency_raw.write", cmdPrefix)
		}

		flagStatisticsLatencyRawWriteValue, err := cmd.Flags().GetInt64(flagStatisticsLatencyRawWriteName)
		if err != nil {
			return err, false
		}
		m.StatisticsLatencyRawWrite = &flagStatisticsLatencyRawWriteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAccessCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.access.count") {

		var flagStatisticsNfsOpsRawAccessCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawAccessCountName = "statistics.nfs_ops_raw.access.count"
		} else {
			flagStatisticsNfsOpsRawAccessCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.access.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawAccessCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawAccessCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawAccessCount = &flagStatisticsNfsOpsRawAccessCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAccessTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.access.total_time") {

		var flagStatisticsNfsOpsRawAccessTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawAccessTotalTimeName = "statistics.nfs_ops_raw.access.total_time"
		} else {
			flagStatisticsNfsOpsRawAccessTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.access.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawAccessTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawAccessTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawAccessTotalTime = &flagStatisticsNfsOpsRawAccessTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAuditCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.audit.count") {

		var flagStatisticsNfsOpsRawAuditCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawAuditCountName = "statistics.nfs_ops_raw.audit.count"
		} else {
			flagStatisticsNfsOpsRawAuditCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.audit.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawAuditCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawAuditCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawAuditCount = &flagStatisticsNfsOpsRawAuditCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawAuditTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.audit.total_time") {

		var flagStatisticsNfsOpsRawAuditTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawAuditTotalTimeName = "statistics.nfs_ops_raw.audit.total_time"
		} else {
			flagStatisticsNfsOpsRawAuditTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.audit.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawAuditTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawAuditTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawAuditTotalTime = &flagStatisticsNfsOpsRawAuditTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateDirCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.create.dir.count") {

		var flagStatisticsNfsOpsRawCreateDirCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawCreateDirCountName = "statistics.nfs_ops_raw.create.dir.count"
		} else {
			flagStatisticsNfsOpsRawCreateDirCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.dir.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawCreateDirCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawCreateDirCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawCreateDirCount = &flagStatisticsNfsOpsRawCreateDirCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateDirTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.create.dir.total_time") {

		var flagStatisticsNfsOpsRawCreateDirTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawCreateDirTotalTimeName = "statistics.nfs_ops_raw.create.dir.total_time"
		} else {
			flagStatisticsNfsOpsRawCreateDirTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.dir.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawCreateDirTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawCreateDirTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawCreateDirTotalTime = &flagStatisticsNfsOpsRawCreateDirTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateFileCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.create.file.count") {

		var flagStatisticsNfsOpsRawCreateFileCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawCreateFileCountName = "statistics.nfs_ops_raw.create.file.count"
		} else {
			flagStatisticsNfsOpsRawCreateFileCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.file.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawCreateFileCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawCreateFileCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawCreateFileCount = &flagStatisticsNfsOpsRawCreateFileCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateFileTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.create.file.total_time") {

		var flagStatisticsNfsOpsRawCreateFileTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawCreateFileTotalTimeName = "statistics.nfs_ops_raw.create.file.total_time"
		} else {
			flagStatisticsNfsOpsRawCreateFileTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.file.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawCreateFileTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawCreateFileTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawCreateFileTotalTime = &flagStatisticsNfsOpsRawCreateFileTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateOtherCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.create.other.count") {

		var flagStatisticsNfsOpsRawCreateOtherCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawCreateOtherCountName = "statistics.nfs_ops_raw.create.other.count"
		} else {
			flagStatisticsNfsOpsRawCreateOtherCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.other.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawCreateOtherCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawCreateOtherCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawCreateOtherCount = &flagStatisticsNfsOpsRawCreateOtherCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateOtherTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.create.other.total_time") {

		var flagStatisticsNfsOpsRawCreateOtherTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawCreateOtherTotalTimeName = "statistics.nfs_ops_raw.create.other.total_time"
		} else {
			flagStatisticsNfsOpsRawCreateOtherTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.other.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawCreateOtherTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawCreateOtherTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawCreateOtherTotalTime = &flagStatisticsNfsOpsRawCreateOtherTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateSymlinkCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.create.symlink.count") {

		var flagStatisticsNfsOpsRawCreateSymlinkCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawCreateSymlinkCountName = "statistics.nfs_ops_raw.create.symlink.count"
		} else {
			flagStatisticsNfsOpsRawCreateSymlinkCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.symlink.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawCreateSymlinkCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawCreateSymlinkCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawCreateSymlinkCount = &flagStatisticsNfsOpsRawCreateSymlinkCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawCreateSymlinkTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.create.symlink.total_time") {

		var flagStatisticsNfsOpsRawCreateSymlinkTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawCreateSymlinkTotalTimeName = "statistics.nfs_ops_raw.create.symlink.total_time"
		} else {
			flagStatisticsNfsOpsRawCreateSymlinkTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.create.symlink.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawCreateSymlinkTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawCreateSymlinkTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawCreateSymlinkTotalTime = &flagStatisticsNfsOpsRawCreateSymlinkTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawGetattrCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.getattr.count") {

		var flagStatisticsNfsOpsRawGetattrCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawGetattrCountName = "statistics.nfs_ops_raw.getattr.count"
		} else {
			flagStatisticsNfsOpsRawGetattrCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.getattr.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawGetattrCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawGetattrCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawGetattrCount = &flagStatisticsNfsOpsRawGetattrCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawGetattrTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.getattr.total_time") {

		var flagStatisticsNfsOpsRawGetattrTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawGetattrTotalTimeName = "statistics.nfs_ops_raw.getattr.total_time"
		} else {
			flagStatisticsNfsOpsRawGetattrTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.getattr.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawGetattrTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawGetattrTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawGetattrTotalTime = &flagStatisticsNfsOpsRawGetattrTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLinkCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.link.count") {

		var flagStatisticsNfsOpsRawLinkCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawLinkCountName = "statistics.nfs_ops_raw.link.count"
		} else {
			flagStatisticsNfsOpsRawLinkCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.link.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawLinkCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawLinkCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawLinkCount = &flagStatisticsNfsOpsRawLinkCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLinkTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.link.total_time") {

		var flagStatisticsNfsOpsRawLinkTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawLinkTotalTimeName = "statistics.nfs_ops_raw.link.total_time"
		} else {
			flagStatisticsNfsOpsRawLinkTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.link.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawLinkTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawLinkTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawLinkTotalTime = &flagStatisticsNfsOpsRawLinkTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLockCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.lock.count") {

		var flagStatisticsNfsOpsRawLockCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawLockCountName = "statistics.nfs_ops_raw.lock.count"
		} else {
			flagStatisticsNfsOpsRawLockCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.lock.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawLockCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawLockCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawLockCount = &flagStatisticsNfsOpsRawLockCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLockTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.lock.total_time") {

		var flagStatisticsNfsOpsRawLockTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawLockTotalTimeName = "statistics.nfs_ops_raw.lock.total_time"
		} else {
			flagStatisticsNfsOpsRawLockTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.lock.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawLockTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawLockTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawLockTotalTime = &flagStatisticsNfsOpsRawLockTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLookupCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.lookup.count") {

		var flagStatisticsNfsOpsRawLookupCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawLookupCountName = "statistics.nfs_ops_raw.lookup.count"
		} else {
			flagStatisticsNfsOpsRawLookupCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.lookup.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawLookupCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawLookupCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawLookupCount = &flagStatisticsNfsOpsRawLookupCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawLookupTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.lookup.total_time") {

		var flagStatisticsNfsOpsRawLookupTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawLookupTotalTimeName = "statistics.nfs_ops_raw.lookup.total_time"
		} else {
			flagStatisticsNfsOpsRawLookupTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.lookup.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawLookupTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawLookupTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawLookupTotalTime = &flagStatisticsNfsOpsRawLookupTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawOpenCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.open.count") {

		var flagStatisticsNfsOpsRawOpenCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawOpenCountName = "statistics.nfs_ops_raw.open.count"
		} else {
			flagStatisticsNfsOpsRawOpenCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.open.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawOpenCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawOpenCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawOpenCount = &flagStatisticsNfsOpsRawOpenCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawOpenTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.open.total_time") {

		var flagStatisticsNfsOpsRawOpenTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawOpenTotalTimeName = "statistics.nfs_ops_raw.open.total_time"
		} else {
			flagStatisticsNfsOpsRawOpenTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.open.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawOpenTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawOpenTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawOpenTotalTime = &flagStatisticsNfsOpsRawOpenTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.read.count") {

		var flagStatisticsNfsOpsRawReadCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawReadCountName = "statistics.nfs_ops_raw.read.count"
		} else {
			flagStatisticsNfsOpsRawReadCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.read.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawReadCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawReadCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawReadCount = &flagStatisticsNfsOpsRawReadCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.read.total_time") {

		var flagStatisticsNfsOpsRawReadTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawReadTotalTimeName = "statistics.nfs_ops_raw.read.total_time"
		} else {
			flagStatisticsNfsOpsRawReadTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.read.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawReadTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawReadTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawReadTotalTime = &flagStatisticsNfsOpsRawReadTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.read.volume_protocol_latency_histogram_counts") {

		var flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsName = "statistics.nfs_ops_raw.read.volume_protocol_latency_histogram_counts"
		} else {
			flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.read.volume_protocol_latency_histogram_counts", cmdPrefix)
		}

		flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCounts = &flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramCountsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.read.volume_protocol_latency_histogram_labels") {

		var flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsName = "statistics.nfs_ops_raw.read.volume_protocol_latency_histogram_labels"
		} else {
			flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.read.volume_protocol_latency_histogram_labels", cmdPrefix)
		}

		flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsValue, err := cmd.Flags().GetString(flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabels = &flagStatisticsNfsOpsRawReadVolumeProtocolLatencyHistogramLabelsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.read.volume_protocol_size_histogram_counts") {

		var flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsName = "statistics.nfs_ops_raw.read.volume_protocol_size_histogram_counts"
		} else {
			flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.read.volume_protocol_size_histogram_counts", cmdPrefix)
		}

		flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCounts = &flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramCountsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.read.volume_protocol_size_histogram_labels") {

		var flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsName = "statistics.nfs_ops_raw.read.volume_protocol_size_histogram_labels"
		} else {
			flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.read.volume_protocol_size_histogram_labels", cmdPrefix)
		}

		flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsValue, err := cmd.Flags().GetString(flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabels = &flagStatisticsNfsOpsRawReadVolumeProtocolSizeHistogramLabelsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReaddirCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.readdir.count") {

		var flagStatisticsNfsOpsRawReaddirCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawReaddirCountName = "statistics.nfs_ops_raw.readdir.count"
		} else {
			flagStatisticsNfsOpsRawReaddirCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.readdir.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawReaddirCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawReaddirCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawReaddirCount = &flagStatisticsNfsOpsRawReaddirCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReaddirTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.readdir.total_time") {

		var flagStatisticsNfsOpsRawReaddirTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawReaddirTotalTimeName = "statistics.nfs_ops_raw.readdir.total_time"
		} else {
			flagStatisticsNfsOpsRawReaddirTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.readdir.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawReaddirTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawReaddirTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawReaddirTotalTime = &flagStatisticsNfsOpsRawReaddirTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadlinkCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.readlink.count") {

		var flagStatisticsNfsOpsRawReadlinkCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawReadlinkCountName = "statistics.nfs_ops_raw.readlink.count"
		} else {
			flagStatisticsNfsOpsRawReadlinkCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.readlink.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawReadlinkCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawReadlinkCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawReadlinkCount = &flagStatisticsNfsOpsRawReadlinkCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawReadlinkTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.readlink.total_time") {

		var flagStatisticsNfsOpsRawReadlinkTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawReadlinkTotalTimeName = "statistics.nfs_ops_raw.readlink.total_time"
		} else {
			flagStatisticsNfsOpsRawReadlinkTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.readlink.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawReadlinkTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawReadlinkTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawReadlinkTotalTime = &flagStatisticsNfsOpsRawReadlinkTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawRenameCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.rename.count") {

		var flagStatisticsNfsOpsRawRenameCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawRenameCountName = "statistics.nfs_ops_raw.rename.count"
		} else {
			flagStatisticsNfsOpsRawRenameCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.rename.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawRenameCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawRenameCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawRenameCount = &flagStatisticsNfsOpsRawRenameCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawRenameTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.rename.total_time") {

		var flagStatisticsNfsOpsRawRenameTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawRenameTotalTimeName = "statistics.nfs_ops_raw.rename.total_time"
		} else {
			flagStatisticsNfsOpsRawRenameTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.rename.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawRenameTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawRenameTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawRenameTotalTime = &flagStatisticsNfsOpsRawRenameTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawSetattrCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.setattr.count") {

		var flagStatisticsNfsOpsRawSetattrCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawSetattrCountName = "statistics.nfs_ops_raw.setattr.count"
		} else {
			flagStatisticsNfsOpsRawSetattrCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.setattr.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawSetattrCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawSetattrCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawSetattrCount = &flagStatisticsNfsOpsRawSetattrCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawSetattrTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.setattr.total_time") {

		var flagStatisticsNfsOpsRawSetattrTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawSetattrTotalTimeName = "statistics.nfs_ops_raw.setattr.total_time"
		} else {
			flagStatisticsNfsOpsRawSetattrTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.setattr.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawSetattrTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawSetattrTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawSetattrTotalTime = &flagStatisticsNfsOpsRawSetattrTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawUnlinkCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.unlink.count") {

		var flagStatisticsNfsOpsRawUnlinkCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawUnlinkCountName = "statistics.nfs_ops_raw.unlink.count"
		} else {
			flagStatisticsNfsOpsRawUnlinkCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.unlink.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawUnlinkCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawUnlinkCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawUnlinkCount = &flagStatisticsNfsOpsRawUnlinkCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawUnlinkTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.unlink.total_time") {

		var flagStatisticsNfsOpsRawUnlinkTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawUnlinkTotalTimeName = "statistics.nfs_ops_raw.unlink.total_time"
		} else {
			flagStatisticsNfsOpsRawUnlinkTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.unlink.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawUnlinkTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawUnlinkTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawUnlinkTotalTime = &flagStatisticsNfsOpsRawUnlinkTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWatchCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.watch.count") {

		var flagStatisticsNfsOpsRawWatchCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawWatchCountName = "statistics.nfs_ops_raw.watch.count"
		} else {
			flagStatisticsNfsOpsRawWatchCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.watch.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawWatchCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawWatchCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawWatchCount = &flagStatisticsNfsOpsRawWatchCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWatchTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.watch.total_time") {

		var flagStatisticsNfsOpsRawWatchTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawWatchTotalTimeName = "statistics.nfs_ops_raw.watch.total_time"
		} else {
			flagStatisticsNfsOpsRawWatchTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.watch.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawWatchTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawWatchTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawWatchTotalTime = &flagStatisticsNfsOpsRawWatchTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteCountFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.write.count") {

		var flagStatisticsNfsOpsRawWriteCountName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawWriteCountName = "statistics.nfs_ops_raw.write.count"
		} else {
			flagStatisticsNfsOpsRawWriteCountName = fmt.Sprintf("%v.statistics.nfs_ops_raw.write.count", cmdPrefix)
		}

		flagStatisticsNfsOpsRawWriteCountValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawWriteCountName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawWriteCount = &flagStatisticsNfsOpsRawWriteCountValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteTotalTimeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.write.total_time") {

		var flagStatisticsNfsOpsRawWriteTotalTimeName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawWriteTotalTimeName = "statistics.nfs_ops_raw.write.total_time"
		} else {
			flagStatisticsNfsOpsRawWriteTotalTimeName = fmt.Sprintf("%v.statistics.nfs_ops_raw.write.total_time", cmdPrefix)
		}

		flagStatisticsNfsOpsRawWriteTotalTimeValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawWriteTotalTimeName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawWriteTotalTime = &flagStatisticsNfsOpsRawWriteTotalTimeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.write.volume_protocol_latency_histogram_counts") {

		var flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsName = "statistics.nfs_ops_raw.write.volume_protocol_latency_histogram_counts"
		} else {
			flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.write.volume_protocol_latency_histogram_counts", cmdPrefix)
		}

		flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCounts = &flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramCountsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.write.volume_protocol_latency_histogram_labels") {

		var flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName = "statistics.nfs_ops_raw.write.volume_protocol_latency_histogram_labels"
		} else {
			flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.write.volume_protocol_latency_histogram_labels", cmdPrefix)
		}

		flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsValue, err := cmd.Flags().GetString(flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabels = &flagStatisticsNfsOpsRawWriteVolumeProtocolLatencyHistogramLabelsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.write.volume_protocol_size_histogram_counts") {

		var flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsName = "statistics.nfs_ops_raw.write.volume_protocol_size_histogram_counts"
		} else {
			flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.write.volume_protocol_size_histogram_counts", cmdPrefix)
		}

		flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsValue, err := cmd.Flags().GetInt64(flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCounts = &flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramCountsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.nfs_ops_raw.write.volume_protocol_size_histogram_labels") {

		var flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsName string
		if cmdPrefix == "" {
			flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsName = "statistics.nfs_ops_raw.write.volume_protocol_size_histogram_labels"
		} else {
			flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsName = fmt.Sprintf("%v.statistics.nfs_ops_raw.write.volume_protocol_size_histogram_labels", cmdPrefix)
		}

		flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsValue, err := cmd.Flags().GetString(flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsName)
		if err != nil {
			return err, false
		}
		m.StatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabels = &flagStatisticsNfsOpsRawWriteVolumeProtocolSizeHistogramLabelsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsStatusFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.status") {

		var flagStatisticsStatusName string
		if cmdPrefix == "" {
			flagStatisticsStatusName = "statistics.status"
		} else {
			flagStatisticsStatusName = fmt.Sprintf("%v.statistics.status", cmdPrefix)
		}

		flagStatisticsStatusValue, err := cmd.Flags().GetString(flagStatisticsStatusName)
		if err != nil {
			return err, false
		}
		m.StatisticsStatus = &flagStatisticsStatusValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsThroughputRawOtherFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.throughput_raw.other") {

		var flagStatisticsThroughputRawOtherName string
		if cmdPrefix == "" {
			flagStatisticsThroughputRawOtherName = "statistics.throughput_raw.other"
		} else {
			flagStatisticsThroughputRawOtherName = fmt.Sprintf("%v.statistics.throughput_raw.other", cmdPrefix)
		}

		flagStatisticsThroughputRawOtherValue, err := cmd.Flags().GetInt64(flagStatisticsThroughputRawOtherName)
		if err != nil {
			return err, false
		}
		m.StatisticsThroughputRawOther = &flagStatisticsThroughputRawOtherValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsThroughputRawReadFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.throughput_raw.read") {

		var flagStatisticsThroughputRawReadName string
		if cmdPrefix == "" {
			flagStatisticsThroughputRawReadName = "statistics.throughput_raw.read"
		} else {
			flagStatisticsThroughputRawReadName = fmt.Sprintf("%v.statistics.throughput_raw.read", cmdPrefix)
		}

		flagStatisticsThroughputRawReadValue, err := cmd.Flags().GetInt64(flagStatisticsThroughputRawReadName)
		if err != nil {
			return err, false
		}
		m.StatisticsThroughputRawRead = &flagStatisticsThroughputRawReadValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsThroughputRawTotalFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.throughput_raw.total") {

		var flagStatisticsThroughputRawTotalName string
		if cmdPrefix == "" {
			flagStatisticsThroughputRawTotalName = "statistics.throughput_raw.total"
		} else {
			flagStatisticsThroughputRawTotalName = fmt.Sprintf("%v.statistics.throughput_raw.total", cmdPrefix)
		}

		flagStatisticsThroughputRawTotalValue, err := cmd.Flags().GetInt64(flagStatisticsThroughputRawTotalName)
		if err != nil {
			return err, false
		}
		m.StatisticsThroughputRawTotal = &flagStatisticsThroughputRawTotalValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsThroughputRawWriteFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.throughput_raw.write") {

		var flagStatisticsThroughputRawWriteName string
		if cmdPrefix == "" {
			flagStatisticsThroughputRawWriteName = "statistics.throughput_raw.write"
		} else {
			flagStatisticsThroughputRawWriteName = fmt.Sprintf("%v.statistics.throughput_raw.write", cmdPrefix)
		}

		flagStatisticsThroughputRawWriteValue, err := cmd.Flags().GetInt64(flagStatisticsThroughputRawWriteName)
		if err != nil {
			return err, false
		}
		m.StatisticsThroughputRawWrite = &flagStatisticsThroughputRawWriteValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatisticsTimestampFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("statistics.timestamp") {

		var flagStatisticsTimestampName string
		if cmdPrefix == "" {
			flagStatisticsTimestampName = "statistics.timestamp"
		} else {
			flagStatisticsTimestampName = fmt.Sprintf("%v.statistics.timestamp", cmdPrefix)
		}

		flagStatisticsTimestampValue, err := cmd.Flags().GetString(flagStatisticsTimestampName)
		if err != nil {
			return err, false
		}
		m.StatisticsTimestamp = &flagStatisticsTimestampValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStatusFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("status") {

		var flagStatusName string
		if cmdPrefix == "" {
			flagStatusName = "status"
		} else {
			flagStatusName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		flagStatusValue, err := cmd.Flags().GetString(flagStatusName)
		if err != nil {
			return err, false
		}
		m.Status = &flagStatusValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetStyleFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("style") {

		var flagStyleName string
		if cmdPrefix == "" {
			flagStyleName = "style"
		} else {
			flagStyleName = fmt.Sprintf("%v.style", cmdPrefix)
		}

		flagStyleValue, err := cmd.Flags().GetString(flagStyleName)
		if err != nil {
			return err, false
		}
		m.Style = &flagStyleValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSvmNameFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("svm.name") {

		var flagSvmNameName string
		if cmdPrefix == "" {
			flagSvmNameName = "svm.name"
		} else {
			flagSvmNameName = fmt.Sprintf("%v.svm.name", cmdPrefix)
		}

		flagSvmNameValue, err := cmd.Flags().GetString(flagSvmNameName)
		if err != nil {
			return err, false
		}
		m.SvmName = &flagSvmNameValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetSvmUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("svm.uuid") {

		var flagSvmUUIDName string
		if cmdPrefix == "" {
			flagSvmUUIDName = "svm.uuid"
		} else {
			flagSvmUUIDName = fmt.Sprintf("%v.svm.uuid", cmdPrefix)
		}

		flagSvmUUIDValue, err := cmd.Flags().GetString(flagSvmUUIDName)
		if err != nil {
			return err, false
		}
		m.SvmUUID = &flagSvmUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetTieringMinCoolingDaysFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tiering.min_cooling_days") {

		var flagTieringMinCoolingDaysName string
		if cmdPrefix == "" {
			flagTieringMinCoolingDaysName = "tiering.min_cooling_days"
		} else {
			flagTieringMinCoolingDaysName = fmt.Sprintf("%v.tiering.min_cooling_days", cmdPrefix)
		}

		flagTieringMinCoolingDaysValue, err := cmd.Flags().GetInt64(flagTieringMinCoolingDaysName)
		if err != nil {
			return err, false
		}
		m.TieringMinCoolingDays = &flagTieringMinCoolingDaysValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetTieringObjectTagsFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tiering.object_tags") {

		var flagTieringObjectTagsName string
		if cmdPrefix == "" {
			flagTieringObjectTagsName = "tiering.object_tags"
		} else {
			flagTieringObjectTagsName = fmt.Sprintf("%v.tiering.object_tags", cmdPrefix)
		}

		flagTieringObjectTagsValue, err := cmd.Flags().GetString(flagTieringObjectTagsName)
		if err != nil {
			return err, false
		}
		m.TieringObjectTags = &flagTieringObjectTagsValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetTieringPolicyFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tiering.policy") {

		var flagTieringPolicyName string
		if cmdPrefix == "" {
			flagTieringPolicyName = "tiering.policy"
		} else {
			flagTieringPolicyName = fmt.Sprintf("%v.tiering.policy", cmdPrefix)
		}

		flagTieringPolicyValue, err := cmd.Flags().GetString(flagTieringPolicyName)
		if err != nil {
			return err, false
		}
		m.TieringPolicy = &flagTieringPolicyValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetTypeFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = &flagTypeValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetUUIDFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("uuid") {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

	}

	return nil, retAdded
}

func retrieveOperationStorageVolumeCollectionGetValidateOnlyFlag(m *storage.VolumeCollectionGetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("validate_only") {

		var flagValidateOnlyName string
		if cmdPrefix == "" {
			flagValidateOnlyName = "validate_only"
		} else {
			flagValidateOnlyName = fmt.Sprintf("%v.validate_only", cmdPrefix)
		}

		flagValidateOnlyValue, err := cmd.Flags().GetBool(flagValidateOnlyName)
		if err != nil {
			return err, false
		}
		m.ValidateOnly = &flagValidateOnlyValue

	}

	return nil, retAdded
}

// parseOperationStorageVolumeCollectionGetResult parses request result and return the string content
func parseOperationStorageVolumeCollectionGetResult(resp0 *storage.VolumeCollectionGetOK, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*storage.VolumeCollectionGetDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*storage.VolumeCollectionGetOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
