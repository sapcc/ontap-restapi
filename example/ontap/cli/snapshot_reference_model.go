// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/sapcc/ontap-restapi/example/ontap/models"
	"github.com/spf13/cobra"
)

// Schema cli for SnapshotReference

// register flags to command
func registerModelSnapshotReferenceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSnapshotReferencePropLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSnapshotReferencePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSnapshotReferencePropUUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSnapshotReferencePropLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLinksName string
	if cmdPrefix == "" {
		flagLinksName = "_links"
	} else {
		flagLinksName = fmt.Sprintf("%v._links", cmdPrefix)
	}

	if err := registerModelSnapshotReferenceInlineLinksFlags(depth+1, flagLinksName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSnapshotReferencePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerSnapshotReferencePropUUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUUIDDescription := ``

	var flagUUIDName string
	if cmdPrefix == "" {
		flagUUIDName = "uuid"
	} else {
		flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
	}

	var flagUUIDDefault string

	_ = cmd.PersistentFlags().String(flagUUIDName, flagUUIDDefault, flagUUIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSnapshotReferenceFlags(depth int, m *models.SnapshotReference, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LinksAdded := retrieveSnapshotReferencePropLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, NameAdded := retrieveSnapshotReferencePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UUIDAdded := retrieveSnapshotReferencePropUUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UUIDAdded

	return nil, retAdded
}

func retrieveSnapshotReferencePropLinksFlags(depth int, m *models.SnapshotReference, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLinksName := fmt.Sprintf("%v._links", cmdPrefix)
	if cmd.Flags().Changed(flagLinksName) {
		// info: complex object _links SnapshotReferenceInlineLinks is retrieved outside this Changed() block
	}
	flagLinksValue := m.Links
	if swag.IsZero(flagLinksValue) {
		flagLinksValue = &models.SnapshotReferenceInlineLinks{}
	}

	err, LinksAdded := retrieveModelSnapshotReferenceInlineLinksFlags(depth+1, flagLinksValue, flagLinksName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded
	if LinksAdded {
		m.Links = flagLinksValue
	}

	return nil, retAdded
}

func retrieveSnapshotReferencePropNameFlags(depth int, m *models.SnapshotReference, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = &flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSnapshotReferencePropUUIDFlags(depth int, m *models.SnapshotReference, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUUIDName := fmt.Sprintf("%v.uuid", cmdPrefix)
	if cmd.Flags().Changed(flagUUIDName) {

		var flagUUIDName string
		if cmdPrefix == "" {
			flagUUIDName = "uuid"
		} else {
			flagUUIDName = fmt.Sprintf("%v.uuid", cmdPrefix)
		}

		flagUUIDValue, err := cmd.Flags().GetString(flagUUIDName)
		if err != nil {
			return err, false
		}
		m.UUID = &flagUUIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SnapshotReferenceInlineLinks

// register flags to command
func registerModelSnapshotReferenceInlineLinksFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSnapshotReferenceInlineLinksPropSelf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSnapshotReferenceInlineLinksPropSelf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSelfName string
	if cmdPrefix == "" {
		flagSelfName = "self"
	} else {
		flagSelfName = fmt.Sprintf("%v.self", cmdPrefix)
	}

	if err := registerModelHrefFlags(depth+1, flagSelfName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSnapshotReferenceInlineLinksFlags(depth int, m *models.SnapshotReferenceInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SelfAdded := retrieveSnapshotReferenceInlineLinksPropSelfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded

	return nil, retAdded
}

func retrieveSnapshotReferenceInlineLinksPropSelfFlags(depth int, m *models.SnapshotReferenceInlineLinks, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSelfName := fmt.Sprintf("%v.self", cmdPrefix)
	if cmd.Flags().Changed(flagSelfName) {
		// info: complex object self Href is retrieved outside this Changed() block
	}
	flagSelfValue := m.Self
	if swag.IsZero(flagSelfValue) {
		flagSelfValue = &models.Href{}
	}

	err, SelfAdded := retrieveModelHrefFlags(depth+1, flagSelfValue, flagSelfName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SelfAdded
	if SelfAdded {
		m.Self = flagSelfValue
	}

	return nil, retAdded
}
