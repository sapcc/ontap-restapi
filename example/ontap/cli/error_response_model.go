// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/sapcc/ontap-restapi/example/ontap/models"
	"github.com/spf13/cobra"
)

// Schema cli for ErrorResponse

// register flags to command
func registerModelErrorResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerErrorResponsePropError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerErrorResponsePropError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagErrorName string
	if cmdPrefix == "" {
		flagErrorName = "error"
	} else {
		flagErrorName = fmt.Sprintf("%v.error", cmdPrefix)
	}

	if err := registerModelReturnedErrorFlags(depth+1, flagErrorName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelErrorResponseFlags(depth int, m *models.ErrorResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ErrorAdded := retrieveErrorResponsePropErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorAdded

	return nil, retAdded
}

func retrieveErrorResponsePropErrorFlags(depth int, m *models.ErrorResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagErrorName := fmt.Sprintf("%v.error", cmdPrefix)
	if cmd.Flags().Changed(flagErrorName) {
		// info: complex object error ReturnedError is retrieved outside this Changed() block
	}
	flagErrorValue := m.Error
	if swag.IsZero(flagErrorValue) {
		flagErrorValue = &models.ReturnedError{}
	}

	err, ErrorAdded := retrieveModelReturnedErrorFlags(depth+1, flagErrorValue, flagErrorName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorAdded
	if ErrorAdded {
		m.Error = flagErrorValue
	}

	return nil, retAdded
}
