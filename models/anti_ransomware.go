// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AntiRansomware anti ransomware
//
// swagger:model anti_ransomware
type AntiRansomware struct {

	// anti ransomware inline nodes
	// Read Only: true
	AntiRansomwareInlineNodes []*AntiRansomwareNode `json:"nodes,omitempty"`

	// URI of the anti-ransomware package through a server
	// Example: http://server/package
	URI *string `json:"uri,omitempty"`
}

// Validate validates this anti ransomware
func (m *AntiRansomware) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAntiRansomwareInlineNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntiRansomware) validateAntiRansomwareInlineNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.AntiRansomwareInlineNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.AntiRansomwareInlineNodes); i++ {
		if swag.IsZero(m.AntiRansomwareInlineNodes[i]) { // not required
			continue
		}

		if m.AntiRansomwareInlineNodes[i] != nil {
			if err := m.AntiRansomwareInlineNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this anti ransomware based on the context it is used
func (m *AntiRansomware) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAntiRansomwareInlineNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntiRansomware) contextValidateAntiRansomwareInlineNodes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "nodes", "body", []*AntiRansomwareNode(m.AntiRansomwareInlineNodes)); err != nil {
		return err
	}

	for i := 0; i < len(m.AntiRansomwareInlineNodes); i++ {

		if m.AntiRansomwareInlineNodes[i] != nil {

			if swag.IsZero(m.AntiRansomwareInlineNodes[i]) { // not required
				return nil
			}

			if err := m.AntiRansomwareInlineNodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AntiRansomware) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AntiRansomware) UnmarshalBinary(b []byte) error {
	var res AntiRansomware
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
