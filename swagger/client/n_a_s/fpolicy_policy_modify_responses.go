// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sapcc/ontap-restapi-client/swagger/models"
)

// FpolicyPolicyModifyReader is a Reader for the FpolicyPolicyModify structure.
type FpolicyPolicyModifyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FpolicyPolicyModifyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFpolicyPolicyModifyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewFpolicyPolicyModifyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFpolicyPolicyModifyOK creates a FpolicyPolicyModifyOK with default headers values
func NewFpolicyPolicyModifyOK() *FpolicyPolicyModifyOK {
	return &FpolicyPolicyModifyOK{}
}

/*
FpolicyPolicyModifyOK describes a response with status code 200, with default header values.

OK
*/
type FpolicyPolicyModifyOK struct {
}

// IsSuccess returns true when this fpolicy policy modify o k response has a 2xx status code
func (o *FpolicyPolicyModifyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this fpolicy policy modify o k response has a 3xx status code
func (o *FpolicyPolicyModifyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fpolicy policy modify o k response has a 4xx status code
func (o *FpolicyPolicyModifyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this fpolicy policy modify o k response has a 5xx status code
func (o *FpolicyPolicyModifyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this fpolicy policy modify o k response a status code equal to that given
func (o *FpolicyPolicyModifyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the fpolicy policy modify o k response
func (o *FpolicyPolicyModifyOK) Code() int {
	return 200
}

func (o *FpolicyPolicyModifyOK) Error() string {
	return fmt.Sprintf("[PATCH /protocols/fpolicy/{svm.uuid}/policies/{name}][%d] fpolicyPolicyModifyOK", 200)
}

func (o *FpolicyPolicyModifyOK) String() string {
	return fmt.Sprintf("[PATCH /protocols/fpolicy/{svm.uuid}/policies/{name}][%d] fpolicyPolicyModifyOK", 200)
}

func (o *FpolicyPolicyModifyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFpolicyPolicyModifyDefault creates a FpolicyPolicyModifyDefault with default headers values
func NewFpolicyPolicyModifyDefault(code int) *FpolicyPolicyModifyDefault {
	return &FpolicyPolicyModifyDefault{
		_statusCode: code,
	}
}

/*
	FpolicyPolicyModifyDefault describes a response with status code -1, with default header values.

	ONTAP Error Response Codes

| Error Code | Description |
| ---------- | ----------- |
| 9764875    | An FPolicy event does not exist |
| 9764888    | An FPolicy engine does not exist |
| 9765026    | The priority must be specified when enabling the FPolicy policy |
| 9765025    | Cannot disable an FPolicy policy when the priority is specified |
| 9764899    | Cannot modify an enabled FPolicy policy |
| 9764899    | Deletion of a cluster policy is not supported |
| 9764907    | An FPolicy policy is already enabled |
| 9764908    | An FPolicy policy is already disabled |
| 9765029    | An FPolicy was modified but disable/enable failed as the policy is already disabled/enabled |
| 9765036    | Cannot modify an FPolicy policy as passthrough-read policies are not supported without privileged user |
| 9765038    | Passthrough-read policies are not supported with an external engine of type "asynchronous" |
| 9765039    | Passthrough-read policies are not supported with native engine |
| 9765056    | The specified Persistent Store does not exist |
| 9765062    | Policy with Persistent Store does not support mandatory screening |
| 9765065    | A valid privileged user name must be in the form "domain-name\\user-name" |
| 9765066    | The privileged user contains characters that are not allowed |
*/
type FpolicyPolicyModifyDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// IsSuccess returns true when this fpolicy policy modify default response has a 2xx status code
func (o *FpolicyPolicyModifyDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this fpolicy policy modify default response has a 3xx status code
func (o *FpolicyPolicyModifyDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this fpolicy policy modify default response has a 4xx status code
func (o *FpolicyPolicyModifyDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this fpolicy policy modify default response has a 5xx status code
func (o *FpolicyPolicyModifyDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this fpolicy policy modify default response a status code equal to that given
func (o *FpolicyPolicyModifyDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the fpolicy policy modify default response
func (o *FpolicyPolicyModifyDefault) Code() int {
	return o._statusCode
}

func (o *FpolicyPolicyModifyDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /protocols/fpolicy/{svm.uuid}/policies/{name}][%d] fpolicy_policy_modify default %s", o._statusCode, payload)
}

func (o *FpolicyPolicyModifyDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /protocols/fpolicy/{svm.uuid}/policies/{name}][%d] fpolicy_policy_modify default %s", o._statusCode, payload)
}

func (o *FpolicyPolicyModifyDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *FpolicyPolicyModifyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
